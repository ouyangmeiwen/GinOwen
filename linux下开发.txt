
#环境安装
sudo snap install go --channel=1.23/stable --classic

export GOPROXY=https://goproxy.cn,direct

go env -w GOPROXY=https://goproxy.cn,direct

#echo 'export GOPROXY=https://goproxy.cn,direct' >> ~/.bashrc

export GOBIN=$HOME/go/bin
export PATH=$PATH:$GOBIN

source ~/.bashrc

go install golang.org/x/tools/gopls@latest

export PATH=$PATH:/home/owen/go/bin





go mod tidy

sudo apt purge golang-go   #完全卸载
sudo snap refresh go --channel=1.23/stable --classic


source ~/.bashrc  # 或者 source ~/.zshrc





df -h
如果删除不必要的文件后仍然空间不足，您可以考虑扩展根分区。您可以使用 lvextend 命令扩展 LVM 分区的大小：
sudo lvextend -L +5G /dev/mapper/ubuntu--vg-ubuntu--lv
sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv



debug:调试
    rm -f ./GinOwen
    go build -gcflags="all=-N -l" -buildvcs=false -o GinOwen

gdb:
    gdbserver :1234 ./GinOwen
    #打开main.go F5即可




release:发布
GOOS=linux GOARCH=amd64 go build -buildvcs=false -o GinOwen
GOOS=linux GOARCH=amd64 go build -buildvcs=false  -o GinOwen
GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -buildvcs=false -o GinOwen    #独立运行
GOOS=windows GOARCH=amd64 go build -buildvcs=false -o GinOwen.exe
GOOS=darwin GOARCH=amd64 go build -buildvcs=false -o GinOwen

#后台发布
nohup ./GinOwen > ginowen.log 2>&1 &


参考
部署 systemd  
ctrl+x

sudo nano /etc/systemd/system/GinOwen.service


[Unit]
Description=GinOwen Server
After=network.target

[Service]
ExecStart=/home/owen/GinOwen/GinOwen
Restart=always
RestartSec=5s
User=owen
Group=owen
WorkingDirectory=/home/owen/GinOwen
StandardOutput=file:/home/owen/GinOwen/logs/output.log
StandardError=file:/home/owen/GinOwen/logs/error.log

[Install]
WantedBy=multi-user.target



chmod +x /home/owen/GinOwen/GinOwen

sudo systemctl daemon-reload

sudo systemctl start GinOwen.service

sudo systemctl enable GinOwen.service

sudo systemctl status GinOwen.service

sudo systemctl stop GinOwen.service

sudo systemctl disable GinOwen.service

sudo rm /etc/systemd/system/GinOwen.service
sudo systemctl daemon-reload





docker 部署





#删除docker
docker rm -f $(docker ps -aq)
docker rmi -f $(docker images -q)

docker build -t ginowen:latest . -f Dockerfile

#直接通过运行包需要特殊打法
GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -buildvcs=false -o GinOwenRelease    


#windows
GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -buildvcs=false -o GinOwenRelease.exe


docker build -t ginowen:latest . -f DockerfileRelease
docker run -d -p 9003:9003 --restart=always --name ginowen  ginowen:latest
docker run -d -p 9003:9003  --name ginowen  ginowen:latest


#test
docker build -t ginowentest:latest . -f DockerfileRelease
docker run -d -p 9003:9003 --restart=always --name ginowentest  ginowentest:latest




http://192.168.229.130:9003/swagger-ui/index.html


docker save -o ./golang:1.23.1_owen.tar imageid
docker save -o ./alpine:latest_owen.tar imageid

upload
docker load < golang:1.23.1_owen.tar
docker tag imageid golang:1.23.1_owen #可以重命名
命名完然后就可以直接使用Dockfile

docker load < alpine:latest_owen.tar
docker tag imageid alpine:latest_owen #可以重命名

# 使用 Python 官方基础镜像
FROM golang:1.23.1_owen as builder
...

FROM alpine:latest_owen



curl -X 'POST' \
  'http://192.168.229.130:9003/auth/Login' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "password": "123456",
  "username": "admin"
}'


Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlX2lkIjoxLCJ0ZW5hbnRfaWQiOjUzMjUsImV4cCI6MTc1MTA3MTY2MH0.vXpXqOpVnr4AYj1Mv3TcA6KeUourCoN_UQ1Fv0dW80A
