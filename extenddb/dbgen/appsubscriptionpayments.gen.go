// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppsubscriptionpayment(db *gorm.DB) appsubscriptionpayment {
	_appsubscriptionpayment := appsubscriptionpayment{}

	_appsubscriptionpayment.appsubscriptionpaymentDo.UseDB(db)
	_appsubscriptionpayment.appsubscriptionpaymentDo.UseModel(&model.Appsubscriptionpayment{})

	tableName := _appsubscriptionpayment.appsubscriptionpaymentDo.TableName()
	_appsubscriptionpayment.ALL = field.NewAsterisk(tableName)
	_appsubscriptionpayment.ID = field.NewInt64(tableName, "Id")
	_appsubscriptionpayment.CreationTime = field.NewTime(tableName, "CreationTime")
	_appsubscriptionpayment.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appsubscriptionpayment.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appsubscriptionpayment.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appsubscriptionpayment.IsDeleted = field.NewField(tableName, "IsDeleted")
	_appsubscriptionpayment.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_appsubscriptionpayment.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_appsubscriptionpayment.Description = field.NewString(tableName, "Description")
	_appsubscriptionpayment.Gateway = field.NewInt64(tableName, "Gateway")
	_appsubscriptionpayment.Amount = field.NewFloat64(tableName, "Amount")
	_appsubscriptionpayment.Status = field.NewInt64(tableName, "Status")
	_appsubscriptionpayment.EditionID = field.NewInt64(tableName, "EditionId")
	_appsubscriptionpayment.TenantID = field.NewInt64(tableName, "TenantId")
	_appsubscriptionpayment.DayCount = field.NewInt64(tableName, "DayCount")
	_appsubscriptionpayment.PaymentPeriodType = field.NewInt64(tableName, "PaymentPeriodType")
	_appsubscriptionpayment.ExternalPaymentID = field.NewString(tableName, "ExternalPaymentId")
	_appsubscriptionpayment.InvoiceNo = field.NewString(tableName, "InvoiceNo")
	_appsubscriptionpayment.IsRecurring = field.NewField(tableName, "IsRecurring")
	_appsubscriptionpayment.SuccessURL = field.NewString(tableName, "SuccessUrl")
	_appsubscriptionpayment.ErrorURL = field.NewString(tableName, "ErrorUrl")

	_appsubscriptionpayment.fillFieldMap()

	return _appsubscriptionpayment
}

type appsubscriptionpayment struct {
	appsubscriptionpaymentDo appsubscriptionpaymentDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Description          field.String
	Gateway              field.Int64
	Amount               field.Float64
	Status               field.Int64
	EditionID            field.Int64
	TenantID             field.Int64
	DayCount             field.Int64
	PaymentPeriodType    field.Int64
	ExternalPaymentID    field.String
	InvoiceNo            field.String
	IsRecurring          field.Field
	SuccessURL           field.String
	ErrorURL             field.String

	fieldMap map[string]field.Expr
}

func (a appsubscriptionpayment) Table(newTableName string) *appsubscriptionpayment {
	a.appsubscriptionpaymentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appsubscriptionpayment) As(alias string) *appsubscriptionpayment {
	a.appsubscriptionpaymentDo.DO = *(a.appsubscriptionpaymentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appsubscriptionpayment) updateTableName(table string) *appsubscriptionpayment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.Description = field.NewString(table, "Description")
	a.Gateway = field.NewInt64(table, "Gateway")
	a.Amount = field.NewFloat64(table, "Amount")
	a.Status = field.NewInt64(table, "Status")
	a.EditionID = field.NewInt64(table, "EditionId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.DayCount = field.NewInt64(table, "DayCount")
	a.PaymentPeriodType = field.NewInt64(table, "PaymentPeriodType")
	a.ExternalPaymentID = field.NewString(table, "ExternalPaymentId")
	a.InvoiceNo = field.NewString(table, "InvoiceNo")
	a.IsRecurring = field.NewField(table, "IsRecurring")
	a.SuccessURL = field.NewString(table, "SuccessUrl")
	a.ErrorURL = field.NewString(table, "ErrorUrl")

	a.fillFieldMap()

	return a
}

func (a *appsubscriptionpayment) WithContext(ctx context.Context) IAppsubscriptionpaymentDo {
	return a.appsubscriptionpaymentDo.WithContext(ctx)
}

func (a appsubscriptionpayment) TableName() string { return a.appsubscriptionpaymentDo.TableName() }

func (a appsubscriptionpayment) Alias() string { return a.appsubscriptionpaymentDo.Alias() }

func (a *appsubscriptionpayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appsubscriptionpayment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 21)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["Description"] = a.Description
	a.fieldMap["Gateway"] = a.Gateway
	a.fieldMap["Amount"] = a.Amount
	a.fieldMap["Status"] = a.Status
	a.fieldMap["EditionId"] = a.EditionID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["DayCount"] = a.DayCount
	a.fieldMap["PaymentPeriodType"] = a.PaymentPeriodType
	a.fieldMap["ExternalPaymentId"] = a.ExternalPaymentID
	a.fieldMap["InvoiceNo"] = a.InvoiceNo
	a.fieldMap["IsRecurring"] = a.IsRecurring
	a.fieldMap["SuccessUrl"] = a.SuccessURL
	a.fieldMap["ErrorUrl"] = a.ErrorURL
}

func (a appsubscriptionpayment) clone(db *gorm.DB) appsubscriptionpayment {
	a.appsubscriptionpaymentDo.ReplaceDB(db)
	return a
}

type appsubscriptionpaymentDo struct{ gen.DO }

type IAppsubscriptionpaymentDo interface {
	gen.SubQuery
	Debug() IAppsubscriptionpaymentDo
	WithContext(ctx context.Context) IAppsubscriptionpaymentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppsubscriptionpaymentDo
	Not(conds ...gen.Condition) IAppsubscriptionpaymentDo
	Or(conds ...gen.Condition) IAppsubscriptionpaymentDo
	Select(conds ...field.Expr) IAppsubscriptionpaymentDo
	Where(conds ...gen.Condition) IAppsubscriptionpaymentDo
	Order(conds ...field.Expr) IAppsubscriptionpaymentDo
	Distinct(cols ...field.Expr) IAppsubscriptionpaymentDo
	Omit(cols ...field.Expr) IAppsubscriptionpaymentDo
	Join(table schema.Tabler, on ...field.Expr) IAppsubscriptionpaymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppsubscriptionpaymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppsubscriptionpaymentDo
	Group(cols ...field.Expr) IAppsubscriptionpaymentDo
	Having(conds ...gen.Condition) IAppsubscriptionpaymentDo
	Limit(limit int) IAppsubscriptionpaymentDo
	Offset(offset int) IAppsubscriptionpaymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppsubscriptionpaymentDo
	Unscoped() IAppsubscriptionpaymentDo
	Create(values ...*model.Appsubscriptionpayment) error
	CreateInBatches(values []*model.Appsubscriptionpayment, batchSize int) error
	Save(values ...*model.Appsubscriptionpayment) error
	First() (*model.Appsubscriptionpayment, error)
	Take() (*model.Appsubscriptionpayment, error)
	Last() (*model.Appsubscriptionpayment, error)
	Find() ([]*model.Appsubscriptionpayment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appsubscriptionpayment, err error)
	FindInBatches(result *[]*model.Appsubscriptionpayment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appsubscriptionpayment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppsubscriptionpaymentDo
	Assign(attrs ...field.AssignExpr) IAppsubscriptionpaymentDo
	Joins(fields ...field.RelationField) IAppsubscriptionpaymentDo
	Preload(fields ...field.RelationField) IAppsubscriptionpaymentDo
	FirstOrInit() (*model.Appsubscriptionpayment, error)
	FirstOrCreate() (*model.Appsubscriptionpayment, error)
	FindByPage(offset int, limit int) (result []*model.Appsubscriptionpayment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppsubscriptionpaymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appsubscriptionpaymentDo) Debug() IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Debug())
}

func (a appsubscriptionpaymentDo) WithContext(ctx context.Context) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appsubscriptionpaymentDo) ReadDB() IAppsubscriptionpaymentDo {
	return a.Clauses(dbresolver.Read)
}

func (a appsubscriptionpaymentDo) WriteDB() IAppsubscriptionpaymentDo {
	return a.Clauses(dbresolver.Write)
}

func (a appsubscriptionpaymentDo) Clauses(conds ...clause.Expression) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appsubscriptionpaymentDo) Returning(value interface{}, columns ...string) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appsubscriptionpaymentDo) Not(conds ...gen.Condition) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appsubscriptionpaymentDo) Or(conds ...gen.Condition) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appsubscriptionpaymentDo) Select(conds ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appsubscriptionpaymentDo) Where(conds ...gen.Condition) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appsubscriptionpaymentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppsubscriptionpaymentDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appsubscriptionpaymentDo) Order(conds ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appsubscriptionpaymentDo) Distinct(cols ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appsubscriptionpaymentDo) Omit(cols ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appsubscriptionpaymentDo) Join(table schema.Tabler, on ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appsubscriptionpaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appsubscriptionpaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appsubscriptionpaymentDo) Group(cols ...field.Expr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appsubscriptionpaymentDo) Having(conds ...gen.Condition) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appsubscriptionpaymentDo) Limit(limit int) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appsubscriptionpaymentDo) Offset(offset int) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appsubscriptionpaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appsubscriptionpaymentDo) Unscoped() IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appsubscriptionpaymentDo) Create(values ...*model.Appsubscriptionpayment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appsubscriptionpaymentDo) CreateInBatches(values []*model.Appsubscriptionpayment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appsubscriptionpaymentDo) Save(values ...*model.Appsubscriptionpayment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appsubscriptionpaymentDo) First() (*model.Appsubscriptionpayment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubscriptionpayment), nil
	}
}

func (a appsubscriptionpaymentDo) Take() (*model.Appsubscriptionpayment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubscriptionpayment), nil
	}
}

func (a appsubscriptionpaymentDo) Last() (*model.Appsubscriptionpayment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubscriptionpayment), nil
	}
}

func (a appsubscriptionpaymentDo) Find() ([]*model.Appsubscriptionpayment, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appsubscriptionpayment), err
}

func (a appsubscriptionpaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appsubscriptionpayment, err error) {
	buf := make([]*model.Appsubscriptionpayment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appsubscriptionpaymentDo) FindInBatches(result *[]*model.Appsubscriptionpayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appsubscriptionpaymentDo) Attrs(attrs ...field.AssignExpr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appsubscriptionpaymentDo) Assign(attrs ...field.AssignExpr) IAppsubscriptionpaymentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appsubscriptionpaymentDo) Joins(fields ...field.RelationField) IAppsubscriptionpaymentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appsubscriptionpaymentDo) Preload(fields ...field.RelationField) IAppsubscriptionpaymentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appsubscriptionpaymentDo) FirstOrInit() (*model.Appsubscriptionpayment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubscriptionpayment), nil
	}
}

func (a appsubscriptionpaymentDo) FirstOrCreate() (*model.Appsubscriptionpayment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubscriptionpayment), nil
	}
}

func (a appsubscriptionpaymentDo) FindByPage(offset int, limit int) (result []*model.Appsubscriptionpayment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appsubscriptionpaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appsubscriptionpaymentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appsubscriptionpaymentDo) Delete(models ...*model.Appsubscriptionpayment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appsubscriptionpaymentDo) withDO(do gen.Dao) *appsubscriptionpaymentDo {
	a.DO = *do.(*gen.DO)
	return a
}
