// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminalshelfitem(db *gorm.DB) lcpterminalshelfitem {
	_lcpterminalshelfitem := lcpterminalshelfitem{}

	_lcpterminalshelfitem.lcpterminalshelfitemDo.UseDB(db)
	_lcpterminalshelfitem.lcpterminalshelfitemDo.UseModel(&model.Lcpterminalshelfitem{})

	tableName := _lcpterminalshelfitem.lcpterminalshelfitemDo.TableName()
	_lcpterminalshelfitem.ALL = field.NewAsterisk(tableName)
	_lcpterminalshelfitem.ID = field.NewString(tableName, "Id")
	_lcpterminalshelfitem.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminalshelfitem.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminalshelfitem.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpterminalshelfitem.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpterminalshelfitem.ShelfID = field.NewString(tableName, "ShelfId")
	_lcpterminalshelfitem.ShelfName = field.NewString(tableName, "ShelfName")
	_lcpterminalshelfitem.ItemID = field.NewString(tableName, "ItemId")
	_lcpterminalshelfitem.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_lcpterminalshelfitem.ItemTitle = field.NewString(tableName, "ItemTitle")
	_lcpterminalshelfitem.ItemShortTitle = field.NewString(tableName, "ItemShortTitle")
	_lcpterminalshelfitem.ItemAuthor = field.NewString(tableName, "ItemAuthor")
	_lcpterminalshelfitem.ItemISBN = field.NewString(tableName, "ItemISBN")
	_lcpterminalshelfitem.CatalogCode = field.NewString(tableName, "CatalogCode")
	_lcpterminalshelfitem.IsReserve = field.NewField(tableName, "IsReserve")
	_lcpterminalshelfitem.ReserveType = field.NewInt64(tableName, "ReserveType")
	_lcpterminalshelfitem.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_lcpterminalshelfitem.ReserveDate = field.NewTime(tableName, "ReserveDate")
	_lcpterminalshelfitem.DisableReason = field.NewString(tableName, "DisableReason")
	_lcpterminalshelfitem.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminalshelfitem.fillFieldMap()

	return _lcpterminalshelfitem
}

type lcpterminalshelfitem struct {
	lcpterminalshelfitemDo lcpterminalshelfitemDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	ShelfID              field.String
	ShelfName            field.String
	ItemID               field.String
	ItemBarcode          field.String
	ItemTitle            field.String
	ItemShortTitle       field.String
	ItemAuthor           field.String
	ItemISBN             field.String
	CatalogCode          field.String
	IsReserve            field.Field
	ReserveType          field.Int64
	PatronBarcode        field.String
	ReserveDate          field.Time
	DisableReason        field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminalshelfitem) Table(newTableName string) *lcpterminalshelfitem {
	l.lcpterminalshelfitemDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminalshelfitem) As(alias string) *lcpterminalshelfitem {
	l.lcpterminalshelfitemDo.DO = *(l.lcpterminalshelfitemDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminalshelfitem) updateTableName(table string) *lcpterminalshelfitem {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.ShelfID = field.NewString(table, "ShelfId")
	l.ShelfName = field.NewString(table, "ShelfName")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemShortTitle = field.NewString(table, "ItemShortTitle")
	l.ItemAuthor = field.NewString(table, "ItemAuthor")
	l.ItemISBN = field.NewString(table, "ItemISBN")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.IsReserve = field.NewField(table, "IsReserve")
	l.ReserveType = field.NewInt64(table, "ReserveType")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.ReserveDate = field.NewTime(table, "ReserveDate")
	l.DisableReason = field.NewString(table, "DisableReason")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminalshelfitem) WithContext(ctx context.Context) ILcpterminalshelfitemDo {
	return l.lcpterminalshelfitemDo.WithContext(ctx)
}

func (l lcpterminalshelfitem) TableName() string { return l.lcpterminalshelfitemDo.TableName() }

func (l lcpterminalshelfitem) Alias() string { return l.lcpterminalshelfitemDo.Alias() }

func (l *lcpterminalshelfitem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminalshelfitem) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 20)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["ShelfId"] = l.ShelfID
	l.fieldMap["ShelfName"] = l.ShelfName
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemShortTitle"] = l.ItemShortTitle
	l.fieldMap["ItemAuthor"] = l.ItemAuthor
	l.fieldMap["ItemISBN"] = l.ItemISBN
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["IsReserve"] = l.IsReserve
	l.fieldMap["ReserveType"] = l.ReserveType
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["ReserveDate"] = l.ReserveDate
	l.fieldMap["DisableReason"] = l.DisableReason
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminalshelfitem) clone(db *gorm.DB) lcpterminalshelfitem {
	l.lcpterminalshelfitemDo.ReplaceDB(db)
	return l
}

type lcpterminalshelfitemDo struct{ gen.DO }

type ILcpterminalshelfitemDo interface {
	gen.SubQuery
	Debug() ILcpterminalshelfitemDo
	WithContext(ctx context.Context) ILcpterminalshelfitemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminalshelfitemDo
	Not(conds ...gen.Condition) ILcpterminalshelfitemDo
	Or(conds ...gen.Condition) ILcpterminalshelfitemDo
	Select(conds ...field.Expr) ILcpterminalshelfitemDo
	Where(conds ...gen.Condition) ILcpterminalshelfitemDo
	Order(conds ...field.Expr) ILcpterminalshelfitemDo
	Distinct(cols ...field.Expr) ILcpterminalshelfitemDo
	Omit(cols ...field.Expr) ILcpterminalshelfitemDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminalshelfitemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelfitemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelfitemDo
	Group(cols ...field.Expr) ILcpterminalshelfitemDo
	Having(conds ...gen.Condition) ILcpterminalshelfitemDo
	Limit(limit int) ILcpterminalshelfitemDo
	Offset(offset int) ILcpterminalshelfitemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalshelfitemDo
	Unscoped() ILcpterminalshelfitemDo
	Create(values ...*model.Lcpterminalshelfitem) error
	CreateInBatches(values []*model.Lcpterminalshelfitem, batchSize int) error
	Save(values ...*model.Lcpterminalshelfitem) error
	First() (*model.Lcpterminalshelfitem, error)
	Take() (*model.Lcpterminalshelfitem, error)
	Last() (*model.Lcpterminalshelfitem, error)
	Find() ([]*model.Lcpterminalshelfitem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalshelfitem, err error)
	FindInBatches(result *[]*model.Lcpterminalshelfitem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminalshelfitem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminalshelfitemDo
	Assign(attrs ...field.AssignExpr) ILcpterminalshelfitemDo
	Joins(fields ...field.RelationField) ILcpterminalshelfitemDo
	Preload(fields ...field.RelationField) ILcpterminalshelfitemDo
	FirstOrInit() (*model.Lcpterminalshelfitem, error)
	FirstOrCreate() (*model.Lcpterminalshelfitem, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminalshelfitem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminalshelfitemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminalshelfitemDo) Debug() ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminalshelfitemDo) WithContext(ctx context.Context) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminalshelfitemDo) ReadDB() ILcpterminalshelfitemDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminalshelfitemDo) WriteDB() ILcpterminalshelfitemDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminalshelfitemDo) Clauses(conds ...clause.Expression) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminalshelfitemDo) Returning(value interface{}, columns ...string) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminalshelfitemDo) Not(conds ...gen.Condition) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminalshelfitemDo) Or(conds ...gen.Condition) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminalshelfitemDo) Select(conds ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminalshelfitemDo) Where(conds ...gen.Condition) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminalshelfitemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminalshelfitemDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminalshelfitemDo) Order(conds ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminalshelfitemDo) Distinct(cols ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminalshelfitemDo) Omit(cols ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminalshelfitemDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminalshelfitemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminalshelfitemDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminalshelfitemDo) Group(cols ...field.Expr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminalshelfitemDo) Having(conds ...gen.Condition) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminalshelfitemDo) Limit(limit int) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminalshelfitemDo) Offset(offset int) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminalshelfitemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminalshelfitemDo) Unscoped() ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminalshelfitemDo) Create(values ...*model.Lcpterminalshelfitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminalshelfitemDo) CreateInBatches(values []*model.Lcpterminalshelfitem, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminalshelfitemDo) Save(values ...*model.Lcpterminalshelfitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminalshelfitemDo) First() (*model.Lcpterminalshelfitem, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelfitem), nil
	}
}

func (l lcpterminalshelfitemDo) Take() (*model.Lcpterminalshelfitem, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelfitem), nil
	}
}

func (l lcpterminalshelfitemDo) Last() (*model.Lcpterminalshelfitem, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelfitem), nil
	}
}

func (l lcpterminalshelfitemDo) Find() ([]*model.Lcpterminalshelfitem, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminalshelfitem), err
}

func (l lcpterminalshelfitemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalshelfitem, err error) {
	buf := make([]*model.Lcpterminalshelfitem, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminalshelfitemDo) FindInBatches(result *[]*model.Lcpterminalshelfitem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminalshelfitemDo) Attrs(attrs ...field.AssignExpr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminalshelfitemDo) Assign(attrs ...field.AssignExpr) ILcpterminalshelfitemDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminalshelfitemDo) Joins(fields ...field.RelationField) ILcpterminalshelfitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminalshelfitemDo) Preload(fields ...field.RelationField) ILcpterminalshelfitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminalshelfitemDo) FirstOrInit() (*model.Lcpterminalshelfitem, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelfitem), nil
	}
}

func (l lcpterminalshelfitemDo) FirstOrCreate() (*model.Lcpterminalshelfitem, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelfitem), nil
	}
}

func (l lcpterminalshelfitemDo) FindByPage(offset int, limit int) (result []*model.Lcpterminalshelfitem, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminalshelfitemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminalshelfitemDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminalshelfitemDo) Delete(models ...*model.Lcpterminalshelfitem) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminalshelfitemDo) withDO(do gen.Dao) *lcpterminalshelfitemDo {
	l.DO = *do.(*gen.DO)
	return l
}
