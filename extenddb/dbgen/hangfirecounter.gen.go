// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfirecounter(db *gorm.DB) hangfirecounter {
	_hangfirecounter := hangfirecounter{}

	_hangfirecounter.hangfirecounterDo.UseDB(db)
	_hangfirecounter.hangfirecounterDo.UseModel(&model.Hangfirecounter{})

	tableName := _hangfirecounter.hangfirecounterDo.TableName()
	_hangfirecounter.ALL = field.NewAsterisk(tableName)
	_hangfirecounter.ID = field.NewInt64(tableName, "Id")
	_hangfirecounter.Key = field.NewString(tableName, "Key")
	_hangfirecounter.Value = field.NewInt64(tableName, "Value")
	_hangfirecounter.ExpireAt = field.NewTime(tableName, "ExpireAt")

	_hangfirecounter.fillFieldMap()

	return _hangfirecounter
}

type hangfirecounter struct {
	hangfirecounterDo hangfirecounterDo

	ALL      field.Asterisk
	ID       field.Int64
	Key      field.String
	Value    field.Int64
	ExpireAt field.Time

	fieldMap map[string]field.Expr
}

func (h hangfirecounter) Table(newTableName string) *hangfirecounter {
	h.hangfirecounterDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirecounter) As(alias string) *hangfirecounter {
	h.hangfirecounterDo.DO = *(h.hangfirecounterDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirecounter) updateTableName(table string) *hangfirecounter {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.Key = field.NewString(table, "Key")
	h.Value = field.NewInt64(table, "Value")
	h.ExpireAt = field.NewTime(table, "ExpireAt")

	h.fillFieldMap()

	return h
}

func (h *hangfirecounter) WithContext(ctx context.Context) IHangfirecounterDo {
	return h.hangfirecounterDo.WithContext(ctx)
}

func (h hangfirecounter) TableName() string { return h.hangfirecounterDo.TableName() }

func (h hangfirecounter) Alias() string { return h.hangfirecounterDo.Alias() }

func (h *hangfirecounter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirecounter) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 4)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["Key"] = h.Key
	h.fieldMap["Value"] = h.Value
	h.fieldMap["ExpireAt"] = h.ExpireAt
}

func (h hangfirecounter) clone(db *gorm.DB) hangfirecounter {
	h.hangfirecounterDo.ReplaceDB(db)
	return h
}

type hangfirecounterDo struct{ gen.DO }

type IHangfirecounterDo interface {
	gen.SubQuery
	Debug() IHangfirecounterDo
	WithContext(ctx context.Context) IHangfirecounterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirecounterDo
	Not(conds ...gen.Condition) IHangfirecounterDo
	Or(conds ...gen.Condition) IHangfirecounterDo
	Select(conds ...field.Expr) IHangfirecounterDo
	Where(conds ...gen.Condition) IHangfirecounterDo
	Order(conds ...field.Expr) IHangfirecounterDo
	Distinct(cols ...field.Expr) IHangfirecounterDo
	Omit(cols ...field.Expr) IHangfirecounterDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirecounterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirecounterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirecounterDo
	Group(cols ...field.Expr) IHangfirecounterDo
	Having(conds ...gen.Condition) IHangfirecounterDo
	Limit(limit int) IHangfirecounterDo
	Offset(offset int) IHangfirecounterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirecounterDo
	Unscoped() IHangfirecounterDo
	Create(values ...*model.Hangfirecounter) error
	CreateInBatches(values []*model.Hangfirecounter, batchSize int) error
	Save(values ...*model.Hangfirecounter) error
	First() (*model.Hangfirecounter, error)
	Take() (*model.Hangfirecounter, error)
	Last() (*model.Hangfirecounter, error)
	Find() ([]*model.Hangfirecounter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirecounter, err error)
	FindInBatches(result *[]*model.Hangfirecounter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirecounter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirecounterDo
	Assign(attrs ...field.AssignExpr) IHangfirecounterDo
	Joins(fields ...field.RelationField) IHangfirecounterDo
	Preload(fields ...field.RelationField) IHangfirecounterDo
	FirstOrInit() (*model.Hangfirecounter, error)
	FirstOrCreate() (*model.Hangfirecounter, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirecounter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirecounterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirecounterDo) Debug() IHangfirecounterDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirecounterDo) WithContext(ctx context.Context) IHangfirecounterDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirecounterDo) ReadDB() IHangfirecounterDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirecounterDo) WriteDB() IHangfirecounterDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirecounterDo) Clauses(conds ...clause.Expression) IHangfirecounterDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirecounterDo) Returning(value interface{}, columns ...string) IHangfirecounterDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirecounterDo) Not(conds ...gen.Condition) IHangfirecounterDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirecounterDo) Or(conds ...gen.Condition) IHangfirecounterDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirecounterDo) Select(conds ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirecounterDo) Where(conds ...gen.Condition) IHangfirecounterDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirecounterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirecounterDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirecounterDo) Order(conds ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirecounterDo) Distinct(cols ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirecounterDo) Omit(cols ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirecounterDo) Join(table schema.Tabler, on ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirecounterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirecounterDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirecounterDo) Group(cols ...field.Expr) IHangfirecounterDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirecounterDo) Having(conds ...gen.Condition) IHangfirecounterDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirecounterDo) Limit(limit int) IHangfirecounterDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirecounterDo) Offset(offset int) IHangfirecounterDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirecounterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirecounterDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirecounterDo) Unscoped() IHangfirecounterDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirecounterDo) Create(values ...*model.Hangfirecounter) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirecounterDo) CreateInBatches(values []*model.Hangfirecounter, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirecounterDo) Save(values ...*model.Hangfirecounter) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirecounterDo) First() (*model.Hangfirecounter, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirecounter), nil
	}
}

func (h hangfirecounterDo) Take() (*model.Hangfirecounter, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirecounter), nil
	}
}

func (h hangfirecounterDo) Last() (*model.Hangfirecounter, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirecounter), nil
	}
}

func (h hangfirecounterDo) Find() ([]*model.Hangfirecounter, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirecounter), err
}

func (h hangfirecounterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirecounter, err error) {
	buf := make([]*model.Hangfirecounter, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirecounterDo) FindInBatches(result *[]*model.Hangfirecounter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirecounterDo) Attrs(attrs ...field.AssignExpr) IHangfirecounterDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirecounterDo) Assign(attrs ...field.AssignExpr) IHangfirecounterDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirecounterDo) Joins(fields ...field.RelationField) IHangfirecounterDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirecounterDo) Preload(fields ...field.RelationField) IHangfirecounterDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirecounterDo) FirstOrInit() (*model.Hangfirecounter, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirecounter), nil
	}
}

func (h hangfirecounterDo) FirstOrCreate() (*model.Hangfirecounter, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirecounter), nil
	}
}

func (h hangfirecounterDo) FindByPage(offset int, limit int) (result []*model.Hangfirecounter, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirecounterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirecounterDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirecounterDo) Delete(models ...*model.Hangfirecounter) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirecounterDo) withDO(do gen.Dao) *hangfirecounterDo {
	h.DO = *do.(*gen.DO)
	return h
}
