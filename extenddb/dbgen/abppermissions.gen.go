// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbppermission(db *gorm.DB) abppermission {
	_abppermission := abppermission{}

	_abppermission.abppermissionDo.UseDB(db)
	_abppermission.abppermissionDo.UseModel(&model.Abppermission{})

	tableName := _abppermission.abppermissionDo.TableName()
	_abppermission.ALL = field.NewAsterisk(tableName)
	_abppermission.ID = field.NewInt64(tableName, "Id")
	_abppermission.CreationTime = field.NewTime(tableName, "CreationTime")
	_abppermission.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abppermission.TenantID = field.NewInt64(tableName, "TenantId")
	_abppermission.Name = field.NewString(tableName, "Name")
	_abppermission.IsGranted = field.NewField(tableName, "IsGranted")
	_abppermission.Discriminator = field.NewString(tableName, "Discriminator")
	_abppermission.RoleID = field.NewInt64(tableName, "RoleId")
	_abppermission.UserID = field.NewInt64(tableName, "UserId")

	_abppermission.fillFieldMap()

	return _abppermission
}

type abppermission struct {
	abppermissionDo abppermissionDo

	ALL           field.Asterisk
	ID            field.Int64
	CreationTime  field.Time
	CreatorUserID field.Int64
	TenantID      field.Int64
	Name          field.String
	IsGranted     field.Field
	Discriminator field.String
	RoleID        field.Int64
	UserID        field.Int64

	fieldMap map[string]field.Expr
}

func (a abppermission) Table(newTableName string) *abppermission {
	a.abppermissionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abppermission) As(alias string) *abppermission {
	a.abppermissionDo.DO = *(a.abppermissionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abppermission) updateTableName(table string) *abppermission {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.Name = field.NewString(table, "Name")
	a.IsGranted = field.NewField(table, "IsGranted")
	a.Discriminator = field.NewString(table, "Discriminator")
	a.RoleID = field.NewInt64(table, "RoleId")
	a.UserID = field.NewInt64(table, "UserId")

	a.fillFieldMap()

	return a
}

func (a *abppermission) WithContext(ctx context.Context) IAbppermissionDo {
	return a.abppermissionDo.WithContext(ctx)
}

func (a abppermission) TableName() string { return a.abppermissionDo.TableName() }

func (a abppermission) Alias() string { return a.abppermissionDo.Alias() }

func (a *abppermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abppermission) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["Name"] = a.Name
	a.fieldMap["IsGranted"] = a.IsGranted
	a.fieldMap["Discriminator"] = a.Discriminator
	a.fieldMap["RoleId"] = a.RoleID
	a.fieldMap["UserId"] = a.UserID
}

func (a abppermission) clone(db *gorm.DB) abppermission {
	a.abppermissionDo.ReplaceDB(db)
	return a
}

type abppermissionDo struct{ gen.DO }

type IAbppermissionDo interface {
	gen.SubQuery
	Debug() IAbppermissionDo
	WithContext(ctx context.Context) IAbppermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbppermissionDo
	Not(conds ...gen.Condition) IAbppermissionDo
	Or(conds ...gen.Condition) IAbppermissionDo
	Select(conds ...field.Expr) IAbppermissionDo
	Where(conds ...gen.Condition) IAbppermissionDo
	Order(conds ...field.Expr) IAbppermissionDo
	Distinct(cols ...field.Expr) IAbppermissionDo
	Omit(cols ...field.Expr) IAbppermissionDo
	Join(table schema.Tabler, on ...field.Expr) IAbppermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbppermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbppermissionDo
	Group(cols ...field.Expr) IAbppermissionDo
	Having(conds ...gen.Condition) IAbppermissionDo
	Limit(limit int) IAbppermissionDo
	Offset(offset int) IAbppermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbppermissionDo
	Unscoped() IAbppermissionDo
	Create(values ...*model.Abppermission) error
	CreateInBatches(values []*model.Abppermission, batchSize int) error
	Save(values ...*model.Abppermission) error
	First() (*model.Abppermission, error)
	Take() (*model.Abppermission, error)
	Last() (*model.Abppermission, error)
	Find() ([]*model.Abppermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abppermission, err error)
	FindInBatches(result *[]*model.Abppermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abppermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbppermissionDo
	Assign(attrs ...field.AssignExpr) IAbppermissionDo
	Joins(fields ...field.RelationField) IAbppermissionDo
	Preload(fields ...field.RelationField) IAbppermissionDo
	FirstOrInit() (*model.Abppermission, error)
	FirstOrCreate() (*model.Abppermission, error)
	FindByPage(offset int, limit int) (result []*model.Abppermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbppermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abppermissionDo) Debug() IAbppermissionDo {
	return a.withDO(a.DO.Debug())
}

func (a abppermissionDo) WithContext(ctx context.Context) IAbppermissionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abppermissionDo) ReadDB() IAbppermissionDo {
	return a.Clauses(dbresolver.Read)
}

func (a abppermissionDo) WriteDB() IAbppermissionDo {
	return a.Clauses(dbresolver.Write)
}

func (a abppermissionDo) Clauses(conds ...clause.Expression) IAbppermissionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abppermissionDo) Returning(value interface{}, columns ...string) IAbppermissionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abppermissionDo) Not(conds ...gen.Condition) IAbppermissionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abppermissionDo) Or(conds ...gen.Condition) IAbppermissionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abppermissionDo) Select(conds ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abppermissionDo) Where(conds ...gen.Condition) IAbppermissionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abppermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbppermissionDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abppermissionDo) Order(conds ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abppermissionDo) Distinct(cols ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abppermissionDo) Omit(cols ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abppermissionDo) Join(table schema.Tabler, on ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abppermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abppermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abppermissionDo) Group(cols ...field.Expr) IAbppermissionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abppermissionDo) Having(conds ...gen.Condition) IAbppermissionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abppermissionDo) Limit(limit int) IAbppermissionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abppermissionDo) Offset(offset int) IAbppermissionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abppermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbppermissionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abppermissionDo) Unscoped() IAbppermissionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abppermissionDo) Create(values ...*model.Abppermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abppermissionDo) CreateInBatches(values []*model.Abppermission, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abppermissionDo) Save(values ...*model.Abppermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abppermissionDo) First() (*model.Abppermission, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppermission), nil
	}
}

func (a abppermissionDo) Take() (*model.Abppermission, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppermission), nil
	}
}

func (a abppermissionDo) Last() (*model.Abppermission, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppermission), nil
	}
}

func (a abppermissionDo) Find() ([]*model.Abppermission, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abppermission), err
}

func (a abppermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abppermission, err error) {
	buf := make([]*model.Abppermission, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abppermissionDo) FindInBatches(result *[]*model.Abppermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abppermissionDo) Attrs(attrs ...field.AssignExpr) IAbppermissionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abppermissionDo) Assign(attrs ...field.AssignExpr) IAbppermissionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abppermissionDo) Joins(fields ...field.RelationField) IAbppermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abppermissionDo) Preload(fields ...field.RelationField) IAbppermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abppermissionDo) FirstOrInit() (*model.Abppermission, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppermission), nil
	}
}

func (a abppermissionDo) FirstOrCreate() (*model.Abppermission, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppermission), nil
	}
}

func (a abppermissionDo) FindByPage(offset int, limit int) (result []*model.Abppermission, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abppermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abppermissionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abppermissionDo) Delete(models ...*model.Abppermission) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abppermissionDo) withDO(do gen.Dao) *abppermissionDo {
	a.DO = *do.(*gen.DO)
	return a
}
