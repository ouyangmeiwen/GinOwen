// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfirehash(db *gorm.DB) hangfirehash {
	_hangfirehash := hangfirehash{}

	_hangfirehash.hangfirehashDo.UseDB(db)
	_hangfirehash.hangfirehashDo.UseModel(&model.Hangfirehash{})

	tableName := _hangfirehash.hangfirehashDo.TableName()
	_hangfirehash.ALL = field.NewAsterisk(tableName)
	_hangfirehash.ID = field.NewInt64(tableName, "Id")
	_hangfirehash.Key = field.NewString(tableName, "Key")
	_hangfirehash.Field = field.NewString(tableName, "Field")
	_hangfirehash.Value = field.NewString(tableName, "Value")
	_hangfirehash.ExpireAt = field.NewTime(tableName, "ExpireAt")

	_hangfirehash.fillFieldMap()

	return _hangfirehash
}

type hangfirehash struct {
	hangfirehashDo hangfirehashDo

	ALL      field.Asterisk
	ID       field.Int64
	Key      field.String
	Field    field.String
	Value    field.String
	ExpireAt field.Time

	fieldMap map[string]field.Expr
}

func (h hangfirehash) Table(newTableName string) *hangfirehash {
	h.hangfirehashDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirehash) As(alias string) *hangfirehash {
	h.hangfirehashDo.DO = *(h.hangfirehashDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirehash) updateTableName(table string) *hangfirehash {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.Key = field.NewString(table, "Key")
	h.Field = field.NewString(table, "Field")
	h.Value = field.NewString(table, "Value")
	h.ExpireAt = field.NewTime(table, "ExpireAt")

	h.fillFieldMap()

	return h
}

func (h *hangfirehash) WithContext(ctx context.Context) IHangfirehashDo {
	return h.hangfirehashDo.WithContext(ctx)
}

func (h hangfirehash) TableName() string { return h.hangfirehashDo.TableName() }

func (h hangfirehash) Alias() string { return h.hangfirehashDo.Alias() }

func (h *hangfirehash) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirehash) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 5)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["Key"] = h.Key
	h.fieldMap["Field"] = h.Field
	h.fieldMap["Value"] = h.Value
	h.fieldMap["ExpireAt"] = h.ExpireAt
}

func (h hangfirehash) clone(db *gorm.DB) hangfirehash {
	h.hangfirehashDo.ReplaceDB(db)
	return h
}

type hangfirehashDo struct{ gen.DO }

type IHangfirehashDo interface {
	gen.SubQuery
	Debug() IHangfirehashDo
	WithContext(ctx context.Context) IHangfirehashDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirehashDo
	Not(conds ...gen.Condition) IHangfirehashDo
	Or(conds ...gen.Condition) IHangfirehashDo
	Select(conds ...field.Expr) IHangfirehashDo
	Where(conds ...gen.Condition) IHangfirehashDo
	Order(conds ...field.Expr) IHangfirehashDo
	Distinct(cols ...field.Expr) IHangfirehashDo
	Omit(cols ...field.Expr) IHangfirehashDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirehashDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirehashDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirehashDo
	Group(cols ...field.Expr) IHangfirehashDo
	Having(conds ...gen.Condition) IHangfirehashDo
	Limit(limit int) IHangfirehashDo
	Offset(offset int) IHangfirehashDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirehashDo
	Unscoped() IHangfirehashDo
	Create(values ...*model.Hangfirehash) error
	CreateInBatches(values []*model.Hangfirehash, batchSize int) error
	Save(values ...*model.Hangfirehash) error
	First() (*model.Hangfirehash, error)
	Take() (*model.Hangfirehash, error)
	Last() (*model.Hangfirehash, error)
	Find() ([]*model.Hangfirehash, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirehash, err error)
	FindInBatches(result *[]*model.Hangfirehash, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirehash) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirehashDo
	Assign(attrs ...field.AssignExpr) IHangfirehashDo
	Joins(fields ...field.RelationField) IHangfirehashDo
	Preload(fields ...field.RelationField) IHangfirehashDo
	FirstOrInit() (*model.Hangfirehash, error)
	FirstOrCreate() (*model.Hangfirehash, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirehash, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirehashDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirehashDo) Debug() IHangfirehashDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirehashDo) WithContext(ctx context.Context) IHangfirehashDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirehashDo) ReadDB() IHangfirehashDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirehashDo) WriteDB() IHangfirehashDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirehashDo) Clauses(conds ...clause.Expression) IHangfirehashDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirehashDo) Returning(value interface{}, columns ...string) IHangfirehashDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirehashDo) Not(conds ...gen.Condition) IHangfirehashDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirehashDo) Or(conds ...gen.Condition) IHangfirehashDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirehashDo) Select(conds ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirehashDo) Where(conds ...gen.Condition) IHangfirehashDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirehashDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirehashDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirehashDo) Order(conds ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirehashDo) Distinct(cols ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirehashDo) Omit(cols ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirehashDo) Join(table schema.Tabler, on ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirehashDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirehashDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirehashDo) Group(cols ...field.Expr) IHangfirehashDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirehashDo) Having(conds ...gen.Condition) IHangfirehashDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirehashDo) Limit(limit int) IHangfirehashDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirehashDo) Offset(offset int) IHangfirehashDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirehashDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirehashDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirehashDo) Unscoped() IHangfirehashDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirehashDo) Create(values ...*model.Hangfirehash) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirehashDo) CreateInBatches(values []*model.Hangfirehash, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirehashDo) Save(values ...*model.Hangfirehash) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirehashDo) First() (*model.Hangfirehash, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirehash), nil
	}
}

func (h hangfirehashDo) Take() (*model.Hangfirehash, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirehash), nil
	}
}

func (h hangfirehashDo) Last() (*model.Hangfirehash, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirehash), nil
	}
}

func (h hangfirehashDo) Find() ([]*model.Hangfirehash, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirehash), err
}

func (h hangfirehashDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirehash, err error) {
	buf := make([]*model.Hangfirehash, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirehashDo) FindInBatches(result *[]*model.Hangfirehash, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirehashDo) Attrs(attrs ...field.AssignExpr) IHangfirehashDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirehashDo) Assign(attrs ...field.AssignExpr) IHangfirehashDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirehashDo) Joins(fields ...field.RelationField) IHangfirehashDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirehashDo) Preload(fields ...field.RelationField) IHangfirehashDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirehashDo) FirstOrInit() (*model.Hangfirehash, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirehash), nil
	}
}

func (h hangfirehashDo) FirstOrCreate() (*model.Hangfirehash, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirehash), nil
	}
}

func (h hangfirehashDo) FindByPage(offset int, limit int) (result []*model.Hangfirehash, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirehashDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirehashDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirehashDo) Delete(models ...*model.Hangfirehash) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirehashDo) withDO(do gen.Dao) *hangfirehashDo {
	h.DO = *do.(*gen.DO)
	return h
}
