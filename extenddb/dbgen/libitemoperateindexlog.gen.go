// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibitemoperateindexlog(db *gorm.DB) libitemoperateindexlog {
	_libitemoperateindexlog := libitemoperateindexlog{}

	_libitemoperateindexlog.libitemoperateindexlogDo.UseDB(db)
	_libitemoperateindexlog.libitemoperateindexlogDo.UseModel(&model.Libitemoperateindexlog{})

	tableName := _libitemoperateindexlog.libitemoperateindexlogDo.TableName()
	_libitemoperateindexlog.ALL = field.NewAsterisk(tableName)
	_libitemoperateindexlog.ID = field.NewString(tableName, "Id")
	_libitemoperateindexlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libitemoperateindexlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libitemoperateindexlog.CreatorUserName = field.NewString(tableName, "CreatorUserName")
	_libitemoperateindexlog.ItemOperateType = field.NewInt64(tableName, "ItemOperateType")
	_libitemoperateindexlog.ItemOperateModeType = field.NewInt64(tableName, "ItemOperateModeType")
	_libitemoperateindexlog.Remark = field.NewString(tableName, "Remark")
	_libitemoperateindexlog.TenantID = field.NewInt64(tableName, "TenantId")

	_libitemoperateindexlog.fillFieldMap()

	return _libitemoperateindexlog
}

type libitemoperateindexlog struct {
	libitemoperateindexlogDo libitemoperateindexlogDo

	ALL                 field.Asterisk
	ID                  field.String
	CreationTime        field.Time
	CreatorUserID       field.Int64
	CreatorUserName     field.String
	ItemOperateType     field.Int64
	ItemOperateModeType field.Int64
	Remark              field.String
	TenantID            field.Int64

	fieldMap map[string]field.Expr
}

func (l libitemoperateindexlog) Table(newTableName string) *libitemoperateindexlog {
	l.libitemoperateindexlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libitemoperateindexlog) As(alias string) *libitemoperateindexlog {
	l.libitemoperateindexlogDo.DO = *(l.libitemoperateindexlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libitemoperateindexlog) updateTableName(table string) *libitemoperateindexlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")
	l.ItemOperateType = field.NewInt64(table, "ItemOperateType")
	l.ItemOperateModeType = field.NewInt64(table, "ItemOperateModeType")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libitemoperateindexlog) WithContext(ctx context.Context) ILibitemoperateindexlogDo {
	return l.libitemoperateindexlogDo.WithContext(ctx)
}

func (l libitemoperateindexlog) TableName() string { return l.libitemoperateindexlogDo.TableName() }

func (l libitemoperateindexlog) Alias() string { return l.libitemoperateindexlogDo.Alias() }

func (l *libitemoperateindexlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libitemoperateindexlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
	l.fieldMap["ItemOperateType"] = l.ItemOperateType
	l.fieldMap["ItemOperateModeType"] = l.ItemOperateModeType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libitemoperateindexlog) clone(db *gorm.DB) libitemoperateindexlog {
	l.libitemoperateindexlogDo.ReplaceDB(db)
	return l
}

type libitemoperateindexlogDo struct{ gen.DO }

type ILibitemoperateindexlogDo interface {
	gen.SubQuery
	Debug() ILibitemoperateindexlogDo
	WithContext(ctx context.Context) ILibitemoperateindexlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibitemoperateindexlogDo
	Not(conds ...gen.Condition) ILibitemoperateindexlogDo
	Or(conds ...gen.Condition) ILibitemoperateindexlogDo
	Select(conds ...field.Expr) ILibitemoperateindexlogDo
	Where(conds ...gen.Condition) ILibitemoperateindexlogDo
	Order(conds ...field.Expr) ILibitemoperateindexlogDo
	Distinct(cols ...field.Expr) ILibitemoperateindexlogDo
	Omit(cols ...field.Expr) ILibitemoperateindexlogDo
	Join(table schema.Tabler, on ...field.Expr) ILibitemoperateindexlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemoperateindexlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibitemoperateindexlogDo
	Group(cols ...field.Expr) ILibitemoperateindexlogDo
	Having(conds ...gen.Condition) ILibitemoperateindexlogDo
	Limit(limit int) ILibitemoperateindexlogDo
	Offset(offset int) ILibitemoperateindexlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemoperateindexlogDo
	Unscoped() ILibitemoperateindexlogDo
	Create(values ...*model.Libitemoperateindexlog) error
	CreateInBatches(values []*model.Libitemoperateindexlog, batchSize int) error
	Save(values ...*model.Libitemoperateindexlog) error
	First() (*model.Libitemoperateindexlog, error)
	Take() (*model.Libitemoperateindexlog, error)
	Last() (*model.Libitemoperateindexlog, error)
	Find() ([]*model.Libitemoperateindexlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitemoperateindexlog, err error)
	FindInBatches(result *[]*model.Libitemoperateindexlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libitemoperateindexlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibitemoperateindexlogDo
	Assign(attrs ...field.AssignExpr) ILibitemoperateindexlogDo
	Joins(fields ...field.RelationField) ILibitemoperateindexlogDo
	Preload(fields ...field.RelationField) ILibitemoperateindexlogDo
	FirstOrInit() (*model.Libitemoperateindexlog, error)
	FirstOrCreate() (*model.Libitemoperateindexlog, error)
	FindByPage(offset int, limit int) (result []*model.Libitemoperateindexlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibitemoperateindexlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libitemoperateindexlogDo) Debug() ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Debug())
}

func (l libitemoperateindexlogDo) WithContext(ctx context.Context) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libitemoperateindexlogDo) ReadDB() ILibitemoperateindexlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libitemoperateindexlogDo) WriteDB() ILibitemoperateindexlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libitemoperateindexlogDo) Clauses(conds ...clause.Expression) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libitemoperateindexlogDo) Returning(value interface{}, columns ...string) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libitemoperateindexlogDo) Not(conds ...gen.Condition) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libitemoperateindexlogDo) Or(conds ...gen.Condition) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libitemoperateindexlogDo) Select(conds ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libitemoperateindexlogDo) Where(conds ...gen.Condition) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libitemoperateindexlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibitemoperateindexlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libitemoperateindexlogDo) Order(conds ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libitemoperateindexlogDo) Distinct(cols ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libitemoperateindexlogDo) Omit(cols ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libitemoperateindexlogDo) Join(table schema.Tabler, on ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libitemoperateindexlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libitemoperateindexlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libitemoperateindexlogDo) Group(cols ...field.Expr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libitemoperateindexlogDo) Having(conds ...gen.Condition) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libitemoperateindexlogDo) Limit(limit int) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libitemoperateindexlogDo) Offset(offset int) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libitemoperateindexlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libitemoperateindexlogDo) Unscoped() ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libitemoperateindexlogDo) Create(values ...*model.Libitemoperateindexlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libitemoperateindexlogDo) CreateInBatches(values []*model.Libitemoperateindexlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libitemoperateindexlogDo) Save(values ...*model.Libitemoperateindexlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libitemoperateindexlogDo) First() (*model.Libitemoperateindexlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperateindexlog), nil
	}
}

func (l libitemoperateindexlogDo) Take() (*model.Libitemoperateindexlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperateindexlog), nil
	}
}

func (l libitemoperateindexlogDo) Last() (*model.Libitemoperateindexlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperateindexlog), nil
	}
}

func (l libitemoperateindexlogDo) Find() ([]*model.Libitemoperateindexlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libitemoperateindexlog), err
}

func (l libitemoperateindexlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitemoperateindexlog, err error) {
	buf := make([]*model.Libitemoperateindexlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libitemoperateindexlogDo) FindInBatches(result *[]*model.Libitemoperateindexlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libitemoperateindexlogDo) Attrs(attrs ...field.AssignExpr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libitemoperateindexlogDo) Assign(attrs ...field.AssignExpr) ILibitemoperateindexlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libitemoperateindexlogDo) Joins(fields ...field.RelationField) ILibitemoperateindexlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libitemoperateindexlogDo) Preload(fields ...field.RelationField) ILibitemoperateindexlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libitemoperateindexlogDo) FirstOrInit() (*model.Libitemoperateindexlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperateindexlog), nil
	}
}

func (l libitemoperateindexlogDo) FirstOrCreate() (*model.Libitemoperateindexlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperateindexlog), nil
	}
}

func (l libitemoperateindexlogDo) FindByPage(offset int, limit int) (result []*model.Libitemoperateindexlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libitemoperateindexlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libitemoperateindexlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libitemoperateindexlogDo) Delete(models ...*model.Libitemoperateindexlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libitemoperateindexlogDo) withDO(do gen.Dao) *libitemoperateindexlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
