// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysfaceoffineoperationlog(db *gorm.DB) sysfaceoffineoperationlog {
	_sysfaceoffineoperationlog := sysfaceoffineoperationlog{}

	_sysfaceoffineoperationlog.sysfaceoffineoperationlogDo.UseDB(db)
	_sysfaceoffineoperationlog.sysfaceoffineoperationlogDo.UseModel(&model.Sysfaceoffineoperationlog{})

	tableName := _sysfaceoffineoperationlog.sysfaceoffineoperationlogDo.TableName()
	_sysfaceoffineoperationlog.ALL = field.NewAsterisk(tableName)
	_sysfaceoffineoperationlog.ID = field.NewString(tableName, "Id")
	_sysfaceoffineoperationlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysfaceoffineoperationlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysfaceoffineoperationlog.OperationType = field.NewInt64(tableName, "OperationType")
	_sysfaceoffineoperationlog.OperationItem = field.NewInt64(tableName, "OperationItem")
	_sysfaceoffineoperationlog.GroupID = field.NewString(tableName, "GroupId")
	_sysfaceoffineoperationlog.UserID = field.NewString(tableName, "UserId")
	_sysfaceoffineoperationlog.Result = field.NewInt64(tableName, "Result")
	_sysfaceoffineoperationlog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_sysfaceoffineoperationlog.OperationMessage = field.NewString(tableName, "OperationMessage")
	_sysfaceoffineoperationlog.Remark = field.NewString(tableName, "Remark")

	_sysfaceoffineoperationlog.fillFieldMap()

	return _sysfaceoffineoperationlog
}

type sysfaceoffineoperationlog struct {
	sysfaceoffineoperationlogDo sysfaceoffineoperationlogDo

	ALL              field.Asterisk
	ID               field.String
	CreationTime     field.Time
	CreatorUserID    field.Int64
	OperationType    field.Int64
	OperationItem    field.Int64
	GroupID          field.String
	UserID           field.String
	Result           field.Int64
	ErrorMessage     field.String
	OperationMessage field.String
	Remark           field.String

	fieldMap map[string]field.Expr
}

func (s sysfaceoffineoperationlog) Table(newTableName string) *sysfaceoffineoperationlog {
	s.sysfaceoffineoperationlogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysfaceoffineoperationlog) As(alias string) *sysfaceoffineoperationlog {
	s.sysfaceoffineoperationlogDo.DO = *(s.sysfaceoffineoperationlogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysfaceoffineoperationlog) updateTableName(table string) *sysfaceoffineoperationlog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.OperationType = field.NewInt64(table, "OperationType")
	s.OperationItem = field.NewInt64(table, "OperationItem")
	s.GroupID = field.NewString(table, "GroupId")
	s.UserID = field.NewString(table, "UserId")
	s.Result = field.NewInt64(table, "Result")
	s.ErrorMessage = field.NewString(table, "ErrorMessage")
	s.OperationMessage = field.NewString(table, "OperationMessage")
	s.Remark = field.NewString(table, "Remark")

	s.fillFieldMap()

	return s
}

func (s *sysfaceoffineoperationlog) WithContext(ctx context.Context) ISysfaceoffineoperationlogDo {
	return s.sysfaceoffineoperationlogDo.WithContext(ctx)
}

func (s sysfaceoffineoperationlog) TableName() string {
	return s.sysfaceoffineoperationlogDo.TableName()
}

func (s sysfaceoffineoperationlog) Alias() string { return s.sysfaceoffineoperationlogDo.Alias() }

func (s *sysfaceoffineoperationlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysfaceoffineoperationlog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["OperationType"] = s.OperationType
	s.fieldMap["OperationItem"] = s.OperationItem
	s.fieldMap["GroupId"] = s.GroupID
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["Result"] = s.Result
	s.fieldMap["ErrorMessage"] = s.ErrorMessage
	s.fieldMap["OperationMessage"] = s.OperationMessage
	s.fieldMap["Remark"] = s.Remark
}

func (s sysfaceoffineoperationlog) clone(db *gorm.DB) sysfaceoffineoperationlog {
	s.sysfaceoffineoperationlogDo.ReplaceDB(db)
	return s
}

type sysfaceoffineoperationlogDo struct{ gen.DO }

type ISysfaceoffineoperationlogDo interface {
	gen.SubQuery
	Debug() ISysfaceoffineoperationlogDo
	WithContext(ctx context.Context) ISysfaceoffineoperationlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysfaceoffineoperationlogDo
	Not(conds ...gen.Condition) ISysfaceoffineoperationlogDo
	Or(conds ...gen.Condition) ISysfaceoffineoperationlogDo
	Select(conds ...field.Expr) ISysfaceoffineoperationlogDo
	Where(conds ...gen.Condition) ISysfaceoffineoperationlogDo
	Order(conds ...field.Expr) ISysfaceoffineoperationlogDo
	Distinct(cols ...field.Expr) ISysfaceoffineoperationlogDo
	Omit(cols ...field.Expr) ISysfaceoffineoperationlogDo
	Join(table schema.Tabler, on ...field.Expr) ISysfaceoffineoperationlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceoffineoperationlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceoffineoperationlogDo
	Group(cols ...field.Expr) ISysfaceoffineoperationlogDo
	Having(conds ...gen.Condition) ISysfaceoffineoperationlogDo
	Limit(limit int) ISysfaceoffineoperationlogDo
	Offset(offset int) ISysfaceoffineoperationlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceoffineoperationlogDo
	Unscoped() ISysfaceoffineoperationlogDo
	Create(values ...*model.Sysfaceoffineoperationlog) error
	CreateInBatches(values []*model.Sysfaceoffineoperationlog, batchSize int) error
	Save(values ...*model.Sysfaceoffineoperationlog) error
	First() (*model.Sysfaceoffineoperationlog, error)
	Take() (*model.Sysfaceoffineoperationlog, error)
	Last() (*model.Sysfaceoffineoperationlog, error)
	Find() ([]*model.Sysfaceoffineoperationlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceoffineoperationlog, err error)
	FindInBatches(result *[]*model.Sysfaceoffineoperationlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysfaceoffineoperationlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysfaceoffineoperationlogDo
	Assign(attrs ...field.AssignExpr) ISysfaceoffineoperationlogDo
	Joins(fields ...field.RelationField) ISysfaceoffineoperationlogDo
	Preload(fields ...field.RelationField) ISysfaceoffineoperationlogDo
	FirstOrInit() (*model.Sysfaceoffineoperationlog, error)
	FirstOrCreate() (*model.Sysfaceoffineoperationlog, error)
	FindByPage(offset int, limit int) (result []*model.Sysfaceoffineoperationlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysfaceoffineoperationlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysfaceoffineoperationlogDo) Debug() ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysfaceoffineoperationlogDo) WithContext(ctx context.Context) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysfaceoffineoperationlogDo) ReadDB() ISysfaceoffineoperationlogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysfaceoffineoperationlogDo) WriteDB() ISysfaceoffineoperationlogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysfaceoffineoperationlogDo) Clauses(conds ...clause.Expression) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysfaceoffineoperationlogDo) Returning(value interface{}, columns ...string) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysfaceoffineoperationlogDo) Not(conds ...gen.Condition) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysfaceoffineoperationlogDo) Or(conds ...gen.Condition) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysfaceoffineoperationlogDo) Select(conds ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysfaceoffineoperationlogDo) Where(conds ...gen.Condition) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysfaceoffineoperationlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysfaceoffineoperationlogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysfaceoffineoperationlogDo) Order(conds ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysfaceoffineoperationlogDo) Distinct(cols ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysfaceoffineoperationlogDo) Omit(cols ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysfaceoffineoperationlogDo) Join(table schema.Tabler, on ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysfaceoffineoperationlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysfaceoffineoperationlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysfaceoffineoperationlogDo) Group(cols ...field.Expr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysfaceoffineoperationlogDo) Having(conds ...gen.Condition) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysfaceoffineoperationlogDo) Limit(limit int) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysfaceoffineoperationlogDo) Offset(offset int) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysfaceoffineoperationlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysfaceoffineoperationlogDo) Unscoped() ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysfaceoffineoperationlogDo) Create(values ...*model.Sysfaceoffineoperationlog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysfaceoffineoperationlogDo) CreateInBatches(values []*model.Sysfaceoffineoperationlog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysfaceoffineoperationlogDo) Save(values ...*model.Sysfaceoffineoperationlog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysfaceoffineoperationlogDo) First() (*model.Sysfaceoffineoperationlog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceoffineoperationlog), nil
	}
}

func (s sysfaceoffineoperationlogDo) Take() (*model.Sysfaceoffineoperationlog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceoffineoperationlog), nil
	}
}

func (s sysfaceoffineoperationlogDo) Last() (*model.Sysfaceoffineoperationlog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceoffineoperationlog), nil
	}
}

func (s sysfaceoffineoperationlogDo) Find() ([]*model.Sysfaceoffineoperationlog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysfaceoffineoperationlog), err
}

func (s sysfaceoffineoperationlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceoffineoperationlog, err error) {
	buf := make([]*model.Sysfaceoffineoperationlog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysfaceoffineoperationlogDo) FindInBatches(result *[]*model.Sysfaceoffineoperationlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysfaceoffineoperationlogDo) Attrs(attrs ...field.AssignExpr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysfaceoffineoperationlogDo) Assign(attrs ...field.AssignExpr) ISysfaceoffineoperationlogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysfaceoffineoperationlogDo) Joins(fields ...field.RelationField) ISysfaceoffineoperationlogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysfaceoffineoperationlogDo) Preload(fields ...field.RelationField) ISysfaceoffineoperationlogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysfaceoffineoperationlogDo) FirstOrInit() (*model.Sysfaceoffineoperationlog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceoffineoperationlog), nil
	}
}

func (s sysfaceoffineoperationlogDo) FirstOrCreate() (*model.Sysfaceoffineoperationlog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceoffineoperationlog), nil
	}
}

func (s sysfaceoffineoperationlogDo) FindByPage(offset int, limit int) (result []*model.Sysfaceoffineoperationlog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysfaceoffineoperationlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysfaceoffineoperationlogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysfaceoffineoperationlogDo) Delete(models ...*model.Sysfaceoffineoperationlog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysfaceoffineoperationlogDo) withDO(do gen.Dao) *sysfaceoffineoperationlogDo {
	s.DO = *do.(*gen.DO)
	return s
}
