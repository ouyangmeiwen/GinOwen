// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newApprecommendinfo(db *gorm.DB) apprecommendinfo {
	_apprecommendinfo := apprecommendinfo{}

	_apprecommendinfo.apprecommendinfoDo.UseDB(db)
	_apprecommendinfo.apprecommendinfoDo.UseModel(&model.Apprecommendinfo{})

	tableName := _apprecommendinfo.apprecommendinfoDo.TableName()
	_apprecommendinfo.ALL = field.NewAsterisk(tableName)
	_apprecommendinfo.ID = field.NewString(tableName, "Id")
	_apprecommendinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_apprecommendinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_apprecommendinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_apprecommendinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_apprecommendinfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_apprecommendinfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_apprecommendinfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_apprecommendinfo.TerminalID = field.NewString(tableName, "TerminalId")
	_apprecommendinfo.TerminalCode = field.NewString(tableName, "TerminalCode")
	_apprecommendinfo.TerminalName = field.NewString(tableName, "TerminalName")
	_apprecommendinfo.ISBN = field.NewString(tableName, "ISBN")
	_apprecommendinfo.Title = field.NewString(tableName, "Title")
	_apprecommendinfo.Author = field.NewString(tableName, "Author")
	_apprecommendinfo.Publisher = field.NewString(tableName, "Publisher")
	_apprecommendinfo.Remark = field.NewString(tableName, "Remark")
	_apprecommendinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_apprecommendinfo.fillFieldMap()

	return _apprecommendinfo
}

type apprecommendinfo struct {
	apprecommendinfoDo apprecommendinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TerminalID           field.String
	TerminalCode         field.String
	TerminalName         field.String
	ISBN                 field.String
	Title                field.String
	Author               field.String
	Publisher            field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a apprecommendinfo) Table(newTableName string) *apprecommendinfo {
	a.apprecommendinfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apprecommendinfo) As(alias string) *apprecommendinfo {
	a.apprecommendinfoDo.DO = *(a.apprecommendinfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apprecommendinfo) updateTableName(table string) *apprecommendinfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.TerminalID = field.NewString(table, "TerminalId")
	a.TerminalCode = field.NewString(table, "TerminalCode")
	a.TerminalName = field.NewString(table, "TerminalName")
	a.ISBN = field.NewString(table, "ISBN")
	a.Title = field.NewString(table, "Title")
	a.Author = field.NewString(table, "Author")
	a.Publisher = field.NewString(table, "Publisher")
	a.Remark = field.NewString(table, "Remark")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *apprecommendinfo) WithContext(ctx context.Context) IApprecommendinfoDo {
	return a.apprecommendinfoDo.WithContext(ctx)
}

func (a apprecommendinfo) TableName() string { return a.apprecommendinfoDo.TableName() }

func (a apprecommendinfo) Alias() string { return a.apprecommendinfoDo.Alias() }

func (a *apprecommendinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apprecommendinfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["TerminalId"] = a.TerminalID
	a.fieldMap["TerminalCode"] = a.TerminalCode
	a.fieldMap["TerminalName"] = a.TerminalName
	a.fieldMap["ISBN"] = a.ISBN
	a.fieldMap["Title"] = a.Title
	a.fieldMap["Author"] = a.Author
	a.fieldMap["Publisher"] = a.Publisher
	a.fieldMap["Remark"] = a.Remark
	a.fieldMap["TenantId"] = a.TenantID
}

func (a apprecommendinfo) clone(db *gorm.DB) apprecommendinfo {
	a.apprecommendinfoDo.ReplaceDB(db)
	return a
}

type apprecommendinfoDo struct{ gen.DO }

type IApprecommendinfoDo interface {
	gen.SubQuery
	Debug() IApprecommendinfoDo
	WithContext(ctx context.Context) IApprecommendinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApprecommendinfoDo
	Not(conds ...gen.Condition) IApprecommendinfoDo
	Or(conds ...gen.Condition) IApprecommendinfoDo
	Select(conds ...field.Expr) IApprecommendinfoDo
	Where(conds ...gen.Condition) IApprecommendinfoDo
	Order(conds ...field.Expr) IApprecommendinfoDo
	Distinct(cols ...field.Expr) IApprecommendinfoDo
	Omit(cols ...field.Expr) IApprecommendinfoDo
	Join(table schema.Tabler, on ...field.Expr) IApprecommendinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApprecommendinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApprecommendinfoDo
	Group(cols ...field.Expr) IApprecommendinfoDo
	Having(conds ...gen.Condition) IApprecommendinfoDo
	Limit(limit int) IApprecommendinfoDo
	Offset(offset int) IApprecommendinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApprecommendinfoDo
	Unscoped() IApprecommendinfoDo
	Create(values ...*model.Apprecommendinfo) error
	CreateInBatches(values []*model.Apprecommendinfo, batchSize int) error
	Save(values ...*model.Apprecommendinfo) error
	First() (*model.Apprecommendinfo, error)
	Take() (*model.Apprecommendinfo, error)
	Last() (*model.Apprecommendinfo, error)
	Find() ([]*model.Apprecommendinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apprecommendinfo, err error)
	FindInBatches(result *[]*model.Apprecommendinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Apprecommendinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApprecommendinfoDo
	Assign(attrs ...field.AssignExpr) IApprecommendinfoDo
	Joins(fields ...field.RelationField) IApprecommendinfoDo
	Preload(fields ...field.RelationField) IApprecommendinfoDo
	FirstOrInit() (*model.Apprecommendinfo, error)
	FirstOrCreate() (*model.Apprecommendinfo, error)
	FindByPage(offset int, limit int) (result []*model.Apprecommendinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApprecommendinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a apprecommendinfoDo) Debug() IApprecommendinfoDo {
	return a.withDO(a.DO.Debug())
}

func (a apprecommendinfoDo) WithContext(ctx context.Context) IApprecommendinfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apprecommendinfoDo) ReadDB() IApprecommendinfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a apprecommendinfoDo) WriteDB() IApprecommendinfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a apprecommendinfoDo) Clauses(conds ...clause.Expression) IApprecommendinfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apprecommendinfoDo) Returning(value interface{}, columns ...string) IApprecommendinfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apprecommendinfoDo) Not(conds ...gen.Condition) IApprecommendinfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apprecommendinfoDo) Or(conds ...gen.Condition) IApprecommendinfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apprecommendinfoDo) Select(conds ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apprecommendinfoDo) Where(conds ...gen.Condition) IApprecommendinfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apprecommendinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IApprecommendinfoDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a apprecommendinfoDo) Order(conds ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apprecommendinfoDo) Distinct(cols ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apprecommendinfoDo) Omit(cols ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apprecommendinfoDo) Join(table schema.Tabler, on ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apprecommendinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apprecommendinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apprecommendinfoDo) Group(cols ...field.Expr) IApprecommendinfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apprecommendinfoDo) Having(conds ...gen.Condition) IApprecommendinfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apprecommendinfoDo) Limit(limit int) IApprecommendinfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apprecommendinfoDo) Offset(offset int) IApprecommendinfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apprecommendinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApprecommendinfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apprecommendinfoDo) Unscoped() IApprecommendinfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apprecommendinfoDo) Create(values ...*model.Apprecommendinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apprecommendinfoDo) CreateInBatches(values []*model.Apprecommendinfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apprecommendinfoDo) Save(values ...*model.Apprecommendinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apprecommendinfoDo) First() (*model.Apprecommendinfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apprecommendinfo), nil
	}
}

func (a apprecommendinfoDo) Take() (*model.Apprecommendinfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apprecommendinfo), nil
	}
}

func (a apprecommendinfoDo) Last() (*model.Apprecommendinfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apprecommendinfo), nil
	}
}

func (a apprecommendinfoDo) Find() ([]*model.Apprecommendinfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.Apprecommendinfo), err
}

func (a apprecommendinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apprecommendinfo, err error) {
	buf := make([]*model.Apprecommendinfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apprecommendinfoDo) FindInBatches(result *[]*model.Apprecommendinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apprecommendinfoDo) Attrs(attrs ...field.AssignExpr) IApprecommendinfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apprecommendinfoDo) Assign(attrs ...field.AssignExpr) IApprecommendinfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apprecommendinfoDo) Joins(fields ...field.RelationField) IApprecommendinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apprecommendinfoDo) Preload(fields ...field.RelationField) IApprecommendinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apprecommendinfoDo) FirstOrInit() (*model.Apprecommendinfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apprecommendinfo), nil
	}
}

func (a apprecommendinfoDo) FirstOrCreate() (*model.Apprecommendinfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apprecommendinfo), nil
	}
}

func (a apprecommendinfoDo) FindByPage(offset int, limit int) (result []*model.Apprecommendinfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apprecommendinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apprecommendinfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apprecommendinfoDo) Delete(models ...*model.Apprecommendinfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apprecommendinfoDo) withDO(do gen.Dao) *apprecommendinfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
