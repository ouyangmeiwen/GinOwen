// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibfeedback(db *gorm.DB) libfeedback {
	_libfeedback := libfeedback{}

	_libfeedback.libfeedbackDo.UseDB(db)
	_libfeedback.libfeedbackDo.UseModel(&model.Libfeedback{})

	tableName := _libfeedback.libfeedbackDo.TableName()
	_libfeedback.ALL = field.NewAsterisk(tableName)
	_libfeedback.ID = field.NewString(tableName, "Id")
	_libfeedback.CreationTime = field.NewTime(tableName, "CreationTime")
	_libfeedback.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libfeedback.TerminalID = field.NewString(tableName, "TerminalId")
	_libfeedback.TerminalCode = field.NewString(tableName, "TerminalCode")
	_libfeedback.TerminalName = field.NewString(tableName, "TerminalName")
	_libfeedback.PatronID = field.NewString(tableName, "PatronId")
	_libfeedback.PatronName = field.NewString(tableName, "PatronName")
	_libfeedback.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libfeedback.FeedbackType = field.NewInt64(tableName, "FeedbackType")
	_libfeedback.Grade = field.NewInt64(tableName, "Grade")
	_libfeedback.MessageCode = field.NewInt64(tableName, "MessageCode")
	_libfeedback.Message = field.NewString(tableName, "Message")
	_libfeedback.Contact = field.NewString(tableName, "Contact")
	_libfeedback.Remark = field.NewString(tableName, "Remark")
	_libfeedback.OriginType = field.NewInt64(tableName, "OriginType")
	_libfeedback.TenantID = field.NewInt64(tableName, "TenantId")

	_libfeedback.fillFieldMap()

	return _libfeedback
}

type libfeedback struct {
	libfeedbackDo libfeedbackDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	PatronID      field.String
	PatronName    field.String
	PatronBarcode field.String
	FeedbackType  field.Int64
	Grade         field.Int64
	MessageCode   field.Int64
	Message       field.String
	Contact       field.String
	Remark        field.String
	OriginType    field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (l libfeedback) Table(newTableName string) *libfeedback {
	l.libfeedbackDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libfeedback) As(alias string) *libfeedback {
	l.libfeedbackDo.DO = *(l.libfeedbackDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libfeedback) updateTableName(table string) *libfeedback {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronName = field.NewString(table, "PatronName")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.FeedbackType = field.NewInt64(table, "FeedbackType")
	l.Grade = field.NewInt64(table, "Grade")
	l.MessageCode = field.NewInt64(table, "MessageCode")
	l.Message = field.NewString(table, "Message")
	l.Contact = field.NewString(table, "Contact")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libfeedback) WithContext(ctx context.Context) ILibfeedbackDo {
	return l.libfeedbackDo.WithContext(ctx)
}

func (l libfeedback) TableName() string { return l.libfeedbackDo.TableName() }

func (l libfeedback) Alias() string { return l.libfeedbackDo.Alias() }

func (l *libfeedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libfeedback) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["FeedbackType"] = l.FeedbackType
	l.fieldMap["Grade"] = l.Grade
	l.fieldMap["MessageCode"] = l.MessageCode
	l.fieldMap["Message"] = l.Message
	l.fieldMap["Contact"] = l.Contact
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libfeedback) clone(db *gorm.DB) libfeedback {
	l.libfeedbackDo.ReplaceDB(db)
	return l
}

type libfeedbackDo struct{ gen.DO }

type ILibfeedbackDo interface {
	gen.SubQuery
	Debug() ILibfeedbackDo
	WithContext(ctx context.Context) ILibfeedbackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibfeedbackDo
	Not(conds ...gen.Condition) ILibfeedbackDo
	Or(conds ...gen.Condition) ILibfeedbackDo
	Select(conds ...field.Expr) ILibfeedbackDo
	Where(conds ...gen.Condition) ILibfeedbackDo
	Order(conds ...field.Expr) ILibfeedbackDo
	Distinct(cols ...field.Expr) ILibfeedbackDo
	Omit(cols ...field.Expr) ILibfeedbackDo
	Join(table schema.Tabler, on ...field.Expr) ILibfeedbackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibfeedbackDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibfeedbackDo
	Group(cols ...field.Expr) ILibfeedbackDo
	Having(conds ...gen.Condition) ILibfeedbackDo
	Limit(limit int) ILibfeedbackDo
	Offset(offset int) ILibfeedbackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibfeedbackDo
	Unscoped() ILibfeedbackDo
	Create(values ...*model.Libfeedback) error
	CreateInBatches(values []*model.Libfeedback, batchSize int) error
	Save(values ...*model.Libfeedback) error
	First() (*model.Libfeedback, error)
	Take() (*model.Libfeedback, error)
	Last() (*model.Libfeedback, error)
	Find() ([]*model.Libfeedback, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libfeedback, err error)
	FindInBatches(result *[]*model.Libfeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libfeedback) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibfeedbackDo
	Assign(attrs ...field.AssignExpr) ILibfeedbackDo
	Joins(fields ...field.RelationField) ILibfeedbackDo
	Preload(fields ...field.RelationField) ILibfeedbackDo
	FirstOrInit() (*model.Libfeedback, error)
	FirstOrCreate() (*model.Libfeedback, error)
	FindByPage(offset int, limit int) (result []*model.Libfeedback, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibfeedbackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libfeedbackDo) Debug() ILibfeedbackDo {
	return l.withDO(l.DO.Debug())
}

func (l libfeedbackDo) WithContext(ctx context.Context) ILibfeedbackDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libfeedbackDo) ReadDB() ILibfeedbackDo {
	return l.Clauses(dbresolver.Read)
}

func (l libfeedbackDo) WriteDB() ILibfeedbackDo {
	return l.Clauses(dbresolver.Write)
}

func (l libfeedbackDo) Clauses(conds ...clause.Expression) ILibfeedbackDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libfeedbackDo) Returning(value interface{}, columns ...string) ILibfeedbackDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libfeedbackDo) Not(conds ...gen.Condition) ILibfeedbackDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libfeedbackDo) Or(conds ...gen.Condition) ILibfeedbackDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libfeedbackDo) Select(conds ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libfeedbackDo) Where(conds ...gen.Condition) ILibfeedbackDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libfeedbackDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibfeedbackDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libfeedbackDo) Order(conds ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libfeedbackDo) Distinct(cols ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libfeedbackDo) Omit(cols ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libfeedbackDo) Join(table schema.Tabler, on ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libfeedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libfeedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libfeedbackDo) Group(cols ...field.Expr) ILibfeedbackDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libfeedbackDo) Having(conds ...gen.Condition) ILibfeedbackDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libfeedbackDo) Limit(limit int) ILibfeedbackDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libfeedbackDo) Offset(offset int) ILibfeedbackDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libfeedbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibfeedbackDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libfeedbackDo) Unscoped() ILibfeedbackDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libfeedbackDo) Create(values ...*model.Libfeedback) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libfeedbackDo) CreateInBatches(values []*model.Libfeedback, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libfeedbackDo) Save(values ...*model.Libfeedback) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libfeedbackDo) First() (*model.Libfeedback, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeedback), nil
	}
}

func (l libfeedbackDo) Take() (*model.Libfeedback, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeedback), nil
	}
}

func (l libfeedbackDo) Last() (*model.Libfeedback, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeedback), nil
	}
}

func (l libfeedbackDo) Find() ([]*model.Libfeedback, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libfeedback), err
}

func (l libfeedbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libfeedback, err error) {
	buf := make([]*model.Libfeedback, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libfeedbackDo) FindInBatches(result *[]*model.Libfeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libfeedbackDo) Attrs(attrs ...field.AssignExpr) ILibfeedbackDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libfeedbackDo) Assign(attrs ...field.AssignExpr) ILibfeedbackDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libfeedbackDo) Joins(fields ...field.RelationField) ILibfeedbackDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libfeedbackDo) Preload(fields ...field.RelationField) ILibfeedbackDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libfeedbackDo) FirstOrInit() (*model.Libfeedback, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeedback), nil
	}
}

func (l libfeedbackDo) FirstOrCreate() (*model.Libfeedback, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeedback), nil
	}
}

func (l libfeedbackDo) FindByPage(offset int, limit int) (result []*model.Libfeedback, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libfeedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libfeedbackDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libfeedbackDo) Delete(models ...*model.Libfeedback) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libfeedbackDo) withDO(do gen.Dao) *libfeedbackDo {
	l.DO = *do.(*gen.DO)
	return l
}
