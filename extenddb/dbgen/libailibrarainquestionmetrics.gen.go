// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibailibrarainquestionmetric(db *gorm.DB) libailibrarainquestionmetric {
	_libailibrarainquestionmetric := libailibrarainquestionmetric{}

	_libailibrarainquestionmetric.libailibrarainquestionmetricDo.UseDB(db)
	_libailibrarainquestionmetric.libailibrarainquestionmetricDo.UseModel(&model.Libailibrarainquestionmetric{})

	tableName := _libailibrarainquestionmetric.libailibrarainquestionmetricDo.TableName()
	_libailibrarainquestionmetric.ALL = field.NewAsterisk(tableName)
	_libailibrarainquestionmetric.ID = field.NewInt64(tableName, "Id")
	_libailibrarainquestionmetric.Date = field.NewTime(tableName, "Date")
	_libailibrarainquestionmetric.SessionMetricsID = field.NewInt64(tableName, "SessionMetricsId")
	_libailibrarainquestionmetric.Classification = field.NewInt64(tableName, "Classification")
	_libailibrarainquestionmetric.Count = field.NewInt64(tableName, "Count")
	_libailibrarainquestionmetric.TenantID = field.NewInt64(tableName, "TenantId")
	_libailibrarainquestionmetric.DeviceID = field.NewString(tableName, "DeviceId")

	_libailibrarainquestionmetric.fillFieldMap()

	return _libailibrarainquestionmetric
}

type libailibrarainquestionmetric struct {
	libailibrarainquestionmetricDo libailibrarainquestionmetricDo

	ALL              field.Asterisk
	ID               field.Int64
	Date             field.Time
	SessionMetricsID field.Int64
	Classification   field.Int64
	Count            field.Int64
	TenantID         field.Int64
	DeviceID         field.String

	fieldMap map[string]field.Expr
}

func (l libailibrarainquestionmetric) Table(newTableName string) *libailibrarainquestionmetric {
	l.libailibrarainquestionmetricDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libailibrarainquestionmetric) As(alias string) *libailibrarainquestionmetric {
	l.libailibrarainquestionmetricDo.DO = *(l.libailibrarainquestionmetricDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libailibrarainquestionmetric) updateTableName(table string) *libailibrarainquestionmetric {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "Id")
	l.Date = field.NewTime(table, "Date")
	l.SessionMetricsID = field.NewInt64(table, "SessionMetricsId")
	l.Classification = field.NewInt64(table, "Classification")
	l.Count = field.NewInt64(table, "Count")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.DeviceID = field.NewString(table, "DeviceId")

	l.fillFieldMap()

	return l
}

func (l *libailibrarainquestionmetric) WithContext(ctx context.Context) ILibailibrarainquestionmetricDo {
	return l.libailibrarainquestionmetricDo.WithContext(ctx)
}

func (l libailibrarainquestionmetric) TableName() string {
	return l.libailibrarainquestionmetricDo.TableName()
}

func (l libailibrarainquestionmetric) Alias() string { return l.libailibrarainquestionmetricDo.Alias() }

func (l *libailibrarainquestionmetric) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libailibrarainquestionmetric) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["Date"] = l.Date
	l.fieldMap["SessionMetricsId"] = l.SessionMetricsID
	l.fieldMap["Classification"] = l.Classification
	l.fieldMap["Count"] = l.Count
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["DeviceId"] = l.DeviceID
}

func (l libailibrarainquestionmetric) clone(db *gorm.DB) libailibrarainquestionmetric {
	l.libailibrarainquestionmetricDo.ReplaceDB(db)
	return l
}

type libailibrarainquestionmetricDo struct{ gen.DO }

type ILibailibrarainquestionmetricDo interface {
	gen.SubQuery
	Debug() ILibailibrarainquestionmetricDo
	WithContext(ctx context.Context) ILibailibrarainquestionmetricDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibailibrarainquestionmetricDo
	Not(conds ...gen.Condition) ILibailibrarainquestionmetricDo
	Or(conds ...gen.Condition) ILibailibrarainquestionmetricDo
	Select(conds ...field.Expr) ILibailibrarainquestionmetricDo
	Where(conds ...gen.Condition) ILibailibrarainquestionmetricDo
	Order(conds ...field.Expr) ILibailibrarainquestionmetricDo
	Distinct(cols ...field.Expr) ILibailibrarainquestionmetricDo
	Omit(cols ...field.Expr) ILibailibrarainquestionmetricDo
	Join(table schema.Tabler, on ...field.Expr) ILibailibrarainquestionmetricDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainquestionmetricDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainquestionmetricDo
	Group(cols ...field.Expr) ILibailibrarainquestionmetricDo
	Having(conds ...gen.Condition) ILibailibrarainquestionmetricDo
	Limit(limit int) ILibailibrarainquestionmetricDo
	Offset(offset int) ILibailibrarainquestionmetricDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainquestionmetricDo
	Unscoped() ILibailibrarainquestionmetricDo
	Create(values ...*model.Libailibrarainquestionmetric) error
	CreateInBatches(values []*model.Libailibrarainquestionmetric, batchSize int) error
	Save(values ...*model.Libailibrarainquestionmetric) error
	First() (*model.Libailibrarainquestionmetric, error)
	Take() (*model.Libailibrarainquestionmetric, error)
	Last() (*model.Libailibrarainquestionmetric, error)
	Find() ([]*model.Libailibrarainquestionmetric, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainquestionmetric, err error)
	FindInBatches(result *[]*model.Libailibrarainquestionmetric, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libailibrarainquestionmetric) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibailibrarainquestionmetricDo
	Assign(attrs ...field.AssignExpr) ILibailibrarainquestionmetricDo
	Joins(fields ...field.RelationField) ILibailibrarainquestionmetricDo
	Preload(fields ...field.RelationField) ILibailibrarainquestionmetricDo
	FirstOrInit() (*model.Libailibrarainquestionmetric, error)
	FirstOrCreate() (*model.Libailibrarainquestionmetric, error)
	FindByPage(offset int, limit int) (result []*model.Libailibrarainquestionmetric, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibailibrarainquestionmetricDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libailibrarainquestionmetricDo) Debug() ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Debug())
}

func (l libailibrarainquestionmetricDo) WithContext(ctx context.Context) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libailibrarainquestionmetricDo) ReadDB() ILibailibrarainquestionmetricDo {
	return l.Clauses(dbresolver.Read)
}

func (l libailibrarainquestionmetricDo) WriteDB() ILibailibrarainquestionmetricDo {
	return l.Clauses(dbresolver.Write)
}

func (l libailibrarainquestionmetricDo) Clauses(conds ...clause.Expression) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libailibrarainquestionmetricDo) Returning(value interface{}, columns ...string) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libailibrarainquestionmetricDo) Not(conds ...gen.Condition) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libailibrarainquestionmetricDo) Or(conds ...gen.Condition) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libailibrarainquestionmetricDo) Select(conds ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libailibrarainquestionmetricDo) Where(conds ...gen.Condition) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libailibrarainquestionmetricDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibailibrarainquestionmetricDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libailibrarainquestionmetricDo) Order(conds ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libailibrarainquestionmetricDo) Distinct(cols ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libailibrarainquestionmetricDo) Omit(cols ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libailibrarainquestionmetricDo) Join(table schema.Tabler, on ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libailibrarainquestionmetricDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libailibrarainquestionmetricDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libailibrarainquestionmetricDo) Group(cols ...field.Expr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libailibrarainquestionmetricDo) Having(conds ...gen.Condition) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libailibrarainquestionmetricDo) Limit(limit int) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libailibrarainquestionmetricDo) Offset(offset int) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libailibrarainquestionmetricDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libailibrarainquestionmetricDo) Unscoped() ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libailibrarainquestionmetricDo) Create(values ...*model.Libailibrarainquestionmetric) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libailibrarainquestionmetricDo) CreateInBatches(values []*model.Libailibrarainquestionmetric, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libailibrarainquestionmetricDo) Save(values ...*model.Libailibrarainquestionmetric) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libailibrarainquestionmetricDo) First() (*model.Libailibrarainquestionmetric, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainquestionmetric), nil
	}
}

func (l libailibrarainquestionmetricDo) Take() (*model.Libailibrarainquestionmetric, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainquestionmetric), nil
	}
}

func (l libailibrarainquestionmetricDo) Last() (*model.Libailibrarainquestionmetric, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainquestionmetric), nil
	}
}

func (l libailibrarainquestionmetricDo) Find() ([]*model.Libailibrarainquestionmetric, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libailibrarainquestionmetric), err
}

func (l libailibrarainquestionmetricDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainquestionmetric, err error) {
	buf := make([]*model.Libailibrarainquestionmetric, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libailibrarainquestionmetricDo) FindInBatches(result *[]*model.Libailibrarainquestionmetric, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libailibrarainquestionmetricDo) Attrs(attrs ...field.AssignExpr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libailibrarainquestionmetricDo) Assign(attrs ...field.AssignExpr) ILibailibrarainquestionmetricDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libailibrarainquestionmetricDo) Joins(fields ...field.RelationField) ILibailibrarainquestionmetricDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libailibrarainquestionmetricDo) Preload(fields ...field.RelationField) ILibailibrarainquestionmetricDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libailibrarainquestionmetricDo) FirstOrInit() (*model.Libailibrarainquestionmetric, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainquestionmetric), nil
	}
}

func (l libailibrarainquestionmetricDo) FirstOrCreate() (*model.Libailibrarainquestionmetric, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainquestionmetric), nil
	}
}

func (l libailibrarainquestionmetricDo) FindByPage(offset int, limit int) (result []*model.Libailibrarainquestionmetric, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libailibrarainquestionmetricDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libailibrarainquestionmetricDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libailibrarainquestionmetricDo) Delete(models ...*model.Libailibrarainquestionmetric) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libailibrarainquestionmetricDo) withDO(do gen.Dao) *libailibrarainquestionmetricDo {
	l.DO = *do.(*gen.DO)
	return l
}
