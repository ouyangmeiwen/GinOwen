// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSyslocation(db *gorm.DB) syslocation {
	_syslocation := syslocation{}

	_syslocation.syslocationDo.UseDB(db)
	_syslocation.syslocationDo.UseModel(&model.Syslocation{})

	tableName := _syslocation.syslocationDo.TableName()
	_syslocation.ALL = field.NewAsterisk(tableName)
	_syslocation.ID = field.NewString(tableName, "Id")
	_syslocation.CreationTime = field.NewTime(tableName, "CreationTime")
	_syslocation.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_syslocation.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_syslocation.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_syslocation.IsDeleted = field.NewField(tableName, "IsDeleted")
	_syslocation.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_syslocation.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_syslocation.Code = field.NewString(tableName, "Code")
	_syslocation.Name = field.NewString(tableName, "Name")
	_syslocation.IsEnable = field.NewField(tableName, "IsEnable")
	_syslocation.IsDefault = field.NewField(tableName, "IsDefault")
	_syslocation.LocationType = field.NewInt64(tableName, "LocationType")
	_syslocation.ParentID = field.NewString(tableName, "ParentId")
	_syslocation.Longitude = field.NewFloat64(tableName, "Longitude")
	_syslocation.Latitude = field.NewFloat64(tableName, "Latitude")
	_syslocation.Province = field.NewString(tableName, "Province")
	_syslocation.City = field.NewString(tableName, "City")
	_syslocation.District = field.NewString(tableName, "District")
	_syslocation.Street = field.NewString(tableName, "Street")
	_syslocation.Address = field.NewString(tableName, "Address")
	_syslocation.Remark = field.NewString(tableName, "Remark")
	_syslocation.TenantID = field.NewInt64(tableName, "TenantId")
	_syslocation.IsForceSort = field.NewField(tableName, "IsForceSort")
	_syslocation.CatalogSort = field.NewString(tableName, "CatalogSort")
	_syslocation.SortCode = field.NewInt64(tableName, "SortCode")

	_syslocation.fillFieldMap()

	return _syslocation
}

type syslocation struct {
	syslocationDo syslocationDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	IsEnable             field.Field
	IsDefault            field.Field
	LocationType         field.Int64
	ParentID             field.String
	Longitude            field.Float64
	Latitude             field.Float64
	Province             field.String
	City                 field.String
	District             field.String
	Street               field.String
	Address              field.String
	Remark               field.String
	TenantID             field.Int64
	IsForceSort          field.Field
	CatalogSort          field.String
	SortCode             field.Int64

	fieldMap map[string]field.Expr
}

func (s syslocation) Table(newTableName string) *syslocation {
	s.syslocationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syslocation) As(alias string) *syslocation {
	s.syslocationDo.DO = *(s.syslocationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syslocation) updateTableName(table string) *syslocation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Code = field.NewString(table, "Code")
	s.Name = field.NewString(table, "Name")
	s.IsEnable = field.NewField(table, "IsEnable")
	s.IsDefault = field.NewField(table, "IsDefault")
	s.LocationType = field.NewInt64(table, "LocationType")
	s.ParentID = field.NewString(table, "ParentId")
	s.Longitude = field.NewFloat64(table, "Longitude")
	s.Latitude = field.NewFloat64(table, "Latitude")
	s.Province = field.NewString(table, "Province")
	s.City = field.NewString(table, "City")
	s.District = field.NewString(table, "District")
	s.Street = field.NewString(table, "Street")
	s.Address = field.NewString(table, "Address")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.IsForceSort = field.NewField(table, "IsForceSort")
	s.CatalogSort = field.NewString(table, "CatalogSort")
	s.SortCode = field.NewInt64(table, "SortCode")

	s.fillFieldMap()

	return s
}

func (s *syslocation) WithContext(ctx context.Context) ISyslocationDo {
	return s.syslocationDo.WithContext(ctx)
}

func (s syslocation) TableName() string { return s.syslocationDo.TableName() }

func (s syslocation) Alias() string { return s.syslocationDo.Alias() }

func (s *syslocation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syslocation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 26)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Code"] = s.Code
	s.fieldMap["Name"] = s.Name
	s.fieldMap["IsEnable"] = s.IsEnable
	s.fieldMap["IsDefault"] = s.IsDefault
	s.fieldMap["LocationType"] = s.LocationType
	s.fieldMap["ParentId"] = s.ParentID
	s.fieldMap["Longitude"] = s.Longitude
	s.fieldMap["Latitude"] = s.Latitude
	s.fieldMap["Province"] = s.Province
	s.fieldMap["City"] = s.City
	s.fieldMap["District"] = s.District
	s.fieldMap["Street"] = s.Street
	s.fieldMap["Address"] = s.Address
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["IsForceSort"] = s.IsForceSort
	s.fieldMap["CatalogSort"] = s.CatalogSort
	s.fieldMap["SortCode"] = s.SortCode
}

func (s syslocation) clone(db *gorm.DB) syslocation {
	s.syslocationDo.ReplaceDB(db)
	return s
}

type syslocationDo struct{ gen.DO }

type ISyslocationDo interface {
	gen.SubQuery
	Debug() ISyslocationDo
	WithContext(ctx context.Context) ISyslocationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyslocationDo
	Not(conds ...gen.Condition) ISyslocationDo
	Or(conds ...gen.Condition) ISyslocationDo
	Select(conds ...field.Expr) ISyslocationDo
	Where(conds ...gen.Condition) ISyslocationDo
	Order(conds ...field.Expr) ISyslocationDo
	Distinct(cols ...field.Expr) ISyslocationDo
	Omit(cols ...field.Expr) ISyslocationDo
	Join(table schema.Tabler, on ...field.Expr) ISyslocationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyslocationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyslocationDo
	Group(cols ...field.Expr) ISyslocationDo
	Having(conds ...gen.Condition) ISyslocationDo
	Limit(limit int) ISyslocationDo
	Offset(offset int) ISyslocationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyslocationDo
	Unscoped() ISyslocationDo
	Create(values ...*model.Syslocation) error
	CreateInBatches(values []*model.Syslocation, batchSize int) error
	Save(values ...*model.Syslocation) error
	First() (*model.Syslocation, error)
	Take() (*model.Syslocation, error)
	Last() (*model.Syslocation, error)
	Find() ([]*model.Syslocation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syslocation, err error)
	FindInBatches(result *[]*model.Syslocation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syslocation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyslocationDo
	Assign(attrs ...field.AssignExpr) ISyslocationDo
	Joins(fields ...field.RelationField) ISyslocationDo
	Preload(fields ...field.RelationField) ISyslocationDo
	FirstOrInit() (*model.Syslocation, error)
	FirstOrCreate() (*model.Syslocation, error)
	FindByPage(offset int, limit int) (result []*model.Syslocation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyslocationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syslocationDo) Debug() ISyslocationDo {
	return s.withDO(s.DO.Debug())
}

func (s syslocationDo) WithContext(ctx context.Context) ISyslocationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syslocationDo) ReadDB() ISyslocationDo {
	return s.Clauses(dbresolver.Read)
}

func (s syslocationDo) WriteDB() ISyslocationDo {
	return s.Clauses(dbresolver.Write)
}

func (s syslocationDo) Clauses(conds ...clause.Expression) ISyslocationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syslocationDo) Returning(value interface{}, columns ...string) ISyslocationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syslocationDo) Not(conds ...gen.Condition) ISyslocationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syslocationDo) Or(conds ...gen.Condition) ISyslocationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syslocationDo) Select(conds ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syslocationDo) Where(conds ...gen.Condition) ISyslocationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syslocationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyslocationDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syslocationDo) Order(conds ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syslocationDo) Distinct(cols ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syslocationDo) Omit(cols ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syslocationDo) Join(table schema.Tabler, on ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syslocationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syslocationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syslocationDo) Group(cols ...field.Expr) ISyslocationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syslocationDo) Having(conds ...gen.Condition) ISyslocationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syslocationDo) Limit(limit int) ISyslocationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syslocationDo) Offset(offset int) ISyslocationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syslocationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyslocationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syslocationDo) Unscoped() ISyslocationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syslocationDo) Create(values ...*model.Syslocation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syslocationDo) CreateInBatches(values []*model.Syslocation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syslocationDo) Save(values ...*model.Syslocation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syslocationDo) First() (*model.Syslocation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslocation), nil
	}
}

func (s syslocationDo) Take() (*model.Syslocation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslocation), nil
	}
}

func (s syslocationDo) Last() (*model.Syslocation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslocation), nil
	}
}

func (s syslocationDo) Find() ([]*model.Syslocation, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syslocation), err
}

func (s syslocationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syslocation, err error) {
	buf := make([]*model.Syslocation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syslocationDo) FindInBatches(result *[]*model.Syslocation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syslocationDo) Attrs(attrs ...field.AssignExpr) ISyslocationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syslocationDo) Assign(attrs ...field.AssignExpr) ISyslocationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syslocationDo) Joins(fields ...field.RelationField) ISyslocationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syslocationDo) Preload(fields ...field.RelationField) ISyslocationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syslocationDo) FirstOrInit() (*model.Syslocation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslocation), nil
	}
}

func (s syslocationDo) FirstOrCreate() (*model.Syslocation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslocation), nil
	}
}

func (s syslocationDo) FindByPage(offset int, limit int) (result []*model.Syslocation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syslocationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syslocationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syslocationDo) Delete(models ...*model.Syslocation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syslocationDo) withDO(do gen.Dao) *syslocationDo {
	s.DO = *do.(*gen.DO)
	return s
}
