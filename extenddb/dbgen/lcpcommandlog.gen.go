// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpcommandlog(db *gorm.DB) lcpcommandlog {
	_lcpcommandlog := lcpcommandlog{}

	_lcpcommandlog.lcpcommandlogDo.UseDB(db)
	_lcpcommandlog.lcpcommandlogDo.UseModel(&model.Lcpcommandlog{})

	tableName := _lcpcommandlog.lcpcommandlogDo.TableName()
	_lcpcommandlog.ALL = field.NewAsterisk(tableName)
	_lcpcommandlog.ID = field.NewString(tableName, "Id")
	_lcpcommandlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpcommandlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpcommandlog.TargetID = field.NewString(tableName, "TargetId")
	_lcpcommandlog.TargetCode = field.NewString(tableName, "TargetCode")
	_lcpcommandlog.TargetName = field.NewString(tableName, "TargetName")
	_lcpcommandlog.Command = field.NewInt64(tableName, "Command")
	_lcpcommandlog.CommandLogType = field.NewInt64(tableName, "CommandLogType")
	_lcpcommandlog.CommandData = field.NewString(tableName, "CommandData")
	_lcpcommandlog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpcommandlog.Remark = field.NewString(tableName, "Remark")
	_lcpcommandlog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpcommandlog.fillFieldMap()

	return _lcpcommandlog
}

type lcpcommandlog struct {
	lcpcommandlogDo lcpcommandlogDo

	ALL            field.Asterisk
	ID             field.String
	CreationTime   field.Time
	CreatorUserID  field.Int64
	TargetID       field.String
	TargetCode     field.String
	TargetName     field.String
	Command        field.Int64
	CommandLogType field.Int64
	CommandData    field.String
	ErrorMessage   field.String
	Remark         field.String
	TenantID       field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpcommandlog) Table(newTableName string) *lcpcommandlog {
	l.lcpcommandlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpcommandlog) As(alias string) *lcpcommandlog {
	l.lcpcommandlogDo.DO = *(l.lcpcommandlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpcommandlog) updateTableName(table string) *lcpcommandlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TargetID = field.NewString(table, "TargetId")
	l.TargetCode = field.NewString(table, "TargetCode")
	l.TargetName = field.NewString(table, "TargetName")
	l.Command = field.NewInt64(table, "Command")
	l.CommandLogType = field.NewInt64(table, "CommandLogType")
	l.CommandData = field.NewString(table, "CommandData")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpcommandlog) WithContext(ctx context.Context) ILcpcommandlogDo {
	return l.lcpcommandlogDo.WithContext(ctx)
}

func (l lcpcommandlog) TableName() string { return l.lcpcommandlogDo.TableName() }

func (l lcpcommandlog) Alias() string { return l.lcpcommandlogDo.Alias() }

func (l *lcpcommandlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpcommandlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TargetId"] = l.TargetID
	l.fieldMap["TargetCode"] = l.TargetCode
	l.fieldMap["TargetName"] = l.TargetName
	l.fieldMap["Command"] = l.Command
	l.fieldMap["CommandLogType"] = l.CommandLogType
	l.fieldMap["CommandData"] = l.CommandData
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpcommandlog) clone(db *gorm.DB) lcpcommandlog {
	l.lcpcommandlogDo.ReplaceDB(db)
	return l
}

type lcpcommandlogDo struct{ gen.DO }

type ILcpcommandlogDo interface {
	gen.SubQuery
	Debug() ILcpcommandlogDo
	WithContext(ctx context.Context) ILcpcommandlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpcommandlogDo
	Not(conds ...gen.Condition) ILcpcommandlogDo
	Or(conds ...gen.Condition) ILcpcommandlogDo
	Select(conds ...field.Expr) ILcpcommandlogDo
	Where(conds ...gen.Condition) ILcpcommandlogDo
	Order(conds ...field.Expr) ILcpcommandlogDo
	Distinct(cols ...field.Expr) ILcpcommandlogDo
	Omit(cols ...field.Expr) ILcpcommandlogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpcommandlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpcommandlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpcommandlogDo
	Group(cols ...field.Expr) ILcpcommandlogDo
	Having(conds ...gen.Condition) ILcpcommandlogDo
	Limit(limit int) ILcpcommandlogDo
	Offset(offset int) ILcpcommandlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpcommandlogDo
	Unscoped() ILcpcommandlogDo
	Create(values ...*model.Lcpcommandlog) error
	CreateInBatches(values []*model.Lcpcommandlog, batchSize int) error
	Save(values ...*model.Lcpcommandlog) error
	First() (*model.Lcpcommandlog, error)
	Take() (*model.Lcpcommandlog, error)
	Last() (*model.Lcpcommandlog, error)
	Find() ([]*model.Lcpcommandlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpcommandlog, err error)
	FindInBatches(result *[]*model.Lcpcommandlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpcommandlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpcommandlogDo
	Assign(attrs ...field.AssignExpr) ILcpcommandlogDo
	Joins(fields ...field.RelationField) ILcpcommandlogDo
	Preload(fields ...field.RelationField) ILcpcommandlogDo
	FirstOrInit() (*model.Lcpcommandlog, error)
	FirstOrCreate() (*model.Lcpcommandlog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpcommandlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpcommandlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpcommandlogDo) Debug() ILcpcommandlogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpcommandlogDo) WithContext(ctx context.Context) ILcpcommandlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpcommandlogDo) ReadDB() ILcpcommandlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpcommandlogDo) WriteDB() ILcpcommandlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpcommandlogDo) Clauses(conds ...clause.Expression) ILcpcommandlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpcommandlogDo) Returning(value interface{}, columns ...string) ILcpcommandlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpcommandlogDo) Not(conds ...gen.Condition) ILcpcommandlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpcommandlogDo) Or(conds ...gen.Condition) ILcpcommandlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpcommandlogDo) Select(conds ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpcommandlogDo) Where(conds ...gen.Condition) ILcpcommandlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpcommandlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpcommandlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpcommandlogDo) Order(conds ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpcommandlogDo) Distinct(cols ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpcommandlogDo) Omit(cols ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpcommandlogDo) Join(table schema.Tabler, on ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpcommandlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpcommandlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpcommandlogDo) Group(cols ...field.Expr) ILcpcommandlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpcommandlogDo) Having(conds ...gen.Condition) ILcpcommandlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpcommandlogDo) Limit(limit int) ILcpcommandlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpcommandlogDo) Offset(offset int) ILcpcommandlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpcommandlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpcommandlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpcommandlogDo) Unscoped() ILcpcommandlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpcommandlogDo) Create(values ...*model.Lcpcommandlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpcommandlogDo) CreateInBatches(values []*model.Lcpcommandlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpcommandlogDo) Save(values ...*model.Lcpcommandlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpcommandlogDo) First() (*model.Lcpcommandlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpcommandlog), nil
	}
}

func (l lcpcommandlogDo) Take() (*model.Lcpcommandlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpcommandlog), nil
	}
}

func (l lcpcommandlogDo) Last() (*model.Lcpcommandlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpcommandlog), nil
	}
}

func (l lcpcommandlogDo) Find() ([]*model.Lcpcommandlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpcommandlog), err
}

func (l lcpcommandlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpcommandlog, err error) {
	buf := make([]*model.Lcpcommandlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpcommandlogDo) FindInBatches(result *[]*model.Lcpcommandlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpcommandlogDo) Attrs(attrs ...field.AssignExpr) ILcpcommandlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpcommandlogDo) Assign(attrs ...field.AssignExpr) ILcpcommandlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpcommandlogDo) Joins(fields ...field.RelationField) ILcpcommandlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpcommandlogDo) Preload(fields ...field.RelationField) ILcpcommandlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpcommandlogDo) FirstOrInit() (*model.Lcpcommandlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpcommandlog), nil
	}
}

func (l lcpcommandlogDo) FirstOrCreate() (*model.Lcpcommandlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpcommandlog), nil
	}
}

func (l lcpcommandlogDo) FindByPage(offset int, limit int) (result []*model.Lcpcommandlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpcommandlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpcommandlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpcommandlogDo) Delete(models ...*model.Lcpcommandlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpcommandlogDo) withDO(do gen.Dao) *lcpcommandlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
