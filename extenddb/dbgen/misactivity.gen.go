// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newMisactivity(db *gorm.DB) misactivity {
	_misactivity := misactivity{}

	_misactivity.misactivityDo.UseDB(db)
	_misactivity.misactivityDo.UseModel(&model.Misactivity{})

	tableName := _misactivity.misactivityDo.TableName()
	_misactivity.ALL = field.NewAsterisk(tableName)
	_misactivity.ID = field.NewString(tableName, "Id")
	_misactivity.CreationTime = field.NewTime(tableName, "CreationTime")
	_misactivity.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_misactivity.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_misactivity.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_misactivity.IsDeleted = field.NewField(tableName, "IsDeleted")
	_misactivity.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_misactivity.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_misactivity.Subject = field.NewString(tableName, "Subject")
	_misactivity.BeginTime = field.NewTime(tableName, "BeginTime")
	_misactivity.EndTime = field.NewTime(tableName, "EndTime")
	_misactivity.Address = field.NewString(tableName, "Address")
	_misactivity.Crowd = field.NewString(tableName, "Crowd")
	_misactivity.SortCode = field.NewInt64(tableName, "SortCode")
	_misactivity.InformationStatus = field.NewInt64(tableName, "InformationStatus")
	_misactivity.Remark = field.NewString(tableName, "Remark")
	_misactivity.TenantID = field.NewInt64(tableName, "TenantId")
	_misactivity.AttachmentID = field.NewString(tableName, "AttachmentId")
	_misactivity.MediaType = field.NewInt64(tableName, "MediaType")

	_misactivity.fillFieldMap()

	return _misactivity
}

type misactivity struct {
	misactivityDo misactivityDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Subject              field.String
	BeginTime            field.Time
	EndTime              field.Time
	Address              field.String
	Crowd                field.String
	SortCode             field.Int64
	InformationStatus    field.Int64
	Remark               field.String
	TenantID             field.Int64
	AttachmentID         field.String
	MediaType            field.Int64

	fieldMap map[string]field.Expr
}

func (m misactivity) Table(newTableName string) *misactivity {
	m.misactivityDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m misactivity) As(alias string) *misactivity {
	m.misactivityDo.DO = *(m.misactivityDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *misactivity) updateTableName(table string) *misactivity {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "Id")
	m.CreationTime = field.NewTime(table, "CreationTime")
	m.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	m.LastModificationTime = field.NewTime(table, "LastModificationTime")
	m.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	m.IsDeleted = field.NewField(table, "IsDeleted")
	m.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	m.DeletionTime = field.NewTime(table, "DeletionTime")
	m.Subject = field.NewString(table, "Subject")
	m.BeginTime = field.NewTime(table, "BeginTime")
	m.EndTime = field.NewTime(table, "EndTime")
	m.Address = field.NewString(table, "Address")
	m.Crowd = field.NewString(table, "Crowd")
	m.SortCode = field.NewInt64(table, "SortCode")
	m.InformationStatus = field.NewInt64(table, "InformationStatus")
	m.Remark = field.NewString(table, "Remark")
	m.TenantID = field.NewInt64(table, "TenantId")
	m.AttachmentID = field.NewString(table, "AttachmentId")
	m.MediaType = field.NewInt64(table, "MediaType")

	m.fillFieldMap()

	return m
}

func (m *misactivity) WithContext(ctx context.Context) IMisactivityDo {
	return m.misactivityDo.WithContext(ctx)
}

func (m misactivity) TableName() string { return m.misactivityDo.TableName() }

func (m misactivity) Alias() string { return m.misactivityDo.Alias() }

func (m *misactivity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *misactivity) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 19)
	m.fieldMap["Id"] = m.ID
	m.fieldMap["CreationTime"] = m.CreationTime
	m.fieldMap["CreatorUserId"] = m.CreatorUserID
	m.fieldMap["LastModificationTime"] = m.LastModificationTime
	m.fieldMap["LastModifierUserId"] = m.LastModifierUserID
	m.fieldMap["IsDeleted"] = m.IsDeleted
	m.fieldMap["DeleterUserId"] = m.DeleterUserID
	m.fieldMap["DeletionTime"] = m.DeletionTime
	m.fieldMap["Subject"] = m.Subject
	m.fieldMap["BeginTime"] = m.BeginTime
	m.fieldMap["EndTime"] = m.EndTime
	m.fieldMap["Address"] = m.Address
	m.fieldMap["Crowd"] = m.Crowd
	m.fieldMap["SortCode"] = m.SortCode
	m.fieldMap["InformationStatus"] = m.InformationStatus
	m.fieldMap["Remark"] = m.Remark
	m.fieldMap["TenantId"] = m.TenantID
	m.fieldMap["AttachmentId"] = m.AttachmentID
	m.fieldMap["MediaType"] = m.MediaType
}

func (m misactivity) clone(db *gorm.DB) misactivity {
	m.misactivityDo.ReplaceDB(db)
	return m
}

type misactivityDo struct{ gen.DO }

type IMisactivityDo interface {
	gen.SubQuery
	Debug() IMisactivityDo
	WithContext(ctx context.Context) IMisactivityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMisactivityDo
	Not(conds ...gen.Condition) IMisactivityDo
	Or(conds ...gen.Condition) IMisactivityDo
	Select(conds ...field.Expr) IMisactivityDo
	Where(conds ...gen.Condition) IMisactivityDo
	Order(conds ...field.Expr) IMisactivityDo
	Distinct(cols ...field.Expr) IMisactivityDo
	Omit(cols ...field.Expr) IMisactivityDo
	Join(table schema.Tabler, on ...field.Expr) IMisactivityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMisactivityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMisactivityDo
	Group(cols ...field.Expr) IMisactivityDo
	Having(conds ...gen.Condition) IMisactivityDo
	Limit(limit int) IMisactivityDo
	Offset(offset int) IMisactivityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMisactivityDo
	Unscoped() IMisactivityDo
	Create(values ...*model.Misactivity) error
	CreateInBatches(values []*model.Misactivity, batchSize int) error
	Save(values ...*model.Misactivity) error
	First() (*model.Misactivity, error)
	Take() (*model.Misactivity, error)
	Last() (*model.Misactivity, error)
	Find() ([]*model.Misactivity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Misactivity, err error)
	FindInBatches(result *[]*model.Misactivity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Misactivity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMisactivityDo
	Assign(attrs ...field.AssignExpr) IMisactivityDo
	Joins(fields ...field.RelationField) IMisactivityDo
	Preload(fields ...field.RelationField) IMisactivityDo
	FirstOrInit() (*model.Misactivity, error)
	FirstOrCreate() (*model.Misactivity, error)
	FindByPage(offset int, limit int) (result []*model.Misactivity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMisactivityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m misactivityDo) Debug() IMisactivityDo {
	return m.withDO(m.DO.Debug())
}

func (m misactivityDo) WithContext(ctx context.Context) IMisactivityDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m misactivityDo) ReadDB() IMisactivityDo {
	return m.Clauses(dbresolver.Read)
}

func (m misactivityDo) WriteDB() IMisactivityDo {
	return m.Clauses(dbresolver.Write)
}

func (m misactivityDo) Clauses(conds ...clause.Expression) IMisactivityDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m misactivityDo) Returning(value interface{}, columns ...string) IMisactivityDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m misactivityDo) Not(conds ...gen.Condition) IMisactivityDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m misactivityDo) Or(conds ...gen.Condition) IMisactivityDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m misactivityDo) Select(conds ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m misactivityDo) Where(conds ...gen.Condition) IMisactivityDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m misactivityDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMisactivityDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m misactivityDo) Order(conds ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m misactivityDo) Distinct(cols ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m misactivityDo) Omit(cols ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m misactivityDo) Join(table schema.Tabler, on ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m misactivityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m misactivityDo) RightJoin(table schema.Tabler, on ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m misactivityDo) Group(cols ...field.Expr) IMisactivityDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m misactivityDo) Having(conds ...gen.Condition) IMisactivityDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m misactivityDo) Limit(limit int) IMisactivityDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m misactivityDo) Offset(offset int) IMisactivityDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m misactivityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMisactivityDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m misactivityDo) Unscoped() IMisactivityDo {
	return m.withDO(m.DO.Unscoped())
}

func (m misactivityDo) Create(values ...*model.Misactivity) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m misactivityDo) CreateInBatches(values []*model.Misactivity, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m misactivityDo) Save(values ...*model.Misactivity) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m misactivityDo) First() (*model.Misactivity, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misactivity), nil
	}
}

func (m misactivityDo) Take() (*model.Misactivity, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misactivity), nil
	}
}

func (m misactivityDo) Last() (*model.Misactivity, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misactivity), nil
	}
}

func (m misactivityDo) Find() ([]*model.Misactivity, error) {
	result, err := m.DO.Find()
	return result.([]*model.Misactivity), err
}

func (m misactivityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Misactivity, err error) {
	buf := make([]*model.Misactivity, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m misactivityDo) FindInBatches(result *[]*model.Misactivity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m misactivityDo) Attrs(attrs ...field.AssignExpr) IMisactivityDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m misactivityDo) Assign(attrs ...field.AssignExpr) IMisactivityDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m misactivityDo) Joins(fields ...field.RelationField) IMisactivityDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m misactivityDo) Preload(fields ...field.RelationField) IMisactivityDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m misactivityDo) FirstOrInit() (*model.Misactivity, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misactivity), nil
	}
}

func (m misactivityDo) FirstOrCreate() (*model.Misactivity, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misactivity), nil
	}
}

func (m misactivityDo) FindByPage(offset int, limit int) (result []*model.Misactivity, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m misactivityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m misactivityDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m misactivityDo) Delete(models ...*model.Misactivity) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *misactivityDo) withDO(do gen.Dao) *misactivityDo {
	m.DO = *do.(*gen.DO)
	return m
}
