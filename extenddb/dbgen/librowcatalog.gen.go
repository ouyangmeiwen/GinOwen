// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibrowcatalog(db *gorm.DB) librowcatalog {
	_librowcatalog := librowcatalog{}

	_librowcatalog.librowcatalogDo.UseDB(db)
	_librowcatalog.librowcatalogDo.UseModel(&model.Librowcatalog{})

	tableName := _librowcatalog.librowcatalogDo.TableName()
	_librowcatalog.ALL = field.NewAsterisk(tableName)
	_librowcatalog.ID = field.NewString(tableName, "Id")
	_librowcatalog.CreationTime = field.NewTime(tableName, "CreationTime")
	_librowcatalog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_librowcatalog.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_librowcatalog.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_librowcatalog.IsDeleted = field.NewField(tableName, "IsDeleted")
	_librowcatalog.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_librowcatalog.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_librowcatalog.RowIdentity = field.NewString(tableName, "RowIdentity")
	_librowcatalog.Side = field.NewString(tableName, "Side")
	_librowcatalog.CatalogCode = field.NewString(tableName, "CatalogCode")
	_librowcatalog.CatalogDescription = field.NewString(tableName, "CatalogDescription")
	_librowcatalog.Remark = field.NewString(tableName, "Remark")
	_librowcatalog.TenantID = field.NewInt64(tableName, "TenantId")

	_librowcatalog.fillFieldMap()

	return _librowcatalog
}

type librowcatalog struct {
	librowcatalogDo librowcatalogDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	RowIdentity          field.String
	Side                 field.String
	CatalogCode          field.String
	CatalogDescription   field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l librowcatalog) Table(newTableName string) *librowcatalog {
	l.librowcatalogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l librowcatalog) As(alias string) *librowcatalog {
	l.librowcatalogDo.DO = *(l.librowcatalogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *librowcatalog) updateTableName(table string) *librowcatalog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.RowIdentity = field.NewString(table, "RowIdentity")
	l.Side = field.NewString(table, "Side")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.CatalogDescription = field.NewString(table, "CatalogDescription")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *librowcatalog) WithContext(ctx context.Context) ILibrowcatalogDo {
	return l.librowcatalogDo.WithContext(ctx)
}

func (l librowcatalog) TableName() string { return l.librowcatalogDo.TableName() }

func (l librowcatalog) Alias() string { return l.librowcatalogDo.Alias() }

func (l *librowcatalog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *librowcatalog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["RowIdentity"] = l.RowIdentity
	l.fieldMap["Side"] = l.Side
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["CatalogDescription"] = l.CatalogDescription
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l librowcatalog) clone(db *gorm.DB) librowcatalog {
	l.librowcatalogDo.ReplaceDB(db)
	return l
}

type librowcatalogDo struct{ gen.DO }

type ILibrowcatalogDo interface {
	gen.SubQuery
	Debug() ILibrowcatalogDo
	WithContext(ctx context.Context) ILibrowcatalogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibrowcatalogDo
	Not(conds ...gen.Condition) ILibrowcatalogDo
	Or(conds ...gen.Condition) ILibrowcatalogDo
	Select(conds ...field.Expr) ILibrowcatalogDo
	Where(conds ...gen.Condition) ILibrowcatalogDo
	Order(conds ...field.Expr) ILibrowcatalogDo
	Distinct(cols ...field.Expr) ILibrowcatalogDo
	Omit(cols ...field.Expr) ILibrowcatalogDo
	Join(table schema.Tabler, on ...field.Expr) ILibrowcatalogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibrowcatalogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibrowcatalogDo
	Group(cols ...field.Expr) ILibrowcatalogDo
	Having(conds ...gen.Condition) ILibrowcatalogDo
	Limit(limit int) ILibrowcatalogDo
	Offset(offset int) ILibrowcatalogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrowcatalogDo
	Unscoped() ILibrowcatalogDo
	Create(values ...*model.Librowcatalog) error
	CreateInBatches(values []*model.Librowcatalog, batchSize int) error
	Save(values ...*model.Librowcatalog) error
	First() (*model.Librowcatalog, error)
	Take() (*model.Librowcatalog, error)
	Last() (*model.Librowcatalog, error)
	Find() ([]*model.Librowcatalog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librowcatalog, err error)
	FindInBatches(result *[]*model.Librowcatalog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Librowcatalog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibrowcatalogDo
	Assign(attrs ...field.AssignExpr) ILibrowcatalogDo
	Joins(fields ...field.RelationField) ILibrowcatalogDo
	Preload(fields ...field.RelationField) ILibrowcatalogDo
	FirstOrInit() (*model.Librowcatalog, error)
	FirstOrCreate() (*model.Librowcatalog, error)
	FindByPage(offset int, limit int) (result []*model.Librowcatalog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibrowcatalogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l librowcatalogDo) Debug() ILibrowcatalogDo {
	return l.withDO(l.DO.Debug())
}

func (l librowcatalogDo) WithContext(ctx context.Context) ILibrowcatalogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l librowcatalogDo) ReadDB() ILibrowcatalogDo {
	return l.Clauses(dbresolver.Read)
}

func (l librowcatalogDo) WriteDB() ILibrowcatalogDo {
	return l.Clauses(dbresolver.Write)
}

func (l librowcatalogDo) Clauses(conds ...clause.Expression) ILibrowcatalogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l librowcatalogDo) Returning(value interface{}, columns ...string) ILibrowcatalogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l librowcatalogDo) Not(conds ...gen.Condition) ILibrowcatalogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l librowcatalogDo) Or(conds ...gen.Condition) ILibrowcatalogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l librowcatalogDo) Select(conds ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l librowcatalogDo) Where(conds ...gen.Condition) ILibrowcatalogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l librowcatalogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibrowcatalogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l librowcatalogDo) Order(conds ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l librowcatalogDo) Distinct(cols ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l librowcatalogDo) Omit(cols ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l librowcatalogDo) Join(table schema.Tabler, on ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l librowcatalogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l librowcatalogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l librowcatalogDo) Group(cols ...field.Expr) ILibrowcatalogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l librowcatalogDo) Having(conds ...gen.Condition) ILibrowcatalogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l librowcatalogDo) Limit(limit int) ILibrowcatalogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l librowcatalogDo) Offset(offset int) ILibrowcatalogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l librowcatalogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrowcatalogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l librowcatalogDo) Unscoped() ILibrowcatalogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l librowcatalogDo) Create(values ...*model.Librowcatalog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l librowcatalogDo) CreateInBatches(values []*model.Librowcatalog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l librowcatalogDo) Save(values ...*model.Librowcatalog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l librowcatalogDo) First() (*model.Librowcatalog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librowcatalog), nil
	}
}

func (l librowcatalogDo) Take() (*model.Librowcatalog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librowcatalog), nil
	}
}

func (l librowcatalogDo) Last() (*model.Librowcatalog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librowcatalog), nil
	}
}

func (l librowcatalogDo) Find() ([]*model.Librowcatalog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Librowcatalog), err
}

func (l librowcatalogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librowcatalog, err error) {
	buf := make([]*model.Librowcatalog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l librowcatalogDo) FindInBatches(result *[]*model.Librowcatalog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l librowcatalogDo) Attrs(attrs ...field.AssignExpr) ILibrowcatalogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l librowcatalogDo) Assign(attrs ...field.AssignExpr) ILibrowcatalogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l librowcatalogDo) Joins(fields ...field.RelationField) ILibrowcatalogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l librowcatalogDo) Preload(fields ...field.RelationField) ILibrowcatalogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l librowcatalogDo) FirstOrInit() (*model.Librowcatalog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librowcatalog), nil
	}
}

func (l librowcatalogDo) FirstOrCreate() (*model.Librowcatalog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librowcatalog), nil
	}
}

func (l librowcatalogDo) FindByPage(offset int, limit int) (result []*model.Librowcatalog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l librowcatalogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l librowcatalogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l librowcatalogDo) Delete(models ...*model.Librowcatalog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *librowcatalogDo) withDO(do gen.Dao) *librowcatalogDo {
	l.DO = *do.(*gen.DO)
	return l
}
