// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbppersistedgrant(db *gorm.DB) abppersistedgrant {
	_abppersistedgrant := abppersistedgrant{}

	_abppersistedgrant.abppersistedgrantDo.UseDB(db)
	_abppersistedgrant.abppersistedgrantDo.UseModel(&model.Abppersistedgrant{})

	tableName := _abppersistedgrant.abppersistedgrantDo.TableName()
	_abppersistedgrant.ALL = field.NewAsterisk(tableName)
	_abppersistedgrant.ID = field.NewString(tableName, "Id")
	_abppersistedgrant.Type = field.NewString(tableName, "Type")
	_abppersistedgrant.SubjectID = field.NewString(tableName, "SubjectId")
	_abppersistedgrant.ClientID = field.NewString(tableName, "ClientId")
	_abppersistedgrant.CreationTime = field.NewTime(tableName, "CreationTime")
	_abppersistedgrant.Expiration = field.NewTime(tableName, "Expiration")
	_abppersistedgrant.Data = field.NewString(tableName, "Data")

	_abppersistedgrant.fillFieldMap()

	return _abppersistedgrant
}

type abppersistedgrant struct {
	abppersistedgrantDo abppersistedgrantDo

	ALL          field.Asterisk
	ID           field.String
	Type         field.String
	SubjectID    field.String
	ClientID     field.String
	CreationTime field.Time
	Expiration   field.Time
	Data         field.String

	fieldMap map[string]field.Expr
}

func (a abppersistedgrant) Table(newTableName string) *abppersistedgrant {
	a.abppersistedgrantDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abppersistedgrant) As(alias string) *abppersistedgrant {
	a.abppersistedgrantDo.DO = *(a.abppersistedgrantDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abppersistedgrant) updateTableName(table string) *abppersistedgrant {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.Type = field.NewString(table, "Type")
	a.SubjectID = field.NewString(table, "SubjectId")
	a.ClientID = field.NewString(table, "ClientId")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.Expiration = field.NewTime(table, "Expiration")
	a.Data = field.NewString(table, "Data")

	a.fillFieldMap()

	return a
}

func (a *abppersistedgrant) WithContext(ctx context.Context) IAbppersistedgrantDo {
	return a.abppersistedgrantDo.WithContext(ctx)
}

func (a abppersistedgrant) TableName() string { return a.abppersistedgrantDo.TableName() }

func (a abppersistedgrant) Alias() string { return a.abppersistedgrantDo.Alias() }

func (a *abppersistedgrant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abppersistedgrant) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["Type"] = a.Type
	a.fieldMap["SubjectId"] = a.SubjectID
	a.fieldMap["ClientId"] = a.ClientID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["Expiration"] = a.Expiration
	a.fieldMap["Data"] = a.Data
}

func (a abppersistedgrant) clone(db *gorm.DB) abppersistedgrant {
	a.abppersistedgrantDo.ReplaceDB(db)
	return a
}

type abppersistedgrantDo struct{ gen.DO }

type IAbppersistedgrantDo interface {
	gen.SubQuery
	Debug() IAbppersistedgrantDo
	WithContext(ctx context.Context) IAbppersistedgrantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbppersistedgrantDo
	Not(conds ...gen.Condition) IAbppersistedgrantDo
	Or(conds ...gen.Condition) IAbppersistedgrantDo
	Select(conds ...field.Expr) IAbppersistedgrantDo
	Where(conds ...gen.Condition) IAbppersistedgrantDo
	Order(conds ...field.Expr) IAbppersistedgrantDo
	Distinct(cols ...field.Expr) IAbppersistedgrantDo
	Omit(cols ...field.Expr) IAbppersistedgrantDo
	Join(table schema.Tabler, on ...field.Expr) IAbppersistedgrantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbppersistedgrantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbppersistedgrantDo
	Group(cols ...field.Expr) IAbppersistedgrantDo
	Having(conds ...gen.Condition) IAbppersistedgrantDo
	Limit(limit int) IAbppersistedgrantDo
	Offset(offset int) IAbppersistedgrantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbppersistedgrantDo
	Unscoped() IAbppersistedgrantDo
	Create(values ...*model.Abppersistedgrant) error
	CreateInBatches(values []*model.Abppersistedgrant, batchSize int) error
	Save(values ...*model.Abppersistedgrant) error
	First() (*model.Abppersistedgrant, error)
	Take() (*model.Abppersistedgrant, error)
	Last() (*model.Abppersistedgrant, error)
	Find() ([]*model.Abppersistedgrant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abppersistedgrant, err error)
	FindInBatches(result *[]*model.Abppersistedgrant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abppersistedgrant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbppersistedgrantDo
	Assign(attrs ...field.AssignExpr) IAbppersistedgrantDo
	Joins(fields ...field.RelationField) IAbppersistedgrantDo
	Preload(fields ...field.RelationField) IAbppersistedgrantDo
	FirstOrInit() (*model.Abppersistedgrant, error)
	FirstOrCreate() (*model.Abppersistedgrant, error)
	FindByPage(offset int, limit int) (result []*model.Abppersistedgrant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbppersistedgrantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abppersistedgrantDo) Debug() IAbppersistedgrantDo {
	return a.withDO(a.DO.Debug())
}

func (a abppersistedgrantDo) WithContext(ctx context.Context) IAbppersistedgrantDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abppersistedgrantDo) ReadDB() IAbppersistedgrantDo {
	return a.Clauses(dbresolver.Read)
}

func (a abppersistedgrantDo) WriteDB() IAbppersistedgrantDo {
	return a.Clauses(dbresolver.Write)
}

func (a abppersistedgrantDo) Clauses(conds ...clause.Expression) IAbppersistedgrantDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abppersistedgrantDo) Returning(value interface{}, columns ...string) IAbppersistedgrantDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abppersistedgrantDo) Not(conds ...gen.Condition) IAbppersistedgrantDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abppersistedgrantDo) Or(conds ...gen.Condition) IAbppersistedgrantDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abppersistedgrantDo) Select(conds ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abppersistedgrantDo) Where(conds ...gen.Condition) IAbppersistedgrantDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abppersistedgrantDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbppersistedgrantDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abppersistedgrantDo) Order(conds ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abppersistedgrantDo) Distinct(cols ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abppersistedgrantDo) Omit(cols ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abppersistedgrantDo) Join(table schema.Tabler, on ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abppersistedgrantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abppersistedgrantDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abppersistedgrantDo) Group(cols ...field.Expr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abppersistedgrantDo) Having(conds ...gen.Condition) IAbppersistedgrantDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abppersistedgrantDo) Limit(limit int) IAbppersistedgrantDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abppersistedgrantDo) Offset(offset int) IAbppersistedgrantDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abppersistedgrantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbppersistedgrantDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abppersistedgrantDo) Unscoped() IAbppersistedgrantDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abppersistedgrantDo) Create(values ...*model.Abppersistedgrant) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abppersistedgrantDo) CreateInBatches(values []*model.Abppersistedgrant, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abppersistedgrantDo) Save(values ...*model.Abppersistedgrant) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abppersistedgrantDo) First() (*model.Abppersistedgrant, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppersistedgrant), nil
	}
}

func (a abppersistedgrantDo) Take() (*model.Abppersistedgrant, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppersistedgrant), nil
	}
}

func (a abppersistedgrantDo) Last() (*model.Abppersistedgrant, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppersistedgrant), nil
	}
}

func (a abppersistedgrantDo) Find() ([]*model.Abppersistedgrant, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abppersistedgrant), err
}

func (a abppersistedgrantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abppersistedgrant, err error) {
	buf := make([]*model.Abppersistedgrant, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abppersistedgrantDo) FindInBatches(result *[]*model.Abppersistedgrant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abppersistedgrantDo) Attrs(attrs ...field.AssignExpr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abppersistedgrantDo) Assign(attrs ...field.AssignExpr) IAbppersistedgrantDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abppersistedgrantDo) Joins(fields ...field.RelationField) IAbppersistedgrantDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abppersistedgrantDo) Preload(fields ...field.RelationField) IAbppersistedgrantDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abppersistedgrantDo) FirstOrInit() (*model.Abppersistedgrant, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppersistedgrant), nil
	}
}

func (a abppersistedgrantDo) FirstOrCreate() (*model.Abppersistedgrant, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abppersistedgrant), nil
	}
}

func (a abppersistedgrantDo) FindByPage(offset int, limit int) (result []*model.Abppersistedgrant, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abppersistedgrantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abppersistedgrantDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abppersistedgrantDo) Delete(models ...*model.Abppersistedgrant) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abppersistedgrantDo) withDO(do gen.Dao) *abppersistedgrantDo {
	a.DO = *do.(*gen.DO)
	return a
}
