// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newResjournalinfo(db *gorm.DB) resjournalinfo {
	_resjournalinfo := resjournalinfo{}

	_resjournalinfo.resjournalinfoDo.UseDB(db)
	_resjournalinfo.resjournalinfoDo.UseModel(&model.Resjournalinfo{})

	tableName := _resjournalinfo.resjournalinfoDo.TableName()
	_resjournalinfo.ALL = field.NewAsterisk(tableName)
	_resjournalinfo.ID = field.NewInt64(tableName, "Id")
	_resjournalinfo.PubYear = field.NewString(tableName, "PubYear")
	_resjournalinfo.PostCode = field.NewString(tableName, "PostCode")
	_resjournalinfo.CN = field.NewString(tableName, "CN")
	_resjournalinfo.ISSN = field.NewString(tableName, "ISSN")
	_resjournalinfo.Title = field.NewString(tableName, "Title")
	_resjournalinfo.Frequency = field.NewString(tableName, "Frequency")
	_resjournalinfo.PubDate = field.NewString(tableName, "PubDate")
	_resjournalinfo.Publisher = field.NewString(tableName, "Publisher")
	_resjournalinfo.SortCode = field.NewString(tableName, "SortCode")
	_resjournalinfo.ShortTitle = field.NewString(tableName, "ShortTitle")
	_resjournalinfo.Level = field.NewString(tableName, "Level")
	_resjournalinfo.SubscriptionType = field.NewString(tableName, "SubscriptionType")
	_resjournalinfo.UnitPrice = field.NewString(tableName, "UnitPrice")
	_resjournalinfo.SubUnitPrice = field.NewString(tableName, "SubUnitPrice")
	_resjournalinfo.MonthlyPrice = field.NewString(tableName, "MonthlyPrice")
	_resjournalinfo.AnnualPrice = field.NewString(tableName, "AnnualPrice")
	_resjournalinfo.JournalType = field.NewInt64(tableName, "JournalType")
	_resjournalinfo.Summary = field.NewString(tableName, "Summary")
	_resjournalinfo.Remark = field.NewString(tableName, "Remark")
	_resjournalinfo.Tags = field.NewString(tableName, "Tags")

	_resjournalinfo.fillFieldMap()

	return _resjournalinfo
}

type resjournalinfo struct {
	resjournalinfoDo resjournalinfoDo

	ALL              field.Asterisk
	ID               field.Int64
	PubYear          field.String
	PostCode         field.String
	CN               field.String
	ISSN             field.String
	Title            field.String
	Frequency        field.String
	PubDate          field.String
	Publisher        field.String
	SortCode         field.String
	ShortTitle       field.String
	Level            field.String
	SubscriptionType field.String
	UnitPrice        field.String
	SubUnitPrice     field.String
	MonthlyPrice     field.String
	AnnualPrice      field.String
	JournalType      field.Int64
	Summary          field.String
	Remark           field.String
	Tags             field.String

	fieldMap map[string]field.Expr
}

func (r resjournalinfo) Table(newTableName string) *resjournalinfo {
	r.resjournalinfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resjournalinfo) As(alias string) *resjournalinfo {
	r.resjournalinfoDo.DO = *(r.resjournalinfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resjournalinfo) updateTableName(table string) *resjournalinfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "Id")
	r.PubYear = field.NewString(table, "PubYear")
	r.PostCode = field.NewString(table, "PostCode")
	r.CN = field.NewString(table, "CN")
	r.ISSN = field.NewString(table, "ISSN")
	r.Title = field.NewString(table, "Title")
	r.Frequency = field.NewString(table, "Frequency")
	r.PubDate = field.NewString(table, "PubDate")
	r.Publisher = field.NewString(table, "Publisher")
	r.SortCode = field.NewString(table, "SortCode")
	r.ShortTitle = field.NewString(table, "ShortTitle")
	r.Level = field.NewString(table, "Level")
	r.SubscriptionType = field.NewString(table, "SubscriptionType")
	r.UnitPrice = field.NewString(table, "UnitPrice")
	r.SubUnitPrice = field.NewString(table, "SubUnitPrice")
	r.MonthlyPrice = field.NewString(table, "MonthlyPrice")
	r.AnnualPrice = field.NewString(table, "AnnualPrice")
	r.JournalType = field.NewInt64(table, "JournalType")
	r.Summary = field.NewString(table, "Summary")
	r.Remark = field.NewString(table, "Remark")
	r.Tags = field.NewString(table, "Tags")

	r.fillFieldMap()

	return r
}

func (r *resjournalinfo) WithContext(ctx context.Context) IResjournalinfoDo {
	return r.resjournalinfoDo.WithContext(ctx)
}

func (r resjournalinfo) TableName() string { return r.resjournalinfoDo.TableName() }

func (r resjournalinfo) Alias() string { return r.resjournalinfoDo.Alias() }

func (r *resjournalinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resjournalinfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 21)
	r.fieldMap["Id"] = r.ID
	r.fieldMap["PubYear"] = r.PubYear
	r.fieldMap["PostCode"] = r.PostCode
	r.fieldMap["CN"] = r.CN
	r.fieldMap["ISSN"] = r.ISSN
	r.fieldMap["Title"] = r.Title
	r.fieldMap["Frequency"] = r.Frequency
	r.fieldMap["PubDate"] = r.PubDate
	r.fieldMap["Publisher"] = r.Publisher
	r.fieldMap["SortCode"] = r.SortCode
	r.fieldMap["ShortTitle"] = r.ShortTitle
	r.fieldMap["Level"] = r.Level
	r.fieldMap["SubscriptionType"] = r.SubscriptionType
	r.fieldMap["UnitPrice"] = r.UnitPrice
	r.fieldMap["SubUnitPrice"] = r.SubUnitPrice
	r.fieldMap["MonthlyPrice"] = r.MonthlyPrice
	r.fieldMap["AnnualPrice"] = r.AnnualPrice
	r.fieldMap["JournalType"] = r.JournalType
	r.fieldMap["Summary"] = r.Summary
	r.fieldMap["Remark"] = r.Remark
	r.fieldMap["Tags"] = r.Tags
}

func (r resjournalinfo) clone(db *gorm.DB) resjournalinfo {
	r.resjournalinfoDo.ReplaceDB(db)
	return r
}

type resjournalinfoDo struct{ gen.DO }

type IResjournalinfoDo interface {
	gen.SubQuery
	Debug() IResjournalinfoDo
	WithContext(ctx context.Context) IResjournalinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResjournalinfoDo
	Not(conds ...gen.Condition) IResjournalinfoDo
	Or(conds ...gen.Condition) IResjournalinfoDo
	Select(conds ...field.Expr) IResjournalinfoDo
	Where(conds ...gen.Condition) IResjournalinfoDo
	Order(conds ...field.Expr) IResjournalinfoDo
	Distinct(cols ...field.Expr) IResjournalinfoDo
	Omit(cols ...field.Expr) IResjournalinfoDo
	Join(table schema.Tabler, on ...field.Expr) IResjournalinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResjournalinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResjournalinfoDo
	Group(cols ...field.Expr) IResjournalinfoDo
	Having(conds ...gen.Condition) IResjournalinfoDo
	Limit(limit int) IResjournalinfoDo
	Offset(offset int) IResjournalinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResjournalinfoDo
	Unscoped() IResjournalinfoDo
	Create(values ...*model.Resjournalinfo) error
	CreateInBatches(values []*model.Resjournalinfo, batchSize int) error
	Save(values ...*model.Resjournalinfo) error
	First() (*model.Resjournalinfo, error)
	Take() (*model.Resjournalinfo, error)
	Last() (*model.Resjournalinfo, error)
	Find() ([]*model.Resjournalinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resjournalinfo, err error)
	FindInBatches(result *[]*model.Resjournalinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Resjournalinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResjournalinfoDo
	Assign(attrs ...field.AssignExpr) IResjournalinfoDo
	Joins(fields ...field.RelationField) IResjournalinfoDo
	Preload(fields ...field.RelationField) IResjournalinfoDo
	FirstOrInit() (*model.Resjournalinfo, error)
	FirstOrCreate() (*model.Resjournalinfo, error)
	FindByPage(offset int, limit int) (result []*model.Resjournalinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResjournalinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resjournalinfoDo) Debug() IResjournalinfoDo {
	return r.withDO(r.DO.Debug())
}

func (r resjournalinfoDo) WithContext(ctx context.Context) IResjournalinfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resjournalinfoDo) ReadDB() IResjournalinfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r resjournalinfoDo) WriteDB() IResjournalinfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r resjournalinfoDo) Clauses(conds ...clause.Expression) IResjournalinfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resjournalinfoDo) Returning(value interface{}, columns ...string) IResjournalinfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resjournalinfoDo) Not(conds ...gen.Condition) IResjournalinfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resjournalinfoDo) Or(conds ...gen.Condition) IResjournalinfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resjournalinfoDo) Select(conds ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resjournalinfoDo) Where(conds ...gen.Condition) IResjournalinfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resjournalinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IResjournalinfoDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resjournalinfoDo) Order(conds ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resjournalinfoDo) Distinct(cols ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resjournalinfoDo) Omit(cols ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resjournalinfoDo) Join(table schema.Tabler, on ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resjournalinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resjournalinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resjournalinfoDo) Group(cols ...field.Expr) IResjournalinfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resjournalinfoDo) Having(conds ...gen.Condition) IResjournalinfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resjournalinfoDo) Limit(limit int) IResjournalinfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resjournalinfoDo) Offset(offset int) IResjournalinfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resjournalinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResjournalinfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resjournalinfoDo) Unscoped() IResjournalinfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resjournalinfoDo) Create(values ...*model.Resjournalinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resjournalinfoDo) CreateInBatches(values []*model.Resjournalinfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resjournalinfoDo) Save(values ...*model.Resjournalinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resjournalinfoDo) First() (*model.Resjournalinfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resjournalinfo), nil
	}
}

func (r resjournalinfoDo) Take() (*model.Resjournalinfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resjournalinfo), nil
	}
}

func (r resjournalinfoDo) Last() (*model.Resjournalinfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resjournalinfo), nil
	}
}

func (r resjournalinfoDo) Find() ([]*model.Resjournalinfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.Resjournalinfo), err
}

func (r resjournalinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resjournalinfo, err error) {
	buf := make([]*model.Resjournalinfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resjournalinfoDo) FindInBatches(result *[]*model.Resjournalinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resjournalinfoDo) Attrs(attrs ...field.AssignExpr) IResjournalinfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resjournalinfoDo) Assign(attrs ...field.AssignExpr) IResjournalinfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resjournalinfoDo) Joins(fields ...field.RelationField) IResjournalinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resjournalinfoDo) Preload(fields ...field.RelationField) IResjournalinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resjournalinfoDo) FirstOrInit() (*model.Resjournalinfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resjournalinfo), nil
	}
}

func (r resjournalinfoDo) FirstOrCreate() (*model.Resjournalinfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resjournalinfo), nil
	}
}

func (r resjournalinfoDo) FindByPage(offset int, limit int) (result []*model.Resjournalinfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resjournalinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resjournalinfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resjournalinfoDo) Delete(models ...*model.Resjournalinfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resjournalinfoDo) withDO(do gen.Dao) *resjournalinfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
