// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfirejobstate(db *gorm.DB) hangfirejobstate {
	_hangfirejobstate := hangfirejobstate{}

	_hangfirejobstate.hangfirejobstateDo.UseDB(db)
	_hangfirejobstate.hangfirejobstateDo.UseModel(&model.Hangfirejobstate{})

	tableName := _hangfirejobstate.hangfirejobstateDo.TableName()
	_hangfirejobstate.ALL = field.NewAsterisk(tableName)
	_hangfirejobstate.ID = field.NewInt64(tableName, "Id")
	_hangfirejobstate.JobID = field.NewInt64(tableName, "JobId")
	_hangfirejobstate.CreatedAt = field.NewTime(tableName, "CreatedAt")
	_hangfirejobstate.Name = field.NewString(tableName, "Name")
	_hangfirejobstate.Reason = field.NewString(tableName, "Reason")
	_hangfirejobstate.Data = field.NewString(tableName, "Data")

	_hangfirejobstate.fillFieldMap()

	return _hangfirejobstate
}

type hangfirejobstate struct {
	hangfirejobstateDo hangfirejobstateDo

	ALL       field.Asterisk
	ID        field.Int64
	JobID     field.Int64
	CreatedAt field.Time
	Name      field.String
	Reason    field.String
	Data      field.String

	fieldMap map[string]field.Expr
}

func (h hangfirejobstate) Table(newTableName string) *hangfirejobstate {
	h.hangfirejobstateDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirejobstate) As(alias string) *hangfirejobstate {
	h.hangfirejobstateDo.DO = *(h.hangfirejobstateDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirejobstate) updateTableName(table string) *hangfirejobstate {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.JobID = field.NewInt64(table, "JobId")
	h.CreatedAt = field.NewTime(table, "CreatedAt")
	h.Name = field.NewString(table, "Name")
	h.Reason = field.NewString(table, "Reason")
	h.Data = field.NewString(table, "Data")

	h.fillFieldMap()

	return h
}

func (h *hangfirejobstate) WithContext(ctx context.Context) IHangfirejobstateDo {
	return h.hangfirejobstateDo.WithContext(ctx)
}

func (h hangfirejobstate) TableName() string { return h.hangfirejobstateDo.TableName() }

func (h hangfirejobstate) Alias() string { return h.hangfirejobstateDo.Alias() }

func (h *hangfirejobstate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirejobstate) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 6)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["JobId"] = h.JobID
	h.fieldMap["CreatedAt"] = h.CreatedAt
	h.fieldMap["Name"] = h.Name
	h.fieldMap["Reason"] = h.Reason
	h.fieldMap["Data"] = h.Data
}

func (h hangfirejobstate) clone(db *gorm.DB) hangfirejobstate {
	h.hangfirejobstateDo.ReplaceDB(db)
	return h
}

type hangfirejobstateDo struct{ gen.DO }

type IHangfirejobstateDo interface {
	gen.SubQuery
	Debug() IHangfirejobstateDo
	WithContext(ctx context.Context) IHangfirejobstateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirejobstateDo
	Not(conds ...gen.Condition) IHangfirejobstateDo
	Or(conds ...gen.Condition) IHangfirejobstateDo
	Select(conds ...field.Expr) IHangfirejobstateDo
	Where(conds ...gen.Condition) IHangfirejobstateDo
	Order(conds ...field.Expr) IHangfirejobstateDo
	Distinct(cols ...field.Expr) IHangfirejobstateDo
	Omit(cols ...field.Expr) IHangfirejobstateDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirejobstateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobstateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobstateDo
	Group(cols ...field.Expr) IHangfirejobstateDo
	Having(conds ...gen.Condition) IHangfirejobstateDo
	Limit(limit int) IHangfirejobstateDo
	Offset(offset int) IHangfirejobstateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobstateDo
	Unscoped() IHangfirejobstateDo
	Create(values ...*model.Hangfirejobstate) error
	CreateInBatches(values []*model.Hangfirejobstate, batchSize int) error
	Save(values ...*model.Hangfirejobstate) error
	First() (*model.Hangfirejobstate, error)
	Take() (*model.Hangfirejobstate, error)
	Last() (*model.Hangfirejobstate, error)
	Find() ([]*model.Hangfirejobstate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejobstate, err error)
	FindInBatches(result *[]*model.Hangfirejobstate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirejobstate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirejobstateDo
	Assign(attrs ...field.AssignExpr) IHangfirejobstateDo
	Joins(fields ...field.RelationField) IHangfirejobstateDo
	Preload(fields ...field.RelationField) IHangfirejobstateDo
	FirstOrInit() (*model.Hangfirejobstate, error)
	FirstOrCreate() (*model.Hangfirejobstate, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirejobstate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirejobstateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirejobstateDo) Debug() IHangfirejobstateDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirejobstateDo) WithContext(ctx context.Context) IHangfirejobstateDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirejobstateDo) ReadDB() IHangfirejobstateDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirejobstateDo) WriteDB() IHangfirejobstateDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirejobstateDo) Clauses(conds ...clause.Expression) IHangfirejobstateDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirejobstateDo) Returning(value interface{}, columns ...string) IHangfirejobstateDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirejobstateDo) Not(conds ...gen.Condition) IHangfirejobstateDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirejobstateDo) Or(conds ...gen.Condition) IHangfirejobstateDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirejobstateDo) Select(conds ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirejobstateDo) Where(conds ...gen.Condition) IHangfirejobstateDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirejobstateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirejobstateDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirejobstateDo) Order(conds ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirejobstateDo) Distinct(cols ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirejobstateDo) Omit(cols ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirejobstateDo) Join(table schema.Tabler, on ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirejobstateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirejobstateDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirejobstateDo) Group(cols ...field.Expr) IHangfirejobstateDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirejobstateDo) Having(conds ...gen.Condition) IHangfirejobstateDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirejobstateDo) Limit(limit int) IHangfirejobstateDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirejobstateDo) Offset(offset int) IHangfirejobstateDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirejobstateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobstateDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirejobstateDo) Unscoped() IHangfirejobstateDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirejobstateDo) Create(values ...*model.Hangfirejobstate) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirejobstateDo) CreateInBatches(values []*model.Hangfirejobstate, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirejobstateDo) Save(values ...*model.Hangfirejobstate) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirejobstateDo) First() (*model.Hangfirejobstate, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobstate), nil
	}
}

func (h hangfirejobstateDo) Take() (*model.Hangfirejobstate, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobstate), nil
	}
}

func (h hangfirejobstateDo) Last() (*model.Hangfirejobstate, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobstate), nil
	}
}

func (h hangfirejobstateDo) Find() ([]*model.Hangfirejobstate, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirejobstate), err
}

func (h hangfirejobstateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejobstate, err error) {
	buf := make([]*model.Hangfirejobstate, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirejobstateDo) FindInBatches(result *[]*model.Hangfirejobstate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirejobstateDo) Attrs(attrs ...field.AssignExpr) IHangfirejobstateDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirejobstateDo) Assign(attrs ...field.AssignExpr) IHangfirejobstateDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirejobstateDo) Joins(fields ...field.RelationField) IHangfirejobstateDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirejobstateDo) Preload(fields ...field.RelationField) IHangfirejobstateDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirejobstateDo) FirstOrInit() (*model.Hangfirejobstate, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobstate), nil
	}
}

func (h hangfirejobstateDo) FirstOrCreate() (*model.Hangfirejobstate, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobstate), nil
	}
}

func (h hangfirejobstateDo) FindByPage(offset int, limit int) (result []*model.Hangfirejobstate, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirejobstateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirejobstateDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirejobstateDo) Delete(models ...*model.Hangfirejobstate) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirejobstateDo) withDO(do gen.Dao) *hangfirejobstateDo {
	h.DO = *do.(*gen.DO)
	return h
}
