// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpmaintainlog(db *gorm.DB) lcpmaintainlog {
	_lcpmaintainlog := lcpmaintainlog{}

	_lcpmaintainlog.lcpmaintainlogDo.UseDB(db)
	_lcpmaintainlog.lcpmaintainlogDo.UseModel(&model.Lcpmaintainlog{})

	tableName := _lcpmaintainlog.lcpmaintainlogDo.TableName()
	_lcpmaintainlog.ALL = field.NewAsterisk(tableName)
	_lcpmaintainlog.ID = field.NewString(tableName, "Id")
	_lcpmaintainlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpmaintainlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpmaintainlog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpmaintainlog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpmaintainlog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpmaintainlog.UserID = field.NewInt64(tableName, "UserId")
	_lcpmaintainlog.Name = field.NewString(tableName, "Name")
	_lcpmaintainlog.UserName = field.NewString(tableName, "UserName")
	_lcpmaintainlog.MaintainLogType = field.NewInt64(tableName, "MaintainLogType")
	_lcpmaintainlog.MaintainAmount = field.NewInt64(tableName, "MaintainAmount")
	_lcpmaintainlog.MaintainAmountDetail = field.NewString(tableName, "MaintainAmountDetail")
	_lcpmaintainlog.WithDrawAmount = field.NewInt64(tableName, "WithDrawAmount")
	_lcpmaintainlog.WithDrawAmountDetail = field.NewString(tableName, "WithDrawAmountDetail")
	_lcpmaintainlog.CardQuantity = field.NewInt64(tableName, "CardQuantity")
	_lcpmaintainlog.Remark = field.NewString(tableName, "Remark")
	_lcpmaintainlog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpmaintainlog.fillFieldMap()

	return _lcpmaintainlog
}

type lcpmaintainlog struct {
	lcpmaintainlogDo lcpmaintainlogDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	TerminalID           field.String
	TerminalCode         field.String
	TerminalName         field.String
	UserID               field.Int64
	Name                 field.String
	UserName             field.String
	MaintainLogType      field.Int64
	MaintainAmount       field.Int64
	MaintainAmountDetail field.String
	WithDrawAmount       field.Int64
	WithDrawAmountDetail field.String
	CardQuantity         field.Int64
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpmaintainlog) Table(newTableName string) *lcpmaintainlog {
	l.lcpmaintainlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpmaintainlog) As(alias string) *lcpmaintainlog {
	l.lcpmaintainlogDo.DO = *(l.lcpmaintainlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpmaintainlog) updateTableName(table string) *lcpmaintainlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.UserID = field.NewInt64(table, "UserId")
	l.Name = field.NewString(table, "Name")
	l.UserName = field.NewString(table, "UserName")
	l.MaintainLogType = field.NewInt64(table, "MaintainLogType")
	l.MaintainAmount = field.NewInt64(table, "MaintainAmount")
	l.MaintainAmountDetail = field.NewString(table, "MaintainAmountDetail")
	l.WithDrawAmount = field.NewInt64(table, "WithDrawAmount")
	l.WithDrawAmountDetail = field.NewString(table, "WithDrawAmountDetail")
	l.CardQuantity = field.NewInt64(table, "CardQuantity")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpmaintainlog) WithContext(ctx context.Context) ILcpmaintainlogDo {
	return l.lcpmaintainlogDo.WithContext(ctx)
}

func (l lcpmaintainlog) TableName() string { return l.lcpmaintainlogDo.TableName() }

func (l lcpmaintainlog) Alias() string { return l.lcpmaintainlogDo.Alias() }

func (l *lcpmaintainlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpmaintainlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["UserId"] = l.UserID
	l.fieldMap["Name"] = l.Name
	l.fieldMap["UserName"] = l.UserName
	l.fieldMap["MaintainLogType"] = l.MaintainLogType
	l.fieldMap["MaintainAmount"] = l.MaintainAmount
	l.fieldMap["MaintainAmountDetail"] = l.MaintainAmountDetail
	l.fieldMap["WithDrawAmount"] = l.WithDrawAmount
	l.fieldMap["WithDrawAmountDetail"] = l.WithDrawAmountDetail
	l.fieldMap["CardQuantity"] = l.CardQuantity
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpmaintainlog) clone(db *gorm.DB) lcpmaintainlog {
	l.lcpmaintainlogDo.ReplaceDB(db)
	return l
}

type lcpmaintainlogDo struct{ gen.DO }

type ILcpmaintainlogDo interface {
	gen.SubQuery
	Debug() ILcpmaintainlogDo
	WithContext(ctx context.Context) ILcpmaintainlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpmaintainlogDo
	Not(conds ...gen.Condition) ILcpmaintainlogDo
	Or(conds ...gen.Condition) ILcpmaintainlogDo
	Select(conds ...field.Expr) ILcpmaintainlogDo
	Where(conds ...gen.Condition) ILcpmaintainlogDo
	Order(conds ...field.Expr) ILcpmaintainlogDo
	Distinct(cols ...field.Expr) ILcpmaintainlogDo
	Omit(cols ...field.Expr) ILcpmaintainlogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpmaintainlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpmaintainlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpmaintainlogDo
	Group(cols ...field.Expr) ILcpmaintainlogDo
	Having(conds ...gen.Condition) ILcpmaintainlogDo
	Limit(limit int) ILcpmaintainlogDo
	Offset(offset int) ILcpmaintainlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpmaintainlogDo
	Unscoped() ILcpmaintainlogDo
	Create(values ...*model.Lcpmaintainlog) error
	CreateInBatches(values []*model.Lcpmaintainlog, batchSize int) error
	Save(values ...*model.Lcpmaintainlog) error
	First() (*model.Lcpmaintainlog, error)
	Take() (*model.Lcpmaintainlog, error)
	Last() (*model.Lcpmaintainlog, error)
	Find() ([]*model.Lcpmaintainlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpmaintainlog, err error)
	FindInBatches(result *[]*model.Lcpmaintainlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpmaintainlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpmaintainlogDo
	Assign(attrs ...field.AssignExpr) ILcpmaintainlogDo
	Joins(fields ...field.RelationField) ILcpmaintainlogDo
	Preload(fields ...field.RelationField) ILcpmaintainlogDo
	FirstOrInit() (*model.Lcpmaintainlog, error)
	FirstOrCreate() (*model.Lcpmaintainlog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpmaintainlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpmaintainlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpmaintainlogDo) Debug() ILcpmaintainlogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpmaintainlogDo) WithContext(ctx context.Context) ILcpmaintainlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpmaintainlogDo) ReadDB() ILcpmaintainlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpmaintainlogDo) WriteDB() ILcpmaintainlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpmaintainlogDo) Clauses(conds ...clause.Expression) ILcpmaintainlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpmaintainlogDo) Returning(value interface{}, columns ...string) ILcpmaintainlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpmaintainlogDo) Not(conds ...gen.Condition) ILcpmaintainlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpmaintainlogDo) Or(conds ...gen.Condition) ILcpmaintainlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpmaintainlogDo) Select(conds ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpmaintainlogDo) Where(conds ...gen.Condition) ILcpmaintainlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpmaintainlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpmaintainlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpmaintainlogDo) Order(conds ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpmaintainlogDo) Distinct(cols ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpmaintainlogDo) Omit(cols ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpmaintainlogDo) Join(table schema.Tabler, on ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpmaintainlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpmaintainlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpmaintainlogDo) Group(cols ...field.Expr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpmaintainlogDo) Having(conds ...gen.Condition) ILcpmaintainlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpmaintainlogDo) Limit(limit int) ILcpmaintainlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpmaintainlogDo) Offset(offset int) ILcpmaintainlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpmaintainlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpmaintainlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpmaintainlogDo) Unscoped() ILcpmaintainlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpmaintainlogDo) Create(values ...*model.Lcpmaintainlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpmaintainlogDo) CreateInBatches(values []*model.Lcpmaintainlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpmaintainlogDo) Save(values ...*model.Lcpmaintainlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpmaintainlogDo) First() (*model.Lcpmaintainlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpmaintainlog), nil
	}
}

func (l lcpmaintainlogDo) Take() (*model.Lcpmaintainlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpmaintainlog), nil
	}
}

func (l lcpmaintainlogDo) Last() (*model.Lcpmaintainlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpmaintainlog), nil
	}
}

func (l lcpmaintainlogDo) Find() ([]*model.Lcpmaintainlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpmaintainlog), err
}

func (l lcpmaintainlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpmaintainlog, err error) {
	buf := make([]*model.Lcpmaintainlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpmaintainlogDo) FindInBatches(result *[]*model.Lcpmaintainlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpmaintainlogDo) Attrs(attrs ...field.AssignExpr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpmaintainlogDo) Assign(attrs ...field.AssignExpr) ILcpmaintainlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpmaintainlogDo) Joins(fields ...field.RelationField) ILcpmaintainlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpmaintainlogDo) Preload(fields ...field.RelationField) ILcpmaintainlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpmaintainlogDo) FirstOrInit() (*model.Lcpmaintainlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpmaintainlog), nil
	}
}

func (l lcpmaintainlogDo) FirstOrCreate() (*model.Lcpmaintainlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpmaintainlog), nil
	}
}

func (l lcpmaintainlogDo) FindByPage(offset int, limit int) (result []*model.Lcpmaintainlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpmaintainlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpmaintainlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpmaintainlogDo) Delete(models ...*model.Lcpmaintainlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpmaintainlogDo) withDO(do gen.Dao) *lcpmaintainlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
