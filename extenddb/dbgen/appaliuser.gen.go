// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppaliuser(db *gorm.DB) appaliuser {
	_appaliuser := appaliuser{}

	_appaliuser.appaliuserDo.UseDB(db)
	_appaliuser.appaliuserDo.UseModel(&model.Appaliuser{})

	tableName := _appaliuser.appaliuserDo.TableName()
	_appaliuser.ALL = field.NewAsterisk(tableName)
	_appaliuser.ID = field.NewString(tableName, "Id")
	_appaliuser.CreationTime = field.NewTime(tableName, "CreationTime")
	_appaliuser.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appaliuser.AliUserID = field.NewString(tableName, "AliUserId")
	_appaliuser.Avatar = field.NewString(tableName, "Avatar")
	_appaliuser.Province = field.NewString(tableName, "Province")
	_appaliuser.City = field.NewString(tableName, "City")
	_appaliuser.NickName = field.NewString(tableName, "NickName")
	_appaliuser.IsStudentCertified = field.NewString(tableName, "IsStudentCertified")
	_appaliuser.UserType = field.NewString(tableName, "UserType")
	_appaliuser.UserStatus = field.NewString(tableName, "UserStatus")
	_appaliuser.IsCertified = field.NewString(tableName, "IsCertified")
	_appaliuser.Gender = field.NewString(tableName, "Gender")
	_appaliuser.TenantID = field.NewInt64(tableName, "TenantId")

	_appaliuser.fillFieldMap()

	return _appaliuser
}

type appaliuser struct {
	appaliuserDo appaliuserDo

	ALL                field.Asterisk
	ID                 field.String
	CreationTime       field.Time
	CreatorUserID      field.Int64
	AliUserID          field.String
	Avatar             field.String
	Province           field.String
	City               field.String
	NickName           field.String
	IsStudentCertified field.String
	UserType           field.String
	UserStatus         field.String
	IsCertified        field.String
	Gender             field.String
	TenantID           field.Int64

	fieldMap map[string]field.Expr
}

func (a appaliuser) Table(newTableName string) *appaliuser {
	a.appaliuserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appaliuser) As(alias string) *appaliuser {
	a.appaliuserDo.DO = *(a.appaliuserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appaliuser) updateTableName(table string) *appaliuser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.AliUserID = field.NewString(table, "AliUserId")
	a.Avatar = field.NewString(table, "Avatar")
	a.Province = field.NewString(table, "Province")
	a.City = field.NewString(table, "City")
	a.NickName = field.NewString(table, "NickName")
	a.IsStudentCertified = field.NewString(table, "IsStudentCertified")
	a.UserType = field.NewString(table, "UserType")
	a.UserStatus = field.NewString(table, "UserStatus")
	a.IsCertified = field.NewString(table, "IsCertified")
	a.Gender = field.NewString(table, "Gender")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appaliuser) WithContext(ctx context.Context) IAppaliuserDo {
	return a.appaliuserDo.WithContext(ctx)
}

func (a appaliuser) TableName() string { return a.appaliuserDo.TableName() }

func (a appaliuser) Alias() string { return a.appaliuserDo.Alias() }

func (a *appaliuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appaliuser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["AliUserId"] = a.AliUserID
	a.fieldMap["Avatar"] = a.Avatar
	a.fieldMap["Province"] = a.Province
	a.fieldMap["City"] = a.City
	a.fieldMap["NickName"] = a.NickName
	a.fieldMap["IsStudentCertified"] = a.IsStudentCertified
	a.fieldMap["UserType"] = a.UserType
	a.fieldMap["UserStatus"] = a.UserStatus
	a.fieldMap["IsCertified"] = a.IsCertified
	a.fieldMap["Gender"] = a.Gender
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appaliuser) clone(db *gorm.DB) appaliuser {
	a.appaliuserDo.ReplaceDB(db)
	return a
}

type appaliuserDo struct{ gen.DO }

type IAppaliuserDo interface {
	gen.SubQuery
	Debug() IAppaliuserDo
	WithContext(ctx context.Context) IAppaliuserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppaliuserDo
	Not(conds ...gen.Condition) IAppaliuserDo
	Or(conds ...gen.Condition) IAppaliuserDo
	Select(conds ...field.Expr) IAppaliuserDo
	Where(conds ...gen.Condition) IAppaliuserDo
	Order(conds ...field.Expr) IAppaliuserDo
	Distinct(cols ...field.Expr) IAppaliuserDo
	Omit(cols ...field.Expr) IAppaliuserDo
	Join(table schema.Tabler, on ...field.Expr) IAppaliuserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppaliuserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppaliuserDo
	Group(cols ...field.Expr) IAppaliuserDo
	Having(conds ...gen.Condition) IAppaliuserDo
	Limit(limit int) IAppaliuserDo
	Offset(offset int) IAppaliuserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppaliuserDo
	Unscoped() IAppaliuserDo
	Create(values ...*model.Appaliuser) error
	CreateInBatches(values []*model.Appaliuser, batchSize int) error
	Save(values ...*model.Appaliuser) error
	First() (*model.Appaliuser, error)
	Take() (*model.Appaliuser, error)
	Last() (*model.Appaliuser, error)
	Find() ([]*model.Appaliuser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appaliuser, err error)
	FindInBatches(result *[]*model.Appaliuser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appaliuser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppaliuserDo
	Assign(attrs ...field.AssignExpr) IAppaliuserDo
	Joins(fields ...field.RelationField) IAppaliuserDo
	Preload(fields ...field.RelationField) IAppaliuserDo
	FirstOrInit() (*model.Appaliuser, error)
	FirstOrCreate() (*model.Appaliuser, error)
	FindByPage(offset int, limit int) (result []*model.Appaliuser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppaliuserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appaliuserDo) Debug() IAppaliuserDo {
	return a.withDO(a.DO.Debug())
}

func (a appaliuserDo) WithContext(ctx context.Context) IAppaliuserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appaliuserDo) ReadDB() IAppaliuserDo {
	return a.Clauses(dbresolver.Read)
}

func (a appaliuserDo) WriteDB() IAppaliuserDo {
	return a.Clauses(dbresolver.Write)
}

func (a appaliuserDo) Clauses(conds ...clause.Expression) IAppaliuserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appaliuserDo) Returning(value interface{}, columns ...string) IAppaliuserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appaliuserDo) Not(conds ...gen.Condition) IAppaliuserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appaliuserDo) Or(conds ...gen.Condition) IAppaliuserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appaliuserDo) Select(conds ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appaliuserDo) Where(conds ...gen.Condition) IAppaliuserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appaliuserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppaliuserDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appaliuserDo) Order(conds ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appaliuserDo) Distinct(cols ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appaliuserDo) Omit(cols ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appaliuserDo) Join(table schema.Tabler, on ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appaliuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appaliuserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appaliuserDo) Group(cols ...field.Expr) IAppaliuserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appaliuserDo) Having(conds ...gen.Condition) IAppaliuserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appaliuserDo) Limit(limit int) IAppaliuserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appaliuserDo) Offset(offset int) IAppaliuserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appaliuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppaliuserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appaliuserDo) Unscoped() IAppaliuserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appaliuserDo) Create(values ...*model.Appaliuser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appaliuserDo) CreateInBatches(values []*model.Appaliuser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appaliuserDo) Save(values ...*model.Appaliuser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appaliuserDo) First() (*model.Appaliuser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appaliuser), nil
	}
}

func (a appaliuserDo) Take() (*model.Appaliuser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appaliuser), nil
	}
}

func (a appaliuserDo) Last() (*model.Appaliuser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appaliuser), nil
	}
}

func (a appaliuserDo) Find() ([]*model.Appaliuser, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appaliuser), err
}

func (a appaliuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appaliuser, err error) {
	buf := make([]*model.Appaliuser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appaliuserDo) FindInBatches(result *[]*model.Appaliuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appaliuserDo) Attrs(attrs ...field.AssignExpr) IAppaliuserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appaliuserDo) Assign(attrs ...field.AssignExpr) IAppaliuserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appaliuserDo) Joins(fields ...field.RelationField) IAppaliuserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appaliuserDo) Preload(fields ...field.RelationField) IAppaliuserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appaliuserDo) FirstOrInit() (*model.Appaliuser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appaliuser), nil
	}
}

func (a appaliuserDo) FirstOrCreate() (*model.Appaliuser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appaliuser), nil
	}
}

func (a appaliuserDo) FindByPage(offset int, limit int) (result []*model.Appaliuser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appaliuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appaliuserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appaliuserDo) Delete(models ...*model.Appaliuser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appaliuserDo) withDO(do gen.Dao) *appaliuserDo {
	a.DO = *do.(*gen.DO)
	return a
}
