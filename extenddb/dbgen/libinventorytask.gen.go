// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibinventorytask(db *gorm.DB) libinventorytask {
	_libinventorytask := libinventorytask{}

	_libinventorytask.libinventorytaskDo.UseDB(db)
	_libinventorytask.libinventorytaskDo.UseModel(&model.Libinventorytask{})

	tableName := _libinventorytask.libinventorytaskDo.TableName()
	_libinventorytask.ALL = field.NewAsterisk(tableName)
	_libinventorytask.ID = field.NewString(tableName, "Id")
	_libinventorytask.CreationTime = field.NewTime(tableName, "CreationTime")
	_libinventorytask.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libinventorytask.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libinventorytask.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libinventorytask.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libinventorytask.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libinventorytask.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libinventorytask.TaskName = field.NewString(tableName, "TaskName")
	_libinventorytask.TaskType = field.NewInt64(tableName, "TaskType")
	_libinventorytask.TriggerSatus = field.NewInt64(tableName, "TriggerSatus")
	_libinventorytask.InventoryStartDate = field.NewTime(tableName, "InventoryStartDate")
	_libinventorytask.InventoryEndDate = field.NewTime(tableName, "InventoryEndDate")
	_libinventorytask.Interval = field.NewInt64(tableName, "Interval")
	_libinventorytask.IsEnable = field.NewField(tableName, "IsEnable")
	_libinventorytask.Remark = field.NewString(tableName, "Remark")
	_libinventorytask.TenantID = field.NewInt64(tableName, "TenantId")
	_libinventorytask.OriginType = field.NewInt64(tableName, "OriginType")

	_libinventorytask.fillFieldMap()

	return _libinventorytask
}

type libinventorytask struct {
	libinventorytaskDo libinventorytaskDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TaskName             field.String
	TaskType             field.Int64
	TriggerSatus         field.Int64
	InventoryStartDate   field.Time
	InventoryEndDate     field.Time
	Interval             field.Int64
	IsEnable             field.Field
	Remark               field.String
	TenantID             field.Int64
	OriginType           field.Int64

	fieldMap map[string]field.Expr
}

func (l libinventorytask) Table(newTableName string) *libinventorytask {
	l.libinventorytaskDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libinventorytask) As(alias string) *libinventorytask {
	l.libinventorytaskDo.DO = *(l.libinventorytaskDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libinventorytask) updateTableName(table string) *libinventorytask {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TaskName = field.NewString(table, "TaskName")
	l.TaskType = field.NewInt64(table, "TaskType")
	l.TriggerSatus = field.NewInt64(table, "TriggerSatus")
	l.InventoryStartDate = field.NewTime(table, "InventoryStartDate")
	l.InventoryEndDate = field.NewTime(table, "InventoryEndDate")
	l.Interval = field.NewInt64(table, "Interval")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.OriginType = field.NewInt64(table, "OriginType")

	l.fillFieldMap()

	return l
}

func (l *libinventorytask) WithContext(ctx context.Context) ILibinventorytaskDo {
	return l.libinventorytaskDo.WithContext(ctx)
}

func (l libinventorytask) TableName() string { return l.libinventorytaskDo.TableName() }

func (l libinventorytask) Alias() string { return l.libinventorytaskDo.Alias() }

func (l *libinventorytask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libinventorytask) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 18)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TaskName"] = l.TaskName
	l.fieldMap["TaskType"] = l.TaskType
	l.fieldMap["TriggerSatus"] = l.TriggerSatus
	l.fieldMap["InventoryStartDate"] = l.InventoryStartDate
	l.fieldMap["InventoryEndDate"] = l.InventoryEndDate
	l.fieldMap["Interval"] = l.Interval
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["OriginType"] = l.OriginType
}

func (l libinventorytask) clone(db *gorm.DB) libinventorytask {
	l.libinventorytaskDo.ReplaceDB(db)
	return l
}

type libinventorytaskDo struct{ gen.DO }

type ILibinventorytaskDo interface {
	gen.SubQuery
	Debug() ILibinventorytaskDo
	WithContext(ctx context.Context) ILibinventorytaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibinventorytaskDo
	Not(conds ...gen.Condition) ILibinventorytaskDo
	Or(conds ...gen.Condition) ILibinventorytaskDo
	Select(conds ...field.Expr) ILibinventorytaskDo
	Where(conds ...gen.Condition) ILibinventorytaskDo
	Order(conds ...field.Expr) ILibinventorytaskDo
	Distinct(cols ...field.Expr) ILibinventorytaskDo
	Omit(cols ...field.Expr) ILibinventorytaskDo
	Join(table schema.Tabler, on ...field.Expr) ILibinventorytaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventorytaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibinventorytaskDo
	Group(cols ...field.Expr) ILibinventorytaskDo
	Having(conds ...gen.Condition) ILibinventorytaskDo
	Limit(limit int) ILibinventorytaskDo
	Offset(offset int) ILibinventorytaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventorytaskDo
	Unscoped() ILibinventorytaskDo
	Create(values ...*model.Libinventorytask) error
	CreateInBatches(values []*model.Libinventorytask, batchSize int) error
	Save(values ...*model.Libinventorytask) error
	First() (*model.Libinventorytask, error)
	Take() (*model.Libinventorytask, error)
	Last() (*model.Libinventorytask, error)
	Find() ([]*model.Libinventorytask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventorytask, err error)
	FindInBatches(result *[]*model.Libinventorytask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libinventorytask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibinventorytaskDo
	Assign(attrs ...field.AssignExpr) ILibinventorytaskDo
	Joins(fields ...field.RelationField) ILibinventorytaskDo
	Preload(fields ...field.RelationField) ILibinventorytaskDo
	FirstOrInit() (*model.Libinventorytask, error)
	FirstOrCreate() (*model.Libinventorytask, error)
	FindByPage(offset int, limit int) (result []*model.Libinventorytask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibinventorytaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libinventorytaskDo) Debug() ILibinventorytaskDo {
	return l.withDO(l.DO.Debug())
}

func (l libinventorytaskDo) WithContext(ctx context.Context) ILibinventorytaskDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libinventorytaskDo) ReadDB() ILibinventorytaskDo {
	return l.Clauses(dbresolver.Read)
}

func (l libinventorytaskDo) WriteDB() ILibinventorytaskDo {
	return l.Clauses(dbresolver.Write)
}

func (l libinventorytaskDo) Clauses(conds ...clause.Expression) ILibinventorytaskDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libinventorytaskDo) Returning(value interface{}, columns ...string) ILibinventorytaskDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libinventorytaskDo) Not(conds ...gen.Condition) ILibinventorytaskDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libinventorytaskDo) Or(conds ...gen.Condition) ILibinventorytaskDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libinventorytaskDo) Select(conds ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libinventorytaskDo) Where(conds ...gen.Condition) ILibinventorytaskDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libinventorytaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibinventorytaskDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libinventorytaskDo) Order(conds ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libinventorytaskDo) Distinct(cols ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libinventorytaskDo) Omit(cols ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libinventorytaskDo) Join(table schema.Tabler, on ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libinventorytaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libinventorytaskDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libinventorytaskDo) Group(cols ...field.Expr) ILibinventorytaskDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libinventorytaskDo) Having(conds ...gen.Condition) ILibinventorytaskDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libinventorytaskDo) Limit(limit int) ILibinventorytaskDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libinventorytaskDo) Offset(offset int) ILibinventorytaskDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libinventorytaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventorytaskDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libinventorytaskDo) Unscoped() ILibinventorytaskDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libinventorytaskDo) Create(values ...*model.Libinventorytask) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libinventorytaskDo) CreateInBatches(values []*model.Libinventorytask, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libinventorytaskDo) Save(values ...*model.Libinventorytask) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libinventorytaskDo) First() (*model.Libinventorytask, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorytask), nil
	}
}

func (l libinventorytaskDo) Take() (*model.Libinventorytask, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorytask), nil
	}
}

func (l libinventorytaskDo) Last() (*model.Libinventorytask, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorytask), nil
	}
}

func (l libinventorytaskDo) Find() ([]*model.Libinventorytask, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libinventorytask), err
}

func (l libinventorytaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventorytask, err error) {
	buf := make([]*model.Libinventorytask, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libinventorytaskDo) FindInBatches(result *[]*model.Libinventorytask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libinventorytaskDo) Attrs(attrs ...field.AssignExpr) ILibinventorytaskDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libinventorytaskDo) Assign(attrs ...field.AssignExpr) ILibinventorytaskDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libinventorytaskDo) Joins(fields ...field.RelationField) ILibinventorytaskDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libinventorytaskDo) Preload(fields ...field.RelationField) ILibinventorytaskDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libinventorytaskDo) FirstOrInit() (*model.Libinventorytask, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorytask), nil
	}
}

func (l libinventorytaskDo) FirstOrCreate() (*model.Libinventorytask, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorytask), nil
	}
}

func (l libinventorytaskDo) FindByPage(offset int, limit int) (result []*model.Libinventorytask, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libinventorytaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libinventorytaskDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libinventorytaskDo) Delete(models ...*model.Libinventorytask) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libinventorytaskDo) withDO(do gen.Dao) *libinventorytaskDo {
	l.DO = *do.(*gen.DO)
	return l
}
