// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpversion(db *gorm.DB) lcpversion {
	_lcpversion := lcpversion{}

	_lcpversion.lcpversionDo.UseDB(db)
	_lcpversion.lcpversionDo.UseModel(&model.Lcpversion{})

	tableName := _lcpversion.lcpversionDo.TableName()
	_lcpversion.ALL = field.NewAsterisk(tableName)
	_lcpversion.ID = field.NewString(tableName, "Id")
	_lcpversion.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpversion.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpversion.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpversion.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpversion.TargetType = field.NewString(tableName, "TargetType")
	_lcpversion.Code = field.NewInt64(tableName, "Code")
	_lcpversion.Name = field.NewString(tableName, "Name")
	_lcpversion.AttachmentID = field.NewString(tableName, "AttachmentId")
	_lcpversion.Description = field.NewString(tableName, "Description")
	_lcpversion.VersionType = field.NewInt64(tableName, "VersionType")
	_lcpversion.PackageType = field.NewInt64(tableName, "PackageType")
	_lcpversion.StorageMode = field.NewInt64(tableName, "StorageMode")
	_lcpversion.TenantID = field.NewInt64(tableName, "TenantId")
	_lcpversion.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpversion.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpversion.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpversion.ProductID = field.NewString(tableName, "ProductId")
	_lcpversion.URL = field.NewString(tableName, "Url")

	_lcpversion.fillFieldMap()

	return _lcpversion
}

type lcpversion struct {
	lcpversionDo lcpversionDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	TargetType           field.String
	Code                 field.Int64
	Name                 field.String
	AttachmentID         field.String
	Description          field.String
	VersionType          field.Int64
	PackageType          field.Int64
	StorageMode          field.Int64
	TenantID             field.Int64
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	IsDeleted            field.Field
	ProductID            field.String
	URL                  field.String

	fieldMap map[string]field.Expr
}

func (l lcpversion) Table(newTableName string) *lcpversion {
	l.lcpversionDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpversion) As(alias string) *lcpversion {
	l.lcpversionDo.DO = *(l.lcpversionDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpversion) updateTableName(table string) *lcpversion {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.TargetType = field.NewString(table, "TargetType")
	l.Code = field.NewInt64(table, "Code")
	l.Name = field.NewString(table, "Name")
	l.AttachmentID = field.NewString(table, "AttachmentId")
	l.Description = field.NewString(table, "Description")
	l.VersionType = field.NewInt64(table, "VersionType")
	l.PackageType = field.NewInt64(table, "PackageType")
	l.StorageMode = field.NewInt64(table, "StorageMode")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.ProductID = field.NewString(table, "ProductId")
	l.URL = field.NewString(table, "Url")

	l.fillFieldMap()

	return l
}

func (l *lcpversion) WithContext(ctx context.Context) ILcpversionDo {
	return l.lcpversionDo.WithContext(ctx)
}

func (l lcpversion) TableName() string { return l.lcpversionDo.TableName() }

func (l lcpversion) Alias() string { return l.lcpversionDo.Alias() }

func (l *lcpversion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpversion) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 19)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["TargetType"] = l.TargetType
	l.fieldMap["Code"] = l.Code
	l.fieldMap["Name"] = l.Name
	l.fieldMap["AttachmentId"] = l.AttachmentID
	l.fieldMap["Description"] = l.Description
	l.fieldMap["VersionType"] = l.VersionType
	l.fieldMap["PackageType"] = l.PackageType
	l.fieldMap["StorageMode"] = l.StorageMode
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["ProductId"] = l.ProductID
	l.fieldMap["Url"] = l.URL
}

func (l lcpversion) clone(db *gorm.DB) lcpversion {
	l.lcpversionDo.ReplaceDB(db)
	return l
}

type lcpversionDo struct{ gen.DO }

type ILcpversionDo interface {
	gen.SubQuery
	Debug() ILcpversionDo
	WithContext(ctx context.Context) ILcpversionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpversionDo
	Not(conds ...gen.Condition) ILcpversionDo
	Or(conds ...gen.Condition) ILcpversionDo
	Select(conds ...field.Expr) ILcpversionDo
	Where(conds ...gen.Condition) ILcpversionDo
	Order(conds ...field.Expr) ILcpversionDo
	Distinct(cols ...field.Expr) ILcpversionDo
	Omit(cols ...field.Expr) ILcpversionDo
	Join(table schema.Tabler, on ...field.Expr) ILcpversionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpversionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpversionDo
	Group(cols ...field.Expr) ILcpversionDo
	Having(conds ...gen.Condition) ILcpversionDo
	Limit(limit int) ILcpversionDo
	Offset(offset int) ILcpversionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpversionDo
	Unscoped() ILcpversionDo
	Create(values ...*model.Lcpversion) error
	CreateInBatches(values []*model.Lcpversion, batchSize int) error
	Save(values ...*model.Lcpversion) error
	First() (*model.Lcpversion, error)
	Take() (*model.Lcpversion, error)
	Last() (*model.Lcpversion, error)
	Find() ([]*model.Lcpversion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpversion, err error)
	FindInBatches(result *[]*model.Lcpversion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpversion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpversionDo
	Assign(attrs ...field.AssignExpr) ILcpversionDo
	Joins(fields ...field.RelationField) ILcpversionDo
	Preload(fields ...field.RelationField) ILcpversionDo
	FirstOrInit() (*model.Lcpversion, error)
	FirstOrCreate() (*model.Lcpversion, error)
	FindByPage(offset int, limit int) (result []*model.Lcpversion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpversionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpversionDo) Debug() ILcpversionDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpversionDo) WithContext(ctx context.Context) ILcpversionDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpversionDo) ReadDB() ILcpversionDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpversionDo) WriteDB() ILcpversionDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpversionDo) Clauses(conds ...clause.Expression) ILcpversionDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpversionDo) Returning(value interface{}, columns ...string) ILcpversionDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpversionDo) Not(conds ...gen.Condition) ILcpversionDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpversionDo) Or(conds ...gen.Condition) ILcpversionDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpversionDo) Select(conds ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpversionDo) Where(conds ...gen.Condition) ILcpversionDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpversionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpversionDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpversionDo) Order(conds ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpversionDo) Distinct(cols ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpversionDo) Omit(cols ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpversionDo) Join(table schema.Tabler, on ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpversionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpversionDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpversionDo) Group(cols ...field.Expr) ILcpversionDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpversionDo) Having(conds ...gen.Condition) ILcpversionDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpversionDo) Limit(limit int) ILcpversionDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpversionDo) Offset(offset int) ILcpversionDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpversionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpversionDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpversionDo) Unscoped() ILcpversionDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpversionDo) Create(values ...*model.Lcpversion) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpversionDo) CreateInBatches(values []*model.Lcpversion, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpversionDo) Save(values ...*model.Lcpversion) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpversionDo) First() (*model.Lcpversion, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpversion), nil
	}
}

func (l lcpversionDo) Take() (*model.Lcpversion, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpversion), nil
	}
}

func (l lcpversionDo) Last() (*model.Lcpversion, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpversion), nil
	}
}

func (l lcpversionDo) Find() ([]*model.Lcpversion, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpversion), err
}

func (l lcpversionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpversion, err error) {
	buf := make([]*model.Lcpversion, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpversionDo) FindInBatches(result *[]*model.Lcpversion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpversionDo) Attrs(attrs ...field.AssignExpr) ILcpversionDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpversionDo) Assign(attrs ...field.AssignExpr) ILcpversionDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpversionDo) Joins(fields ...field.RelationField) ILcpversionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpversionDo) Preload(fields ...field.RelationField) ILcpversionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpversionDo) FirstOrInit() (*model.Lcpversion, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpversion), nil
	}
}

func (l lcpversionDo) FirstOrCreate() (*model.Lcpversion, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpversion), nil
	}
}

func (l lcpversionDo) FindByPage(offset int, limit int) (result []*model.Lcpversion, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpversionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpversionDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpversionDo) Delete(models ...*model.Lcpversion) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpversionDo) withDO(do gen.Dao) *lcpversionDo {
	l.DO = *do.(*gen.DO)
	return l
}
