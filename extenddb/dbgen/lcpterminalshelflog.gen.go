// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminalshelflog(db *gorm.DB) lcpterminalshelflog {
	_lcpterminalshelflog := lcpterminalshelflog{}

	_lcpterminalshelflog.lcpterminalshelflogDo.UseDB(db)
	_lcpterminalshelflog.lcpterminalshelflogDo.UseModel(&model.Lcpterminalshelflog{})

	tableName := _lcpterminalshelflog.lcpterminalshelflogDo.TableName()
	_lcpterminalshelflog.ALL = field.NewAsterisk(tableName)
	_lcpterminalshelflog.ID = field.NewString(tableName, "Id")
	_lcpterminalshelflog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminalshelflog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminalshelflog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpterminalshelflog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpterminalshelflog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpterminalshelflog.TerminalShelfID = field.NewString(tableName, "TerminalShelfId")
	_lcpterminalshelflog.TerminalShelfName = field.NewString(tableName, "TerminalShelfName")
	_lcpterminalshelflog.ItemID = field.NewString(tableName, "ItemId")
	_lcpterminalshelflog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_lcpterminalshelflog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_lcpterminalshelflog.TerminalShelfLogType = field.NewInt64(tableName, "TerminalShelfLogType")
	_lcpterminalshelflog.IsAdmin = field.NewField(tableName, "IsAdmin")
	_lcpterminalshelflog.OperatorID = field.NewString(tableName, "OperatorId")
	_lcpterminalshelflog.OperatorName = field.NewString(tableName, "OperatorName")
	_lcpterminalshelflog.OperatorAccount = field.NewString(tableName, "OperatorAccount")
	_lcpterminalshelflog.Result = field.NewInt64(tableName, "Result")
	_lcpterminalshelflog.Remark = field.NewString(tableName, "Remark")
	_lcpterminalshelflog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpterminalshelflog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminalshelflog.fillFieldMap()

	return _lcpterminalshelflog
}

type lcpterminalshelflog struct {
	lcpterminalshelflogDo lcpterminalshelflogDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	TerminalID           field.String
	TerminalCode         field.String
	TerminalName         field.String
	TerminalShelfID      field.String
	TerminalShelfName    field.String
	ItemID               field.String
	ItemTitle            field.String
	ItemBarcode          field.String
	TerminalShelfLogType field.Int64
	IsAdmin              field.Field
	OperatorID           field.String
	OperatorName         field.String
	OperatorAccount      field.String
	Result               field.Int64
	Remark               field.String
	ErrorMessage         field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminalshelflog) Table(newTableName string) *lcpterminalshelflog {
	l.lcpterminalshelflogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminalshelflog) As(alias string) *lcpterminalshelflog {
	l.lcpterminalshelflogDo.DO = *(l.lcpterminalshelflogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminalshelflog) updateTableName(table string) *lcpterminalshelflog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.TerminalShelfID = field.NewString(table, "TerminalShelfId")
	l.TerminalShelfName = field.NewString(table, "TerminalShelfName")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.TerminalShelfLogType = field.NewInt64(table, "TerminalShelfLogType")
	l.IsAdmin = field.NewField(table, "IsAdmin")
	l.OperatorID = field.NewString(table, "OperatorId")
	l.OperatorName = field.NewString(table, "OperatorName")
	l.OperatorAccount = field.NewString(table, "OperatorAccount")
	l.Result = field.NewInt64(table, "Result")
	l.Remark = field.NewString(table, "Remark")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminalshelflog) WithContext(ctx context.Context) ILcpterminalshelflogDo {
	return l.lcpterminalshelflogDo.WithContext(ctx)
}

func (l lcpterminalshelflog) TableName() string { return l.lcpterminalshelflogDo.TableName() }

func (l lcpterminalshelflog) Alias() string { return l.lcpterminalshelflogDo.Alias() }

func (l *lcpterminalshelflog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminalshelflog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 20)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["TerminalShelfId"] = l.TerminalShelfID
	l.fieldMap["TerminalShelfName"] = l.TerminalShelfName
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["TerminalShelfLogType"] = l.TerminalShelfLogType
	l.fieldMap["IsAdmin"] = l.IsAdmin
	l.fieldMap["OperatorId"] = l.OperatorID
	l.fieldMap["OperatorName"] = l.OperatorName
	l.fieldMap["OperatorAccount"] = l.OperatorAccount
	l.fieldMap["Result"] = l.Result
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminalshelflog) clone(db *gorm.DB) lcpterminalshelflog {
	l.lcpterminalshelflogDo.ReplaceDB(db)
	return l
}

type lcpterminalshelflogDo struct{ gen.DO }

type ILcpterminalshelflogDo interface {
	gen.SubQuery
	Debug() ILcpterminalshelflogDo
	WithContext(ctx context.Context) ILcpterminalshelflogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminalshelflogDo
	Not(conds ...gen.Condition) ILcpterminalshelflogDo
	Or(conds ...gen.Condition) ILcpterminalshelflogDo
	Select(conds ...field.Expr) ILcpterminalshelflogDo
	Where(conds ...gen.Condition) ILcpterminalshelflogDo
	Order(conds ...field.Expr) ILcpterminalshelflogDo
	Distinct(cols ...field.Expr) ILcpterminalshelflogDo
	Omit(cols ...field.Expr) ILcpterminalshelflogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminalshelflogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelflogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelflogDo
	Group(cols ...field.Expr) ILcpterminalshelflogDo
	Having(conds ...gen.Condition) ILcpterminalshelflogDo
	Limit(limit int) ILcpterminalshelflogDo
	Offset(offset int) ILcpterminalshelflogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalshelflogDo
	Unscoped() ILcpterminalshelflogDo
	Create(values ...*model.Lcpterminalshelflog) error
	CreateInBatches(values []*model.Lcpterminalshelflog, batchSize int) error
	Save(values ...*model.Lcpterminalshelflog) error
	First() (*model.Lcpterminalshelflog, error)
	Take() (*model.Lcpterminalshelflog, error)
	Last() (*model.Lcpterminalshelflog, error)
	Find() ([]*model.Lcpterminalshelflog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalshelflog, err error)
	FindInBatches(result *[]*model.Lcpterminalshelflog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminalshelflog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminalshelflogDo
	Assign(attrs ...field.AssignExpr) ILcpterminalshelflogDo
	Joins(fields ...field.RelationField) ILcpterminalshelflogDo
	Preload(fields ...field.RelationField) ILcpterminalshelflogDo
	FirstOrInit() (*model.Lcpterminalshelflog, error)
	FirstOrCreate() (*model.Lcpterminalshelflog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminalshelflog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminalshelflogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminalshelflogDo) Debug() ILcpterminalshelflogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminalshelflogDo) WithContext(ctx context.Context) ILcpterminalshelflogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminalshelflogDo) ReadDB() ILcpterminalshelflogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminalshelflogDo) WriteDB() ILcpterminalshelflogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminalshelflogDo) Clauses(conds ...clause.Expression) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminalshelflogDo) Returning(value interface{}, columns ...string) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminalshelflogDo) Not(conds ...gen.Condition) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminalshelflogDo) Or(conds ...gen.Condition) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminalshelflogDo) Select(conds ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminalshelflogDo) Where(conds ...gen.Condition) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminalshelflogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminalshelflogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminalshelflogDo) Order(conds ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminalshelflogDo) Distinct(cols ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminalshelflogDo) Omit(cols ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminalshelflogDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminalshelflogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminalshelflogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminalshelflogDo) Group(cols ...field.Expr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminalshelflogDo) Having(conds ...gen.Condition) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminalshelflogDo) Limit(limit int) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminalshelflogDo) Offset(offset int) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminalshelflogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminalshelflogDo) Unscoped() ILcpterminalshelflogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminalshelflogDo) Create(values ...*model.Lcpterminalshelflog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminalshelflogDo) CreateInBatches(values []*model.Lcpterminalshelflog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminalshelflogDo) Save(values ...*model.Lcpterminalshelflog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminalshelflogDo) First() (*model.Lcpterminalshelflog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelflog), nil
	}
}

func (l lcpterminalshelflogDo) Take() (*model.Lcpterminalshelflog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelflog), nil
	}
}

func (l lcpterminalshelflogDo) Last() (*model.Lcpterminalshelflog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelflog), nil
	}
}

func (l lcpterminalshelflogDo) Find() ([]*model.Lcpterminalshelflog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminalshelflog), err
}

func (l lcpterminalshelflogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalshelflog, err error) {
	buf := make([]*model.Lcpterminalshelflog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminalshelflogDo) FindInBatches(result *[]*model.Lcpterminalshelflog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminalshelflogDo) Attrs(attrs ...field.AssignExpr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminalshelflogDo) Assign(attrs ...field.AssignExpr) ILcpterminalshelflogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminalshelflogDo) Joins(fields ...field.RelationField) ILcpterminalshelflogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminalshelflogDo) Preload(fields ...field.RelationField) ILcpterminalshelflogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminalshelflogDo) FirstOrInit() (*model.Lcpterminalshelflog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelflog), nil
	}
}

func (l lcpterminalshelflogDo) FirstOrCreate() (*model.Lcpterminalshelflog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalshelflog), nil
	}
}

func (l lcpterminalshelflogDo) FindByPage(offset int, limit int) (result []*model.Lcpterminalshelflog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminalshelflogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminalshelflogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminalshelflogDo) Delete(models ...*model.Lcpterminalshelflog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminalshelflogDo) withDO(do gen.Dao) *lcpterminalshelflogDo {
	l.DO = *do.(*gen.DO)
	return l
}
