// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfirejobparameter(db *gorm.DB) hangfirejobparameter {
	_hangfirejobparameter := hangfirejobparameter{}

	_hangfirejobparameter.hangfirejobparameterDo.UseDB(db)
	_hangfirejobparameter.hangfirejobparameterDo.UseModel(&model.Hangfirejobparameter{})

	tableName := _hangfirejobparameter.hangfirejobparameterDo.TableName()
	_hangfirejobparameter.ALL = field.NewAsterisk(tableName)
	_hangfirejobparameter.ID = field.NewInt64(tableName, "Id")
	_hangfirejobparameter.JobID = field.NewInt64(tableName, "JobId")
	_hangfirejobparameter.Name = field.NewString(tableName, "Name")
	_hangfirejobparameter.Value = field.NewString(tableName, "Value")

	_hangfirejobparameter.fillFieldMap()

	return _hangfirejobparameter
}

type hangfirejobparameter struct {
	hangfirejobparameterDo hangfirejobparameterDo

	ALL   field.Asterisk
	ID    field.Int64
	JobID field.Int64
	Name  field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (h hangfirejobparameter) Table(newTableName string) *hangfirejobparameter {
	h.hangfirejobparameterDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirejobparameter) As(alias string) *hangfirejobparameter {
	h.hangfirejobparameterDo.DO = *(h.hangfirejobparameterDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirejobparameter) updateTableName(table string) *hangfirejobparameter {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.JobID = field.NewInt64(table, "JobId")
	h.Name = field.NewString(table, "Name")
	h.Value = field.NewString(table, "Value")

	h.fillFieldMap()

	return h
}

func (h *hangfirejobparameter) WithContext(ctx context.Context) IHangfirejobparameterDo {
	return h.hangfirejobparameterDo.WithContext(ctx)
}

func (h hangfirejobparameter) TableName() string { return h.hangfirejobparameterDo.TableName() }

func (h hangfirejobparameter) Alias() string { return h.hangfirejobparameterDo.Alias() }

func (h *hangfirejobparameter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirejobparameter) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 4)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["JobId"] = h.JobID
	h.fieldMap["Name"] = h.Name
	h.fieldMap["Value"] = h.Value
}

func (h hangfirejobparameter) clone(db *gorm.DB) hangfirejobparameter {
	h.hangfirejobparameterDo.ReplaceDB(db)
	return h
}

type hangfirejobparameterDo struct{ gen.DO }

type IHangfirejobparameterDo interface {
	gen.SubQuery
	Debug() IHangfirejobparameterDo
	WithContext(ctx context.Context) IHangfirejobparameterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirejobparameterDo
	Not(conds ...gen.Condition) IHangfirejobparameterDo
	Or(conds ...gen.Condition) IHangfirejobparameterDo
	Select(conds ...field.Expr) IHangfirejobparameterDo
	Where(conds ...gen.Condition) IHangfirejobparameterDo
	Order(conds ...field.Expr) IHangfirejobparameterDo
	Distinct(cols ...field.Expr) IHangfirejobparameterDo
	Omit(cols ...field.Expr) IHangfirejobparameterDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirejobparameterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobparameterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobparameterDo
	Group(cols ...field.Expr) IHangfirejobparameterDo
	Having(conds ...gen.Condition) IHangfirejobparameterDo
	Limit(limit int) IHangfirejobparameterDo
	Offset(offset int) IHangfirejobparameterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobparameterDo
	Unscoped() IHangfirejobparameterDo
	Create(values ...*model.Hangfirejobparameter) error
	CreateInBatches(values []*model.Hangfirejobparameter, batchSize int) error
	Save(values ...*model.Hangfirejobparameter) error
	First() (*model.Hangfirejobparameter, error)
	Take() (*model.Hangfirejobparameter, error)
	Last() (*model.Hangfirejobparameter, error)
	Find() ([]*model.Hangfirejobparameter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejobparameter, err error)
	FindInBatches(result *[]*model.Hangfirejobparameter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirejobparameter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirejobparameterDo
	Assign(attrs ...field.AssignExpr) IHangfirejobparameterDo
	Joins(fields ...field.RelationField) IHangfirejobparameterDo
	Preload(fields ...field.RelationField) IHangfirejobparameterDo
	FirstOrInit() (*model.Hangfirejobparameter, error)
	FirstOrCreate() (*model.Hangfirejobparameter, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirejobparameter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirejobparameterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirejobparameterDo) Debug() IHangfirejobparameterDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirejobparameterDo) WithContext(ctx context.Context) IHangfirejobparameterDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirejobparameterDo) ReadDB() IHangfirejobparameterDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirejobparameterDo) WriteDB() IHangfirejobparameterDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirejobparameterDo) Clauses(conds ...clause.Expression) IHangfirejobparameterDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirejobparameterDo) Returning(value interface{}, columns ...string) IHangfirejobparameterDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirejobparameterDo) Not(conds ...gen.Condition) IHangfirejobparameterDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirejobparameterDo) Or(conds ...gen.Condition) IHangfirejobparameterDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirejobparameterDo) Select(conds ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirejobparameterDo) Where(conds ...gen.Condition) IHangfirejobparameterDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirejobparameterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirejobparameterDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirejobparameterDo) Order(conds ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirejobparameterDo) Distinct(cols ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirejobparameterDo) Omit(cols ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirejobparameterDo) Join(table schema.Tabler, on ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirejobparameterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirejobparameterDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirejobparameterDo) Group(cols ...field.Expr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirejobparameterDo) Having(conds ...gen.Condition) IHangfirejobparameterDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirejobparameterDo) Limit(limit int) IHangfirejobparameterDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirejobparameterDo) Offset(offset int) IHangfirejobparameterDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirejobparameterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobparameterDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirejobparameterDo) Unscoped() IHangfirejobparameterDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirejobparameterDo) Create(values ...*model.Hangfirejobparameter) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirejobparameterDo) CreateInBatches(values []*model.Hangfirejobparameter, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirejobparameterDo) Save(values ...*model.Hangfirejobparameter) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirejobparameterDo) First() (*model.Hangfirejobparameter, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobparameter), nil
	}
}

func (h hangfirejobparameterDo) Take() (*model.Hangfirejobparameter, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobparameter), nil
	}
}

func (h hangfirejobparameterDo) Last() (*model.Hangfirejobparameter, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobparameter), nil
	}
}

func (h hangfirejobparameterDo) Find() ([]*model.Hangfirejobparameter, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirejobparameter), err
}

func (h hangfirejobparameterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejobparameter, err error) {
	buf := make([]*model.Hangfirejobparameter, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirejobparameterDo) FindInBatches(result *[]*model.Hangfirejobparameter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirejobparameterDo) Attrs(attrs ...field.AssignExpr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirejobparameterDo) Assign(attrs ...field.AssignExpr) IHangfirejobparameterDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirejobparameterDo) Joins(fields ...field.RelationField) IHangfirejobparameterDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirejobparameterDo) Preload(fields ...field.RelationField) IHangfirejobparameterDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirejobparameterDo) FirstOrInit() (*model.Hangfirejobparameter, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobparameter), nil
	}
}

func (h hangfirejobparameterDo) FirstOrCreate() (*model.Hangfirejobparameter, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobparameter), nil
	}
}

func (h hangfirejobparameterDo) FindByPage(offset int, limit int) (result []*model.Hangfirejobparameter, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirejobparameterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirejobparameterDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirejobparameterDo) Delete(models ...*model.Hangfirejobparameter) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirejobparameterDo) withDO(do gen.Dao) *hangfirejobparameterDo {
	h.DO = *do.(*gen.DO)
	return h
}
