// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newOwenAuditlog(db *gorm.DB) owenAuditlog {
	_owenAuditlog := owenAuditlog{}

	_owenAuditlog.owenAuditlogDo.UseDB(db)
	_owenAuditlog.owenAuditlogDo.UseModel(&model.OwenAuditlog{})

	tableName := _owenAuditlog.owenAuditlogDo.TableName()
	_owenAuditlog.ALL = field.NewAsterisk(tableName)
	_owenAuditlog.ID = field.NewInt64(tableName, "id")
	_owenAuditlog.UserID = field.NewInt64(tableName, "user_id")
	_owenAuditlog.Action = field.NewString(tableName, "action")
	_owenAuditlog.Request = field.NewString(tableName, "request")
	_owenAuditlog.Response = field.NewString(tableName, "response")
	_owenAuditlog.Error = field.NewString(tableName, "error")
	_owenAuditlog.Status = field.NewInt64(tableName, "status")
	_owenAuditlog.Duration = field.NewFloat64(tableName, "duration")
	_owenAuditlog.CreatedAt = field.NewTime(tableName, "created_at")
	_owenAuditlog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_owenAuditlog.DeletedAt = field.NewField(tableName, "deleted_at")

	_owenAuditlog.fillFieldMap()

	return _owenAuditlog
}

type owenAuditlog struct {
	owenAuditlogDo owenAuditlogDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64
	Action    field.String
	Request   field.String
	Response  field.String
	Error     field.String
	Status    field.Int64
	Duration  field.Float64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (o owenAuditlog) Table(newTableName string) *owenAuditlog {
	o.owenAuditlogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o owenAuditlog) As(alias string) *owenAuditlog {
	o.owenAuditlogDo.DO = *(o.owenAuditlogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *owenAuditlog) updateTableName(table string) *owenAuditlog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.UserID = field.NewInt64(table, "user_id")
	o.Action = field.NewString(table, "action")
	o.Request = field.NewString(table, "request")
	o.Response = field.NewString(table, "response")
	o.Error = field.NewString(table, "error")
	o.Status = field.NewInt64(table, "status")
	o.Duration = field.NewFloat64(table, "duration")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")

	o.fillFieldMap()

	return o
}

func (o *owenAuditlog) WithContext(ctx context.Context) IOwenAuditlogDo {
	return o.owenAuditlogDo.WithContext(ctx)
}

func (o owenAuditlog) TableName() string { return o.owenAuditlogDo.TableName() }

func (o owenAuditlog) Alias() string { return o.owenAuditlogDo.Alias() }

func (o *owenAuditlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *owenAuditlog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.ID
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["action"] = o.Action
	o.fieldMap["request"] = o.Request
	o.fieldMap["response"] = o.Response
	o.fieldMap["error"] = o.Error
	o.fieldMap["status"] = o.Status
	o.fieldMap["duration"] = o.Duration
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
}

func (o owenAuditlog) clone(db *gorm.DB) owenAuditlog {
	o.owenAuditlogDo.ReplaceDB(db)
	return o
}

type owenAuditlogDo struct{ gen.DO }

type IOwenAuditlogDo interface {
	gen.SubQuery
	Debug() IOwenAuditlogDo
	WithContext(ctx context.Context) IOwenAuditlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOwenAuditlogDo
	Not(conds ...gen.Condition) IOwenAuditlogDo
	Or(conds ...gen.Condition) IOwenAuditlogDo
	Select(conds ...field.Expr) IOwenAuditlogDo
	Where(conds ...gen.Condition) IOwenAuditlogDo
	Order(conds ...field.Expr) IOwenAuditlogDo
	Distinct(cols ...field.Expr) IOwenAuditlogDo
	Omit(cols ...field.Expr) IOwenAuditlogDo
	Join(table schema.Tabler, on ...field.Expr) IOwenAuditlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOwenAuditlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOwenAuditlogDo
	Group(cols ...field.Expr) IOwenAuditlogDo
	Having(conds ...gen.Condition) IOwenAuditlogDo
	Limit(limit int) IOwenAuditlogDo
	Offset(offset int) IOwenAuditlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenAuditlogDo
	Unscoped() IOwenAuditlogDo
	Create(values ...*model.OwenAuditlog) error
	CreateInBatches(values []*model.OwenAuditlog, batchSize int) error
	Save(values ...*model.OwenAuditlog) error
	First() (*model.OwenAuditlog, error)
	Take() (*model.OwenAuditlog, error)
	Last() (*model.OwenAuditlog, error)
	Find() ([]*model.OwenAuditlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenAuditlog, err error)
	FindInBatches(result *[]*model.OwenAuditlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OwenAuditlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOwenAuditlogDo
	Assign(attrs ...field.AssignExpr) IOwenAuditlogDo
	Joins(fields ...field.RelationField) IOwenAuditlogDo
	Preload(fields ...field.RelationField) IOwenAuditlogDo
	FirstOrInit() (*model.OwenAuditlog, error)
	FirstOrCreate() (*model.OwenAuditlog, error)
	FindByPage(offset int, limit int) (result []*model.OwenAuditlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOwenAuditlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o owenAuditlogDo) Debug() IOwenAuditlogDo {
	return o.withDO(o.DO.Debug())
}

func (o owenAuditlogDo) WithContext(ctx context.Context) IOwenAuditlogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o owenAuditlogDo) ReadDB() IOwenAuditlogDo {
	return o.Clauses(dbresolver.Read)
}

func (o owenAuditlogDo) WriteDB() IOwenAuditlogDo {
	return o.Clauses(dbresolver.Write)
}

func (o owenAuditlogDo) Clauses(conds ...clause.Expression) IOwenAuditlogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o owenAuditlogDo) Returning(value interface{}, columns ...string) IOwenAuditlogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o owenAuditlogDo) Not(conds ...gen.Condition) IOwenAuditlogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o owenAuditlogDo) Or(conds ...gen.Condition) IOwenAuditlogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o owenAuditlogDo) Select(conds ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o owenAuditlogDo) Where(conds ...gen.Condition) IOwenAuditlogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o owenAuditlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOwenAuditlogDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o owenAuditlogDo) Order(conds ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o owenAuditlogDo) Distinct(cols ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o owenAuditlogDo) Omit(cols ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o owenAuditlogDo) Join(table schema.Tabler, on ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o owenAuditlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o owenAuditlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o owenAuditlogDo) Group(cols ...field.Expr) IOwenAuditlogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o owenAuditlogDo) Having(conds ...gen.Condition) IOwenAuditlogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o owenAuditlogDo) Limit(limit int) IOwenAuditlogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o owenAuditlogDo) Offset(offset int) IOwenAuditlogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o owenAuditlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenAuditlogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o owenAuditlogDo) Unscoped() IOwenAuditlogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o owenAuditlogDo) Create(values ...*model.OwenAuditlog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o owenAuditlogDo) CreateInBatches(values []*model.OwenAuditlog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o owenAuditlogDo) Save(values ...*model.OwenAuditlog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o owenAuditlogDo) First() (*model.OwenAuditlog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenAuditlog), nil
	}
}

func (o owenAuditlogDo) Take() (*model.OwenAuditlog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenAuditlog), nil
	}
}

func (o owenAuditlogDo) Last() (*model.OwenAuditlog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenAuditlog), nil
	}
}

func (o owenAuditlogDo) Find() ([]*model.OwenAuditlog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OwenAuditlog), err
}

func (o owenAuditlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenAuditlog, err error) {
	buf := make([]*model.OwenAuditlog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o owenAuditlogDo) FindInBatches(result *[]*model.OwenAuditlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o owenAuditlogDo) Attrs(attrs ...field.AssignExpr) IOwenAuditlogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o owenAuditlogDo) Assign(attrs ...field.AssignExpr) IOwenAuditlogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o owenAuditlogDo) Joins(fields ...field.RelationField) IOwenAuditlogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o owenAuditlogDo) Preload(fields ...field.RelationField) IOwenAuditlogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o owenAuditlogDo) FirstOrInit() (*model.OwenAuditlog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenAuditlog), nil
	}
}

func (o owenAuditlogDo) FirstOrCreate() (*model.OwenAuditlog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenAuditlog), nil
	}
}

func (o owenAuditlogDo) FindByPage(offset int, limit int) (result []*model.OwenAuditlog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o owenAuditlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o owenAuditlogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o owenAuditlogDo) Delete(models ...*model.OwenAuditlog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *owenAuditlogDo) withDO(do gen.Dao) *owenAuditlogDo {
	o.DO = *do.(*gen.DO)
	return o
}
