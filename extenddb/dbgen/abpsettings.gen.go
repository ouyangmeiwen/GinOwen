// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpsetting(db *gorm.DB) abpsetting {
	_abpsetting := abpsetting{}

	_abpsetting.abpsettingDo.UseDB(db)
	_abpsetting.abpsettingDo.UseModel(&model.Abpsetting{})

	tableName := _abpsetting.abpsettingDo.TableName()
	_abpsetting.ALL = field.NewAsterisk(tableName)
	_abpsetting.ID = field.NewInt64(tableName, "Id")
	_abpsetting.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpsetting.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpsetting.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abpsetting.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abpsetting.TenantID = field.NewInt64(tableName, "TenantId")
	_abpsetting.UserID = field.NewInt64(tableName, "UserId")
	_abpsetting.Name = field.NewString(tableName, "Name")
	_abpsetting.Value = field.NewString(tableName, "Value")

	_abpsetting.fillFieldMap()

	return _abpsetting
}

type abpsetting struct {
	abpsettingDo abpsettingDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	TenantID             field.Int64
	UserID               field.Int64
	Name                 field.String
	Value                field.String

	fieldMap map[string]field.Expr
}

func (a abpsetting) Table(newTableName string) *abpsetting {
	a.abpsettingDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpsetting) As(alias string) *abpsetting {
	a.abpsettingDo.DO = *(a.abpsettingDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpsetting) updateTableName(table string) *abpsetting {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.Name = field.NewString(table, "Name")
	a.Value = field.NewString(table, "Value")

	a.fillFieldMap()

	return a
}

func (a *abpsetting) WithContext(ctx context.Context) IAbpsettingDo {
	return a.abpsettingDo.WithContext(ctx)
}

func (a abpsetting) TableName() string { return a.abpsettingDo.TableName() }

func (a abpsetting) Alias() string { return a.abpsettingDo.Alias() }

func (a *abpsetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpsetting) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["Name"] = a.Name
	a.fieldMap["Value"] = a.Value
}

func (a abpsetting) clone(db *gorm.DB) abpsetting {
	a.abpsettingDo.ReplaceDB(db)
	return a
}

type abpsettingDo struct{ gen.DO }

type IAbpsettingDo interface {
	gen.SubQuery
	Debug() IAbpsettingDo
	WithContext(ctx context.Context) IAbpsettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpsettingDo
	Not(conds ...gen.Condition) IAbpsettingDo
	Or(conds ...gen.Condition) IAbpsettingDo
	Select(conds ...field.Expr) IAbpsettingDo
	Where(conds ...gen.Condition) IAbpsettingDo
	Order(conds ...field.Expr) IAbpsettingDo
	Distinct(cols ...field.Expr) IAbpsettingDo
	Omit(cols ...field.Expr) IAbpsettingDo
	Join(table schema.Tabler, on ...field.Expr) IAbpsettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpsettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpsettingDo
	Group(cols ...field.Expr) IAbpsettingDo
	Having(conds ...gen.Condition) IAbpsettingDo
	Limit(limit int) IAbpsettingDo
	Offset(offset int) IAbpsettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpsettingDo
	Unscoped() IAbpsettingDo
	Create(values ...*model.Abpsetting) error
	CreateInBatches(values []*model.Abpsetting, batchSize int) error
	Save(values ...*model.Abpsetting) error
	First() (*model.Abpsetting, error)
	Take() (*model.Abpsetting, error)
	Last() (*model.Abpsetting, error)
	Find() ([]*model.Abpsetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpsetting, err error)
	FindInBatches(result *[]*model.Abpsetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpsetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpsettingDo
	Assign(attrs ...field.AssignExpr) IAbpsettingDo
	Joins(fields ...field.RelationField) IAbpsettingDo
	Preload(fields ...field.RelationField) IAbpsettingDo
	FirstOrInit() (*model.Abpsetting, error)
	FirstOrCreate() (*model.Abpsetting, error)
	FindByPage(offset int, limit int) (result []*model.Abpsetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpsettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpsettingDo) Debug() IAbpsettingDo {
	return a.withDO(a.DO.Debug())
}

func (a abpsettingDo) WithContext(ctx context.Context) IAbpsettingDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpsettingDo) ReadDB() IAbpsettingDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpsettingDo) WriteDB() IAbpsettingDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpsettingDo) Clauses(conds ...clause.Expression) IAbpsettingDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpsettingDo) Returning(value interface{}, columns ...string) IAbpsettingDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpsettingDo) Not(conds ...gen.Condition) IAbpsettingDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpsettingDo) Or(conds ...gen.Condition) IAbpsettingDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpsettingDo) Select(conds ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpsettingDo) Where(conds ...gen.Condition) IAbpsettingDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpsettingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpsettingDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpsettingDo) Order(conds ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpsettingDo) Distinct(cols ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpsettingDo) Omit(cols ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpsettingDo) Join(table schema.Tabler, on ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpsettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpsettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpsettingDo) Group(cols ...field.Expr) IAbpsettingDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpsettingDo) Having(conds ...gen.Condition) IAbpsettingDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpsettingDo) Limit(limit int) IAbpsettingDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpsettingDo) Offset(offset int) IAbpsettingDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpsettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpsettingDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpsettingDo) Unscoped() IAbpsettingDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpsettingDo) Create(values ...*model.Abpsetting) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpsettingDo) CreateInBatches(values []*model.Abpsetting, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpsettingDo) Save(values ...*model.Abpsetting) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpsettingDo) First() (*model.Abpsetting, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpsetting), nil
	}
}

func (a abpsettingDo) Take() (*model.Abpsetting, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpsetting), nil
	}
}

func (a abpsettingDo) Last() (*model.Abpsetting, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpsetting), nil
	}
}

func (a abpsettingDo) Find() ([]*model.Abpsetting, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpsetting), err
}

func (a abpsettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpsetting, err error) {
	buf := make([]*model.Abpsetting, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpsettingDo) FindInBatches(result *[]*model.Abpsetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpsettingDo) Attrs(attrs ...field.AssignExpr) IAbpsettingDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpsettingDo) Assign(attrs ...field.AssignExpr) IAbpsettingDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpsettingDo) Joins(fields ...field.RelationField) IAbpsettingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpsettingDo) Preload(fields ...field.RelationField) IAbpsettingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpsettingDo) FirstOrInit() (*model.Abpsetting, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpsetting), nil
	}
}

func (a abpsettingDo) FirstOrCreate() (*model.Abpsetting, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpsetting), nil
	}
}

func (a abpsettingDo) FindByPage(offset int, limit int) (result []*model.Abpsetting, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpsettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpsettingDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpsettingDo) Delete(models ...*model.Abpsetting) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpsettingDo) withDO(do gen.Dao) *abpsettingDo {
	a.DO = *do.(*gen.DO)
	return a
}
