// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibfeelog(db *gorm.DB) libfeelog {
	_libfeelog := libfeelog{}

	_libfeelog.libfeelogDo.UseDB(db)
	_libfeelog.libfeelogDo.UseModel(&model.Libfeelog{})

	tableName := _libfeelog.libfeelogDo.TableName()
	_libfeelog.ALL = field.NewAsterisk(tableName)
	_libfeelog.ID = field.NewString(tableName, "Id")
	_libfeelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libfeelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libfeelog.TerminalID = field.NewString(tableName, "TerminalId")
	_libfeelog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_libfeelog.TerminalName = field.NewString(tableName, "TerminalName")
	_libfeelog.PatronID = field.NewString(tableName, "PatronId")
	_libfeelog.PatronName = field.NewString(tableName, "PatronName")
	_libfeelog.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libfeelog.CardTypeID = field.NewString(tableName, "CardTypeId")
	_libfeelog.CardTypeName = field.NewString(tableName, "CardTypeName")
	_libfeelog.Amount = field.NewInt64(tableName, "Amount")
	_libfeelog.AmountDetail = field.NewString(tableName, "AmountDetail")
	_libfeelog.PaymentType = field.NewInt64(tableName, "PaymentType")
	_libfeelog.FeeLogType = field.NewInt64(tableName, "FeeLogType")
	_libfeelog.Result = field.NewInt64(tableName, "Result")
	_libfeelog.Remark = field.NewString(tableName, "Remark")
	_libfeelog.OriginType = field.NewInt64(tableName, "OriginType")
	_libfeelog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_libfeelog.TenantID = field.NewInt64(tableName, "TenantId")
	_libfeelog.OperateTenantID = field.NewInt64(tableName, "OperateTenantId")

	_libfeelog.fillFieldMap()

	return _libfeelog
}

type libfeelog struct {
	libfeelogDo libfeelogDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	TerminalID      field.String
	TerminalCode    field.String
	TerminalName    field.String
	PatronID        field.String
	PatronName      field.String
	PatronBarcode   field.String
	CardTypeID      field.String
	CardTypeName    field.String
	Amount          field.Int64
	AmountDetail    field.String
	PaymentType     field.Int64
	FeeLogType      field.Int64
	Result          field.Int64
	Remark          field.String
	OriginType      field.Int64
	ErrorMessage    field.String
	TenantID        field.Int64
	OperateTenantID field.Int64

	fieldMap map[string]field.Expr
}

func (l libfeelog) Table(newTableName string) *libfeelog {
	l.libfeelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libfeelog) As(alias string) *libfeelog {
	l.libfeelogDo.DO = *(l.libfeelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libfeelog) updateTableName(table string) *libfeelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronName = field.NewString(table, "PatronName")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.CardTypeID = field.NewString(table, "CardTypeId")
	l.CardTypeName = field.NewString(table, "CardTypeName")
	l.Amount = field.NewInt64(table, "Amount")
	l.AmountDetail = field.NewString(table, "AmountDetail")
	l.PaymentType = field.NewInt64(table, "PaymentType")
	l.FeeLogType = field.NewInt64(table, "FeeLogType")
	l.Result = field.NewInt64(table, "Result")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.OperateTenantID = field.NewInt64(table, "OperateTenantId")

	l.fillFieldMap()

	return l
}

func (l *libfeelog) WithContext(ctx context.Context) ILibfeelogDo {
	return l.libfeelogDo.WithContext(ctx)
}

func (l libfeelog) TableName() string { return l.libfeelogDo.TableName() }

func (l libfeelog) Alias() string { return l.libfeelogDo.Alias() }

func (l *libfeelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libfeelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 21)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["CardTypeId"] = l.CardTypeID
	l.fieldMap["CardTypeName"] = l.CardTypeName
	l.fieldMap["Amount"] = l.Amount
	l.fieldMap["AmountDetail"] = l.AmountDetail
	l.fieldMap["PaymentType"] = l.PaymentType
	l.fieldMap["FeeLogType"] = l.FeeLogType
	l.fieldMap["Result"] = l.Result
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["OperateTenantId"] = l.OperateTenantID
}

func (l libfeelog) clone(db *gorm.DB) libfeelog {
	l.libfeelogDo.ReplaceDB(db)
	return l
}

type libfeelogDo struct{ gen.DO }

type ILibfeelogDo interface {
	gen.SubQuery
	Debug() ILibfeelogDo
	WithContext(ctx context.Context) ILibfeelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibfeelogDo
	Not(conds ...gen.Condition) ILibfeelogDo
	Or(conds ...gen.Condition) ILibfeelogDo
	Select(conds ...field.Expr) ILibfeelogDo
	Where(conds ...gen.Condition) ILibfeelogDo
	Order(conds ...field.Expr) ILibfeelogDo
	Distinct(cols ...field.Expr) ILibfeelogDo
	Omit(cols ...field.Expr) ILibfeelogDo
	Join(table schema.Tabler, on ...field.Expr) ILibfeelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibfeelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibfeelogDo
	Group(cols ...field.Expr) ILibfeelogDo
	Having(conds ...gen.Condition) ILibfeelogDo
	Limit(limit int) ILibfeelogDo
	Offset(offset int) ILibfeelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibfeelogDo
	Unscoped() ILibfeelogDo
	Create(values ...*model.Libfeelog) error
	CreateInBatches(values []*model.Libfeelog, batchSize int) error
	Save(values ...*model.Libfeelog) error
	First() (*model.Libfeelog, error)
	Take() (*model.Libfeelog, error)
	Last() (*model.Libfeelog, error)
	Find() ([]*model.Libfeelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libfeelog, err error)
	FindInBatches(result *[]*model.Libfeelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libfeelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibfeelogDo
	Assign(attrs ...field.AssignExpr) ILibfeelogDo
	Joins(fields ...field.RelationField) ILibfeelogDo
	Preload(fields ...field.RelationField) ILibfeelogDo
	FirstOrInit() (*model.Libfeelog, error)
	FirstOrCreate() (*model.Libfeelog, error)
	FindByPage(offset int, limit int) (result []*model.Libfeelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibfeelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libfeelogDo) Debug() ILibfeelogDo {
	return l.withDO(l.DO.Debug())
}

func (l libfeelogDo) WithContext(ctx context.Context) ILibfeelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libfeelogDo) ReadDB() ILibfeelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libfeelogDo) WriteDB() ILibfeelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libfeelogDo) Clauses(conds ...clause.Expression) ILibfeelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libfeelogDo) Returning(value interface{}, columns ...string) ILibfeelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libfeelogDo) Not(conds ...gen.Condition) ILibfeelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libfeelogDo) Or(conds ...gen.Condition) ILibfeelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libfeelogDo) Select(conds ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libfeelogDo) Where(conds ...gen.Condition) ILibfeelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libfeelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibfeelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libfeelogDo) Order(conds ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libfeelogDo) Distinct(cols ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libfeelogDo) Omit(cols ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libfeelogDo) Join(table schema.Tabler, on ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libfeelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libfeelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libfeelogDo) Group(cols ...field.Expr) ILibfeelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libfeelogDo) Having(conds ...gen.Condition) ILibfeelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libfeelogDo) Limit(limit int) ILibfeelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libfeelogDo) Offset(offset int) ILibfeelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libfeelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibfeelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libfeelogDo) Unscoped() ILibfeelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libfeelogDo) Create(values ...*model.Libfeelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libfeelogDo) CreateInBatches(values []*model.Libfeelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libfeelogDo) Save(values ...*model.Libfeelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libfeelogDo) First() (*model.Libfeelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeelog), nil
	}
}

func (l libfeelogDo) Take() (*model.Libfeelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeelog), nil
	}
}

func (l libfeelogDo) Last() (*model.Libfeelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeelog), nil
	}
}

func (l libfeelogDo) Find() ([]*model.Libfeelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libfeelog), err
}

func (l libfeelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libfeelog, err error) {
	buf := make([]*model.Libfeelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libfeelogDo) FindInBatches(result *[]*model.Libfeelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libfeelogDo) Attrs(attrs ...field.AssignExpr) ILibfeelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libfeelogDo) Assign(attrs ...field.AssignExpr) ILibfeelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libfeelogDo) Joins(fields ...field.RelationField) ILibfeelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libfeelogDo) Preload(fields ...field.RelationField) ILibfeelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libfeelogDo) FirstOrInit() (*model.Libfeelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeelog), nil
	}
}

func (l libfeelogDo) FirstOrCreate() (*model.Libfeelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libfeelog), nil
	}
}

func (l libfeelogDo) FindByPage(offset int, limit int) (result []*model.Libfeelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libfeelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libfeelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libfeelogDo) Delete(models ...*model.Libfeelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libfeelogDo) withDO(do gen.Dao) *libfeelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
