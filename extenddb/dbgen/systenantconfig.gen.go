// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSystenantconfig(db *gorm.DB) systenantconfig {
	_systenantconfig := systenantconfig{}

	_systenantconfig.systenantconfigDo.UseDB(db)
	_systenantconfig.systenantconfigDo.UseModel(&model.Systenantconfig{})

	tableName := _systenantconfig.systenantconfigDo.TableName()
	_systenantconfig.ALL = field.NewAsterisk(tableName)
	_systenantconfig.ID = field.NewString(tableName, "Id")
	_systenantconfig.CreationTime = field.NewTime(tableName, "CreationTime")
	_systenantconfig.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_systenantconfig.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_systenantconfig.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_systenantconfig.System = field.NewString(tableName, "System")
	_systenantconfig.BusinessRule = field.NewString(tableName, "BusinessRule")
	_systenantconfig.Protocol = field.NewString(tableName, "Protocol")
	_systenantconfig.WeChat = field.NewString(tableName, "WeChat")
	_systenantconfig.Alipay = field.NewString(tableName, "Alipay")
	_systenantconfig.Baidu = field.NewString(tableName, "Baidu")
	_systenantconfig.QQWeiXiao = field.NewString(tableName, "QQWeiXiao")
	_systenantconfig.Stat = field.NewString(tableName, "Stat")
	_systenantconfig.Task = field.NewString(tableName, "Task")
	_systenantconfig.Points = field.NewString(tableName, "Points")
	_systenantconfig.Remark = field.NewString(tableName, "Remark")
	_systenantconfig.TenantID = field.NewInt64(tableName, "TenantId")

	_systenantconfig.fillFieldMap()

	return _systenantconfig
}

type systenantconfig struct {
	systenantconfigDo systenantconfigDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	System               field.String
	BusinessRule         field.String
	Protocol             field.String
	WeChat               field.String
	Alipay               field.String
	Baidu                field.String
	QQWeiXiao            field.String
	Stat                 field.String
	Task                 field.String
	Points               field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s systenantconfig) Table(newTableName string) *systenantconfig {
	s.systenantconfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systenantconfig) As(alias string) *systenantconfig {
	s.systenantconfigDo.DO = *(s.systenantconfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systenantconfig) updateTableName(table string) *systenantconfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.System = field.NewString(table, "System")
	s.BusinessRule = field.NewString(table, "BusinessRule")
	s.Protocol = field.NewString(table, "Protocol")
	s.WeChat = field.NewString(table, "WeChat")
	s.Alipay = field.NewString(table, "Alipay")
	s.Baidu = field.NewString(table, "Baidu")
	s.QQWeiXiao = field.NewString(table, "QQWeiXiao")
	s.Stat = field.NewString(table, "Stat")
	s.Task = field.NewString(table, "Task")
	s.Points = field.NewString(table, "Points")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *systenantconfig) WithContext(ctx context.Context) ISystenantconfigDo {
	return s.systenantconfigDo.WithContext(ctx)
}

func (s systenantconfig) TableName() string { return s.systenantconfigDo.TableName() }

func (s systenantconfig) Alias() string { return s.systenantconfigDo.Alias() }

func (s *systenantconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systenantconfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["System"] = s.System
	s.fieldMap["BusinessRule"] = s.BusinessRule
	s.fieldMap["Protocol"] = s.Protocol
	s.fieldMap["WeChat"] = s.WeChat
	s.fieldMap["Alipay"] = s.Alipay
	s.fieldMap["Baidu"] = s.Baidu
	s.fieldMap["QQWeiXiao"] = s.QQWeiXiao
	s.fieldMap["Stat"] = s.Stat
	s.fieldMap["Task"] = s.Task
	s.fieldMap["Points"] = s.Points
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s systenantconfig) clone(db *gorm.DB) systenantconfig {
	s.systenantconfigDo.ReplaceDB(db)
	return s
}

type systenantconfigDo struct{ gen.DO }

type ISystenantconfigDo interface {
	gen.SubQuery
	Debug() ISystenantconfigDo
	WithContext(ctx context.Context) ISystenantconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystenantconfigDo
	Not(conds ...gen.Condition) ISystenantconfigDo
	Or(conds ...gen.Condition) ISystenantconfigDo
	Select(conds ...field.Expr) ISystenantconfigDo
	Where(conds ...gen.Condition) ISystenantconfigDo
	Order(conds ...field.Expr) ISystenantconfigDo
	Distinct(cols ...field.Expr) ISystenantconfigDo
	Omit(cols ...field.Expr) ISystenantconfigDo
	Join(table schema.Tabler, on ...field.Expr) ISystenantconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystenantconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystenantconfigDo
	Group(cols ...field.Expr) ISystenantconfigDo
	Having(conds ...gen.Condition) ISystenantconfigDo
	Limit(limit int) ISystenantconfigDo
	Offset(offset int) ISystenantconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystenantconfigDo
	Unscoped() ISystenantconfigDo
	Create(values ...*model.Systenantconfig) error
	CreateInBatches(values []*model.Systenantconfig, batchSize int) error
	Save(values ...*model.Systenantconfig) error
	First() (*model.Systenantconfig, error)
	Take() (*model.Systenantconfig, error)
	Last() (*model.Systenantconfig, error)
	Find() ([]*model.Systenantconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Systenantconfig, err error)
	FindInBatches(result *[]*model.Systenantconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Systenantconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystenantconfigDo
	Assign(attrs ...field.AssignExpr) ISystenantconfigDo
	Joins(fields ...field.RelationField) ISystenantconfigDo
	Preload(fields ...field.RelationField) ISystenantconfigDo
	FirstOrInit() (*model.Systenantconfig, error)
	FirstOrCreate() (*model.Systenantconfig, error)
	FindByPage(offset int, limit int) (result []*model.Systenantconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystenantconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systenantconfigDo) Debug() ISystenantconfigDo {
	return s.withDO(s.DO.Debug())
}

func (s systenantconfigDo) WithContext(ctx context.Context) ISystenantconfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systenantconfigDo) ReadDB() ISystenantconfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s systenantconfigDo) WriteDB() ISystenantconfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s systenantconfigDo) Clauses(conds ...clause.Expression) ISystenantconfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systenantconfigDo) Returning(value interface{}, columns ...string) ISystenantconfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systenantconfigDo) Not(conds ...gen.Condition) ISystenantconfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systenantconfigDo) Or(conds ...gen.Condition) ISystenantconfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systenantconfigDo) Select(conds ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systenantconfigDo) Where(conds ...gen.Condition) ISystenantconfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systenantconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystenantconfigDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systenantconfigDo) Order(conds ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systenantconfigDo) Distinct(cols ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systenantconfigDo) Omit(cols ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systenantconfigDo) Join(table schema.Tabler, on ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systenantconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systenantconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systenantconfigDo) Group(cols ...field.Expr) ISystenantconfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systenantconfigDo) Having(conds ...gen.Condition) ISystenantconfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systenantconfigDo) Limit(limit int) ISystenantconfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systenantconfigDo) Offset(offset int) ISystenantconfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systenantconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystenantconfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systenantconfigDo) Unscoped() ISystenantconfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systenantconfigDo) Create(values ...*model.Systenantconfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systenantconfigDo) CreateInBatches(values []*model.Systenantconfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systenantconfigDo) Save(values ...*model.Systenantconfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systenantconfigDo) First() (*model.Systenantconfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantconfig), nil
	}
}

func (s systenantconfigDo) Take() (*model.Systenantconfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantconfig), nil
	}
}

func (s systenantconfigDo) Last() (*model.Systenantconfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantconfig), nil
	}
}

func (s systenantconfigDo) Find() ([]*model.Systenantconfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.Systenantconfig), err
}

func (s systenantconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Systenantconfig, err error) {
	buf := make([]*model.Systenantconfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systenantconfigDo) FindInBatches(result *[]*model.Systenantconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systenantconfigDo) Attrs(attrs ...field.AssignExpr) ISystenantconfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systenantconfigDo) Assign(attrs ...field.AssignExpr) ISystenantconfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systenantconfigDo) Joins(fields ...field.RelationField) ISystenantconfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systenantconfigDo) Preload(fields ...field.RelationField) ISystenantconfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systenantconfigDo) FirstOrInit() (*model.Systenantconfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantconfig), nil
	}
}

func (s systenantconfigDo) FirstOrCreate() (*model.Systenantconfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantconfig), nil
	}
}

func (s systenantconfigDo) FindByPage(offset int, limit int) (result []*model.Systenantconfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systenantconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systenantconfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systenantconfigDo) Delete(models ...*model.Systenantconfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systenantconfigDo) withDO(do gen.Dao) *systenantconfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
