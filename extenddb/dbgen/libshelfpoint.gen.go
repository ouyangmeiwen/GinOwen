// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibshelfpoint(db *gorm.DB) libshelfpoint {
	_libshelfpoint := libshelfpoint{}

	_libshelfpoint.libshelfpointDo.UseDB(db)
	_libshelfpoint.libshelfpointDo.UseModel(&model.Libshelfpoint{})

	tableName := _libshelfpoint.libshelfpointDo.TableName()
	_libshelfpoint.ALL = field.NewAsterisk(tableName)
	_libshelfpoint.ID = field.NewString(tableName, "Id")
	_libshelfpoint.CreationTime = field.NewTime(tableName, "CreationTime")
	_libshelfpoint.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libshelfpoint.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libshelfpoint.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libshelfpoint.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libshelfpoint.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libshelfpoint.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libshelfpoint.ShelfPointName = field.NewString(tableName, "ShelfPointName")
	_libshelfpoint.ShelfPointShowName = field.NewString(tableName, "ShelfPointShowName")
	_libshelfpoint.ShelfID = field.NewString(tableName, "ShelfId")
	_libshelfpoint.ShelfCode = field.NewString(tableName, "ShelfCode")
	_libshelfpoint.StructID = field.NewString(tableName, "StructId")
	_libshelfpoint.CreateType = field.NewInt64(tableName, "CreateType")
	_libshelfpoint.OrderNo = field.NewInt64(tableName, "OrderNo")
	_libshelfpoint.RelationName = field.NewString(tableName, "RelationName")
	_libshelfpoint.X = field.NewFloat64(tableName, "X")
	_libshelfpoint.Y = field.NewFloat64(tableName, "Y")
	_libshelfpoint.Angel = field.NewFloat64(tableName, "Angel")
	_libshelfpoint.Remark = field.NewString(tableName, "Remark")
	_libshelfpoint.TenantID = field.NewInt64(tableName, "TenantId")
	_libshelfpoint.MapID = field.NewString(tableName, "MapId")
	_libshelfpoint.RobotID = field.NewString(tableName, "RobotId")

	_libshelfpoint.fillFieldMap()

	return _libshelfpoint
}

type libshelfpoint struct {
	libshelfpointDo libshelfpointDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ShelfPointName       field.String
	ShelfPointShowName   field.String
	ShelfID              field.String
	ShelfCode            field.String
	StructID             field.String
	CreateType           field.Int64
	OrderNo              field.Int64
	RelationName         field.String
	X                    field.Float64
	Y                    field.Float64
	Angel                field.Float64
	Remark               field.String
	TenantID             field.Int64
	MapID                field.String
	RobotID              field.String

	fieldMap map[string]field.Expr
}

func (l libshelfpoint) Table(newTableName string) *libshelfpoint {
	l.libshelfpointDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libshelfpoint) As(alias string) *libshelfpoint {
	l.libshelfpointDo.DO = *(l.libshelfpointDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libshelfpoint) updateTableName(table string) *libshelfpoint {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.ShelfPointName = field.NewString(table, "ShelfPointName")
	l.ShelfPointShowName = field.NewString(table, "ShelfPointShowName")
	l.ShelfID = field.NewString(table, "ShelfId")
	l.ShelfCode = field.NewString(table, "ShelfCode")
	l.StructID = field.NewString(table, "StructId")
	l.CreateType = field.NewInt64(table, "CreateType")
	l.OrderNo = field.NewInt64(table, "OrderNo")
	l.RelationName = field.NewString(table, "RelationName")
	l.X = field.NewFloat64(table, "X")
	l.Y = field.NewFloat64(table, "Y")
	l.Angel = field.NewFloat64(table, "Angel")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.MapID = field.NewString(table, "MapId")
	l.RobotID = field.NewString(table, "RobotId")

	l.fillFieldMap()

	return l
}

func (l *libshelfpoint) WithContext(ctx context.Context) ILibshelfpointDo {
	return l.libshelfpointDo.WithContext(ctx)
}

func (l libshelfpoint) TableName() string { return l.libshelfpointDo.TableName() }

func (l libshelfpoint) Alias() string { return l.libshelfpointDo.Alias() }

func (l *libshelfpoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libshelfpoint) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 23)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["ShelfPointName"] = l.ShelfPointName
	l.fieldMap["ShelfPointShowName"] = l.ShelfPointShowName
	l.fieldMap["ShelfId"] = l.ShelfID
	l.fieldMap["ShelfCode"] = l.ShelfCode
	l.fieldMap["StructId"] = l.StructID
	l.fieldMap["CreateType"] = l.CreateType
	l.fieldMap["OrderNo"] = l.OrderNo
	l.fieldMap["RelationName"] = l.RelationName
	l.fieldMap["X"] = l.X
	l.fieldMap["Y"] = l.Y
	l.fieldMap["Angel"] = l.Angel
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["MapId"] = l.MapID
	l.fieldMap["RobotId"] = l.RobotID
}

func (l libshelfpoint) clone(db *gorm.DB) libshelfpoint {
	l.libshelfpointDo.ReplaceDB(db)
	return l
}

type libshelfpointDo struct{ gen.DO }

type ILibshelfpointDo interface {
	gen.SubQuery
	Debug() ILibshelfpointDo
	WithContext(ctx context.Context) ILibshelfpointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibshelfpointDo
	Not(conds ...gen.Condition) ILibshelfpointDo
	Or(conds ...gen.Condition) ILibshelfpointDo
	Select(conds ...field.Expr) ILibshelfpointDo
	Where(conds ...gen.Condition) ILibshelfpointDo
	Order(conds ...field.Expr) ILibshelfpointDo
	Distinct(cols ...field.Expr) ILibshelfpointDo
	Omit(cols ...field.Expr) ILibshelfpointDo
	Join(table schema.Tabler, on ...field.Expr) ILibshelfpointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibshelfpointDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibshelfpointDo
	Group(cols ...field.Expr) ILibshelfpointDo
	Having(conds ...gen.Condition) ILibshelfpointDo
	Limit(limit int) ILibshelfpointDo
	Offset(offset int) ILibshelfpointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibshelfpointDo
	Unscoped() ILibshelfpointDo
	Create(values ...*model.Libshelfpoint) error
	CreateInBatches(values []*model.Libshelfpoint, batchSize int) error
	Save(values ...*model.Libshelfpoint) error
	First() (*model.Libshelfpoint, error)
	Take() (*model.Libshelfpoint, error)
	Last() (*model.Libshelfpoint, error)
	Find() ([]*model.Libshelfpoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libshelfpoint, err error)
	FindInBatches(result *[]*model.Libshelfpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libshelfpoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibshelfpointDo
	Assign(attrs ...field.AssignExpr) ILibshelfpointDo
	Joins(fields ...field.RelationField) ILibshelfpointDo
	Preload(fields ...field.RelationField) ILibshelfpointDo
	FirstOrInit() (*model.Libshelfpoint, error)
	FirstOrCreate() (*model.Libshelfpoint, error)
	FindByPage(offset int, limit int) (result []*model.Libshelfpoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibshelfpointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libshelfpointDo) Debug() ILibshelfpointDo {
	return l.withDO(l.DO.Debug())
}

func (l libshelfpointDo) WithContext(ctx context.Context) ILibshelfpointDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libshelfpointDo) ReadDB() ILibshelfpointDo {
	return l.Clauses(dbresolver.Read)
}

func (l libshelfpointDo) WriteDB() ILibshelfpointDo {
	return l.Clauses(dbresolver.Write)
}

func (l libshelfpointDo) Clauses(conds ...clause.Expression) ILibshelfpointDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libshelfpointDo) Returning(value interface{}, columns ...string) ILibshelfpointDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libshelfpointDo) Not(conds ...gen.Condition) ILibshelfpointDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libshelfpointDo) Or(conds ...gen.Condition) ILibshelfpointDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libshelfpointDo) Select(conds ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libshelfpointDo) Where(conds ...gen.Condition) ILibshelfpointDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libshelfpointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibshelfpointDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libshelfpointDo) Order(conds ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libshelfpointDo) Distinct(cols ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libshelfpointDo) Omit(cols ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libshelfpointDo) Join(table schema.Tabler, on ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libshelfpointDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libshelfpointDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libshelfpointDo) Group(cols ...field.Expr) ILibshelfpointDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libshelfpointDo) Having(conds ...gen.Condition) ILibshelfpointDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libshelfpointDo) Limit(limit int) ILibshelfpointDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libshelfpointDo) Offset(offset int) ILibshelfpointDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libshelfpointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibshelfpointDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libshelfpointDo) Unscoped() ILibshelfpointDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libshelfpointDo) Create(values ...*model.Libshelfpoint) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libshelfpointDo) CreateInBatches(values []*model.Libshelfpoint, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libshelfpointDo) Save(values ...*model.Libshelfpoint) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libshelfpointDo) First() (*model.Libshelfpoint, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelfpoint), nil
	}
}

func (l libshelfpointDo) Take() (*model.Libshelfpoint, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelfpoint), nil
	}
}

func (l libshelfpointDo) Last() (*model.Libshelfpoint, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelfpoint), nil
	}
}

func (l libshelfpointDo) Find() ([]*model.Libshelfpoint, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libshelfpoint), err
}

func (l libshelfpointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libshelfpoint, err error) {
	buf := make([]*model.Libshelfpoint, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libshelfpointDo) FindInBatches(result *[]*model.Libshelfpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libshelfpointDo) Attrs(attrs ...field.AssignExpr) ILibshelfpointDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libshelfpointDo) Assign(attrs ...field.AssignExpr) ILibshelfpointDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libshelfpointDo) Joins(fields ...field.RelationField) ILibshelfpointDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libshelfpointDo) Preload(fields ...field.RelationField) ILibshelfpointDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libshelfpointDo) FirstOrInit() (*model.Libshelfpoint, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelfpoint), nil
	}
}

func (l libshelfpointDo) FirstOrCreate() (*model.Libshelfpoint, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelfpoint), nil
	}
}

func (l libshelfpointDo) FindByPage(offset int, limit int) (result []*model.Libshelfpoint, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libshelfpointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libshelfpointDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libshelfpointDo) Delete(models ...*model.Libshelfpoint) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libshelfpointDo) withDO(do gen.Dao) *libshelfpointDo {
	l.DO = *do.(*gen.DO)
	return l
}
