// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newMisnews(db *gorm.DB) misnews {
	_misnews := misnews{}

	_misnews.misnewsDo.UseDB(db)
	_misnews.misnewsDo.UseModel(&model.Misnews{})

	tableName := _misnews.misnewsDo.TableName()
	_misnews.ALL = field.NewAsterisk(tableName)
	_misnews.ID = field.NewString(tableName, "Id")
	_misnews.CreationTime = field.NewTime(tableName, "CreationTime")
	_misnews.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_misnews.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_misnews.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_misnews.IsDeleted = field.NewField(tableName, "IsDeleted")
	_misnews.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_misnews.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_misnews.NewsType = field.NewInt64(tableName, "NewsType")
	_misnews.Title = field.NewString(tableName, "Title")
	_misnews.CoverID = field.NewString(tableName, "CoverId")
	_misnews.Editor = field.NewString(tableName, "Editor")
	_misnews.Tags = field.NewString(tableName, "Tags")
	_misnews.ReleaseTime = field.NewTime(tableName, "ReleaseTime")
	_misnews.SortCode = field.NewInt64(tableName, "SortCode")
	_misnews.InformationStatus = field.NewInt64(tableName, "InformationStatus")
	_misnews.Content = field.NewString(tableName, "Content")
	_misnews.Remark = field.NewString(tableName, "Remark")
	_misnews.TenantID = field.NewInt64(tableName, "TenantId")

	_misnews.fillFieldMap()

	return _misnews
}

type misnews struct {
	misnewsDo misnewsDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	NewsType             field.Int64
	Title                field.String
	CoverID              field.String
	Editor               field.String
	Tags                 field.String
	ReleaseTime          field.Time
	SortCode             field.Int64
	InformationStatus    field.Int64
	Content              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (m misnews) Table(newTableName string) *misnews {
	m.misnewsDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m misnews) As(alias string) *misnews {
	m.misnewsDo.DO = *(m.misnewsDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *misnews) updateTableName(table string) *misnews {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "Id")
	m.CreationTime = field.NewTime(table, "CreationTime")
	m.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	m.LastModificationTime = field.NewTime(table, "LastModificationTime")
	m.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	m.IsDeleted = field.NewField(table, "IsDeleted")
	m.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	m.DeletionTime = field.NewTime(table, "DeletionTime")
	m.NewsType = field.NewInt64(table, "NewsType")
	m.Title = field.NewString(table, "Title")
	m.CoverID = field.NewString(table, "CoverId")
	m.Editor = field.NewString(table, "Editor")
	m.Tags = field.NewString(table, "Tags")
	m.ReleaseTime = field.NewTime(table, "ReleaseTime")
	m.SortCode = field.NewInt64(table, "SortCode")
	m.InformationStatus = field.NewInt64(table, "InformationStatus")
	m.Content = field.NewString(table, "Content")
	m.Remark = field.NewString(table, "Remark")
	m.TenantID = field.NewInt64(table, "TenantId")

	m.fillFieldMap()

	return m
}

func (m *misnews) WithContext(ctx context.Context) IMisnewsDo { return m.misnewsDo.WithContext(ctx) }

func (m misnews) TableName() string { return m.misnewsDo.TableName() }

func (m misnews) Alias() string { return m.misnewsDo.Alias() }

func (m *misnews) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *misnews) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 19)
	m.fieldMap["Id"] = m.ID
	m.fieldMap["CreationTime"] = m.CreationTime
	m.fieldMap["CreatorUserId"] = m.CreatorUserID
	m.fieldMap["LastModificationTime"] = m.LastModificationTime
	m.fieldMap["LastModifierUserId"] = m.LastModifierUserID
	m.fieldMap["IsDeleted"] = m.IsDeleted
	m.fieldMap["DeleterUserId"] = m.DeleterUserID
	m.fieldMap["DeletionTime"] = m.DeletionTime
	m.fieldMap["NewsType"] = m.NewsType
	m.fieldMap["Title"] = m.Title
	m.fieldMap["CoverId"] = m.CoverID
	m.fieldMap["Editor"] = m.Editor
	m.fieldMap["Tags"] = m.Tags
	m.fieldMap["ReleaseTime"] = m.ReleaseTime
	m.fieldMap["SortCode"] = m.SortCode
	m.fieldMap["InformationStatus"] = m.InformationStatus
	m.fieldMap["Content"] = m.Content
	m.fieldMap["Remark"] = m.Remark
	m.fieldMap["TenantId"] = m.TenantID
}

func (m misnews) clone(db *gorm.DB) misnews {
	m.misnewsDo.ReplaceDB(db)
	return m
}

type misnewsDo struct{ gen.DO }

type IMisnewsDo interface {
	gen.SubQuery
	Debug() IMisnewsDo
	WithContext(ctx context.Context) IMisnewsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMisnewsDo
	Not(conds ...gen.Condition) IMisnewsDo
	Or(conds ...gen.Condition) IMisnewsDo
	Select(conds ...field.Expr) IMisnewsDo
	Where(conds ...gen.Condition) IMisnewsDo
	Order(conds ...field.Expr) IMisnewsDo
	Distinct(cols ...field.Expr) IMisnewsDo
	Omit(cols ...field.Expr) IMisnewsDo
	Join(table schema.Tabler, on ...field.Expr) IMisnewsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMisnewsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMisnewsDo
	Group(cols ...field.Expr) IMisnewsDo
	Having(conds ...gen.Condition) IMisnewsDo
	Limit(limit int) IMisnewsDo
	Offset(offset int) IMisnewsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMisnewsDo
	Unscoped() IMisnewsDo
	Create(values ...*model.Misnews) error
	CreateInBatches(values []*model.Misnews, batchSize int) error
	Save(values ...*model.Misnews) error
	First() (*model.Misnews, error)
	Take() (*model.Misnews, error)
	Last() (*model.Misnews, error)
	Find() ([]*model.Misnews, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Misnews, err error)
	FindInBatches(result *[]*model.Misnews, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Misnews) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMisnewsDo
	Assign(attrs ...field.AssignExpr) IMisnewsDo
	Joins(fields ...field.RelationField) IMisnewsDo
	Preload(fields ...field.RelationField) IMisnewsDo
	FirstOrInit() (*model.Misnews, error)
	FirstOrCreate() (*model.Misnews, error)
	FindByPage(offset int, limit int) (result []*model.Misnews, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMisnewsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m misnewsDo) Debug() IMisnewsDo {
	return m.withDO(m.DO.Debug())
}

func (m misnewsDo) WithContext(ctx context.Context) IMisnewsDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m misnewsDo) ReadDB() IMisnewsDo {
	return m.Clauses(dbresolver.Read)
}

func (m misnewsDo) WriteDB() IMisnewsDo {
	return m.Clauses(dbresolver.Write)
}

func (m misnewsDo) Clauses(conds ...clause.Expression) IMisnewsDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m misnewsDo) Returning(value interface{}, columns ...string) IMisnewsDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m misnewsDo) Not(conds ...gen.Condition) IMisnewsDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m misnewsDo) Or(conds ...gen.Condition) IMisnewsDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m misnewsDo) Select(conds ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m misnewsDo) Where(conds ...gen.Condition) IMisnewsDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m misnewsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMisnewsDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m misnewsDo) Order(conds ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m misnewsDo) Distinct(cols ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m misnewsDo) Omit(cols ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m misnewsDo) Join(table schema.Tabler, on ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m misnewsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m misnewsDo) RightJoin(table schema.Tabler, on ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m misnewsDo) Group(cols ...field.Expr) IMisnewsDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m misnewsDo) Having(conds ...gen.Condition) IMisnewsDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m misnewsDo) Limit(limit int) IMisnewsDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m misnewsDo) Offset(offset int) IMisnewsDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m misnewsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMisnewsDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m misnewsDo) Unscoped() IMisnewsDo {
	return m.withDO(m.DO.Unscoped())
}

func (m misnewsDo) Create(values ...*model.Misnews) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m misnewsDo) CreateInBatches(values []*model.Misnews, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m misnewsDo) Save(values ...*model.Misnews) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m misnewsDo) First() (*model.Misnews, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misnews), nil
	}
}

func (m misnewsDo) Take() (*model.Misnews, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misnews), nil
	}
}

func (m misnewsDo) Last() (*model.Misnews, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misnews), nil
	}
}

func (m misnewsDo) Find() ([]*model.Misnews, error) {
	result, err := m.DO.Find()
	return result.([]*model.Misnews), err
}

func (m misnewsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Misnews, err error) {
	buf := make([]*model.Misnews, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m misnewsDo) FindInBatches(result *[]*model.Misnews, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m misnewsDo) Attrs(attrs ...field.AssignExpr) IMisnewsDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m misnewsDo) Assign(attrs ...field.AssignExpr) IMisnewsDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m misnewsDo) Joins(fields ...field.RelationField) IMisnewsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m misnewsDo) Preload(fields ...field.RelationField) IMisnewsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m misnewsDo) FirstOrInit() (*model.Misnews, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misnews), nil
	}
}

func (m misnewsDo) FirstOrCreate() (*model.Misnews, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Misnews), nil
	}
}

func (m misnewsDo) FindByPage(offset int, limit int) (result []*model.Misnews, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m misnewsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m misnewsDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m misnewsDo) Delete(models ...*model.Misnews) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *misnewsDo) withDO(do gen.Dao) *misnewsDo {
	m.DO = *do.(*gen.DO)
	return m
}
