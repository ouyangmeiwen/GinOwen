// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpsecuritygatebookdailyaccess(db *gorm.DB) lcpsecuritygatebookdailyaccess {
	_lcpsecuritygatebookdailyaccess := lcpsecuritygatebookdailyaccess{}

	_lcpsecuritygatebookdailyaccess.lcpsecuritygatebookdailyaccessDo.UseDB(db)
	_lcpsecuritygatebookdailyaccess.lcpsecuritygatebookdailyaccessDo.UseModel(&model.Lcpsecuritygatebookdailyaccess{})

	tableName := _lcpsecuritygatebookdailyaccess.lcpsecuritygatebookdailyaccessDo.TableName()
	_lcpsecuritygatebookdailyaccess.ALL = field.NewAsterisk(tableName)
	_lcpsecuritygatebookdailyaccess.ID = field.NewString(tableName, "Id")
	_lcpsecuritygatebookdailyaccess.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpsecuritygatebookdailyaccess.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpsecuritygatebookdailyaccess.AccessDate = field.NewTime(tableName, "AccessDate")
	_lcpsecuritygatebookdailyaccess.FirstAccessTime = field.NewTime(tableName, "FirstAccessTime")
	_lcpsecuritygatebookdailyaccess.LastAccessTime = field.NewTime(tableName, "LastAccessTime")
	_lcpsecuritygatebookdailyaccess.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpsecuritygatebookdailyaccess.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpsecuritygatebookdailyaccess.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpsecuritygatebookdailyaccess.Incoming = field.NewInt64(tableName, "Incoming")
	_lcpsecuritygatebookdailyaccess.Outgoing = field.NewInt64(tableName, "Outgoing")
	_lcpsecuritygatebookdailyaccess.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpsecuritygatebookdailyaccess.fillFieldMap()

	return _lcpsecuritygatebookdailyaccess
}

type lcpsecuritygatebookdailyaccess struct {
	lcpsecuritygatebookdailyaccessDo lcpsecuritygatebookdailyaccessDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	AccessDate      field.Time
	FirstAccessTime field.Time
	LastAccessTime  field.Time
	TerminalID      field.String
	TerminalCode    field.String
	TerminalName    field.String
	Incoming        field.Int64
	Outgoing        field.Int64
	TenantID        field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpsecuritygatebookdailyaccess) Table(newTableName string) *lcpsecuritygatebookdailyaccess {
	l.lcpsecuritygatebookdailyaccessDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpsecuritygatebookdailyaccess) As(alias string) *lcpsecuritygatebookdailyaccess {
	l.lcpsecuritygatebookdailyaccessDo.DO = *(l.lcpsecuritygatebookdailyaccessDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpsecuritygatebookdailyaccess) updateTableName(table string) *lcpsecuritygatebookdailyaccess {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.AccessDate = field.NewTime(table, "AccessDate")
	l.FirstAccessTime = field.NewTime(table, "FirstAccessTime")
	l.LastAccessTime = field.NewTime(table, "LastAccessTime")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.Incoming = field.NewInt64(table, "Incoming")
	l.Outgoing = field.NewInt64(table, "Outgoing")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpsecuritygatebookdailyaccess) WithContext(ctx context.Context) ILcpsecuritygatebookdailyaccessDo {
	return l.lcpsecuritygatebookdailyaccessDo.WithContext(ctx)
}

func (l lcpsecuritygatebookdailyaccess) TableName() string {
	return l.lcpsecuritygatebookdailyaccessDo.TableName()
}

func (l lcpsecuritygatebookdailyaccess) Alias() string {
	return l.lcpsecuritygatebookdailyaccessDo.Alias()
}

func (l *lcpsecuritygatebookdailyaccess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpsecuritygatebookdailyaccess) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["AccessDate"] = l.AccessDate
	l.fieldMap["FirstAccessTime"] = l.FirstAccessTime
	l.fieldMap["LastAccessTime"] = l.LastAccessTime
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["Incoming"] = l.Incoming
	l.fieldMap["Outgoing"] = l.Outgoing
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpsecuritygatebookdailyaccess) clone(db *gorm.DB) lcpsecuritygatebookdailyaccess {
	l.lcpsecuritygatebookdailyaccessDo.ReplaceDB(db)
	return l
}

type lcpsecuritygatebookdailyaccessDo struct{ gen.DO }

type ILcpsecuritygatebookdailyaccessDo interface {
	gen.SubQuery
	Debug() ILcpsecuritygatebookdailyaccessDo
	WithContext(ctx context.Context) ILcpsecuritygatebookdailyaccessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpsecuritygatebookdailyaccessDo
	Not(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo
	Or(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo
	Select(conds ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	Where(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo
	Order(conds ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	Distinct(cols ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	Omit(cols ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	Group(cols ...field.Expr) ILcpsecuritygatebookdailyaccessDo
	Having(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo
	Limit(limit int) ILcpsecuritygatebookdailyaccessDo
	Offset(offset int) ILcpsecuritygatebookdailyaccessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygatebookdailyaccessDo
	Unscoped() ILcpsecuritygatebookdailyaccessDo
	Create(values ...*model.Lcpsecuritygatebookdailyaccess) error
	CreateInBatches(values []*model.Lcpsecuritygatebookdailyaccess, batchSize int) error
	Save(values ...*model.Lcpsecuritygatebookdailyaccess) error
	First() (*model.Lcpsecuritygatebookdailyaccess, error)
	Take() (*model.Lcpsecuritygatebookdailyaccess, error)
	Last() (*model.Lcpsecuritygatebookdailyaccess, error)
	Find() ([]*model.Lcpsecuritygatebookdailyaccess, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygatebookdailyaccess, err error)
	FindInBatches(result *[]*model.Lcpsecuritygatebookdailyaccess, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpsecuritygatebookdailyaccess) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpsecuritygatebookdailyaccessDo
	Assign(attrs ...field.AssignExpr) ILcpsecuritygatebookdailyaccessDo
	Joins(fields ...field.RelationField) ILcpsecuritygatebookdailyaccessDo
	Preload(fields ...field.RelationField) ILcpsecuritygatebookdailyaccessDo
	FirstOrInit() (*model.Lcpsecuritygatebookdailyaccess, error)
	FirstOrCreate() (*model.Lcpsecuritygatebookdailyaccess, error)
	FindByPage(offset int, limit int) (result []*model.Lcpsecuritygatebookdailyaccess, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpsecuritygatebookdailyaccessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpsecuritygatebookdailyaccessDo) Debug() ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpsecuritygatebookdailyaccessDo) WithContext(ctx context.Context) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpsecuritygatebookdailyaccessDo) ReadDB() ILcpsecuritygatebookdailyaccessDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpsecuritygatebookdailyaccessDo) WriteDB() ILcpsecuritygatebookdailyaccessDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpsecuritygatebookdailyaccessDo) Clauses(conds ...clause.Expression) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Returning(value interface{}, columns ...string) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpsecuritygatebookdailyaccessDo) Not(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Or(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Select(conds ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Where(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpsecuritygatebookdailyaccessDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpsecuritygatebookdailyaccessDo) Order(conds ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Distinct(cols ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpsecuritygatebookdailyaccessDo) Omit(cols ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpsecuritygatebookdailyaccessDo) Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpsecuritygatebookdailyaccessDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpsecuritygatebookdailyaccessDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpsecuritygatebookdailyaccessDo) Group(cols ...field.Expr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpsecuritygatebookdailyaccessDo) Having(conds ...gen.Condition) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpsecuritygatebookdailyaccessDo) Limit(limit int) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpsecuritygatebookdailyaccessDo) Offset(offset int) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpsecuritygatebookdailyaccessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpsecuritygatebookdailyaccessDo) Unscoped() ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpsecuritygatebookdailyaccessDo) Create(values ...*model.Lcpsecuritygatebookdailyaccess) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpsecuritygatebookdailyaccessDo) CreateInBatches(values []*model.Lcpsecuritygatebookdailyaccess, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpsecuritygatebookdailyaccessDo) Save(values ...*model.Lcpsecuritygatebookdailyaccess) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpsecuritygatebookdailyaccessDo) First() (*model.Lcpsecuritygatebookdailyaccess, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookdailyaccess), nil
	}
}

func (l lcpsecuritygatebookdailyaccessDo) Take() (*model.Lcpsecuritygatebookdailyaccess, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookdailyaccess), nil
	}
}

func (l lcpsecuritygatebookdailyaccessDo) Last() (*model.Lcpsecuritygatebookdailyaccess, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookdailyaccess), nil
	}
}

func (l lcpsecuritygatebookdailyaccessDo) Find() ([]*model.Lcpsecuritygatebookdailyaccess, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpsecuritygatebookdailyaccess), err
}

func (l lcpsecuritygatebookdailyaccessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygatebookdailyaccess, err error) {
	buf := make([]*model.Lcpsecuritygatebookdailyaccess, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpsecuritygatebookdailyaccessDo) FindInBatches(result *[]*model.Lcpsecuritygatebookdailyaccess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpsecuritygatebookdailyaccessDo) Attrs(attrs ...field.AssignExpr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpsecuritygatebookdailyaccessDo) Assign(attrs ...field.AssignExpr) ILcpsecuritygatebookdailyaccessDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpsecuritygatebookdailyaccessDo) Joins(fields ...field.RelationField) ILcpsecuritygatebookdailyaccessDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpsecuritygatebookdailyaccessDo) Preload(fields ...field.RelationField) ILcpsecuritygatebookdailyaccessDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpsecuritygatebookdailyaccessDo) FirstOrInit() (*model.Lcpsecuritygatebookdailyaccess, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookdailyaccess), nil
	}
}

func (l lcpsecuritygatebookdailyaccessDo) FirstOrCreate() (*model.Lcpsecuritygatebookdailyaccess, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookdailyaccess), nil
	}
}

func (l lcpsecuritygatebookdailyaccessDo) FindByPage(offset int, limit int) (result []*model.Lcpsecuritygatebookdailyaccess, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpsecuritygatebookdailyaccessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpsecuritygatebookdailyaccessDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpsecuritygatebookdailyaccessDo) Delete(models ...*model.Lcpsecuritygatebookdailyaccess) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpsecuritygatebookdailyaccessDo) withDO(do gen.Dao) *lcpsecuritygatebookdailyaccessDo {
	l.DO = *do.(*gen.DO)
	return l
}
