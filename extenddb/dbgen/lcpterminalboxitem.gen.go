// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminalboxitem(db *gorm.DB) lcpterminalboxitem {
	_lcpterminalboxitem := lcpterminalboxitem{}

	_lcpterminalboxitem.lcpterminalboxitemDo.UseDB(db)
	_lcpterminalboxitem.lcpterminalboxitemDo.UseModel(&model.Lcpterminalboxitem{})

	tableName := _lcpterminalboxitem.lcpterminalboxitemDo.TableName()
	_lcpterminalboxitem.ALL = field.NewAsterisk(tableName)
	_lcpterminalboxitem.ID = field.NewString(tableName, "Id")
	_lcpterminalboxitem.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminalboxitem.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminalboxitem.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpterminalboxitem.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpterminalboxitem.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpterminalboxitem.BoxName = field.NewString(tableName, "BoxName")
	_lcpterminalboxitem.ItemID = field.NewString(tableName, "ItemId")
	_lcpterminalboxitem.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_lcpterminalboxitem.ItemTitle = field.NewString(tableName, "ItemTitle")
	_lcpterminalboxitem.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminalboxitem.fillFieldMap()

	return _lcpterminalboxitem
}

type lcpterminalboxitem struct {
	lcpterminalboxitemDo lcpterminalboxitemDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	BoxName       field.String
	ItemID        field.String
	ItemBarcode   field.String
	ItemTitle     field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminalboxitem) Table(newTableName string) *lcpterminalboxitem {
	l.lcpterminalboxitemDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminalboxitem) As(alias string) *lcpterminalboxitem {
	l.lcpterminalboxitemDo.DO = *(l.lcpterminalboxitemDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminalboxitem) updateTableName(table string) *lcpterminalboxitem {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.BoxName = field.NewString(table, "BoxName")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminalboxitem) WithContext(ctx context.Context) ILcpterminalboxitemDo {
	return l.lcpterminalboxitemDo.WithContext(ctx)
}

func (l lcpterminalboxitem) TableName() string { return l.lcpterminalboxitemDo.TableName() }

func (l lcpterminalboxitem) Alias() string { return l.lcpterminalboxitemDo.Alias() }

func (l *lcpterminalboxitem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminalboxitem) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["BoxName"] = l.BoxName
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminalboxitem) clone(db *gorm.DB) lcpterminalboxitem {
	l.lcpterminalboxitemDo.ReplaceDB(db)
	return l
}

type lcpterminalboxitemDo struct{ gen.DO }

type ILcpterminalboxitemDo interface {
	gen.SubQuery
	Debug() ILcpterminalboxitemDo
	WithContext(ctx context.Context) ILcpterminalboxitemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminalboxitemDo
	Not(conds ...gen.Condition) ILcpterminalboxitemDo
	Or(conds ...gen.Condition) ILcpterminalboxitemDo
	Select(conds ...field.Expr) ILcpterminalboxitemDo
	Where(conds ...gen.Condition) ILcpterminalboxitemDo
	Order(conds ...field.Expr) ILcpterminalboxitemDo
	Distinct(cols ...field.Expr) ILcpterminalboxitemDo
	Omit(cols ...field.Expr) ILcpterminalboxitemDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminalboxitemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalboxitemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalboxitemDo
	Group(cols ...field.Expr) ILcpterminalboxitemDo
	Having(conds ...gen.Condition) ILcpterminalboxitemDo
	Limit(limit int) ILcpterminalboxitemDo
	Offset(offset int) ILcpterminalboxitemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalboxitemDo
	Unscoped() ILcpterminalboxitemDo
	Create(values ...*model.Lcpterminalboxitem) error
	CreateInBatches(values []*model.Lcpterminalboxitem, batchSize int) error
	Save(values ...*model.Lcpterminalboxitem) error
	First() (*model.Lcpterminalboxitem, error)
	Take() (*model.Lcpterminalboxitem, error)
	Last() (*model.Lcpterminalboxitem, error)
	Find() ([]*model.Lcpterminalboxitem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalboxitem, err error)
	FindInBatches(result *[]*model.Lcpterminalboxitem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminalboxitem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminalboxitemDo
	Assign(attrs ...field.AssignExpr) ILcpterminalboxitemDo
	Joins(fields ...field.RelationField) ILcpterminalboxitemDo
	Preload(fields ...field.RelationField) ILcpterminalboxitemDo
	FirstOrInit() (*model.Lcpterminalboxitem, error)
	FirstOrCreate() (*model.Lcpterminalboxitem, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminalboxitem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminalboxitemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminalboxitemDo) Debug() ILcpterminalboxitemDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminalboxitemDo) WithContext(ctx context.Context) ILcpterminalboxitemDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminalboxitemDo) ReadDB() ILcpterminalboxitemDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminalboxitemDo) WriteDB() ILcpterminalboxitemDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminalboxitemDo) Clauses(conds ...clause.Expression) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminalboxitemDo) Returning(value interface{}, columns ...string) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminalboxitemDo) Not(conds ...gen.Condition) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminalboxitemDo) Or(conds ...gen.Condition) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminalboxitemDo) Select(conds ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminalboxitemDo) Where(conds ...gen.Condition) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminalboxitemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminalboxitemDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminalboxitemDo) Order(conds ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminalboxitemDo) Distinct(cols ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminalboxitemDo) Omit(cols ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminalboxitemDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminalboxitemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminalboxitemDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminalboxitemDo) Group(cols ...field.Expr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminalboxitemDo) Having(conds ...gen.Condition) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminalboxitemDo) Limit(limit int) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminalboxitemDo) Offset(offset int) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminalboxitemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminalboxitemDo) Unscoped() ILcpterminalboxitemDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminalboxitemDo) Create(values ...*model.Lcpterminalboxitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminalboxitemDo) CreateInBatches(values []*model.Lcpterminalboxitem, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminalboxitemDo) Save(values ...*model.Lcpterminalboxitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminalboxitemDo) First() (*model.Lcpterminalboxitem, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalboxitem), nil
	}
}

func (l lcpterminalboxitemDo) Take() (*model.Lcpterminalboxitem, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalboxitem), nil
	}
}

func (l lcpterminalboxitemDo) Last() (*model.Lcpterminalboxitem, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalboxitem), nil
	}
}

func (l lcpterminalboxitemDo) Find() ([]*model.Lcpterminalboxitem, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminalboxitem), err
}

func (l lcpterminalboxitemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalboxitem, err error) {
	buf := make([]*model.Lcpterminalboxitem, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminalboxitemDo) FindInBatches(result *[]*model.Lcpterminalboxitem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminalboxitemDo) Attrs(attrs ...field.AssignExpr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminalboxitemDo) Assign(attrs ...field.AssignExpr) ILcpterminalboxitemDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminalboxitemDo) Joins(fields ...field.RelationField) ILcpterminalboxitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminalboxitemDo) Preload(fields ...field.RelationField) ILcpterminalboxitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminalboxitemDo) FirstOrInit() (*model.Lcpterminalboxitem, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalboxitem), nil
	}
}

func (l lcpterminalboxitemDo) FirstOrCreate() (*model.Lcpterminalboxitem, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalboxitem), nil
	}
}

func (l lcpterminalboxitemDo) FindByPage(offset int, limit int) (result []*model.Lcpterminalboxitem, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminalboxitemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminalboxitemDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminalboxitemDo) Delete(models ...*model.Lcpterminalboxitem) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminalboxitemDo) withDO(do gen.Dao) *lcpterminalboxitemDo {
	l.DO = *do.(*gen.DO)
	return l
}
