// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfireset(db *gorm.DB) hangfireset {
	_hangfireset := hangfireset{}

	_hangfireset.hangfiresetDo.UseDB(db)
	_hangfireset.hangfiresetDo.UseModel(&model.Hangfireset{})

	tableName := _hangfireset.hangfiresetDo.TableName()
	_hangfireset.ALL = field.NewAsterisk(tableName)
	_hangfireset.ID = field.NewInt64(tableName, "Id")
	_hangfireset.Key = field.NewString(tableName, "Key")
	_hangfireset.Value = field.NewString(tableName, "Value")
	_hangfireset.Score = field.NewFloat32(tableName, "Score")
	_hangfireset.ExpireAt = field.NewTime(tableName, "ExpireAt")

	_hangfireset.fillFieldMap()

	return _hangfireset
}

type hangfireset struct {
	hangfiresetDo hangfiresetDo

	ALL      field.Asterisk
	ID       field.Int64
	Key      field.String
	Value    field.String
	Score    field.Float32
	ExpireAt field.Time

	fieldMap map[string]field.Expr
}

func (h hangfireset) Table(newTableName string) *hangfireset {
	h.hangfiresetDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfireset) As(alias string) *hangfireset {
	h.hangfiresetDo.DO = *(h.hangfiresetDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfireset) updateTableName(table string) *hangfireset {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.Key = field.NewString(table, "Key")
	h.Value = field.NewString(table, "Value")
	h.Score = field.NewFloat32(table, "Score")
	h.ExpireAt = field.NewTime(table, "ExpireAt")

	h.fillFieldMap()

	return h
}

func (h *hangfireset) WithContext(ctx context.Context) IHangfiresetDo {
	return h.hangfiresetDo.WithContext(ctx)
}

func (h hangfireset) TableName() string { return h.hangfiresetDo.TableName() }

func (h hangfireset) Alias() string { return h.hangfiresetDo.Alias() }

func (h *hangfireset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfireset) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 5)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["Key"] = h.Key
	h.fieldMap["Value"] = h.Value
	h.fieldMap["Score"] = h.Score
	h.fieldMap["ExpireAt"] = h.ExpireAt
}

func (h hangfireset) clone(db *gorm.DB) hangfireset {
	h.hangfiresetDo.ReplaceDB(db)
	return h
}

type hangfiresetDo struct{ gen.DO }

type IHangfiresetDo interface {
	gen.SubQuery
	Debug() IHangfiresetDo
	WithContext(ctx context.Context) IHangfiresetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfiresetDo
	Not(conds ...gen.Condition) IHangfiresetDo
	Or(conds ...gen.Condition) IHangfiresetDo
	Select(conds ...field.Expr) IHangfiresetDo
	Where(conds ...gen.Condition) IHangfiresetDo
	Order(conds ...field.Expr) IHangfiresetDo
	Distinct(cols ...field.Expr) IHangfiresetDo
	Omit(cols ...field.Expr) IHangfiresetDo
	Join(table schema.Tabler, on ...field.Expr) IHangfiresetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfiresetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfiresetDo
	Group(cols ...field.Expr) IHangfiresetDo
	Having(conds ...gen.Condition) IHangfiresetDo
	Limit(limit int) IHangfiresetDo
	Offset(offset int) IHangfiresetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfiresetDo
	Unscoped() IHangfiresetDo
	Create(values ...*model.Hangfireset) error
	CreateInBatches(values []*model.Hangfireset, batchSize int) error
	Save(values ...*model.Hangfireset) error
	First() (*model.Hangfireset, error)
	Take() (*model.Hangfireset, error)
	Last() (*model.Hangfireset, error)
	Find() ([]*model.Hangfireset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfireset, err error)
	FindInBatches(result *[]*model.Hangfireset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfireset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfiresetDo
	Assign(attrs ...field.AssignExpr) IHangfiresetDo
	Joins(fields ...field.RelationField) IHangfiresetDo
	Preload(fields ...field.RelationField) IHangfiresetDo
	FirstOrInit() (*model.Hangfireset, error)
	FirstOrCreate() (*model.Hangfireset, error)
	FindByPage(offset int, limit int) (result []*model.Hangfireset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfiresetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfiresetDo) Debug() IHangfiresetDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfiresetDo) WithContext(ctx context.Context) IHangfiresetDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfiresetDo) ReadDB() IHangfiresetDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfiresetDo) WriteDB() IHangfiresetDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfiresetDo) Clauses(conds ...clause.Expression) IHangfiresetDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfiresetDo) Returning(value interface{}, columns ...string) IHangfiresetDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfiresetDo) Not(conds ...gen.Condition) IHangfiresetDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfiresetDo) Or(conds ...gen.Condition) IHangfiresetDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfiresetDo) Select(conds ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfiresetDo) Where(conds ...gen.Condition) IHangfiresetDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfiresetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfiresetDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfiresetDo) Order(conds ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfiresetDo) Distinct(cols ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfiresetDo) Omit(cols ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfiresetDo) Join(table schema.Tabler, on ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfiresetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfiresetDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfiresetDo) Group(cols ...field.Expr) IHangfiresetDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfiresetDo) Having(conds ...gen.Condition) IHangfiresetDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfiresetDo) Limit(limit int) IHangfiresetDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfiresetDo) Offset(offset int) IHangfiresetDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfiresetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfiresetDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfiresetDo) Unscoped() IHangfiresetDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfiresetDo) Create(values ...*model.Hangfireset) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfiresetDo) CreateInBatches(values []*model.Hangfireset, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfiresetDo) Save(values ...*model.Hangfireset) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfiresetDo) First() (*model.Hangfireset, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireset), nil
	}
}

func (h hangfiresetDo) Take() (*model.Hangfireset, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireset), nil
	}
}

func (h hangfiresetDo) Last() (*model.Hangfireset, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireset), nil
	}
}

func (h hangfiresetDo) Find() ([]*model.Hangfireset, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfireset), err
}

func (h hangfiresetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfireset, err error) {
	buf := make([]*model.Hangfireset, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfiresetDo) FindInBatches(result *[]*model.Hangfireset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfiresetDo) Attrs(attrs ...field.AssignExpr) IHangfiresetDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfiresetDo) Assign(attrs ...field.AssignExpr) IHangfiresetDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfiresetDo) Joins(fields ...field.RelationField) IHangfiresetDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfiresetDo) Preload(fields ...field.RelationField) IHangfiresetDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfiresetDo) FirstOrInit() (*model.Hangfireset, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireset), nil
	}
}

func (h hangfiresetDo) FirstOrCreate() (*model.Hangfireset, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireset), nil
	}
}

func (h hangfiresetDo) FindByPage(offset int, limit int) (result []*model.Hangfireset, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfiresetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfiresetDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfiresetDo) Delete(models ...*model.Hangfireset) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfiresetDo) withDO(do gen.Dao) *hangfiresetDo {
	h.DO = *do.(*gen.DO)
	return h
}
