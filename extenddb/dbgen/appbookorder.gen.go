// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppbookorder(db *gorm.DB) appbookorder {
	_appbookorder := appbookorder{}

	_appbookorder.appbookorderDo.UseDB(db)
	_appbookorder.appbookorderDo.UseModel(&model.Appbookorder{})

	tableName := _appbookorder.appbookorderDo.TableName()
	_appbookorder.ALL = field.NewAsterisk(tableName)
	_appbookorder.ID = field.NewString(tableName, "Id")
	_appbookorder.CreationTime = field.NewTime(tableName, "CreationTime")
	_appbookorder.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appbookorder.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appbookorder.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appbookorder.PatronID = field.NewString(tableName, "PatronId")
	_appbookorder.PatronName = field.NewString(tableName, "PatronName")
	_appbookorder.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_appbookorder.SubBookInfoID = field.NewString(tableName, "SubBookInfoId")
	_appbookorder.SubBookInfoISBN = field.NewString(tableName, "SubBookInfoISBN")
	_appbookorder.SubBookInfoTitle = field.NewString(tableName, "SubBookInfoTitle")
	_appbookorder.BookOrderStatus = field.NewInt64(tableName, "BookOrderStatus")
	_appbookorder.Remark = field.NewString(tableName, "Remark")
	_appbookorder.TenantID = field.NewInt64(tableName, "TenantId")

	_appbookorder.fillFieldMap()

	return _appbookorder
}

type appbookorder struct {
	appbookorderDo appbookorderDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	PatronID             field.String
	PatronName           field.String
	PatronBarcode        field.String
	SubBookInfoID        field.String
	SubBookInfoISBN      field.String
	SubBookInfoTitle     field.String
	BookOrderStatus      field.Int64
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appbookorder) Table(newTableName string) *appbookorder {
	a.appbookorderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appbookorder) As(alias string) *appbookorder {
	a.appbookorderDo.DO = *(a.appbookorderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appbookorder) updateTableName(table string) *appbookorder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.PatronID = field.NewString(table, "PatronId")
	a.PatronName = field.NewString(table, "PatronName")
	a.PatronBarcode = field.NewString(table, "PatronBarcode")
	a.SubBookInfoID = field.NewString(table, "SubBookInfoId")
	a.SubBookInfoISBN = field.NewString(table, "SubBookInfoISBN")
	a.SubBookInfoTitle = field.NewString(table, "SubBookInfoTitle")
	a.BookOrderStatus = field.NewInt64(table, "BookOrderStatus")
	a.Remark = field.NewString(table, "Remark")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appbookorder) WithContext(ctx context.Context) IAppbookorderDo {
	return a.appbookorderDo.WithContext(ctx)
}

func (a appbookorder) TableName() string { return a.appbookorderDo.TableName() }

func (a appbookorder) Alias() string { return a.appbookorderDo.Alias() }

func (a *appbookorder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appbookorder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["PatronId"] = a.PatronID
	a.fieldMap["PatronName"] = a.PatronName
	a.fieldMap["PatronBarcode"] = a.PatronBarcode
	a.fieldMap["SubBookInfoId"] = a.SubBookInfoID
	a.fieldMap["SubBookInfoISBN"] = a.SubBookInfoISBN
	a.fieldMap["SubBookInfoTitle"] = a.SubBookInfoTitle
	a.fieldMap["BookOrderStatus"] = a.BookOrderStatus
	a.fieldMap["Remark"] = a.Remark
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appbookorder) clone(db *gorm.DB) appbookorder {
	a.appbookorderDo.ReplaceDB(db)
	return a
}

type appbookorderDo struct{ gen.DO }

type IAppbookorderDo interface {
	gen.SubQuery
	Debug() IAppbookorderDo
	WithContext(ctx context.Context) IAppbookorderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppbookorderDo
	Not(conds ...gen.Condition) IAppbookorderDo
	Or(conds ...gen.Condition) IAppbookorderDo
	Select(conds ...field.Expr) IAppbookorderDo
	Where(conds ...gen.Condition) IAppbookorderDo
	Order(conds ...field.Expr) IAppbookorderDo
	Distinct(cols ...field.Expr) IAppbookorderDo
	Omit(cols ...field.Expr) IAppbookorderDo
	Join(table schema.Tabler, on ...field.Expr) IAppbookorderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppbookorderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppbookorderDo
	Group(cols ...field.Expr) IAppbookorderDo
	Having(conds ...gen.Condition) IAppbookorderDo
	Limit(limit int) IAppbookorderDo
	Offset(offset int) IAppbookorderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppbookorderDo
	Unscoped() IAppbookorderDo
	Create(values ...*model.Appbookorder) error
	CreateInBatches(values []*model.Appbookorder, batchSize int) error
	Save(values ...*model.Appbookorder) error
	First() (*model.Appbookorder, error)
	Take() (*model.Appbookorder, error)
	Last() (*model.Appbookorder, error)
	Find() ([]*model.Appbookorder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appbookorder, err error)
	FindInBatches(result *[]*model.Appbookorder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appbookorder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppbookorderDo
	Assign(attrs ...field.AssignExpr) IAppbookorderDo
	Joins(fields ...field.RelationField) IAppbookorderDo
	Preload(fields ...field.RelationField) IAppbookorderDo
	FirstOrInit() (*model.Appbookorder, error)
	FirstOrCreate() (*model.Appbookorder, error)
	FindByPage(offset int, limit int) (result []*model.Appbookorder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppbookorderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appbookorderDo) Debug() IAppbookorderDo {
	return a.withDO(a.DO.Debug())
}

func (a appbookorderDo) WithContext(ctx context.Context) IAppbookorderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appbookorderDo) ReadDB() IAppbookorderDo {
	return a.Clauses(dbresolver.Read)
}

func (a appbookorderDo) WriteDB() IAppbookorderDo {
	return a.Clauses(dbresolver.Write)
}

func (a appbookorderDo) Clauses(conds ...clause.Expression) IAppbookorderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appbookorderDo) Returning(value interface{}, columns ...string) IAppbookorderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appbookorderDo) Not(conds ...gen.Condition) IAppbookorderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appbookorderDo) Or(conds ...gen.Condition) IAppbookorderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appbookorderDo) Select(conds ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appbookorderDo) Where(conds ...gen.Condition) IAppbookorderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appbookorderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppbookorderDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appbookorderDo) Order(conds ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appbookorderDo) Distinct(cols ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appbookorderDo) Omit(cols ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appbookorderDo) Join(table schema.Tabler, on ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appbookorderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appbookorderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appbookorderDo) Group(cols ...field.Expr) IAppbookorderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appbookorderDo) Having(conds ...gen.Condition) IAppbookorderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appbookorderDo) Limit(limit int) IAppbookorderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appbookorderDo) Offset(offset int) IAppbookorderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appbookorderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppbookorderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appbookorderDo) Unscoped() IAppbookorderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appbookorderDo) Create(values ...*model.Appbookorder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appbookorderDo) CreateInBatches(values []*model.Appbookorder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appbookorderDo) Save(values ...*model.Appbookorder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appbookorderDo) First() (*model.Appbookorder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbookorder), nil
	}
}

func (a appbookorderDo) Take() (*model.Appbookorder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbookorder), nil
	}
}

func (a appbookorderDo) Last() (*model.Appbookorder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbookorder), nil
	}
}

func (a appbookorderDo) Find() ([]*model.Appbookorder, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appbookorder), err
}

func (a appbookorderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appbookorder, err error) {
	buf := make([]*model.Appbookorder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appbookorderDo) FindInBatches(result *[]*model.Appbookorder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appbookorderDo) Attrs(attrs ...field.AssignExpr) IAppbookorderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appbookorderDo) Assign(attrs ...field.AssignExpr) IAppbookorderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appbookorderDo) Joins(fields ...field.RelationField) IAppbookorderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appbookorderDo) Preload(fields ...field.RelationField) IAppbookorderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appbookorderDo) FirstOrInit() (*model.Appbookorder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbookorder), nil
	}
}

func (a appbookorderDo) FirstOrCreate() (*model.Appbookorder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbookorder), nil
	}
}

func (a appbookorderDo) FindByPage(offset int, limit int) (result []*model.Appbookorder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appbookorderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appbookorderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appbookorderDo) Delete(models ...*model.Appbookorder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appbookorderDo) withDO(do gen.Dao) *appbookorderDo {
	a.DO = *do.(*gen.DO)
	return a
}
