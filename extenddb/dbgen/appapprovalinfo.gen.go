// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppapprovalinfo(db *gorm.DB) appapprovalinfo {
	_appapprovalinfo := appapprovalinfo{}

	_appapprovalinfo.appapprovalinfoDo.UseDB(db)
	_appapprovalinfo.appapprovalinfoDo.UseModel(&model.Appapprovalinfo{})

	tableName := _appapprovalinfo.appapprovalinfoDo.TableName()
	_appapprovalinfo.ALL = field.NewAsterisk(tableName)
	_appapprovalinfo.ID = field.NewString(tableName, "Id")
	_appapprovalinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_appapprovalinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appapprovalinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appapprovalinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appapprovalinfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_appapprovalinfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_appapprovalinfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_appapprovalinfo.SpNo = field.NewString(tableName, "SpNo")
	_appapprovalinfo.SpCreatorUserID = field.NewString(tableName, "SpCreatorUserId")
	_appapprovalinfo.SpCreatorUserName = field.NewString(tableName, "SpCreatorUserName")
	_appapprovalinfo.SpTemplateID = field.NewString(tableName, "SpTemplateId")
	_appapprovalinfo.SpStatus = field.NewInt64(tableName, "SpStatus")
	_appapprovalinfo.UseTemplateApprover = field.NewField(tableName, "UseTemplateApprover")
	_appapprovalinfo.ChooseDepartment = field.NewInt64(tableName, "ChooseDepartment")
	_appapprovalinfo.Approver = field.NewString(tableName, "Approver")
	_appapprovalinfo.Notifyer = field.NewString(tableName, "Notifyer")
	_appapprovalinfo.NotifyType = field.NewInt64(tableName, "NotifyType")
	_appapprovalinfo.ApplyData = field.NewString(tableName, "ApplyData")
	_appapprovalinfo.SummaryList = field.NewString(tableName, "SummaryList")
	_appapprovalinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_appapprovalinfo.fillFieldMap()

	return _appapprovalinfo
}

type appapprovalinfo struct {
	appapprovalinfoDo appapprovalinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	SpNo                 field.String
	SpCreatorUserID      field.String
	SpCreatorUserName    field.String
	SpTemplateID         field.String
	SpStatus             field.Int64
	UseTemplateApprover  field.Field
	ChooseDepartment     field.Int64
	Approver             field.String
	Notifyer             field.String
	NotifyType           field.Int64
	ApplyData            field.String
	SummaryList          field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appapprovalinfo) Table(newTableName string) *appapprovalinfo {
	a.appapprovalinfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appapprovalinfo) As(alias string) *appapprovalinfo {
	a.appapprovalinfoDo.DO = *(a.appapprovalinfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appapprovalinfo) updateTableName(table string) *appapprovalinfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.SpNo = field.NewString(table, "SpNo")
	a.SpCreatorUserID = field.NewString(table, "SpCreatorUserId")
	a.SpCreatorUserName = field.NewString(table, "SpCreatorUserName")
	a.SpTemplateID = field.NewString(table, "SpTemplateId")
	a.SpStatus = field.NewInt64(table, "SpStatus")
	a.UseTemplateApprover = field.NewField(table, "UseTemplateApprover")
	a.ChooseDepartment = field.NewInt64(table, "ChooseDepartment")
	a.Approver = field.NewString(table, "Approver")
	a.Notifyer = field.NewString(table, "Notifyer")
	a.NotifyType = field.NewInt64(table, "NotifyType")
	a.ApplyData = field.NewString(table, "ApplyData")
	a.SummaryList = field.NewString(table, "SummaryList")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appapprovalinfo) WithContext(ctx context.Context) IAppapprovalinfoDo {
	return a.appapprovalinfoDo.WithContext(ctx)
}

func (a appapprovalinfo) TableName() string { return a.appapprovalinfoDo.TableName() }

func (a appapprovalinfo) Alias() string { return a.appapprovalinfoDo.Alias() }

func (a *appapprovalinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appapprovalinfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 21)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["SpNo"] = a.SpNo
	a.fieldMap["SpCreatorUserId"] = a.SpCreatorUserID
	a.fieldMap["SpCreatorUserName"] = a.SpCreatorUserName
	a.fieldMap["SpTemplateId"] = a.SpTemplateID
	a.fieldMap["SpStatus"] = a.SpStatus
	a.fieldMap["UseTemplateApprover"] = a.UseTemplateApprover
	a.fieldMap["ChooseDepartment"] = a.ChooseDepartment
	a.fieldMap["Approver"] = a.Approver
	a.fieldMap["Notifyer"] = a.Notifyer
	a.fieldMap["NotifyType"] = a.NotifyType
	a.fieldMap["ApplyData"] = a.ApplyData
	a.fieldMap["SummaryList"] = a.SummaryList
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appapprovalinfo) clone(db *gorm.DB) appapprovalinfo {
	a.appapprovalinfoDo.ReplaceDB(db)
	return a
}

type appapprovalinfoDo struct{ gen.DO }

type IAppapprovalinfoDo interface {
	gen.SubQuery
	Debug() IAppapprovalinfoDo
	WithContext(ctx context.Context) IAppapprovalinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppapprovalinfoDo
	Not(conds ...gen.Condition) IAppapprovalinfoDo
	Or(conds ...gen.Condition) IAppapprovalinfoDo
	Select(conds ...field.Expr) IAppapprovalinfoDo
	Where(conds ...gen.Condition) IAppapprovalinfoDo
	Order(conds ...field.Expr) IAppapprovalinfoDo
	Distinct(cols ...field.Expr) IAppapprovalinfoDo
	Omit(cols ...field.Expr) IAppapprovalinfoDo
	Join(table schema.Tabler, on ...field.Expr) IAppapprovalinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppapprovalinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppapprovalinfoDo
	Group(cols ...field.Expr) IAppapprovalinfoDo
	Having(conds ...gen.Condition) IAppapprovalinfoDo
	Limit(limit int) IAppapprovalinfoDo
	Offset(offset int) IAppapprovalinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppapprovalinfoDo
	Unscoped() IAppapprovalinfoDo
	Create(values ...*model.Appapprovalinfo) error
	CreateInBatches(values []*model.Appapprovalinfo, batchSize int) error
	Save(values ...*model.Appapprovalinfo) error
	First() (*model.Appapprovalinfo, error)
	Take() (*model.Appapprovalinfo, error)
	Last() (*model.Appapprovalinfo, error)
	Find() ([]*model.Appapprovalinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appapprovalinfo, err error)
	FindInBatches(result *[]*model.Appapprovalinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appapprovalinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppapprovalinfoDo
	Assign(attrs ...field.AssignExpr) IAppapprovalinfoDo
	Joins(fields ...field.RelationField) IAppapprovalinfoDo
	Preload(fields ...field.RelationField) IAppapprovalinfoDo
	FirstOrInit() (*model.Appapprovalinfo, error)
	FirstOrCreate() (*model.Appapprovalinfo, error)
	FindByPage(offset int, limit int) (result []*model.Appapprovalinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppapprovalinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appapprovalinfoDo) Debug() IAppapprovalinfoDo {
	return a.withDO(a.DO.Debug())
}

func (a appapprovalinfoDo) WithContext(ctx context.Context) IAppapprovalinfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appapprovalinfoDo) ReadDB() IAppapprovalinfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a appapprovalinfoDo) WriteDB() IAppapprovalinfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a appapprovalinfoDo) Clauses(conds ...clause.Expression) IAppapprovalinfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appapprovalinfoDo) Returning(value interface{}, columns ...string) IAppapprovalinfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appapprovalinfoDo) Not(conds ...gen.Condition) IAppapprovalinfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appapprovalinfoDo) Or(conds ...gen.Condition) IAppapprovalinfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appapprovalinfoDo) Select(conds ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appapprovalinfoDo) Where(conds ...gen.Condition) IAppapprovalinfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appapprovalinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppapprovalinfoDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appapprovalinfoDo) Order(conds ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appapprovalinfoDo) Distinct(cols ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appapprovalinfoDo) Omit(cols ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appapprovalinfoDo) Join(table schema.Tabler, on ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appapprovalinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appapprovalinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appapprovalinfoDo) Group(cols ...field.Expr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appapprovalinfoDo) Having(conds ...gen.Condition) IAppapprovalinfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appapprovalinfoDo) Limit(limit int) IAppapprovalinfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appapprovalinfoDo) Offset(offset int) IAppapprovalinfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appapprovalinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppapprovalinfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appapprovalinfoDo) Unscoped() IAppapprovalinfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appapprovalinfoDo) Create(values ...*model.Appapprovalinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appapprovalinfoDo) CreateInBatches(values []*model.Appapprovalinfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appapprovalinfoDo) Save(values ...*model.Appapprovalinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appapprovalinfoDo) First() (*model.Appapprovalinfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovalinfo), nil
	}
}

func (a appapprovalinfoDo) Take() (*model.Appapprovalinfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovalinfo), nil
	}
}

func (a appapprovalinfoDo) Last() (*model.Appapprovalinfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovalinfo), nil
	}
}

func (a appapprovalinfoDo) Find() ([]*model.Appapprovalinfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appapprovalinfo), err
}

func (a appapprovalinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appapprovalinfo, err error) {
	buf := make([]*model.Appapprovalinfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appapprovalinfoDo) FindInBatches(result *[]*model.Appapprovalinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appapprovalinfoDo) Attrs(attrs ...field.AssignExpr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appapprovalinfoDo) Assign(attrs ...field.AssignExpr) IAppapprovalinfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appapprovalinfoDo) Joins(fields ...field.RelationField) IAppapprovalinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appapprovalinfoDo) Preload(fields ...field.RelationField) IAppapprovalinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appapprovalinfoDo) FirstOrInit() (*model.Appapprovalinfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovalinfo), nil
	}
}

func (a appapprovalinfoDo) FirstOrCreate() (*model.Appapprovalinfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovalinfo), nil
	}
}

func (a appapprovalinfoDo) FindByPage(offset int, limit int) (result []*model.Appapprovalinfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appapprovalinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appapprovalinfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appapprovalinfoDo) Delete(models ...*model.Appapprovalinfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appapprovalinfoDo) withDO(do gen.Dao) *appapprovalinfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
