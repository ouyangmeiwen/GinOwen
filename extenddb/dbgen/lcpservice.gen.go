// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpservice(db *gorm.DB) lcpservice {
	_lcpservice := lcpservice{}

	_lcpservice.lcpserviceDo.UseDB(db)
	_lcpservice.lcpserviceDo.UseModel(&model.Lcpservice{})

	tableName := _lcpservice.lcpserviceDo.TableName()
	_lcpservice.ALL = field.NewAsterisk(tableName)
	_lcpservice.ID = field.NewString(tableName, "Id")
	_lcpservice.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpservice.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpservice.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpservice.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpservice.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpservice.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpservice.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpservice.ServiceType = field.NewInt64(tableName, "ServiceType")
	_lcpservice.Name = field.NewString(tableName, "Name")
	_lcpservice.IsEnable = field.NewField(tableName, "IsEnable")
	_lcpservice.IsError = field.NewField(tableName, "IsError")
	_lcpservice.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpservice.VersionCode = field.NewInt64(tableName, "VersionCode")
	_lcpservice.VersionName = field.NewString(tableName, "VersionName")
	_lcpservice.MAC = field.NewString(tableName, "MAC")
	_lcpservice.IP = field.NewString(tableName, "IP")
	_lcpservice.ConnStr = field.NewString(tableName, "ConnStr")
	_lcpservice.Remark = field.NewString(tableName, "Remark")
	_lcpservice.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpservice.fillFieldMap()

	return _lcpservice
}

type lcpservice struct {
	lcpserviceDo lcpserviceDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ServiceType          field.Int64
	Name                 field.String
	IsEnable             field.Field
	IsError              field.Field
	ErrorMessage         field.String
	VersionCode          field.Int64
	VersionName          field.String
	MAC                  field.String
	IP                   field.String
	ConnStr              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpservice) Table(newTableName string) *lcpservice {
	l.lcpserviceDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpservice) As(alias string) *lcpservice {
	l.lcpserviceDo.DO = *(l.lcpserviceDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpservice) updateTableName(table string) *lcpservice {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.ServiceType = field.NewInt64(table, "ServiceType")
	l.Name = field.NewString(table, "Name")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.IsError = field.NewField(table, "IsError")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.VersionCode = field.NewInt64(table, "VersionCode")
	l.VersionName = field.NewString(table, "VersionName")
	l.MAC = field.NewString(table, "MAC")
	l.IP = field.NewString(table, "IP")
	l.ConnStr = field.NewString(table, "ConnStr")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpservice) WithContext(ctx context.Context) ILcpserviceDo {
	return l.lcpserviceDo.WithContext(ctx)
}

func (l lcpservice) TableName() string { return l.lcpserviceDo.TableName() }

func (l lcpservice) Alias() string { return l.lcpserviceDo.Alias() }

func (l *lcpservice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpservice) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 20)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["ServiceType"] = l.ServiceType
	l.fieldMap["Name"] = l.Name
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["IsError"] = l.IsError
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["VersionCode"] = l.VersionCode
	l.fieldMap["VersionName"] = l.VersionName
	l.fieldMap["MAC"] = l.MAC
	l.fieldMap["IP"] = l.IP
	l.fieldMap["ConnStr"] = l.ConnStr
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpservice) clone(db *gorm.DB) lcpservice {
	l.lcpserviceDo.ReplaceDB(db)
	return l
}

type lcpserviceDo struct{ gen.DO }

type ILcpserviceDo interface {
	gen.SubQuery
	Debug() ILcpserviceDo
	WithContext(ctx context.Context) ILcpserviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpserviceDo
	Not(conds ...gen.Condition) ILcpserviceDo
	Or(conds ...gen.Condition) ILcpserviceDo
	Select(conds ...field.Expr) ILcpserviceDo
	Where(conds ...gen.Condition) ILcpserviceDo
	Order(conds ...field.Expr) ILcpserviceDo
	Distinct(cols ...field.Expr) ILcpserviceDo
	Omit(cols ...field.Expr) ILcpserviceDo
	Join(table schema.Tabler, on ...field.Expr) ILcpserviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpserviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpserviceDo
	Group(cols ...field.Expr) ILcpserviceDo
	Having(conds ...gen.Condition) ILcpserviceDo
	Limit(limit int) ILcpserviceDo
	Offset(offset int) ILcpserviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpserviceDo
	Unscoped() ILcpserviceDo
	Create(values ...*model.Lcpservice) error
	CreateInBatches(values []*model.Lcpservice, batchSize int) error
	Save(values ...*model.Lcpservice) error
	First() (*model.Lcpservice, error)
	Take() (*model.Lcpservice, error)
	Last() (*model.Lcpservice, error)
	Find() ([]*model.Lcpservice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpservice, err error)
	FindInBatches(result *[]*model.Lcpservice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpservice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpserviceDo
	Assign(attrs ...field.AssignExpr) ILcpserviceDo
	Joins(fields ...field.RelationField) ILcpserviceDo
	Preload(fields ...field.RelationField) ILcpserviceDo
	FirstOrInit() (*model.Lcpservice, error)
	FirstOrCreate() (*model.Lcpservice, error)
	FindByPage(offset int, limit int) (result []*model.Lcpservice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpserviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpserviceDo) Debug() ILcpserviceDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpserviceDo) WithContext(ctx context.Context) ILcpserviceDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpserviceDo) ReadDB() ILcpserviceDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpserviceDo) WriteDB() ILcpserviceDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpserviceDo) Clauses(conds ...clause.Expression) ILcpserviceDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpserviceDo) Returning(value interface{}, columns ...string) ILcpserviceDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpserviceDo) Not(conds ...gen.Condition) ILcpserviceDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpserviceDo) Or(conds ...gen.Condition) ILcpserviceDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpserviceDo) Select(conds ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpserviceDo) Where(conds ...gen.Condition) ILcpserviceDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpserviceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpserviceDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpserviceDo) Order(conds ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpserviceDo) Distinct(cols ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpserviceDo) Omit(cols ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpserviceDo) Join(table schema.Tabler, on ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpserviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpserviceDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpserviceDo) Group(cols ...field.Expr) ILcpserviceDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpserviceDo) Having(conds ...gen.Condition) ILcpserviceDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpserviceDo) Limit(limit int) ILcpserviceDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpserviceDo) Offset(offset int) ILcpserviceDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpserviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpserviceDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpserviceDo) Unscoped() ILcpserviceDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpserviceDo) Create(values ...*model.Lcpservice) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpserviceDo) CreateInBatches(values []*model.Lcpservice, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpserviceDo) Save(values ...*model.Lcpservice) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpserviceDo) First() (*model.Lcpservice, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpservice), nil
	}
}

func (l lcpserviceDo) Take() (*model.Lcpservice, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpservice), nil
	}
}

func (l lcpserviceDo) Last() (*model.Lcpservice, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpservice), nil
	}
}

func (l lcpserviceDo) Find() ([]*model.Lcpservice, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpservice), err
}

func (l lcpserviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpservice, err error) {
	buf := make([]*model.Lcpservice, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpserviceDo) FindInBatches(result *[]*model.Lcpservice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpserviceDo) Attrs(attrs ...field.AssignExpr) ILcpserviceDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpserviceDo) Assign(attrs ...field.AssignExpr) ILcpserviceDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpserviceDo) Joins(fields ...field.RelationField) ILcpserviceDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpserviceDo) Preload(fields ...field.RelationField) ILcpserviceDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpserviceDo) FirstOrInit() (*model.Lcpservice, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpservice), nil
	}
}

func (l lcpserviceDo) FirstOrCreate() (*model.Lcpservice, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpservice), nil
	}
}

func (l lcpserviceDo) FindByPage(offset int, limit int) (result []*model.Lcpservice, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpserviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpserviceDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpserviceDo) Delete(models ...*model.Lcpservice) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpserviceDo) withDO(do gen.Dao) *lcpserviceDo {
	l.DO = *do.(*gen.DO)
	return l
}
