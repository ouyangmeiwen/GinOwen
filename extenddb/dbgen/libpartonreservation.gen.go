// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibpartonreservation(db *gorm.DB) libpartonreservation {
	_libpartonreservation := libpartonreservation{}

	_libpartonreservation.libpartonreservationDo.UseDB(db)
	_libpartonreservation.libpartonreservationDo.UseModel(&model.Libpartonreservation{})

	tableName := _libpartonreservation.libpartonreservationDo.TableName()
	_libpartonreservation.ALL = field.NewAsterisk(tableName)
	_libpartonreservation.ID = field.NewString(tableName, "Id")
	_libpartonreservation.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpartonreservation.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpartonreservation.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libpartonreservation.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libpartonreservation.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libpartonreservation.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libpartonreservation.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libpartonreservation.PatronID = field.NewString(tableName, "PatronId")
	_libpartonreservation.PatronName = field.NewString(tableName, "PatronName")
	_libpartonreservation.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libpartonreservation.ItemID = field.NewString(tableName, "ItemId")
	_libpartonreservation.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libpartonreservation.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libpartonreservation.ItemAuthor = field.NewString(tableName, "ItemAuthor")
	_libpartonreservation.ItemISBN = field.NewString(tableName, "ItemISBN")
	_libpartonreservation.ItemPublisher = field.NewString(tableName, "ItemPublisher")
	_libpartonreservation.ItemType = field.NewInt64(tableName, "ItemType")
	_libpartonreservation.ReserveItemType = field.NewInt64(tableName, "ReserveItemType")
	_libpartonreservation.OverdueTime = field.NewTime(tableName, "OverdueTime")
	_libpartonreservation.TernimalID = field.NewString(tableName, "TernimalID")
	_libpartonreservation.Name = field.NewString(tableName, "Name")
	_libpartonreservation.Address = field.NewString(tableName, "Address")
	_libpartonreservation.OnShelfWorker = field.NewString(tableName, "OnShelfWorker")
	_libpartonreservation.OnShelfWorkerTime = field.NewTime(tableName, "OnShelfWorkerTime")
	_libpartonreservation.OffShelfWorker = field.NewString(tableName, "OffShelfWorker")
	_libpartonreservation.OffShelfWorkerTime = field.NewTime(tableName, "OffShelfWorkerTime")
	_libpartonreservation.CancelWorker = field.NewString(tableName, "CancelWorker")
	_libpartonreservation.CancelWorkerTime = field.NewTime(tableName, "CancelWorkerTime")
	_libpartonreservation.CancelReason = field.NewString(tableName, "CancelReason")
	_libpartonreservation.TenantID = field.NewInt64(tableName, "TenantId")

	_libpartonreservation.fillFieldMap()

	return _libpartonreservation
}

type libpartonreservation struct {
	libpartonreservationDo libpartonreservationDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	PatronID             field.String
	PatronName           field.String
	PatronBarcode        field.String
	ItemID               field.String
	ItemBarcode          field.String
	ItemTitle            field.String
	ItemAuthor           field.String
	ItemISBN             field.String
	ItemPublisher        field.String
	ItemType             field.Int64
	ReserveItemType      field.Int64
	OverdueTime          field.Time
	TernimalID           field.String
	Name                 field.String
	Address              field.String
	OnShelfWorker        field.String
	OnShelfWorkerTime    field.Time
	OffShelfWorker       field.String
	OffShelfWorkerTime   field.Time
	CancelWorker         field.String
	CancelWorkerTime     field.Time
	CancelReason         field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libpartonreservation) Table(newTableName string) *libpartonreservation {
	l.libpartonreservationDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpartonreservation) As(alias string) *libpartonreservation {
	l.libpartonreservationDo.DO = *(l.libpartonreservationDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpartonreservation) updateTableName(table string) *libpartonreservation {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronName = field.NewString(table, "PatronName")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemAuthor = field.NewString(table, "ItemAuthor")
	l.ItemISBN = field.NewString(table, "ItemISBN")
	l.ItemPublisher = field.NewString(table, "ItemPublisher")
	l.ItemType = field.NewInt64(table, "ItemType")
	l.ReserveItemType = field.NewInt64(table, "ReserveItemType")
	l.OverdueTime = field.NewTime(table, "OverdueTime")
	l.TernimalID = field.NewString(table, "TernimalID")
	l.Name = field.NewString(table, "Name")
	l.Address = field.NewString(table, "Address")
	l.OnShelfWorker = field.NewString(table, "OnShelfWorker")
	l.OnShelfWorkerTime = field.NewTime(table, "OnShelfWorkerTime")
	l.OffShelfWorker = field.NewString(table, "OffShelfWorker")
	l.OffShelfWorkerTime = field.NewTime(table, "OffShelfWorkerTime")
	l.CancelWorker = field.NewString(table, "CancelWorker")
	l.CancelWorkerTime = field.NewTime(table, "CancelWorkerTime")
	l.CancelReason = field.NewString(table, "CancelReason")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpartonreservation) WithContext(ctx context.Context) ILibpartonreservationDo {
	return l.libpartonreservationDo.WithContext(ctx)
}

func (l libpartonreservation) TableName() string { return l.libpartonreservationDo.TableName() }

func (l libpartonreservation) Alias() string { return l.libpartonreservationDo.Alias() }

func (l *libpartonreservation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpartonreservation) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 31)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemAuthor"] = l.ItemAuthor
	l.fieldMap["ItemISBN"] = l.ItemISBN
	l.fieldMap["ItemPublisher"] = l.ItemPublisher
	l.fieldMap["ItemType"] = l.ItemType
	l.fieldMap["ReserveItemType"] = l.ReserveItemType
	l.fieldMap["OverdueTime"] = l.OverdueTime
	l.fieldMap["TernimalID"] = l.TernimalID
	l.fieldMap["Name"] = l.Name
	l.fieldMap["Address"] = l.Address
	l.fieldMap["OnShelfWorker"] = l.OnShelfWorker
	l.fieldMap["OnShelfWorkerTime"] = l.OnShelfWorkerTime
	l.fieldMap["OffShelfWorker"] = l.OffShelfWorker
	l.fieldMap["OffShelfWorkerTime"] = l.OffShelfWorkerTime
	l.fieldMap["CancelWorker"] = l.CancelWorker
	l.fieldMap["CancelWorkerTime"] = l.CancelWorkerTime
	l.fieldMap["CancelReason"] = l.CancelReason
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpartonreservation) clone(db *gorm.DB) libpartonreservation {
	l.libpartonreservationDo.ReplaceDB(db)
	return l
}

type libpartonreservationDo struct{ gen.DO }

type ILibpartonreservationDo interface {
	gen.SubQuery
	Debug() ILibpartonreservationDo
	WithContext(ctx context.Context) ILibpartonreservationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpartonreservationDo
	Not(conds ...gen.Condition) ILibpartonreservationDo
	Or(conds ...gen.Condition) ILibpartonreservationDo
	Select(conds ...field.Expr) ILibpartonreservationDo
	Where(conds ...gen.Condition) ILibpartonreservationDo
	Order(conds ...field.Expr) ILibpartonreservationDo
	Distinct(cols ...field.Expr) ILibpartonreservationDo
	Omit(cols ...field.Expr) ILibpartonreservationDo
	Join(table schema.Tabler, on ...field.Expr) ILibpartonreservationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpartonreservationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpartonreservationDo
	Group(cols ...field.Expr) ILibpartonreservationDo
	Having(conds ...gen.Condition) ILibpartonreservationDo
	Limit(limit int) ILibpartonreservationDo
	Offset(offset int) ILibpartonreservationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpartonreservationDo
	Unscoped() ILibpartonreservationDo
	Create(values ...*model.Libpartonreservation) error
	CreateInBatches(values []*model.Libpartonreservation, batchSize int) error
	Save(values ...*model.Libpartonreservation) error
	First() (*model.Libpartonreservation, error)
	Take() (*model.Libpartonreservation, error)
	Last() (*model.Libpartonreservation, error)
	Find() ([]*model.Libpartonreservation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpartonreservation, err error)
	FindInBatches(result *[]*model.Libpartonreservation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpartonreservation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpartonreservationDo
	Assign(attrs ...field.AssignExpr) ILibpartonreservationDo
	Joins(fields ...field.RelationField) ILibpartonreservationDo
	Preload(fields ...field.RelationField) ILibpartonreservationDo
	FirstOrInit() (*model.Libpartonreservation, error)
	FirstOrCreate() (*model.Libpartonreservation, error)
	FindByPage(offset int, limit int) (result []*model.Libpartonreservation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpartonreservationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpartonreservationDo) Debug() ILibpartonreservationDo {
	return l.withDO(l.DO.Debug())
}

func (l libpartonreservationDo) WithContext(ctx context.Context) ILibpartonreservationDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpartonreservationDo) ReadDB() ILibpartonreservationDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpartonreservationDo) WriteDB() ILibpartonreservationDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpartonreservationDo) Clauses(conds ...clause.Expression) ILibpartonreservationDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpartonreservationDo) Returning(value interface{}, columns ...string) ILibpartonreservationDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpartonreservationDo) Not(conds ...gen.Condition) ILibpartonreservationDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpartonreservationDo) Or(conds ...gen.Condition) ILibpartonreservationDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpartonreservationDo) Select(conds ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpartonreservationDo) Where(conds ...gen.Condition) ILibpartonreservationDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpartonreservationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpartonreservationDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpartonreservationDo) Order(conds ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpartonreservationDo) Distinct(cols ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpartonreservationDo) Omit(cols ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpartonreservationDo) Join(table schema.Tabler, on ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpartonreservationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpartonreservationDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpartonreservationDo) Group(cols ...field.Expr) ILibpartonreservationDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpartonreservationDo) Having(conds ...gen.Condition) ILibpartonreservationDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpartonreservationDo) Limit(limit int) ILibpartonreservationDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpartonreservationDo) Offset(offset int) ILibpartonreservationDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpartonreservationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpartonreservationDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpartonreservationDo) Unscoped() ILibpartonreservationDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpartonreservationDo) Create(values ...*model.Libpartonreservation) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpartonreservationDo) CreateInBatches(values []*model.Libpartonreservation, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpartonreservationDo) Save(values ...*model.Libpartonreservation) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpartonreservationDo) First() (*model.Libpartonreservation, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpartonreservation), nil
	}
}

func (l libpartonreservationDo) Take() (*model.Libpartonreservation, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpartonreservation), nil
	}
}

func (l libpartonreservationDo) Last() (*model.Libpartonreservation, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpartonreservation), nil
	}
}

func (l libpartonreservationDo) Find() ([]*model.Libpartonreservation, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpartonreservation), err
}

func (l libpartonreservationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpartonreservation, err error) {
	buf := make([]*model.Libpartonreservation, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpartonreservationDo) FindInBatches(result *[]*model.Libpartonreservation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpartonreservationDo) Attrs(attrs ...field.AssignExpr) ILibpartonreservationDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpartonreservationDo) Assign(attrs ...field.AssignExpr) ILibpartonreservationDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpartonreservationDo) Joins(fields ...field.RelationField) ILibpartonreservationDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpartonreservationDo) Preload(fields ...field.RelationField) ILibpartonreservationDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpartonreservationDo) FirstOrInit() (*model.Libpartonreservation, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpartonreservation), nil
	}
}

func (l libpartonreservationDo) FirstOrCreate() (*model.Libpartonreservation, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpartonreservation), nil
	}
}

func (l libpartonreservationDo) FindByPage(offset int, limit int) (result []*model.Libpartonreservation, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpartonreservationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpartonreservationDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpartonreservationDo) Delete(models ...*model.Libpartonreservation) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpartonreservationDo) withDO(do gen.Dao) *libpartonreservationDo {
	l.DO = *do.(*gen.DO)
	return l
}
