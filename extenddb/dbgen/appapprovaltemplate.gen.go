// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppapprovaltemplate(db *gorm.DB) appapprovaltemplate {
	_appapprovaltemplate := appapprovaltemplate{}

	_appapprovaltemplate.appapprovaltemplateDo.UseDB(db)
	_appapprovaltemplate.appapprovaltemplateDo.UseModel(&model.Appapprovaltemplate{})

	tableName := _appapprovaltemplate.appapprovaltemplateDo.TableName()
	_appapprovaltemplate.ALL = field.NewAsterisk(tableName)
	_appapprovaltemplate.ID = field.NewString(tableName, "Id")
	_appapprovaltemplate.CreationTime = field.NewTime(tableName, "CreationTime")
	_appapprovaltemplate.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appapprovaltemplate.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appapprovaltemplate.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appapprovaltemplate.IsDeleted = field.NewField(tableName, "IsDeleted")
	_appapprovaltemplate.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_appapprovaltemplate.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_appapprovaltemplate.SpTemplateID = field.NewString(tableName, "SpTemplateId")
	_appapprovaltemplate.SpTemplateName = field.NewString(tableName, "SpTemplateName")
	_appapprovaltemplate.Remark = field.NewString(tableName, "Remark")

	_appapprovaltemplate.fillFieldMap()

	return _appapprovaltemplate
}

type appapprovaltemplate struct {
	appapprovaltemplateDo appapprovaltemplateDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	SpTemplateID         field.String
	SpTemplateName       field.String
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (a appapprovaltemplate) Table(newTableName string) *appapprovaltemplate {
	a.appapprovaltemplateDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appapprovaltemplate) As(alias string) *appapprovaltemplate {
	a.appapprovaltemplateDo.DO = *(a.appapprovaltemplateDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appapprovaltemplate) updateTableName(table string) *appapprovaltemplate {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.SpTemplateID = field.NewString(table, "SpTemplateId")
	a.SpTemplateName = field.NewString(table, "SpTemplateName")
	a.Remark = field.NewString(table, "Remark")

	a.fillFieldMap()

	return a
}

func (a *appapprovaltemplate) WithContext(ctx context.Context) IAppapprovaltemplateDo {
	return a.appapprovaltemplateDo.WithContext(ctx)
}

func (a appapprovaltemplate) TableName() string { return a.appapprovaltemplateDo.TableName() }

func (a appapprovaltemplate) Alias() string { return a.appapprovaltemplateDo.Alias() }

func (a *appapprovaltemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appapprovaltemplate) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["SpTemplateId"] = a.SpTemplateID
	a.fieldMap["SpTemplateName"] = a.SpTemplateName
	a.fieldMap["Remark"] = a.Remark
}

func (a appapprovaltemplate) clone(db *gorm.DB) appapprovaltemplate {
	a.appapprovaltemplateDo.ReplaceDB(db)
	return a
}

type appapprovaltemplateDo struct{ gen.DO }

type IAppapprovaltemplateDo interface {
	gen.SubQuery
	Debug() IAppapprovaltemplateDo
	WithContext(ctx context.Context) IAppapprovaltemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppapprovaltemplateDo
	Not(conds ...gen.Condition) IAppapprovaltemplateDo
	Or(conds ...gen.Condition) IAppapprovaltemplateDo
	Select(conds ...field.Expr) IAppapprovaltemplateDo
	Where(conds ...gen.Condition) IAppapprovaltemplateDo
	Order(conds ...field.Expr) IAppapprovaltemplateDo
	Distinct(cols ...field.Expr) IAppapprovaltemplateDo
	Omit(cols ...field.Expr) IAppapprovaltemplateDo
	Join(table schema.Tabler, on ...field.Expr) IAppapprovaltemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppapprovaltemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppapprovaltemplateDo
	Group(cols ...field.Expr) IAppapprovaltemplateDo
	Having(conds ...gen.Condition) IAppapprovaltemplateDo
	Limit(limit int) IAppapprovaltemplateDo
	Offset(offset int) IAppapprovaltemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppapprovaltemplateDo
	Unscoped() IAppapprovaltemplateDo
	Create(values ...*model.Appapprovaltemplate) error
	CreateInBatches(values []*model.Appapprovaltemplate, batchSize int) error
	Save(values ...*model.Appapprovaltemplate) error
	First() (*model.Appapprovaltemplate, error)
	Take() (*model.Appapprovaltemplate, error)
	Last() (*model.Appapprovaltemplate, error)
	Find() ([]*model.Appapprovaltemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appapprovaltemplate, err error)
	FindInBatches(result *[]*model.Appapprovaltemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appapprovaltemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppapprovaltemplateDo
	Assign(attrs ...field.AssignExpr) IAppapprovaltemplateDo
	Joins(fields ...field.RelationField) IAppapprovaltemplateDo
	Preload(fields ...field.RelationField) IAppapprovaltemplateDo
	FirstOrInit() (*model.Appapprovaltemplate, error)
	FirstOrCreate() (*model.Appapprovaltemplate, error)
	FindByPage(offset int, limit int) (result []*model.Appapprovaltemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppapprovaltemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appapprovaltemplateDo) Debug() IAppapprovaltemplateDo {
	return a.withDO(a.DO.Debug())
}

func (a appapprovaltemplateDo) WithContext(ctx context.Context) IAppapprovaltemplateDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appapprovaltemplateDo) ReadDB() IAppapprovaltemplateDo {
	return a.Clauses(dbresolver.Read)
}

func (a appapprovaltemplateDo) WriteDB() IAppapprovaltemplateDo {
	return a.Clauses(dbresolver.Write)
}

func (a appapprovaltemplateDo) Clauses(conds ...clause.Expression) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appapprovaltemplateDo) Returning(value interface{}, columns ...string) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appapprovaltemplateDo) Not(conds ...gen.Condition) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appapprovaltemplateDo) Or(conds ...gen.Condition) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appapprovaltemplateDo) Select(conds ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appapprovaltemplateDo) Where(conds ...gen.Condition) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appapprovaltemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppapprovaltemplateDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appapprovaltemplateDo) Order(conds ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appapprovaltemplateDo) Distinct(cols ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appapprovaltemplateDo) Omit(cols ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appapprovaltemplateDo) Join(table schema.Tabler, on ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appapprovaltemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appapprovaltemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appapprovaltemplateDo) Group(cols ...field.Expr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appapprovaltemplateDo) Having(conds ...gen.Condition) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appapprovaltemplateDo) Limit(limit int) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appapprovaltemplateDo) Offset(offset int) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appapprovaltemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appapprovaltemplateDo) Unscoped() IAppapprovaltemplateDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appapprovaltemplateDo) Create(values ...*model.Appapprovaltemplate) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appapprovaltemplateDo) CreateInBatches(values []*model.Appapprovaltemplate, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appapprovaltemplateDo) Save(values ...*model.Appapprovaltemplate) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appapprovaltemplateDo) First() (*model.Appapprovaltemplate, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovaltemplate), nil
	}
}

func (a appapprovaltemplateDo) Take() (*model.Appapprovaltemplate, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovaltemplate), nil
	}
}

func (a appapprovaltemplateDo) Last() (*model.Appapprovaltemplate, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovaltemplate), nil
	}
}

func (a appapprovaltemplateDo) Find() ([]*model.Appapprovaltemplate, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appapprovaltemplate), err
}

func (a appapprovaltemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appapprovaltemplate, err error) {
	buf := make([]*model.Appapprovaltemplate, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appapprovaltemplateDo) FindInBatches(result *[]*model.Appapprovaltemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appapprovaltemplateDo) Attrs(attrs ...field.AssignExpr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appapprovaltemplateDo) Assign(attrs ...field.AssignExpr) IAppapprovaltemplateDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appapprovaltemplateDo) Joins(fields ...field.RelationField) IAppapprovaltemplateDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appapprovaltemplateDo) Preload(fields ...field.RelationField) IAppapprovaltemplateDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appapprovaltemplateDo) FirstOrInit() (*model.Appapprovaltemplate, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovaltemplate), nil
	}
}

func (a appapprovaltemplateDo) FirstOrCreate() (*model.Appapprovaltemplate, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appapprovaltemplate), nil
	}
}

func (a appapprovaltemplateDo) FindByPage(offset int, limit int) (result []*model.Appapprovaltemplate, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appapprovaltemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appapprovaltemplateDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appapprovaltemplateDo) Delete(models ...*model.Appapprovaltemplate) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appapprovaltemplateDo) withDO(do gen.Dao) *appapprovaltemplateDo {
	a.DO = *do.(*gen.DO)
	return a
}
