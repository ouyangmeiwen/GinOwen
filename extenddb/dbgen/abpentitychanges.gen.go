// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpentitychange(db *gorm.DB) abpentitychange {
	_abpentitychange := abpentitychange{}

	_abpentitychange.abpentitychangeDo.UseDB(db)
	_abpentitychange.abpentitychangeDo.UseModel(&model.Abpentitychange{})

	tableName := _abpentitychange.abpentitychangeDo.TableName()
	_abpentitychange.ALL = field.NewAsterisk(tableName)
	_abpentitychange.ID = field.NewInt64(tableName, "Id")
	_abpentitychange.ChangeTime = field.NewTime(tableName, "ChangeTime")
	_abpentitychange.ChangeType = field.NewInt64(tableName, "ChangeType")
	_abpentitychange.EntityChangeSetID = field.NewInt64(tableName, "EntityChangeSetId")
	_abpentitychange.EntityID = field.NewString(tableName, "EntityId")
	_abpentitychange.EntityTypeFullName = field.NewString(tableName, "EntityTypeFullName")
	_abpentitychange.TenantID = field.NewInt64(tableName, "TenantId")

	_abpentitychange.fillFieldMap()

	return _abpentitychange
}

type abpentitychange struct {
	abpentitychangeDo abpentitychangeDo

	ALL                field.Asterisk
	ID                 field.Int64
	ChangeTime         field.Time
	ChangeType         field.Int64
	EntityChangeSetID  field.Int64
	EntityID           field.String
	EntityTypeFullName field.String
	TenantID           field.Int64

	fieldMap map[string]field.Expr
}

func (a abpentitychange) Table(newTableName string) *abpentitychange {
	a.abpentitychangeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpentitychange) As(alias string) *abpentitychange {
	a.abpentitychangeDo.DO = *(a.abpentitychangeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpentitychange) updateTableName(table string) *abpentitychange {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.ChangeTime = field.NewTime(table, "ChangeTime")
	a.ChangeType = field.NewInt64(table, "ChangeType")
	a.EntityChangeSetID = field.NewInt64(table, "EntityChangeSetId")
	a.EntityID = field.NewString(table, "EntityId")
	a.EntityTypeFullName = field.NewString(table, "EntityTypeFullName")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *abpentitychange) WithContext(ctx context.Context) IAbpentitychangeDo {
	return a.abpentitychangeDo.WithContext(ctx)
}

func (a abpentitychange) TableName() string { return a.abpentitychangeDo.TableName() }

func (a abpentitychange) Alias() string { return a.abpentitychangeDo.Alias() }

func (a *abpentitychange) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpentitychange) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["ChangeTime"] = a.ChangeTime
	a.fieldMap["ChangeType"] = a.ChangeType
	a.fieldMap["EntityChangeSetId"] = a.EntityChangeSetID
	a.fieldMap["EntityId"] = a.EntityID
	a.fieldMap["EntityTypeFullName"] = a.EntityTypeFullName
	a.fieldMap["TenantId"] = a.TenantID
}

func (a abpentitychange) clone(db *gorm.DB) abpentitychange {
	a.abpentitychangeDo.ReplaceDB(db)
	return a
}

type abpentitychangeDo struct{ gen.DO }

type IAbpentitychangeDo interface {
	gen.SubQuery
	Debug() IAbpentitychangeDo
	WithContext(ctx context.Context) IAbpentitychangeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpentitychangeDo
	Not(conds ...gen.Condition) IAbpentitychangeDo
	Or(conds ...gen.Condition) IAbpentitychangeDo
	Select(conds ...field.Expr) IAbpentitychangeDo
	Where(conds ...gen.Condition) IAbpentitychangeDo
	Order(conds ...field.Expr) IAbpentitychangeDo
	Distinct(cols ...field.Expr) IAbpentitychangeDo
	Omit(cols ...field.Expr) IAbpentitychangeDo
	Join(table schema.Tabler, on ...field.Expr) IAbpentitychangeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangeDo
	Group(cols ...field.Expr) IAbpentitychangeDo
	Having(conds ...gen.Condition) IAbpentitychangeDo
	Limit(limit int) IAbpentitychangeDo
	Offset(offset int) IAbpentitychangeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpentitychangeDo
	Unscoped() IAbpentitychangeDo
	Create(values ...*model.Abpentitychange) error
	CreateInBatches(values []*model.Abpentitychange, batchSize int) error
	Save(values ...*model.Abpentitychange) error
	First() (*model.Abpentitychange, error)
	Take() (*model.Abpentitychange, error)
	Last() (*model.Abpentitychange, error)
	Find() ([]*model.Abpentitychange, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpentitychange, err error)
	FindInBatches(result *[]*model.Abpentitychange, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpentitychange) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpentitychangeDo
	Assign(attrs ...field.AssignExpr) IAbpentitychangeDo
	Joins(fields ...field.RelationField) IAbpentitychangeDo
	Preload(fields ...field.RelationField) IAbpentitychangeDo
	FirstOrInit() (*model.Abpentitychange, error)
	FirstOrCreate() (*model.Abpentitychange, error)
	FindByPage(offset int, limit int) (result []*model.Abpentitychange, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpentitychangeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpentitychangeDo) Debug() IAbpentitychangeDo {
	return a.withDO(a.DO.Debug())
}

func (a abpentitychangeDo) WithContext(ctx context.Context) IAbpentitychangeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpentitychangeDo) ReadDB() IAbpentitychangeDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpentitychangeDo) WriteDB() IAbpentitychangeDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpentitychangeDo) Clauses(conds ...clause.Expression) IAbpentitychangeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpentitychangeDo) Returning(value interface{}, columns ...string) IAbpentitychangeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpentitychangeDo) Not(conds ...gen.Condition) IAbpentitychangeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpentitychangeDo) Or(conds ...gen.Condition) IAbpentitychangeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpentitychangeDo) Select(conds ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpentitychangeDo) Where(conds ...gen.Condition) IAbpentitychangeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpentitychangeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpentitychangeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpentitychangeDo) Order(conds ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpentitychangeDo) Distinct(cols ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpentitychangeDo) Omit(cols ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpentitychangeDo) Join(table schema.Tabler, on ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpentitychangeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpentitychangeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpentitychangeDo) Group(cols ...field.Expr) IAbpentitychangeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpentitychangeDo) Having(conds ...gen.Condition) IAbpentitychangeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpentitychangeDo) Limit(limit int) IAbpentitychangeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpentitychangeDo) Offset(offset int) IAbpentitychangeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpentitychangeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpentitychangeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpentitychangeDo) Unscoped() IAbpentitychangeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpentitychangeDo) Create(values ...*model.Abpentitychange) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpentitychangeDo) CreateInBatches(values []*model.Abpentitychange, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpentitychangeDo) Save(values ...*model.Abpentitychange) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpentitychangeDo) First() (*model.Abpentitychange, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychange), nil
	}
}

func (a abpentitychangeDo) Take() (*model.Abpentitychange, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychange), nil
	}
}

func (a abpentitychangeDo) Last() (*model.Abpentitychange, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychange), nil
	}
}

func (a abpentitychangeDo) Find() ([]*model.Abpentitychange, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpentitychange), err
}

func (a abpentitychangeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpentitychange, err error) {
	buf := make([]*model.Abpentitychange, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpentitychangeDo) FindInBatches(result *[]*model.Abpentitychange, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpentitychangeDo) Attrs(attrs ...field.AssignExpr) IAbpentitychangeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpentitychangeDo) Assign(attrs ...field.AssignExpr) IAbpentitychangeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpentitychangeDo) Joins(fields ...field.RelationField) IAbpentitychangeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpentitychangeDo) Preload(fields ...field.RelationField) IAbpentitychangeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpentitychangeDo) FirstOrInit() (*model.Abpentitychange, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychange), nil
	}
}

func (a abpentitychangeDo) FirstOrCreate() (*model.Abpentitychange, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychange), nil
	}
}

func (a abpentitychangeDo) FindByPage(offset int, limit int) (result []*model.Abpentitychange, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpentitychangeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpentitychangeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpentitychangeDo) Delete(models ...*model.Abpentitychange) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpentitychangeDo) withDO(do gen.Dao) *abpentitychangeDo {
	a.DO = *do.(*gen.DO)
	return a
}
