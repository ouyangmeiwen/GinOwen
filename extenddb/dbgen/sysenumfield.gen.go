// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysenumfield(db *gorm.DB) sysenumfield {
	_sysenumfield := sysenumfield{}

	_sysenumfield.sysenumfieldDo.UseDB(db)
	_sysenumfield.sysenumfieldDo.UseModel(&model.Sysenumfield{})

	tableName := _sysenumfield.sysenumfieldDo.TableName()
	_sysenumfield.ALL = field.NewAsterisk(tableName)
	_sysenumfield.ID = field.NewString(tableName, "Id")
	_sysenumfield.FieldID = field.NewInt64(tableName, "FieldId")
	_sysenumfield.FieldName = field.NewString(tableName, "FieldName")
	_sysenumfield.FieldTrans = field.NewString(tableName, "FieldTrans")
	_sysenumfield.IsEdit = field.NewField(tableName, "IsEdit")
	_sysenumfield.IsShow = field.NewField(tableName, "IsShow")
	_sysenumfield.IsSingleValue = field.NewField(tableName, "IsSingleValue")
	_sysenumfield.Remark = field.NewString(tableName, "Remark")
	_sysenumfield.TenantID = field.NewInt64(tableName, "TenantId")

	_sysenumfield.fillFieldMap()

	return _sysenumfield
}

type sysenumfield struct {
	sysenumfieldDo sysenumfieldDo

	ALL           field.Asterisk
	ID            field.String
	FieldID       field.Int64
	FieldName     field.String
	FieldTrans    field.String
	IsEdit        field.Field
	IsShow        field.Field
	IsSingleValue field.Field
	Remark        field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (s sysenumfield) Table(newTableName string) *sysenumfield {
	s.sysenumfieldDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysenumfield) As(alias string) *sysenumfield {
	s.sysenumfieldDo.DO = *(s.sysenumfieldDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysenumfield) updateTableName(table string) *sysenumfield {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.FieldID = field.NewInt64(table, "FieldId")
	s.FieldName = field.NewString(table, "FieldName")
	s.FieldTrans = field.NewString(table, "FieldTrans")
	s.IsEdit = field.NewField(table, "IsEdit")
	s.IsShow = field.NewField(table, "IsShow")
	s.IsSingleValue = field.NewField(table, "IsSingleValue")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysenumfield) WithContext(ctx context.Context) ISysenumfieldDo {
	return s.sysenumfieldDo.WithContext(ctx)
}

func (s sysenumfield) TableName() string { return s.sysenumfieldDo.TableName() }

func (s sysenumfield) Alias() string { return s.sysenumfieldDo.Alias() }

func (s *sysenumfield) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysenumfield) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["FieldId"] = s.FieldID
	s.fieldMap["FieldName"] = s.FieldName
	s.fieldMap["FieldTrans"] = s.FieldTrans
	s.fieldMap["IsEdit"] = s.IsEdit
	s.fieldMap["IsShow"] = s.IsShow
	s.fieldMap["IsSingleValue"] = s.IsSingleValue
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysenumfield) clone(db *gorm.DB) sysenumfield {
	s.sysenumfieldDo.ReplaceDB(db)
	return s
}

type sysenumfieldDo struct{ gen.DO }

type ISysenumfieldDo interface {
	gen.SubQuery
	Debug() ISysenumfieldDo
	WithContext(ctx context.Context) ISysenumfieldDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysenumfieldDo
	Not(conds ...gen.Condition) ISysenumfieldDo
	Or(conds ...gen.Condition) ISysenumfieldDo
	Select(conds ...field.Expr) ISysenumfieldDo
	Where(conds ...gen.Condition) ISysenumfieldDo
	Order(conds ...field.Expr) ISysenumfieldDo
	Distinct(cols ...field.Expr) ISysenumfieldDo
	Omit(cols ...field.Expr) ISysenumfieldDo
	Join(table schema.Tabler, on ...field.Expr) ISysenumfieldDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysenumfieldDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysenumfieldDo
	Group(cols ...field.Expr) ISysenumfieldDo
	Having(conds ...gen.Condition) ISysenumfieldDo
	Limit(limit int) ISysenumfieldDo
	Offset(offset int) ISysenumfieldDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysenumfieldDo
	Unscoped() ISysenumfieldDo
	Create(values ...*model.Sysenumfield) error
	CreateInBatches(values []*model.Sysenumfield, batchSize int) error
	Save(values ...*model.Sysenumfield) error
	First() (*model.Sysenumfield, error)
	Take() (*model.Sysenumfield, error)
	Last() (*model.Sysenumfield, error)
	Find() ([]*model.Sysenumfield, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysenumfield, err error)
	FindInBatches(result *[]*model.Sysenumfield, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysenumfield) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysenumfieldDo
	Assign(attrs ...field.AssignExpr) ISysenumfieldDo
	Joins(fields ...field.RelationField) ISysenumfieldDo
	Preload(fields ...field.RelationField) ISysenumfieldDo
	FirstOrInit() (*model.Sysenumfield, error)
	FirstOrCreate() (*model.Sysenumfield, error)
	FindByPage(offset int, limit int) (result []*model.Sysenumfield, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysenumfieldDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysenumfieldDo) Debug() ISysenumfieldDo {
	return s.withDO(s.DO.Debug())
}

func (s sysenumfieldDo) WithContext(ctx context.Context) ISysenumfieldDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysenumfieldDo) ReadDB() ISysenumfieldDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysenumfieldDo) WriteDB() ISysenumfieldDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysenumfieldDo) Clauses(conds ...clause.Expression) ISysenumfieldDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysenumfieldDo) Returning(value interface{}, columns ...string) ISysenumfieldDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysenumfieldDo) Not(conds ...gen.Condition) ISysenumfieldDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysenumfieldDo) Or(conds ...gen.Condition) ISysenumfieldDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysenumfieldDo) Select(conds ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysenumfieldDo) Where(conds ...gen.Condition) ISysenumfieldDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysenumfieldDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysenumfieldDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysenumfieldDo) Order(conds ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysenumfieldDo) Distinct(cols ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysenumfieldDo) Omit(cols ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysenumfieldDo) Join(table schema.Tabler, on ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysenumfieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysenumfieldDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysenumfieldDo) Group(cols ...field.Expr) ISysenumfieldDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysenumfieldDo) Having(conds ...gen.Condition) ISysenumfieldDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysenumfieldDo) Limit(limit int) ISysenumfieldDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysenumfieldDo) Offset(offset int) ISysenumfieldDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysenumfieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysenumfieldDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysenumfieldDo) Unscoped() ISysenumfieldDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysenumfieldDo) Create(values ...*model.Sysenumfield) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysenumfieldDo) CreateInBatches(values []*model.Sysenumfield, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysenumfieldDo) Save(values ...*model.Sysenumfield) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysenumfieldDo) First() (*model.Sysenumfield, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumfield), nil
	}
}

func (s sysenumfieldDo) Take() (*model.Sysenumfield, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumfield), nil
	}
}

func (s sysenumfieldDo) Last() (*model.Sysenumfield, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumfield), nil
	}
}

func (s sysenumfieldDo) Find() ([]*model.Sysenumfield, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysenumfield), err
}

func (s sysenumfieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysenumfield, err error) {
	buf := make([]*model.Sysenumfield, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysenumfieldDo) FindInBatches(result *[]*model.Sysenumfield, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysenumfieldDo) Attrs(attrs ...field.AssignExpr) ISysenumfieldDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysenumfieldDo) Assign(attrs ...field.AssignExpr) ISysenumfieldDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysenumfieldDo) Joins(fields ...field.RelationField) ISysenumfieldDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysenumfieldDo) Preload(fields ...field.RelationField) ISysenumfieldDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysenumfieldDo) FirstOrInit() (*model.Sysenumfield, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumfield), nil
	}
}

func (s sysenumfieldDo) FirstOrCreate() (*model.Sysenumfield, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumfield), nil
	}
}

func (s sysenumfieldDo) FindByPage(offset int, limit int) (result []*model.Sysenumfield, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysenumfieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysenumfieldDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysenumfieldDo) Delete(models ...*model.Sysenumfield) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysenumfieldDo) withDO(do gen.Dao) *sysenumfieldDo {
	s.DO = *do.(*gen.DO)
	return s
}
