// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newRescipinfo(db *gorm.DB) rescipinfo {
	_rescipinfo := rescipinfo{}

	_rescipinfo.rescipinfoDo.UseDB(db)
	_rescipinfo.rescipinfoDo.UseModel(&model.Rescipinfo{})

	tableName := _rescipinfo.rescipinfoDo.TableName()
	_rescipinfo.ALL = field.NewAsterisk(tableName)
	_rescipinfo.ID = field.NewInt64(tableName, "Id")
	_rescipinfo.CIP = field.NewString(tableName, "CIP")
	_rescipinfo.ISBN = field.NewString(tableName, "ISBN")
	_rescipinfo.Title = field.NewString(tableName, "Title")
	_rescipinfo.Author = field.NewString(tableName, "Author")
	_rescipinfo.Series = field.NewString(tableName, "Series")
	_rescipinfo.Publisher = field.NewString(tableName, "Publisher")
	_rescipinfo.PubPlace = field.NewString(tableName, "PubPlace")
	_rescipinfo.PubDate = field.NewString(tableName, "PubDate")
	_rescipinfo.Edition = field.NewString(tableName, "Edition")
	_rescipinfo.PrintNum = field.NewString(tableName, "PrintNum")
	_rescipinfo.Price = field.NewString(tableName, "Price")
	_rescipinfo.Language = field.NewString(tableName, "Language")
	_rescipinfo.Format = field.NewString(tableName, "Format")
	_rescipinfo.Binding = field.NewString(tableName, "Binding")
	_rescipinfo.CatalogCode = field.NewString(tableName, "CatalogCode")
	_rescipinfo.Tags = field.NewString(tableName, "Tags")
	_rescipinfo.Summary = field.NewString(tableName, "Summary")
	_rescipinfo.CIPData = field.NewString(tableName, "CIPData")
	_rescipinfo.Pages = field.NewString(tableName, "Pages")
	_rescipinfo.PrintCount = field.NewString(tableName, "PrintCount")
	_rescipinfo.ISBN10 = field.NewString(tableName, "ISBN10")
	_rescipinfo.ISBN13 = field.NewString(tableName, "ISBN13")

	_rescipinfo.fillFieldMap()

	return _rescipinfo
}

type rescipinfo struct {
	rescipinfoDo rescipinfoDo

	ALL         field.Asterisk
	ID          field.Int64
	CIP         field.String
	ISBN        field.String
	Title       field.String
	Author      field.String
	Series      field.String
	Publisher   field.String
	PubPlace    field.String
	PubDate     field.String
	Edition     field.String
	PrintNum    field.String
	Price       field.String
	Language    field.String
	Format      field.String
	Binding     field.String
	CatalogCode field.String
	Tags        field.String
	Summary     field.String
	CIPData     field.String
	Pages       field.String
	PrintCount  field.String
	ISBN10      field.String
	ISBN13      field.String

	fieldMap map[string]field.Expr
}

func (r rescipinfo) Table(newTableName string) *rescipinfo {
	r.rescipinfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rescipinfo) As(alias string) *rescipinfo {
	r.rescipinfoDo.DO = *(r.rescipinfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rescipinfo) updateTableName(table string) *rescipinfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "Id")
	r.CIP = field.NewString(table, "CIP")
	r.ISBN = field.NewString(table, "ISBN")
	r.Title = field.NewString(table, "Title")
	r.Author = field.NewString(table, "Author")
	r.Series = field.NewString(table, "Series")
	r.Publisher = field.NewString(table, "Publisher")
	r.PubPlace = field.NewString(table, "PubPlace")
	r.PubDate = field.NewString(table, "PubDate")
	r.Edition = field.NewString(table, "Edition")
	r.PrintNum = field.NewString(table, "PrintNum")
	r.Price = field.NewString(table, "Price")
	r.Language = field.NewString(table, "Language")
	r.Format = field.NewString(table, "Format")
	r.Binding = field.NewString(table, "Binding")
	r.CatalogCode = field.NewString(table, "CatalogCode")
	r.Tags = field.NewString(table, "Tags")
	r.Summary = field.NewString(table, "Summary")
	r.CIPData = field.NewString(table, "CIPData")
	r.Pages = field.NewString(table, "Pages")
	r.PrintCount = field.NewString(table, "PrintCount")
	r.ISBN10 = field.NewString(table, "ISBN10")
	r.ISBN13 = field.NewString(table, "ISBN13")

	r.fillFieldMap()

	return r
}

func (r *rescipinfo) WithContext(ctx context.Context) IRescipinfoDo {
	return r.rescipinfoDo.WithContext(ctx)
}

func (r rescipinfo) TableName() string { return r.rescipinfoDo.TableName() }

func (r rescipinfo) Alias() string { return r.rescipinfoDo.Alias() }

func (r *rescipinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rescipinfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 23)
	r.fieldMap["Id"] = r.ID
	r.fieldMap["CIP"] = r.CIP
	r.fieldMap["ISBN"] = r.ISBN
	r.fieldMap["Title"] = r.Title
	r.fieldMap["Author"] = r.Author
	r.fieldMap["Series"] = r.Series
	r.fieldMap["Publisher"] = r.Publisher
	r.fieldMap["PubPlace"] = r.PubPlace
	r.fieldMap["PubDate"] = r.PubDate
	r.fieldMap["Edition"] = r.Edition
	r.fieldMap["PrintNum"] = r.PrintNum
	r.fieldMap["Price"] = r.Price
	r.fieldMap["Language"] = r.Language
	r.fieldMap["Format"] = r.Format
	r.fieldMap["Binding"] = r.Binding
	r.fieldMap["CatalogCode"] = r.CatalogCode
	r.fieldMap["Tags"] = r.Tags
	r.fieldMap["Summary"] = r.Summary
	r.fieldMap["CIPData"] = r.CIPData
	r.fieldMap["Pages"] = r.Pages
	r.fieldMap["PrintCount"] = r.PrintCount
	r.fieldMap["ISBN10"] = r.ISBN10
	r.fieldMap["ISBN13"] = r.ISBN13
}

func (r rescipinfo) clone(db *gorm.DB) rescipinfo {
	r.rescipinfoDo.ReplaceDB(db)
	return r
}

type rescipinfoDo struct{ gen.DO }

type IRescipinfoDo interface {
	gen.SubQuery
	Debug() IRescipinfoDo
	WithContext(ctx context.Context) IRescipinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRescipinfoDo
	Not(conds ...gen.Condition) IRescipinfoDo
	Or(conds ...gen.Condition) IRescipinfoDo
	Select(conds ...field.Expr) IRescipinfoDo
	Where(conds ...gen.Condition) IRescipinfoDo
	Order(conds ...field.Expr) IRescipinfoDo
	Distinct(cols ...field.Expr) IRescipinfoDo
	Omit(cols ...field.Expr) IRescipinfoDo
	Join(table schema.Tabler, on ...field.Expr) IRescipinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRescipinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRescipinfoDo
	Group(cols ...field.Expr) IRescipinfoDo
	Having(conds ...gen.Condition) IRescipinfoDo
	Limit(limit int) IRescipinfoDo
	Offset(offset int) IRescipinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRescipinfoDo
	Unscoped() IRescipinfoDo
	Create(values ...*model.Rescipinfo) error
	CreateInBatches(values []*model.Rescipinfo, batchSize int) error
	Save(values ...*model.Rescipinfo) error
	First() (*model.Rescipinfo, error)
	Take() (*model.Rescipinfo, error)
	Last() (*model.Rescipinfo, error)
	Find() ([]*model.Rescipinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rescipinfo, err error)
	FindInBatches(result *[]*model.Rescipinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Rescipinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRescipinfoDo
	Assign(attrs ...field.AssignExpr) IRescipinfoDo
	Joins(fields ...field.RelationField) IRescipinfoDo
	Preload(fields ...field.RelationField) IRescipinfoDo
	FirstOrInit() (*model.Rescipinfo, error)
	FirstOrCreate() (*model.Rescipinfo, error)
	FindByPage(offset int, limit int) (result []*model.Rescipinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRescipinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rescipinfoDo) Debug() IRescipinfoDo {
	return r.withDO(r.DO.Debug())
}

func (r rescipinfoDo) WithContext(ctx context.Context) IRescipinfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rescipinfoDo) ReadDB() IRescipinfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r rescipinfoDo) WriteDB() IRescipinfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r rescipinfoDo) Clauses(conds ...clause.Expression) IRescipinfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rescipinfoDo) Returning(value interface{}, columns ...string) IRescipinfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rescipinfoDo) Not(conds ...gen.Condition) IRescipinfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rescipinfoDo) Or(conds ...gen.Condition) IRescipinfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rescipinfoDo) Select(conds ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rescipinfoDo) Where(conds ...gen.Condition) IRescipinfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rescipinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRescipinfoDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rescipinfoDo) Order(conds ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rescipinfoDo) Distinct(cols ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rescipinfoDo) Omit(cols ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rescipinfoDo) Join(table schema.Tabler, on ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rescipinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rescipinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rescipinfoDo) Group(cols ...field.Expr) IRescipinfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rescipinfoDo) Having(conds ...gen.Condition) IRescipinfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rescipinfoDo) Limit(limit int) IRescipinfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rescipinfoDo) Offset(offset int) IRescipinfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rescipinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRescipinfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rescipinfoDo) Unscoped() IRescipinfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rescipinfoDo) Create(values ...*model.Rescipinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rescipinfoDo) CreateInBatches(values []*model.Rescipinfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rescipinfoDo) Save(values ...*model.Rescipinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rescipinfoDo) First() (*model.Rescipinfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rescipinfo), nil
	}
}

func (r rescipinfoDo) Take() (*model.Rescipinfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rescipinfo), nil
	}
}

func (r rescipinfoDo) Last() (*model.Rescipinfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rescipinfo), nil
	}
}

func (r rescipinfoDo) Find() ([]*model.Rescipinfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.Rescipinfo), err
}

func (r rescipinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rescipinfo, err error) {
	buf := make([]*model.Rescipinfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rescipinfoDo) FindInBatches(result *[]*model.Rescipinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rescipinfoDo) Attrs(attrs ...field.AssignExpr) IRescipinfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rescipinfoDo) Assign(attrs ...field.AssignExpr) IRescipinfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rescipinfoDo) Joins(fields ...field.RelationField) IRescipinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rescipinfoDo) Preload(fields ...field.RelationField) IRescipinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rescipinfoDo) FirstOrInit() (*model.Rescipinfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rescipinfo), nil
	}
}

func (r rescipinfoDo) FirstOrCreate() (*model.Rescipinfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rescipinfo), nil
	}
}

func (r rescipinfoDo) FindByPage(offset int, limit int) (result []*model.Rescipinfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rescipinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rescipinfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rescipinfoDo) Delete(models ...*model.Rescipinfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rescipinfoDo) withDO(do gen.Dao) *rescipinfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
