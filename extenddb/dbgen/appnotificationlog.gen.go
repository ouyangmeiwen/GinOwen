// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppnotificationlog(db *gorm.DB) appnotificationlog {
	_appnotificationlog := appnotificationlog{}

	_appnotificationlog.appnotificationlogDo.UseDB(db)
	_appnotificationlog.appnotificationlogDo.UseModel(&model.Appnotificationlog{})

	tableName := _appnotificationlog.appnotificationlogDo.TableName()
	_appnotificationlog.ALL = field.NewAsterisk(tableName)
	_appnotificationlog.ID = field.NewString(tableName, "Id")
	_appnotificationlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_appnotificationlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appnotificationlog.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appnotificationlog.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appnotificationlog.TemplateID = field.NewString(tableName, "TemplateId")
	_appnotificationlog.TemplateSourceType = field.NewInt64(tableName, "TemplateSourceType")
	_appnotificationlog.Title = field.NewString(tableName, "Title")
	_appnotificationlog.MessageContent = field.NewString(tableName, "MessageContent")
	_appnotificationlog.NotificationType = field.NewInt64(tableName, "NotificationType")
	_appnotificationlog.TemplateMessageType = field.NewInt64(tableName, "TemplateMessageType")
	_appnotificationlog.SendTo = field.NewString(tableName, "SendTo")
	_appnotificationlog.MessageID = field.NewString(tableName, "MessageId")
	_appnotificationlog.Code = field.NewString(tableName, "Code")
	_appnotificationlog.Result = field.NewInt64(tableName, "Result")
	_appnotificationlog.Remark = field.NewString(tableName, "Remark")
	_appnotificationlog.OriginType = field.NewInt64(tableName, "OriginType")
	_appnotificationlog.IsRead = field.NewField(tableName, "IsRead")
	_appnotificationlog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_appnotificationlog.TenantID = field.NewInt64(tableName, "TenantId")

	_appnotificationlog.fillFieldMap()

	return _appnotificationlog
}

type appnotificationlog struct {
	appnotificationlogDo appnotificationlogDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	TemplateID           field.String
	TemplateSourceType   field.Int64
	Title                field.String
	MessageContent       field.String
	NotificationType     field.Int64
	TemplateMessageType  field.Int64
	SendTo               field.String
	MessageID            field.String
	Code                 field.String
	Result               field.Int64
	Remark               field.String
	OriginType           field.Int64
	IsRead               field.Field
	ErrorMessage         field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appnotificationlog) Table(newTableName string) *appnotificationlog {
	a.appnotificationlogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appnotificationlog) As(alias string) *appnotificationlog {
	a.appnotificationlogDo.DO = *(a.appnotificationlogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appnotificationlog) updateTableName(table string) *appnotificationlog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.TemplateID = field.NewString(table, "TemplateId")
	a.TemplateSourceType = field.NewInt64(table, "TemplateSourceType")
	a.Title = field.NewString(table, "Title")
	a.MessageContent = field.NewString(table, "MessageContent")
	a.NotificationType = field.NewInt64(table, "NotificationType")
	a.TemplateMessageType = field.NewInt64(table, "TemplateMessageType")
	a.SendTo = field.NewString(table, "SendTo")
	a.MessageID = field.NewString(table, "MessageId")
	a.Code = field.NewString(table, "Code")
	a.Result = field.NewInt64(table, "Result")
	a.Remark = field.NewString(table, "Remark")
	a.OriginType = field.NewInt64(table, "OriginType")
	a.IsRead = field.NewField(table, "IsRead")
	a.ErrorMessage = field.NewString(table, "ErrorMessage")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appnotificationlog) WithContext(ctx context.Context) IAppnotificationlogDo {
	return a.appnotificationlogDo.WithContext(ctx)
}

func (a appnotificationlog) TableName() string { return a.appnotificationlogDo.TableName() }

func (a appnotificationlog) Alias() string { return a.appnotificationlogDo.Alias() }

func (a *appnotificationlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appnotificationlog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 20)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["TemplateId"] = a.TemplateID
	a.fieldMap["TemplateSourceType"] = a.TemplateSourceType
	a.fieldMap["Title"] = a.Title
	a.fieldMap["MessageContent"] = a.MessageContent
	a.fieldMap["NotificationType"] = a.NotificationType
	a.fieldMap["TemplateMessageType"] = a.TemplateMessageType
	a.fieldMap["SendTo"] = a.SendTo
	a.fieldMap["MessageId"] = a.MessageID
	a.fieldMap["Code"] = a.Code
	a.fieldMap["Result"] = a.Result
	a.fieldMap["Remark"] = a.Remark
	a.fieldMap["OriginType"] = a.OriginType
	a.fieldMap["IsRead"] = a.IsRead
	a.fieldMap["ErrorMessage"] = a.ErrorMessage
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appnotificationlog) clone(db *gorm.DB) appnotificationlog {
	a.appnotificationlogDo.ReplaceDB(db)
	return a
}

type appnotificationlogDo struct{ gen.DO }

type IAppnotificationlogDo interface {
	gen.SubQuery
	Debug() IAppnotificationlogDo
	WithContext(ctx context.Context) IAppnotificationlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppnotificationlogDo
	Not(conds ...gen.Condition) IAppnotificationlogDo
	Or(conds ...gen.Condition) IAppnotificationlogDo
	Select(conds ...field.Expr) IAppnotificationlogDo
	Where(conds ...gen.Condition) IAppnotificationlogDo
	Order(conds ...field.Expr) IAppnotificationlogDo
	Distinct(cols ...field.Expr) IAppnotificationlogDo
	Omit(cols ...field.Expr) IAppnotificationlogDo
	Join(table schema.Tabler, on ...field.Expr) IAppnotificationlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppnotificationlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppnotificationlogDo
	Group(cols ...field.Expr) IAppnotificationlogDo
	Having(conds ...gen.Condition) IAppnotificationlogDo
	Limit(limit int) IAppnotificationlogDo
	Offset(offset int) IAppnotificationlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppnotificationlogDo
	Unscoped() IAppnotificationlogDo
	Create(values ...*model.Appnotificationlog) error
	CreateInBatches(values []*model.Appnotificationlog, batchSize int) error
	Save(values ...*model.Appnotificationlog) error
	First() (*model.Appnotificationlog, error)
	Take() (*model.Appnotificationlog, error)
	Last() (*model.Appnotificationlog, error)
	Find() ([]*model.Appnotificationlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appnotificationlog, err error)
	FindInBatches(result *[]*model.Appnotificationlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appnotificationlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppnotificationlogDo
	Assign(attrs ...field.AssignExpr) IAppnotificationlogDo
	Joins(fields ...field.RelationField) IAppnotificationlogDo
	Preload(fields ...field.RelationField) IAppnotificationlogDo
	FirstOrInit() (*model.Appnotificationlog, error)
	FirstOrCreate() (*model.Appnotificationlog, error)
	FindByPage(offset int, limit int) (result []*model.Appnotificationlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppnotificationlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appnotificationlogDo) Debug() IAppnotificationlogDo {
	return a.withDO(a.DO.Debug())
}

func (a appnotificationlogDo) WithContext(ctx context.Context) IAppnotificationlogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appnotificationlogDo) ReadDB() IAppnotificationlogDo {
	return a.Clauses(dbresolver.Read)
}

func (a appnotificationlogDo) WriteDB() IAppnotificationlogDo {
	return a.Clauses(dbresolver.Write)
}

func (a appnotificationlogDo) Clauses(conds ...clause.Expression) IAppnotificationlogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appnotificationlogDo) Returning(value interface{}, columns ...string) IAppnotificationlogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appnotificationlogDo) Not(conds ...gen.Condition) IAppnotificationlogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appnotificationlogDo) Or(conds ...gen.Condition) IAppnotificationlogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appnotificationlogDo) Select(conds ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appnotificationlogDo) Where(conds ...gen.Condition) IAppnotificationlogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appnotificationlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppnotificationlogDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appnotificationlogDo) Order(conds ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appnotificationlogDo) Distinct(cols ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appnotificationlogDo) Omit(cols ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appnotificationlogDo) Join(table schema.Tabler, on ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appnotificationlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appnotificationlogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appnotificationlogDo) Group(cols ...field.Expr) IAppnotificationlogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appnotificationlogDo) Having(conds ...gen.Condition) IAppnotificationlogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appnotificationlogDo) Limit(limit int) IAppnotificationlogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appnotificationlogDo) Offset(offset int) IAppnotificationlogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appnotificationlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppnotificationlogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appnotificationlogDo) Unscoped() IAppnotificationlogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appnotificationlogDo) Create(values ...*model.Appnotificationlog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appnotificationlogDo) CreateInBatches(values []*model.Appnotificationlog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appnotificationlogDo) Save(values ...*model.Appnotificationlog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appnotificationlogDo) First() (*model.Appnotificationlog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appnotificationlog), nil
	}
}

func (a appnotificationlogDo) Take() (*model.Appnotificationlog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appnotificationlog), nil
	}
}

func (a appnotificationlogDo) Last() (*model.Appnotificationlog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appnotificationlog), nil
	}
}

func (a appnotificationlogDo) Find() ([]*model.Appnotificationlog, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appnotificationlog), err
}

func (a appnotificationlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appnotificationlog, err error) {
	buf := make([]*model.Appnotificationlog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appnotificationlogDo) FindInBatches(result *[]*model.Appnotificationlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appnotificationlogDo) Attrs(attrs ...field.AssignExpr) IAppnotificationlogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appnotificationlogDo) Assign(attrs ...field.AssignExpr) IAppnotificationlogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appnotificationlogDo) Joins(fields ...field.RelationField) IAppnotificationlogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appnotificationlogDo) Preload(fields ...field.RelationField) IAppnotificationlogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appnotificationlogDo) FirstOrInit() (*model.Appnotificationlog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appnotificationlog), nil
	}
}

func (a appnotificationlogDo) FirstOrCreate() (*model.Appnotificationlog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appnotificationlog), nil
	}
}

func (a appnotificationlogDo) FindByPage(offset int, limit int) (result []*model.Appnotificationlog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appnotificationlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appnotificationlogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appnotificationlogDo) Delete(models ...*model.Appnotificationlog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appnotificationlogDo) withDO(do gen.Dao) *appnotificationlogDo {
	a.DO = *do.(*gen.DO)
	return a
}
