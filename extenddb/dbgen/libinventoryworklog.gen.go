// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibinventoryworklog(db *gorm.DB) libinventoryworklog {
	_libinventoryworklog := libinventoryworklog{}

	_libinventoryworklog.libinventoryworklogDo.UseDB(db)
	_libinventoryworklog.libinventoryworklogDo.UseModel(&model.Libinventoryworklog{})

	tableName := _libinventoryworklog.libinventoryworklogDo.TableName()
	_libinventoryworklog.ALL = field.NewAsterisk(tableName)
	_libinventoryworklog.ID = field.NewString(tableName, "Id")
	_libinventoryworklog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libinventoryworklog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libinventoryworklog.LayerID = field.NewString(tableName, "LayerId")
	_libinventoryworklog.LayerName = field.NewString(tableName, "LayerName")
	_libinventoryworklog.OnNum = field.NewInt64(tableName, "OnNum")
	_libinventoryworklog.WrongNum = field.NewInt64(tableName, "WrongNum")
	_libinventoryworklog.BorrowedNum = field.NewInt64(tableName, "BorrowedNum")
	_libinventoryworklog.NotOnNum = field.NewInt64(tableName, "NotOnNum")
	_libinventoryworklog.InventoryWorkType = field.NewInt64(tableName, "InventoryWorkType")
	_libinventoryworklog.Remark = field.NewString(tableName, "Remark")
	_libinventoryworklog.TenantID = field.NewInt64(tableName, "TenantId")
	_libinventoryworklog.CreatorUserName = field.NewString(tableName, "CreatorUserName")
	_libinventoryworklog.LayerCode = field.NewString(tableName, "LayerCode")
	_libinventoryworklog.OriginType = field.NewInt64(tableName, "OriginType")

	_libinventoryworklog.fillFieldMap()

	return _libinventoryworklog
}

type libinventoryworklog struct {
	libinventoryworklogDo libinventoryworklogDo

	ALL               field.Asterisk
	ID                field.String
	CreationTime      field.Time
	CreatorUserID     field.Int64
	LayerID           field.String
	LayerName         field.String
	OnNum             field.Int64
	WrongNum          field.Int64
	BorrowedNum       field.Int64
	NotOnNum          field.Int64
	InventoryWorkType field.Int64
	Remark            field.String
	TenantID          field.Int64
	CreatorUserName   field.String
	LayerCode         field.String
	OriginType        field.Int64

	fieldMap map[string]field.Expr
}

func (l libinventoryworklog) Table(newTableName string) *libinventoryworklog {
	l.libinventoryworklogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libinventoryworklog) As(alias string) *libinventoryworklog {
	l.libinventoryworklogDo.DO = *(l.libinventoryworklogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libinventoryworklog) updateTableName(table string) *libinventoryworklog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LayerID = field.NewString(table, "LayerId")
	l.LayerName = field.NewString(table, "LayerName")
	l.OnNum = field.NewInt64(table, "OnNum")
	l.WrongNum = field.NewInt64(table, "WrongNum")
	l.BorrowedNum = field.NewInt64(table, "BorrowedNum")
	l.NotOnNum = field.NewInt64(table, "NotOnNum")
	l.InventoryWorkType = field.NewInt64(table, "InventoryWorkType")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")
	l.LayerCode = field.NewString(table, "LayerCode")
	l.OriginType = field.NewInt64(table, "OriginType")

	l.fillFieldMap()

	return l
}

func (l *libinventoryworklog) WithContext(ctx context.Context) ILibinventoryworklogDo {
	return l.libinventoryworklogDo.WithContext(ctx)
}

func (l libinventoryworklog) TableName() string { return l.libinventoryworklogDo.TableName() }

func (l libinventoryworklog) Alias() string { return l.libinventoryworklogDo.Alias() }

func (l *libinventoryworklog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libinventoryworklog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["LayerName"] = l.LayerName
	l.fieldMap["OnNum"] = l.OnNum
	l.fieldMap["WrongNum"] = l.WrongNum
	l.fieldMap["BorrowedNum"] = l.BorrowedNum
	l.fieldMap["NotOnNum"] = l.NotOnNum
	l.fieldMap["InventoryWorkType"] = l.InventoryWorkType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
	l.fieldMap["LayerCode"] = l.LayerCode
	l.fieldMap["OriginType"] = l.OriginType
}

func (l libinventoryworklog) clone(db *gorm.DB) libinventoryworklog {
	l.libinventoryworklogDo.ReplaceDB(db)
	return l
}

type libinventoryworklogDo struct{ gen.DO }

type ILibinventoryworklogDo interface {
	gen.SubQuery
	Debug() ILibinventoryworklogDo
	WithContext(ctx context.Context) ILibinventoryworklogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibinventoryworklogDo
	Not(conds ...gen.Condition) ILibinventoryworklogDo
	Or(conds ...gen.Condition) ILibinventoryworklogDo
	Select(conds ...field.Expr) ILibinventoryworklogDo
	Where(conds ...gen.Condition) ILibinventoryworklogDo
	Order(conds ...field.Expr) ILibinventoryworklogDo
	Distinct(cols ...field.Expr) ILibinventoryworklogDo
	Omit(cols ...field.Expr) ILibinventoryworklogDo
	Join(table schema.Tabler, on ...field.Expr) ILibinventoryworklogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworklogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworklogDo
	Group(cols ...field.Expr) ILibinventoryworklogDo
	Having(conds ...gen.Condition) ILibinventoryworklogDo
	Limit(limit int) ILibinventoryworklogDo
	Offset(offset int) ILibinventoryworklogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventoryworklogDo
	Unscoped() ILibinventoryworklogDo
	Create(values ...*model.Libinventoryworklog) error
	CreateInBatches(values []*model.Libinventoryworklog, batchSize int) error
	Save(values ...*model.Libinventoryworklog) error
	First() (*model.Libinventoryworklog, error)
	Take() (*model.Libinventoryworklog, error)
	Last() (*model.Libinventoryworklog, error)
	Find() ([]*model.Libinventoryworklog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventoryworklog, err error)
	FindInBatches(result *[]*model.Libinventoryworklog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libinventoryworklog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibinventoryworklogDo
	Assign(attrs ...field.AssignExpr) ILibinventoryworklogDo
	Joins(fields ...field.RelationField) ILibinventoryworklogDo
	Preload(fields ...field.RelationField) ILibinventoryworklogDo
	FirstOrInit() (*model.Libinventoryworklog, error)
	FirstOrCreate() (*model.Libinventoryworklog, error)
	FindByPage(offset int, limit int) (result []*model.Libinventoryworklog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibinventoryworklogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libinventoryworklogDo) Debug() ILibinventoryworklogDo {
	return l.withDO(l.DO.Debug())
}

func (l libinventoryworklogDo) WithContext(ctx context.Context) ILibinventoryworklogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libinventoryworklogDo) ReadDB() ILibinventoryworklogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libinventoryworklogDo) WriteDB() ILibinventoryworklogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libinventoryworklogDo) Clauses(conds ...clause.Expression) ILibinventoryworklogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libinventoryworklogDo) Returning(value interface{}, columns ...string) ILibinventoryworklogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libinventoryworklogDo) Not(conds ...gen.Condition) ILibinventoryworklogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libinventoryworklogDo) Or(conds ...gen.Condition) ILibinventoryworklogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libinventoryworklogDo) Select(conds ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libinventoryworklogDo) Where(conds ...gen.Condition) ILibinventoryworklogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libinventoryworklogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibinventoryworklogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libinventoryworklogDo) Order(conds ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libinventoryworklogDo) Distinct(cols ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libinventoryworklogDo) Omit(cols ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libinventoryworklogDo) Join(table schema.Tabler, on ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libinventoryworklogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libinventoryworklogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libinventoryworklogDo) Group(cols ...field.Expr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libinventoryworklogDo) Having(conds ...gen.Condition) ILibinventoryworklogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libinventoryworklogDo) Limit(limit int) ILibinventoryworklogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libinventoryworklogDo) Offset(offset int) ILibinventoryworklogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libinventoryworklogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventoryworklogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libinventoryworklogDo) Unscoped() ILibinventoryworklogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libinventoryworklogDo) Create(values ...*model.Libinventoryworklog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libinventoryworklogDo) CreateInBatches(values []*model.Libinventoryworklog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libinventoryworklogDo) Save(values ...*model.Libinventoryworklog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libinventoryworklogDo) First() (*model.Libinventoryworklog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworklog), nil
	}
}

func (l libinventoryworklogDo) Take() (*model.Libinventoryworklog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworklog), nil
	}
}

func (l libinventoryworklogDo) Last() (*model.Libinventoryworklog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworklog), nil
	}
}

func (l libinventoryworklogDo) Find() ([]*model.Libinventoryworklog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libinventoryworklog), err
}

func (l libinventoryworklogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventoryworklog, err error) {
	buf := make([]*model.Libinventoryworklog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libinventoryworklogDo) FindInBatches(result *[]*model.Libinventoryworklog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libinventoryworklogDo) Attrs(attrs ...field.AssignExpr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libinventoryworklogDo) Assign(attrs ...field.AssignExpr) ILibinventoryworklogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libinventoryworklogDo) Joins(fields ...field.RelationField) ILibinventoryworklogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libinventoryworklogDo) Preload(fields ...field.RelationField) ILibinventoryworklogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libinventoryworklogDo) FirstOrInit() (*model.Libinventoryworklog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworklog), nil
	}
}

func (l libinventoryworklogDo) FirstOrCreate() (*model.Libinventoryworklog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworklog), nil
	}
}

func (l libinventoryworklogDo) FindByPage(offset int, limit int) (result []*model.Libinventoryworklog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libinventoryworklogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libinventoryworklogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libinventoryworklogDo) Delete(models ...*model.Libinventoryworklog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libinventoryworklogDo) withDO(do gen.Dao) *libinventoryworklogDo {
	l.DO = *do.(*gen.DO)
	return l
}
