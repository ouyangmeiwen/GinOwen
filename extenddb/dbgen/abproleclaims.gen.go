// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbproleclaim(db *gorm.DB) abproleclaim {
	_abproleclaim := abproleclaim{}

	_abproleclaim.abproleclaimDo.UseDB(db)
	_abproleclaim.abproleclaimDo.UseModel(&model.Abproleclaim{})

	tableName := _abproleclaim.abproleclaimDo.TableName()
	_abproleclaim.ALL = field.NewAsterisk(tableName)
	_abproleclaim.ID = field.NewInt64(tableName, "Id")
	_abproleclaim.CreationTime = field.NewTime(tableName, "CreationTime")
	_abproleclaim.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abproleclaim.TenantID = field.NewInt64(tableName, "TenantId")
	_abproleclaim.RoleID = field.NewInt64(tableName, "RoleId")
	_abproleclaim.ClaimType = field.NewString(tableName, "ClaimType")
	_abproleclaim.ClaimValue = field.NewString(tableName, "ClaimValue")

	_abproleclaim.fillFieldMap()

	return _abproleclaim
}

type abproleclaim struct {
	abproleclaimDo abproleclaimDo

	ALL           field.Asterisk
	ID            field.Int64
	CreationTime  field.Time
	CreatorUserID field.Int64
	TenantID      field.Int64
	RoleID        field.Int64
	ClaimType     field.String
	ClaimValue    field.String

	fieldMap map[string]field.Expr
}

func (a abproleclaim) Table(newTableName string) *abproleclaim {
	a.abproleclaimDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abproleclaim) As(alias string) *abproleclaim {
	a.abproleclaimDo.DO = *(a.abproleclaimDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abproleclaim) updateTableName(table string) *abproleclaim {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.RoleID = field.NewInt64(table, "RoleId")
	a.ClaimType = field.NewString(table, "ClaimType")
	a.ClaimValue = field.NewString(table, "ClaimValue")

	a.fillFieldMap()

	return a
}

func (a *abproleclaim) WithContext(ctx context.Context) IAbproleclaimDo {
	return a.abproleclaimDo.WithContext(ctx)
}

func (a abproleclaim) TableName() string { return a.abproleclaimDo.TableName() }

func (a abproleclaim) Alias() string { return a.abproleclaimDo.Alias() }

func (a *abproleclaim) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abproleclaim) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["RoleId"] = a.RoleID
	a.fieldMap["ClaimType"] = a.ClaimType
	a.fieldMap["ClaimValue"] = a.ClaimValue
}

func (a abproleclaim) clone(db *gorm.DB) abproleclaim {
	a.abproleclaimDo.ReplaceDB(db)
	return a
}

type abproleclaimDo struct{ gen.DO }

type IAbproleclaimDo interface {
	gen.SubQuery
	Debug() IAbproleclaimDo
	WithContext(ctx context.Context) IAbproleclaimDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbproleclaimDo
	Not(conds ...gen.Condition) IAbproleclaimDo
	Or(conds ...gen.Condition) IAbproleclaimDo
	Select(conds ...field.Expr) IAbproleclaimDo
	Where(conds ...gen.Condition) IAbproleclaimDo
	Order(conds ...field.Expr) IAbproleclaimDo
	Distinct(cols ...field.Expr) IAbproleclaimDo
	Omit(cols ...field.Expr) IAbproleclaimDo
	Join(table schema.Tabler, on ...field.Expr) IAbproleclaimDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbproleclaimDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbproleclaimDo
	Group(cols ...field.Expr) IAbproleclaimDo
	Having(conds ...gen.Condition) IAbproleclaimDo
	Limit(limit int) IAbproleclaimDo
	Offset(offset int) IAbproleclaimDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbproleclaimDo
	Unscoped() IAbproleclaimDo
	Create(values ...*model.Abproleclaim) error
	CreateInBatches(values []*model.Abproleclaim, batchSize int) error
	Save(values ...*model.Abproleclaim) error
	First() (*model.Abproleclaim, error)
	Take() (*model.Abproleclaim, error)
	Last() (*model.Abproleclaim, error)
	Find() ([]*model.Abproleclaim, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abproleclaim, err error)
	FindInBatches(result *[]*model.Abproleclaim, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abproleclaim) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbproleclaimDo
	Assign(attrs ...field.AssignExpr) IAbproleclaimDo
	Joins(fields ...field.RelationField) IAbproleclaimDo
	Preload(fields ...field.RelationField) IAbproleclaimDo
	FirstOrInit() (*model.Abproleclaim, error)
	FirstOrCreate() (*model.Abproleclaim, error)
	FindByPage(offset int, limit int) (result []*model.Abproleclaim, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbproleclaimDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abproleclaimDo) Debug() IAbproleclaimDo {
	return a.withDO(a.DO.Debug())
}

func (a abproleclaimDo) WithContext(ctx context.Context) IAbproleclaimDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abproleclaimDo) ReadDB() IAbproleclaimDo {
	return a.Clauses(dbresolver.Read)
}

func (a abproleclaimDo) WriteDB() IAbproleclaimDo {
	return a.Clauses(dbresolver.Write)
}

func (a abproleclaimDo) Clauses(conds ...clause.Expression) IAbproleclaimDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abproleclaimDo) Returning(value interface{}, columns ...string) IAbproleclaimDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abproleclaimDo) Not(conds ...gen.Condition) IAbproleclaimDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abproleclaimDo) Or(conds ...gen.Condition) IAbproleclaimDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abproleclaimDo) Select(conds ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abproleclaimDo) Where(conds ...gen.Condition) IAbproleclaimDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abproleclaimDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbproleclaimDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abproleclaimDo) Order(conds ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abproleclaimDo) Distinct(cols ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abproleclaimDo) Omit(cols ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abproleclaimDo) Join(table schema.Tabler, on ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abproleclaimDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abproleclaimDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abproleclaimDo) Group(cols ...field.Expr) IAbproleclaimDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abproleclaimDo) Having(conds ...gen.Condition) IAbproleclaimDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abproleclaimDo) Limit(limit int) IAbproleclaimDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abproleclaimDo) Offset(offset int) IAbproleclaimDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abproleclaimDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbproleclaimDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abproleclaimDo) Unscoped() IAbproleclaimDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abproleclaimDo) Create(values ...*model.Abproleclaim) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abproleclaimDo) CreateInBatches(values []*model.Abproleclaim, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abproleclaimDo) Save(values ...*model.Abproleclaim) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abproleclaimDo) First() (*model.Abproleclaim, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abproleclaim), nil
	}
}

func (a abproleclaimDo) Take() (*model.Abproleclaim, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abproleclaim), nil
	}
}

func (a abproleclaimDo) Last() (*model.Abproleclaim, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abproleclaim), nil
	}
}

func (a abproleclaimDo) Find() ([]*model.Abproleclaim, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abproleclaim), err
}

func (a abproleclaimDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abproleclaim, err error) {
	buf := make([]*model.Abproleclaim, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abproleclaimDo) FindInBatches(result *[]*model.Abproleclaim, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abproleclaimDo) Attrs(attrs ...field.AssignExpr) IAbproleclaimDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abproleclaimDo) Assign(attrs ...field.AssignExpr) IAbproleclaimDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abproleclaimDo) Joins(fields ...field.RelationField) IAbproleclaimDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abproleclaimDo) Preload(fields ...field.RelationField) IAbproleclaimDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abproleclaimDo) FirstOrInit() (*model.Abproleclaim, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abproleclaim), nil
	}
}

func (a abproleclaimDo) FirstOrCreate() (*model.Abproleclaim, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abproleclaim), nil
	}
}

func (a abproleclaimDo) FindByPage(offset int, limit int) (result []*model.Abproleclaim, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abproleclaimDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abproleclaimDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abproleclaimDo) Delete(models ...*model.Abproleclaim) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abproleclaimDo) withDO(do gen.Dao) *abproleclaimDo {
	a.DO = *do.(*gen.DO)
	return a
}
