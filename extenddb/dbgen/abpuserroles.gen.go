// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpuserrole(db *gorm.DB) abpuserrole {
	_abpuserrole := abpuserrole{}

	_abpuserrole.abpuserroleDo.UseDB(db)
	_abpuserrole.abpuserroleDo.UseModel(&model.Abpuserrole{})

	tableName := _abpuserrole.abpuserroleDo.TableName()
	_abpuserrole.ALL = field.NewAsterisk(tableName)
	_abpuserrole.ID = field.NewInt64(tableName, "Id")
	_abpuserrole.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpuserrole.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpuserrole.TenantID = field.NewInt64(tableName, "TenantId")
	_abpuserrole.UserID = field.NewInt64(tableName, "UserId")
	_abpuserrole.RoleID = field.NewInt64(tableName, "RoleId")

	_abpuserrole.fillFieldMap()

	return _abpuserrole
}

type abpuserrole struct {
	abpuserroleDo abpuserroleDo

	ALL           field.Asterisk
	ID            field.Int64
	CreationTime  field.Time
	CreatorUserID field.Int64
	TenantID      field.Int64
	UserID        field.Int64
	RoleID        field.Int64

	fieldMap map[string]field.Expr
}

func (a abpuserrole) Table(newTableName string) *abpuserrole {
	a.abpuserroleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpuserrole) As(alias string) *abpuserrole {
	a.abpuserroleDo.DO = *(a.abpuserroleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpuserrole) updateTableName(table string) *abpuserrole {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.RoleID = field.NewInt64(table, "RoleId")

	a.fillFieldMap()

	return a
}

func (a *abpuserrole) WithContext(ctx context.Context) IAbpuserroleDo {
	return a.abpuserroleDo.WithContext(ctx)
}

func (a abpuserrole) TableName() string { return a.abpuserroleDo.TableName() }

func (a abpuserrole) Alias() string { return a.abpuserroleDo.Alias() }

func (a *abpuserrole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpuserrole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["RoleId"] = a.RoleID
}

func (a abpuserrole) clone(db *gorm.DB) abpuserrole {
	a.abpuserroleDo.ReplaceDB(db)
	return a
}

type abpuserroleDo struct{ gen.DO }

type IAbpuserroleDo interface {
	gen.SubQuery
	Debug() IAbpuserroleDo
	WithContext(ctx context.Context) IAbpuserroleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpuserroleDo
	Not(conds ...gen.Condition) IAbpuserroleDo
	Or(conds ...gen.Condition) IAbpuserroleDo
	Select(conds ...field.Expr) IAbpuserroleDo
	Where(conds ...gen.Condition) IAbpuserroleDo
	Order(conds ...field.Expr) IAbpuserroleDo
	Distinct(cols ...field.Expr) IAbpuserroleDo
	Omit(cols ...field.Expr) IAbpuserroleDo
	Join(table schema.Tabler, on ...field.Expr) IAbpuserroleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserroleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserroleDo
	Group(cols ...field.Expr) IAbpuserroleDo
	Having(conds ...gen.Condition) IAbpuserroleDo
	Limit(limit int) IAbpuserroleDo
	Offset(offset int) IAbpuserroleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserroleDo
	Unscoped() IAbpuserroleDo
	Create(values ...*model.Abpuserrole) error
	CreateInBatches(values []*model.Abpuserrole, batchSize int) error
	Save(values ...*model.Abpuserrole) error
	First() (*model.Abpuserrole, error)
	Take() (*model.Abpuserrole, error)
	Last() (*model.Abpuserrole, error)
	Find() ([]*model.Abpuserrole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserrole, err error)
	FindInBatches(result *[]*model.Abpuserrole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpuserrole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpuserroleDo
	Assign(attrs ...field.AssignExpr) IAbpuserroleDo
	Joins(fields ...field.RelationField) IAbpuserroleDo
	Preload(fields ...field.RelationField) IAbpuserroleDo
	FirstOrInit() (*model.Abpuserrole, error)
	FirstOrCreate() (*model.Abpuserrole, error)
	FindByPage(offset int, limit int) (result []*model.Abpuserrole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpuserroleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpuserroleDo) Debug() IAbpuserroleDo {
	return a.withDO(a.DO.Debug())
}

func (a abpuserroleDo) WithContext(ctx context.Context) IAbpuserroleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpuserroleDo) ReadDB() IAbpuserroleDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpuserroleDo) WriteDB() IAbpuserroleDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpuserroleDo) Clauses(conds ...clause.Expression) IAbpuserroleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpuserroleDo) Returning(value interface{}, columns ...string) IAbpuserroleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpuserroleDo) Not(conds ...gen.Condition) IAbpuserroleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpuserroleDo) Or(conds ...gen.Condition) IAbpuserroleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpuserroleDo) Select(conds ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpuserroleDo) Where(conds ...gen.Condition) IAbpuserroleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpuserroleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpuserroleDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpuserroleDo) Order(conds ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpuserroleDo) Distinct(cols ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpuserroleDo) Omit(cols ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpuserroleDo) Join(table schema.Tabler, on ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpuserroleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpuserroleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpuserroleDo) Group(cols ...field.Expr) IAbpuserroleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpuserroleDo) Having(conds ...gen.Condition) IAbpuserroleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpuserroleDo) Limit(limit int) IAbpuserroleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpuserroleDo) Offset(offset int) IAbpuserroleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpuserroleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserroleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpuserroleDo) Unscoped() IAbpuserroleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpuserroleDo) Create(values ...*model.Abpuserrole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpuserroleDo) CreateInBatches(values []*model.Abpuserrole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpuserroleDo) Save(values ...*model.Abpuserrole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpuserroleDo) First() (*model.Abpuserrole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserrole), nil
	}
}

func (a abpuserroleDo) Take() (*model.Abpuserrole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserrole), nil
	}
}

func (a abpuserroleDo) Last() (*model.Abpuserrole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserrole), nil
	}
}

func (a abpuserroleDo) Find() ([]*model.Abpuserrole, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpuserrole), err
}

func (a abpuserroleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserrole, err error) {
	buf := make([]*model.Abpuserrole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpuserroleDo) FindInBatches(result *[]*model.Abpuserrole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpuserroleDo) Attrs(attrs ...field.AssignExpr) IAbpuserroleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpuserroleDo) Assign(attrs ...field.AssignExpr) IAbpuserroleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpuserroleDo) Joins(fields ...field.RelationField) IAbpuserroleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpuserroleDo) Preload(fields ...field.RelationField) IAbpuserroleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpuserroleDo) FirstOrInit() (*model.Abpuserrole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserrole), nil
	}
}

func (a abpuserroleDo) FirstOrCreate() (*model.Abpuserrole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserrole), nil
	}
}

func (a abpuserroleDo) FindByPage(offset int, limit int) (result []*model.Abpuserrole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpuserroleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpuserroleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpuserroleDo) Delete(models ...*model.Abpuserrole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpuserroleDo) withDO(do gen.Dao) *abpuserroleDo {
	a.DO = *do.(*gen.DO)
	return a
}
