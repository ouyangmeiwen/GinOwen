// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfireserver(db *gorm.DB) hangfireserver {
	_hangfireserver := hangfireserver{}

	_hangfireserver.hangfireserverDo.UseDB(db)
	_hangfireserver.hangfireserverDo.UseModel(&model.Hangfireserver{})

	tableName := _hangfireserver.hangfireserverDo.TableName()
	_hangfireserver.ALL = field.NewAsterisk(tableName)
	_hangfireserver.ID = field.NewString(tableName, "Id")
	_hangfireserver.Data = field.NewString(tableName, "Data")
	_hangfireserver.LastHeartbeat = field.NewTime(tableName, "LastHeartbeat")

	_hangfireserver.fillFieldMap()

	return _hangfireserver
}

type hangfireserver struct {
	hangfireserverDo hangfireserverDo

	ALL           field.Asterisk
	ID            field.String
	Data          field.String
	LastHeartbeat field.Time

	fieldMap map[string]field.Expr
}

func (h hangfireserver) Table(newTableName string) *hangfireserver {
	h.hangfireserverDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfireserver) As(alias string) *hangfireserver {
	h.hangfireserverDo.DO = *(h.hangfireserverDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfireserver) updateTableName(table string) *hangfireserver {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewString(table, "Id")
	h.Data = field.NewString(table, "Data")
	h.LastHeartbeat = field.NewTime(table, "LastHeartbeat")

	h.fillFieldMap()

	return h
}

func (h *hangfireserver) WithContext(ctx context.Context) IHangfireserverDo {
	return h.hangfireserverDo.WithContext(ctx)
}

func (h hangfireserver) TableName() string { return h.hangfireserverDo.TableName() }

func (h hangfireserver) Alias() string { return h.hangfireserverDo.Alias() }

func (h *hangfireserver) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfireserver) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 3)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["Data"] = h.Data
	h.fieldMap["LastHeartbeat"] = h.LastHeartbeat
}

func (h hangfireserver) clone(db *gorm.DB) hangfireserver {
	h.hangfireserverDo.ReplaceDB(db)
	return h
}

type hangfireserverDo struct{ gen.DO }

type IHangfireserverDo interface {
	gen.SubQuery
	Debug() IHangfireserverDo
	WithContext(ctx context.Context) IHangfireserverDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfireserverDo
	Not(conds ...gen.Condition) IHangfireserverDo
	Or(conds ...gen.Condition) IHangfireserverDo
	Select(conds ...field.Expr) IHangfireserverDo
	Where(conds ...gen.Condition) IHangfireserverDo
	Order(conds ...field.Expr) IHangfireserverDo
	Distinct(cols ...field.Expr) IHangfireserverDo
	Omit(cols ...field.Expr) IHangfireserverDo
	Join(table schema.Tabler, on ...field.Expr) IHangfireserverDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfireserverDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfireserverDo
	Group(cols ...field.Expr) IHangfireserverDo
	Having(conds ...gen.Condition) IHangfireserverDo
	Limit(limit int) IHangfireserverDo
	Offset(offset int) IHangfireserverDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfireserverDo
	Unscoped() IHangfireserverDo
	Create(values ...*model.Hangfireserver) error
	CreateInBatches(values []*model.Hangfireserver, batchSize int) error
	Save(values ...*model.Hangfireserver) error
	First() (*model.Hangfireserver, error)
	Take() (*model.Hangfireserver, error)
	Last() (*model.Hangfireserver, error)
	Find() ([]*model.Hangfireserver, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfireserver, err error)
	FindInBatches(result *[]*model.Hangfireserver, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfireserver) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfireserverDo
	Assign(attrs ...field.AssignExpr) IHangfireserverDo
	Joins(fields ...field.RelationField) IHangfireserverDo
	Preload(fields ...field.RelationField) IHangfireserverDo
	FirstOrInit() (*model.Hangfireserver, error)
	FirstOrCreate() (*model.Hangfireserver, error)
	FindByPage(offset int, limit int) (result []*model.Hangfireserver, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfireserverDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfireserverDo) Debug() IHangfireserverDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfireserverDo) WithContext(ctx context.Context) IHangfireserverDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfireserverDo) ReadDB() IHangfireserverDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfireserverDo) WriteDB() IHangfireserverDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfireserverDo) Clauses(conds ...clause.Expression) IHangfireserverDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfireserverDo) Returning(value interface{}, columns ...string) IHangfireserverDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfireserverDo) Not(conds ...gen.Condition) IHangfireserverDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfireserverDo) Or(conds ...gen.Condition) IHangfireserverDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfireserverDo) Select(conds ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfireserverDo) Where(conds ...gen.Condition) IHangfireserverDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfireserverDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfireserverDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfireserverDo) Order(conds ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfireserverDo) Distinct(cols ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfireserverDo) Omit(cols ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfireserverDo) Join(table schema.Tabler, on ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfireserverDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfireserverDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfireserverDo) Group(cols ...field.Expr) IHangfireserverDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfireserverDo) Having(conds ...gen.Condition) IHangfireserverDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfireserverDo) Limit(limit int) IHangfireserverDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfireserverDo) Offset(offset int) IHangfireserverDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfireserverDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfireserverDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfireserverDo) Unscoped() IHangfireserverDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfireserverDo) Create(values ...*model.Hangfireserver) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfireserverDo) CreateInBatches(values []*model.Hangfireserver, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfireserverDo) Save(values ...*model.Hangfireserver) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfireserverDo) First() (*model.Hangfireserver, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireserver), nil
	}
}

func (h hangfireserverDo) Take() (*model.Hangfireserver, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireserver), nil
	}
}

func (h hangfireserverDo) Last() (*model.Hangfireserver, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireserver), nil
	}
}

func (h hangfireserverDo) Find() ([]*model.Hangfireserver, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfireserver), err
}

func (h hangfireserverDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfireserver, err error) {
	buf := make([]*model.Hangfireserver, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfireserverDo) FindInBatches(result *[]*model.Hangfireserver, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfireserverDo) Attrs(attrs ...field.AssignExpr) IHangfireserverDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfireserverDo) Assign(attrs ...field.AssignExpr) IHangfireserverDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfireserverDo) Joins(fields ...field.RelationField) IHangfireserverDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfireserverDo) Preload(fields ...field.RelationField) IHangfireserverDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfireserverDo) FirstOrInit() (*model.Hangfireserver, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireserver), nil
	}
}

func (h hangfireserverDo) FirstOrCreate() (*model.Hangfireserver, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireserver), nil
	}
}

func (h hangfireserverDo) FindByPage(offset int, limit int) (result []*model.Hangfireserver, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfireserverDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfireserverDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfireserverDo) Delete(models ...*model.Hangfireserver) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfireserverDo) withDO(do gen.Dao) *hangfireserverDo {
	h.DO = *do.(*gen.DO)
	return h
}
