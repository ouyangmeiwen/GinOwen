// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newEfmigrationshistory(db *gorm.DB) efmigrationshistory {
	_efmigrationshistory := efmigrationshistory{}

	_efmigrationshistory.efmigrationshistoryDo.UseDB(db)
	_efmigrationshistory.efmigrationshistoryDo.UseModel(&model.Efmigrationshistory{})

	tableName := _efmigrationshistory.efmigrationshistoryDo.TableName()
	_efmigrationshistory.ALL = field.NewAsterisk(tableName)
	_efmigrationshistory.MigrationID = field.NewString(tableName, "MigrationId")
	_efmigrationshistory.ProductVersion = field.NewString(tableName, "ProductVersion")

	_efmigrationshistory.fillFieldMap()

	return _efmigrationshistory
}

type efmigrationshistory struct {
	efmigrationshistoryDo efmigrationshistoryDo

	ALL            field.Asterisk
	MigrationID    field.String
	ProductVersion field.String

	fieldMap map[string]field.Expr
}

func (e efmigrationshistory) Table(newTableName string) *efmigrationshistory {
	e.efmigrationshistoryDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e efmigrationshistory) As(alias string) *efmigrationshistory {
	e.efmigrationshistoryDo.DO = *(e.efmigrationshistoryDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *efmigrationshistory) updateTableName(table string) *efmigrationshistory {
	e.ALL = field.NewAsterisk(table)
	e.MigrationID = field.NewString(table, "MigrationId")
	e.ProductVersion = field.NewString(table, "ProductVersion")

	e.fillFieldMap()

	return e
}

func (e *efmigrationshistory) WithContext(ctx context.Context) IEfmigrationshistoryDo {
	return e.efmigrationshistoryDo.WithContext(ctx)
}

func (e efmigrationshistory) TableName() string { return e.efmigrationshistoryDo.TableName() }

func (e efmigrationshistory) Alias() string { return e.efmigrationshistoryDo.Alias() }

func (e *efmigrationshistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *efmigrationshistory) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 2)
	e.fieldMap["MigrationId"] = e.MigrationID
	e.fieldMap["ProductVersion"] = e.ProductVersion
}

func (e efmigrationshistory) clone(db *gorm.DB) efmigrationshistory {
	e.efmigrationshistoryDo.ReplaceDB(db)
	return e
}

type efmigrationshistoryDo struct{ gen.DO }

type IEfmigrationshistoryDo interface {
	gen.SubQuery
	Debug() IEfmigrationshistoryDo
	WithContext(ctx context.Context) IEfmigrationshistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEfmigrationshistoryDo
	Not(conds ...gen.Condition) IEfmigrationshistoryDo
	Or(conds ...gen.Condition) IEfmigrationshistoryDo
	Select(conds ...field.Expr) IEfmigrationshistoryDo
	Where(conds ...gen.Condition) IEfmigrationshistoryDo
	Order(conds ...field.Expr) IEfmigrationshistoryDo
	Distinct(cols ...field.Expr) IEfmigrationshistoryDo
	Omit(cols ...field.Expr) IEfmigrationshistoryDo
	Join(table schema.Tabler, on ...field.Expr) IEfmigrationshistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEfmigrationshistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEfmigrationshistoryDo
	Group(cols ...field.Expr) IEfmigrationshistoryDo
	Having(conds ...gen.Condition) IEfmigrationshistoryDo
	Limit(limit int) IEfmigrationshistoryDo
	Offset(offset int) IEfmigrationshistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEfmigrationshistoryDo
	Unscoped() IEfmigrationshistoryDo
	Create(values ...*model.Efmigrationshistory) error
	CreateInBatches(values []*model.Efmigrationshistory, batchSize int) error
	Save(values ...*model.Efmigrationshistory) error
	First() (*model.Efmigrationshistory, error)
	Take() (*model.Efmigrationshistory, error)
	Last() (*model.Efmigrationshistory, error)
	Find() ([]*model.Efmigrationshistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Efmigrationshistory, err error)
	FindInBatches(result *[]*model.Efmigrationshistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Efmigrationshistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEfmigrationshistoryDo
	Assign(attrs ...field.AssignExpr) IEfmigrationshistoryDo
	Joins(fields ...field.RelationField) IEfmigrationshistoryDo
	Preload(fields ...field.RelationField) IEfmigrationshistoryDo
	FirstOrInit() (*model.Efmigrationshistory, error)
	FirstOrCreate() (*model.Efmigrationshistory, error)
	FindByPage(offset int, limit int) (result []*model.Efmigrationshistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEfmigrationshistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e efmigrationshistoryDo) Debug() IEfmigrationshistoryDo {
	return e.withDO(e.DO.Debug())
}

func (e efmigrationshistoryDo) WithContext(ctx context.Context) IEfmigrationshistoryDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e efmigrationshistoryDo) ReadDB() IEfmigrationshistoryDo {
	return e.Clauses(dbresolver.Read)
}

func (e efmigrationshistoryDo) WriteDB() IEfmigrationshistoryDo {
	return e.Clauses(dbresolver.Write)
}

func (e efmigrationshistoryDo) Clauses(conds ...clause.Expression) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e efmigrationshistoryDo) Returning(value interface{}, columns ...string) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e efmigrationshistoryDo) Not(conds ...gen.Condition) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e efmigrationshistoryDo) Or(conds ...gen.Condition) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e efmigrationshistoryDo) Select(conds ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e efmigrationshistoryDo) Where(conds ...gen.Condition) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e efmigrationshistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEfmigrationshistoryDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e efmigrationshistoryDo) Order(conds ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e efmigrationshistoryDo) Distinct(cols ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e efmigrationshistoryDo) Omit(cols ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e efmigrationshistoryDo) Join(table schema.Tabler, on ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e efmigrationshistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e efmigrationshistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e efmigrationshistoryDo) Group(cols ...field.Expr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e efmigrationshistoryDo) Having(conds ...gen.Condition) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e efmigrationshistoryDo) Limit(limit int) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e efmigrationshistoryDo) Offset(offset int) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e efmigrationshistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e efmigrationshistoryDo) Unscoped() IEfmigrationshistoryDo {
	return e.withDO(e.DO.Unscoped())
}

func (e efmigrationshistoryDo) Create(values ...*model.Efmigrationshistory) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e efmigrationshistoryDo) CreateInBatches(values []*model.Efmigrationshistory, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e efmigrationshistoryDo) Save(values ...*model.Efmigrationshistory) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e efmigrationshistoryDo) First() (*model.Efmigrationshistory, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Efmigrationshistory), nil
	}
}

func (e efmigrationshistoryDo) Take() (*model.Efmigrationshistory, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Efmigrationshistory), nil
	}
}

func (e efmigrationshistoryDo) Last() (*model.Efmigrationshistory, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Efmigrationshistory), nil
	}
}

func (e efmigrationshistoryDo) Find() ([]*model.Efmigrationshistory, error) {
	result, err := e.DO.Find()
	return result.([]*model.Efmigrationshistory), err
}

func (e efmigrationshistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Efmigrationshistory, err error) {
	buf := make([]*model.Efmigrationshistory, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e efmigrationshistoryDo) FindInBatches(result *[]*model.Efmigrationshistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e efmigrationshistoryDo) Attrs(attrs ...field.AssignExpr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e efmigrationshistoryDo) Assign(attrs ...field.AssignExpr) IEfmigrationshistoryDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e efmigrationshistoryDo) Joins(fields ...field.RelationField) IEfmigrationshistoryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e efmigrationshistoryDo) Preload(fields ...field.RelationField) IEfmigrationshistoryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e efmigrationshistoryDo) FirstOrInit() (*model.Efmigrationshistory, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Efmigrationshistory), nil
	}
}

func (e efmigrationshistoryDo) FirstOrCreate() (*model.Efmigrationshistory, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Efmigrationshistory), nil
	}
}

func (e efmigrationshistoryDo) FindByPage(offset int, limit int) (result []*model.Efmigrationshistory, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e efmigrationshistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e efmigrationshistoryDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e efmigrationshistoryDo) Delete(models ...*model.Efmigrationshistory) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *efmigrationshistoryDo) withDO(do gen.Dao) *efmigrationshistoryDo {
	e.DO = *do.(*gen.DO)
	return e
}
