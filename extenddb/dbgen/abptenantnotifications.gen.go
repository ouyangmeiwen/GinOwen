// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbptenantnotification(db *gorm.DB) abptenantnotification {
	_abptenantnotification := abptenantnotification{}

	_abptenantnotification.abptenantnotificationDo.UseDB(db)
	_abptenantnotification.abptenantnotificationDo.UseModel(&model.Abptenantnotification{})

	tableName := _abptenantnotification.abptenantnotificationDo.TableName()
	_abptenantnotification.ALL = field.NewAsterisk(tableName)
	_abptenantnotification.ID = field.NewString(tableName, "Id")
	_abptenantnotification.CreationTime = field.NewTime(tableName, "CreationTime")
	_abptenantnotification.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abptenantnotification.TenantID = field.NewInt64(tableName, "TenantId")
	_abptenantnotification.NotificationName = field.NewString(tableName, "NotificationName")
	_abptenantnotification.Data = field.NewString(tableName, "Data")
	_abptenantnotification.DataTypeName = field.NewString(tableName, "DataTypeName")
	_abptenantnotification.EntityTypeName = field.NewString(tableName, "EntityTypeName")
	_abptenantnotification.EntityTypeAssemblyQualifiedName = field.NewString(tableName, "EntityTypeAssemblyQualifiedName")
	_abptenantnotification.EntityID = field.NewString(tableName, "EntityId")
	_abptenantnotification.Severity = field.NewInt64(tableName, "Severity")
	_abptenantnotification.Discriminator = field.NewString(tableName, "Discriminator")
	_abptenantnotification.MessageName = field.NewString(tableName, "MessageName")

	_abptenantnotification.fillFieldMap()

	return _abptenantnotification
}

type abptenantnotification struct {
	abptenantnotificationDo abptenantnotificationDo

	ALL                             field.Asterisk
	ID                              field.String
	CreationTime                    field.Time
	CreatorUserID                   field.Int64
	TenantID                        field.Int64
	NotificationName                field.String
	Data                            field.String
	DataTypeName                    field.String
	EntityTypeName                  field.String
	EntityTypeAssemblyQualifiedName field.String
	EntityID                        field.String
	Severity                        field.Int64
	Discriminator                   field.String
	MessageName                     field.String

	fieldMap map[string]field.Expr
}

func (a abptenantnotification) Table(newTableName string) *abptenantnotification {
	a.abptenantnotificationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abptenantnotification) As(alias string) *abptenantnotification {
	a.abptenantnotificationDo.DO = *(a.abptenantnotificationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abptenantnotification) updateTableName(table string) *abptenantnotification {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.NotificationName = field.NewString(table, "NotificationName")
	a.Data = field.NewString(table, "Data")
	a.DataTypeName = field.NewString(table, "DataTypeName")
	a.EntityTypeName = field.NewString(table, "EntityTypeName")
	a.EntityTypeAssemblyQualifiedName = field.NewString(table, "EntityTypeAssemblyQualifiedName")
	a.EntityID = field.NewString(table, "EntityId")
	a.Severity = field.NewInt64(table, "Severity")
	a.Discriminator = field.NewString(table, "Discriminator")
	a.MessageName = field.NewString(table, "MessageName")

	a.fillFieldMap()

	return a
}

func (a *abptenantnotification) WithContext(ctx context.Context) IAbptenantnotificationDo {
	return a.abptenantnotificationDo.WithContext(ctx)
}

func (a abptenantnotification) TableName() string { return a.abptenantnotificationDo.TableName() }

func (a abptenantnotification) Alias() string { return a.abptenantnotificationDo.Alias() }

func (a *abptenantnotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abptenantnotification) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["NotificationName"] = a.NotificationName
	a.fieldMap["Data"] = a.Data
	a.fieldMap["DataTypeName"] = a.DataTypeName
	a.fieldMap["EntityTypeName"] = a.EntityTypeName
	a.fieldMap["EntityTypeAssemblyQualifiedName"] = a.EntityTypeAssemblyQualifiedName
	a.fieldMap["EntityId"] = a.EntityID
	a.fieldMap["Severity"] = a.Severity
	a.fieldMap["Discriminator"] = a.Discriminator
	a.fieldMap["MessageName"] = a.MessageName
}

func (a abptenantnotification) clone(db *gorm.DB) abptenantnotification {
	a.abptenantnotificationDo.ReplaceDB(db)
	return a
}

type abptenantnotificationDo struct{ gen.DO }

type IAbptenantnotificationDo interface {
	gen.SubQuery
	Debug() IAbptenantnotificationDo
	WithContext(ctx context.Context) IAbptenantnotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbptenantnotificationDo
	Not(conds ...gen.Condition) IAbptenantnotificationDo
	Or(conds ...gen.Condition) IAbptenantnotificationDo
	Select(conds ...field.Expr) IAbptenantnotificationDo
	Where(conds ...gen.Condition) IAbptenantnotificationDo
	Order(conds ...field.Expr) IAbptenantnotificationDo
	Distinct(cols ...field.Expr) IAbptenantnotificationDo
	Omit(cols ...field.Expr) IAbptenantnotificationDo
	Join(table schema.Tabler, on ...field.Expr) IAbptenantnotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbptenantnotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbptenantnotificationDo
	Group(cols ...field.Expr) IAbptenantnotificationDo
	Having(conds ...gen.Condition) IAbptenantnotificationDo
	Limit(limit int) IAbptenantnotificationDo
	Offset(offset int) IAbptenantnotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbptenantnotificationDo
	Unscoped() IAbptenantnotificationDo
	Create(values ...*model.Abptenantnotification) error
	CreateInBatches(values []*model.Abptenantnotification, batchSize int) error
	Save(values ...*model.Abptenantnotification) error
	First() (*model.Abptenantnotification, error)
	Take() (*model.Abptenantnotification, error)
	Last() (*model.Abptenantnotification, error)
	Find() ([]*model.Abptenantnotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abptenantnotification, err error)
	FindInBatches(result *[]*model.Abptenantnotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abptenantnotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbptenantnotificationDo
	Assign(attrs ...field.AssignExpr) IAbptenantnotificationDo
	Joins(fields ...field.RelationField) IAbptenantnotificationDo
	Preload(fields ...field.RelationField) IAbptenantnotificationDo
	FirstOrInit() (*model.Abptenantnotification, error)
	FirstOrCreate() (*model.Abptenantnotification, error)
	FindByPage(offset int, limit int) (result []*model.Abptenantnotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbptenantnotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abptenantnotificationDo) Debug() IAbptenantnotificationDo {
	return a.withDO(a.DO.Debug())
}

func (a abptenantnotificationDo) WithContext(ctx context.Context) IAbptenantnotificationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abptenantnotificationDo) ReadDB() IAbptenantnotificationDo {
	return a.Clauses(dbresolver.Read)
}

func (a abptenantnotificationDo) WriteDB() IAbptenantnotificationDo {
	return a.Clauses(dbresolver.Write)
}

func (a abptenantnotificationDo) Clauses(conds ...clause.Expression) IAbptenantnotificationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abptenantnotificationDo) Returning(value interface{}, columns ...string) IAbptenantnotificationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abptenantnotificationDo) Not(conds ...gen.Condition) IAbptenantnotificationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abptenantnotificationDo) Or(conds ...gen.Condition) IAbptenantnotificationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abptenantnotificationDo) Select(conds ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abptenantnotificationDo) Where(conds ...gen.Condition) IAbptenantnotificationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abptenantnotificationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbptenantnotificationDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abptenantnotificationDo) Order(conds ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abptenantnotificationDo) Distinct(cols ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abptenantnotificationDo) Omit(cols ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abptenantnotificationDo) Join(table schema.Tabler, on ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abptenantnotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abptenantnotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abptenantnotificationDo) Group(cols ...field.Expr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abptenantnotificationDo) Having(conds ...gen.Condition) IAbptenantnotificationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abptenantnotificationDo) Limit(limit int) IAbptenantnotificationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abptenantnotificationDo) Offset(offset int) IAbptenantnotificationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abptenantnotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbptenantnotificationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abptenantnotificationDo) Unscoped() IAbptenantnotificationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abptenantnotificationDo) Create(values ...*model.Abptenantnotification) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abptenantnotificationDo) CreateInBatches(values []*model.Abptenantnotification, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abptenantnotificationDo) Save(values ...*model.Abptenantnotification) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abptenantnotificationDo) First() (*model.Abptenantnotification, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abptenantnotification), nil
	}
}

func (a abptenantnotificationDo) Take() (*model.Abptenantnotification, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abptenantnotification), nil
	}
}

func (a abptenantnotificationDo) Last() (*model.Abptenantnotification, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abptenantnotification), nil
	}
}

func (a abptenantnotificationDo) Find() ([]*model.Abptenantnotification, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abptenantnotification), err
}

func (a abptenantnotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abptenantnotification, err error) {
	buf := make([]*model.Abptenantnotification, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abptenantnotificationDo) FindInBatches(result *[]*model.Abptenantnotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abptenantnotificationDo) Attrs(attrs ...field.AssignExpr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abptenantnotificationDo) Assign(attrs ...field.AssignExpr) IAbptenantnotificationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abptenantnotificationDo) Joins(fields ...field.RelationField) IAbptenantnotificationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abptenantnotificationDo) Preload(fields ...field.RelationField) IAbptenantnotificationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abptenantnotificationDo) FirstOrInit() (*model.Abptenantnotification, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abptenantnotification), nil
	}
}

func (a abptenantnotificationDo) FirstOrCreate() (*model.Abptenantnotification, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abptenantnotification), nil
	}
}

func (a abptenantnotificationDo) FindByPage(offset int, limit int) (result []*model.Abptenantnotification, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abptenantnotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abptenantnotificationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abptenantnotificationDo) Delete(models ...*model.Abptenantnotification) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abptenantnotificationDo) withDO(do gen.Dao) *abptenantnotificationDo {
	a.DO = *do.(*gen.DO)
	return a
}
