// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppqrcode(db *gorm.DB) appqrcode {
	_appqrcode := appqrcode{}

	_appqrcode.appqrcodeDo.UseDB(db)
	_appqrcode.appqrcodeDo.UseModel(&model.Appqrcode{})

	tableName := _appqrcode.appqrcodeDo.TableName()
	_appqrcode.ALL = field.NewAsterisk(tableName)
	_appqrcode.ID = field.NewString(tableName, "Id")
	_appqrcode.CreationTime = field.NewTime(tableName, "CreationTime")
	_appqrcode.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appqrcode.OpenID = field.NewString(tableName, "OpenId")
	_appqrcode.ExpireSeconds = field.NewInt64(tableName, "ExpireSeconds")
	_appqrcode.Ticket = field.NewString(tableName, "Ticket")
	_appqrcode.QrURL = field.NewString(tableName, "QrUrl")
	_appqrcode.ExpireTime = field.NewTime(tableName, "ExpireTime")
	_appqrcode.TenantID = field.NewInt64(tableName, "TenantId")

	_appqrcode.fillFieldMap()

	return _appqrcode
}

type appqrcode struct {
	appqrcodeDo appqrcodeDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	OpenID        field.String
	ExpireSeconds field.Int64
	Ticket        field.String
	QrURL         field.String
	ExpireTime    field.Time
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (a appqrcode) Table(newTableName string) *appqrcode {
	a.appqrcodeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appqrcode) As(alias string) *appqrcode {
	a.appqrcodeDo.DO = *(a.appqrcodeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appqrcode) updateTableName(table string) *appqrcode {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.OpenID = field.NewString(table, "OpenId")
	a.ExpireSeconds = field.NewInt64(table, "ExpireSeconds")
	a.Ticket = field.NewString(table, "Ticket")
	a.QrURL = field.NewString(table, "QrUrl")
	a.ExpireTime = field.NewTime(table, "ExpireTime")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appqrcode) WithContext(ctx context.Context) IAppqrcodeDo {
	return a.appqrcodeDo.WithContext(ctx)
}

func (a appqrcode) TableName() string { return a.appqrcodeDo.TableName() }

func (a appqrcode) Alias() string { return a.appqrcodeDo.Alias() }

func (a *appqrcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appqrcode) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["OpenId"] = a.OpenID
	a.fieldMap["ExpireSeconds"] = a.ExpireSeconds
	a.fieldMap["Ticket"] = a.Ticket
	a.fieldMap["QrUrl"] = a.QrURL
	a.fieldMap["ExpireTime"] = a.ExpireTime
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appqrcode) clone(db *gorm.DB) appqrcode {
	a.appqrcodeDo.ReplaceDB(db)
	return a
}

type appqrcodeDo struct{ gen.DO }

type IAppqrcodeDo interface {
	gen.SubQuery
	Debug() IAppqrcodeDo
	WithContext(ctx context.Context) IAppqrcodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppqrcodeDo
	Not(conds ...gen.Condition) IAppqrcodeDo
	Or(conds ...gen.Condition) IAppqrcodeDo
	Select(conds ...field.Expr) IAppqrcodeDo
	Where(conds ...gen.Condition) IAppqrcodeDo
	Order(conds ...field.Expr) IAppqrcodeDo
	Distinct(cols ...field.Expr) IAppqrcodeDo
	Omit(cols ...field.Expr) IAppqrcodeDo
	Join(table schema.Tabler, on ...field.Expr) IAppqrcodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppqrcodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppqrcodeDo
	Group(cols ...field.Expr) IAppqrcodeDo
	Having(conds ...gen.Condition) IAppqrcodeDo
	Limit(limit int) IAppqrcodeDo
	Offset(offset int) IAppqrcodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppqrcodeDo
	Unscoped() IAppqrcodeDo
	Create(values ...*model.Appqrcode) error
	CreateInBatches(values []*model.Appqrcode, batchSize int) error
	Save(values ...*model.Appqrcode) error
	First() (*model.Appqrcode, error)
	Take() (*model.Appqrcode, error)
	Last() (*model.Appqrcode, error)
	Find() ([]*model.Appqrcode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appqrcode, err error)
	FindInBatches(result *[]*model.Appqrcode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appqrcode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppqrcodeDo
	Assign(attrs ...field.AssignExpr) IAppqrcodeDo
	Joins(fields ...field.RelationField) IAppqrcodeDo
	Preload(fields ...field.RelationField) IAppqrcodeDo
	FirstOrInit() (*model.Appqrcode, error)
	FirstOrCreate() (*model.Appqrcode, error)
	FindByPage(offset int, limit int) (result []*model.Appqrcode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppqrcodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appqrcodeDo) Debug() IAppqrcodeDo {
	return a.withDO(a.DO.Debug())
}

func (a appqrcodeDo) WithContext(ctx context.Context) IAppqrcodeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appqrcodeDo) ReadDB() IAppqrcodeDo {
	return a.Clauses(dbresolver.Read)
}

func (a appqrcodeDo) WriteDB() IAppqrcodeDo {
	return a.Clauses(dbresolver.Write)
}

func (a appqrcodeDo) Clauses(conds ...clause.Expression) IAppqrcodeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appqrcodeDo) Returning(value interface{}, columns ...string) IAppqrcodeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appqrcodeDo) Not(conds ...gen.Condition) IAppqrcodeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appqrcodeDo) Or(conds ...gen.Condition) IAppqrcodeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appqrcodeDo) Select(conds ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appqrcodeDo) Where(conds ...gen.Condition) IAppqrcodeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appqrcodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppqrcodeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appqrcodeDo) Order(conds ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appqrcodeDo) Distinct(cols ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appqrcodeDo) Omit(cols ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appqrcodeDo) Join(table schema.Tabler, on ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appqrcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appqrcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appqrcodeDo) Group(cols ...field.Expr) IAppqrcodeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appqrcodeDo) Having(conds ...gen.Condition) IAppqrcodeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appqrcodeDo) Limit(limit int) IAppqrcodeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appqrcodeDo) Offset(offset int) IAppqrcodeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appqrcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppqrcodeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appqrcodeDo) Unscoped() IAppqrcodeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appqrcodeDo) Create(values ...*model.Appqrcode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appqrcodeDo) CreateInBatches(values []*model.Appqrcode, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appqrcodeDo) Save(values ...*model.Appqrcode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appqrcodeDo) First() (*model.Appqrcode, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appqrcode), nil
	}
}

func (a appqrcodeDo) Take() (*model.Appqrcode, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appqrcode), nil
	}
}

func (a appqrcodeDo) Last() (*model.Appqrcode, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appqrcode), nil
	}
}

func (a appqrcodeDo) Find() ([]*model.Appqrcode, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appqrcode), err
}

func (a appqrcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appqrcode, err error) {
	buf := make([]*model.Appqrcode, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appqrcodeDo) FindInBatches(result *[]*model.Appqrcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appqrcodeDo) Attrs(attrs ...field.AssignExpr) IAppqrcodeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appqrcodeDo) Assign(attrs ...field.AssignExpr) IAppqrcodeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appqrcodeDo) Joins(fields ...field.RelationField) IAppqrcodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appqrcodeDo) Preload(fields ...field.RelationField) IAppqrcodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appqrcodeDo) FirstOrInit() (*model.Appqrcode, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appqrcode), nil
	}
}

func (a appqrcodeDo) FirstOrCreate() (*model.Appqrcode, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appqrcode), nil
	}
}

func (a appqrcodeDo) FindByPage(offset int, limit int) (result []*model.Appqrcode, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appqrcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appqrcodeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appqrcodeDo) Delete(models ...*model.Appqrcode) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appqrcodeDo) withDO(do gen.Dao) *appqrcodeDo {
	a.DO = *do.(*gen.DO)
	return a
}
