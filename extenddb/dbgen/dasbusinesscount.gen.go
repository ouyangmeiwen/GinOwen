// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newDasbusinesscount(db *gorm.DB) dasbusinesscount {
	_dasbusinesscount := dasbusinesscount{}

	_dasbusinesscount.dasbusinesscountDo.UseDB(db)
	_dasbusinesscount.dasbusinesscountDo.UseModel(&model.Dasbusinesscount{})

	tableName := _dasbusinesscount.dasbusinesscountDo.TableName()
	_dasbusinesscount.ALL = field.NewAsterisk(tableName)
	_dasbusinesscount.ID = field.NewString(tableName, "Id")
	_dasbusinesscount.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasbusinesscount.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasbusinesscount.Business = field.NewString(tableName, "Business")
	_dasbusinesscount.Type = field.NewString(tableName, "Type")
	_dasbusinesscount.Time = field.NewString(tableName, "Time")
	_dasbusinesscount.Count = field.NewInt64(tableName, "Count")
	_dasbusinesscount.TenantID = field.NewInt64(tableName, "TenantId")

	_dasbusinesscount.fillFieldMap()

	return _dasbusinesscount
}

type dasbusinesscount struct {
	dasbusinesscountDo dasbusinesscountDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	Business      field.String
	Type          field.String
	Time          field.String
	Count         field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (d dasbusinesscount) Table(newTableName string) *dasbusinesscount {
	d.dasbusinesscountDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasbusinesscount) As(alias string) *dasbusinesscount {
	d.dasbusinesscountDo.DO = *(d.dasbusinesscountDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasbusinesscount) updateTableName(table string) *dasbusinesscount {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.Business = field.NewString(table, "Business")
	d.Type = field.NewString(table, "Type")
	d.Time = field.NewString(table, "Time")
	d.Count = field.NewInt64(table, "Count")
	d.TenantID = field.NewInt64(table, "TenantId")

	d.fillFieldMap()

	return d
}

func (d *dasbusinesscount) WithContext(ctx context.Context) IDasbusinesscountDo {
	return d.dasbusinesscountDo.WithContext(ctx)
}

func (d dasbusinesscount) TableName() string { return d.dasbusinesscountDo.TableName() }

func (d dasbusinesscount) Alias() string { return d.dasbusinesscountDo.Alias() }

func (d *dasbusinesscount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasbusinesscount) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["Business"] = d.Business
	d.fieldMap["Type"] = d.Type
	d.fieldMap["Time"] = d.Time
	d.fieldMap["Count"] = d.Count
	d.fieldMap["TenantId"] = d.TenantID
}

func (d dasbusinesscount) clone(db *gorm.DB) dasbusinesscount {
	d.dasbusinesscountDo.ReplaceDB(db)
	return d
}

type dasbusinesscountDo struct{ gen.DO }

type IDasbusinesscountDo interface {
	gen.SubQuery
	Debug() IDasbusinesscountDo
	WithContext(ctx context.Context) IDasbusinesscountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasbusinesscountDo
	Not(conds ...gen.Condition) IDasbusinesscountDo
	Or(conds ...gen.Condition) IDasbusinesscountDo
	Select(conds ...field.Expr) IDasbusinesscountDo
	Where(conds ...gen.Condition) IDasbusinesscountDo
	Order(conds ...field.Expr) IDasbusinesscountDo
	Distinct(cols ...field.Expr) IDasbusinesscountDo
	Omit(cols ...field.Expr) IDasbusinesscountDo
	Join(table schema.Tabler, on ...field.Expr) IDasbusinesscountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasbusinesscountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasbusinesscountDo
	Group(cols ...field.Expr) IDasbusinesscountDo
	Having(conds ...gen.Condition) IDasbusinesscountDo
	Limit(limit int) IDasbusinesscountDo
	Offset(offset int) IDasbusinesscountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasbusinesscountDo
	Unscoped() IDasbusinesscountDo
	Create(values ...*model.Dasbusinesscount) error
	CreateInBatches(values []*model.Dasbusinesscount, batchSize int) error
	Save(values ...*model.Dasbusinesscount) error
	First() (*model.Dasbusinesscount, error)
	Take() (*model.Dasbusinesscount, error)
	Last() (*model.Dasbusinesscount, error)
	Find() ([]*model.Dasbusinesscount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasbusinesscount, err error)
	FindInBatches(result *[]*model.Dasbusinesscount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasbusinesscount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasbusinesscountDo
	Assign(attrs ...field.AssignExpr) IDasbusinesscountDo
	Joins(fields ...field.RelationField) IDasbusinesscountDo
	Preload(fields ...field.RelationField) IDasbusinesscountDo
	FirstOrInit() (*model.Dasbusinesscount, error)
	FirstOrCreate() (*model.Dasbusinesscount, error)
	FindByPage(offset int, limit int) (result []*model.Dasbusinesscount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasbusinesscountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasbusinesscountDo) Debug() IDasbusinesscountDo {
	return d.withDO(d.DO.Debug())
}

func (d dasbusinesscountDo) WithContext(ctx context.Context) IDasbusinesscountDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasbusinesscountDo) ReadDB() IDasbusinesscountDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasbusinesscountDo) WriteDB() IDasbusinesscountDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasbusinesscountDo) Clauses(conds ...clause.Expression) IDasbusinesscountDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasbusinesscountDo) Returning(value interface{}, columns ...string) IDasbusinesscountDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasbusinesscountDo) Not(conds ...gen.Condition) IDasbusinesscountDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasbusinesscountDo) Or(conds ...gen.Condition) IDasbusinesscountDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasbusinesscountDo) Select(conds ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasbusinesscountDo) Where(conds ...gen.Condition) IDasbusinesscountDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasbusinesscountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasbusinesscountDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasbusinesscountDo) Order(conds ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasbusinesscountDo) Distinct(cols ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasbusinesscountDo) Omit(cols ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasbusinesscountDo) Join(table schema.Tabler, on ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasbusinesscountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasbusinesscountDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasbusinesscountDo) Group(cols ...field.Expr) IDasbusinesscountDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasbusinesscountDo) Having(conds ...gen.Condition) IDasbusinesscountDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasbusinesscountDo) Limit(limit int) IDasbusinesscountDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasbusinesscountDo) Offset(offset int) IDasbusinesscountDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasbusinesscountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasbusinesscountDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasbusinesscountDo) Unscoped() IDasbusinesscountDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasbusinesscountDo) Create(values ...*model.Dasbusinesscount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasbusinesscountDo) CreateInBatches(values []*model.Dasbusinesscount, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasbusinesscountDo) Save(values ...*model.Dasbusinesscount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasbusinesscountDo) First() (*model.Dasbusinesscount, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasbusinesscount), nil
	}
}

func (d dasbusinesscountDo) Take() (*model.Dasbusinesscount, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasbusinesscount), nil
	}
}

func (d dasbusinesscountDo) Last() (*model.Dasbusinesscount, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasbusinesscount), nil
	}
}

func (d dasbusinesscountDo) Find() ([]*model.Dasbusinesscount, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasbusinesscount), err
}

func (d dasbusinesscountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasbusinesscount, err error) {
	buf := make([]*model.Dasbusinesscount, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasbusinesscountDo) FindInBatches(result *[]*model.Dasbusinesscount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasbusinesscountDo) Attrs(attrs ...field.AssignExpr) IDasbusinesscountDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasbusinesscountDo) Assign(attrs ...field.AssignExpr) IDasbusinesscountDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasbusinesscountDo) Joins(fields ...field.RelationField) IDasbusinesscountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasbusinesscountDo) Preload(fields ...field.RelationField) IDasbusinesscountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasbusinesscountDo) FirstOrInit() (*model.Dasbusinesscount, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasbusinesscount), nil
	}
}

func (d dasbusinesscountDo) FirstOrCreate() (*model.Dasbusinesscount, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasbusinesscount), nil
	}
}

func (d dasbusinesscountDo) FindByPage(offset int, limit int) (result []*model.Dasbusinesscount, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasbusinesscountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasbusinesscountDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasbusinesscountDo) Delete(models ...*model.Dasbusinesscount) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasbusinesscountDo) withDO(do gen.Dao) *dasbusinesscountDo {
	d.DO = *do.(*gen.DO)
	return d
}
