// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysmenuCopy(db *gorm.DB) sysmenuCopy {
	_sysmenuCopy := sysmenuCopy{}

	_sysmenuCopy.sysmenuCopyDo.UseDB(db)
	_sysmenuCopy.sysmenuCopyDo.UseModel(&model.SysmenuCopy{})

	tableName := _sysmenuCopy.sysmenuCopyDo.TableName()
	_sysmenuCopy.ALL = field.NewAsterisk(tableName)
	_sysmenuCopy.ID = field.NewString(tableName, "Id")
	_sysmenuCopy.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysmenuCopy.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysmenuCopy.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysmenuCopy.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysmenuCopy.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysmenuCopy.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysmenuCopy.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysmenuCopy.Code = field.NewString(tableName, "Code")
	_sysmenuCopy.Name = field.NewString(tableName, "Name")
	_sysmenuCopy.PermissionName = field.NewString(tableName, "PermissionName")
	_sysmenuCopy.Icon = field.NewString(tableName, "Icon")
	_sysmenuCopy.Route = field.NewString(tableName, "Route")
	_sysmenuCopy.Parameters = field.NewString(tableName, "Parameters")
	_sysmenuCopy.FeatureDependency = field.NewString(tableName, "FeatureDependency")
	_sysmenuCopy.IsExternal = field.NewField(tableName, "IsExternal")
	_sysmenuCopy.IsIframe = field.NewField(tableName, "IsIframe")
	_sysmenuCopy.IsAuthenticate = field.NewField(tableName, "IsAuthenticate")
	_sysmenuCopy.SortCode = field.NewInt64(tableName, "SortCode")
	_sysmenuCopy.IsEnable = field.NewField(tableName, "IsEnable")
	_sysmenuCopy.ParentID = field.NewString(tableName, "ParentId")
	_sysmenuCopy.Remark = field.NewString(tableName, "Remark")
	_sysmenuCopy.SystemType = field.NewInt64(tableName, "SystemType")
	_sysmenuCopy.TenantID = field.NewInt64(tableName, "TenantId")

	_sysmenuCopy.fillFieldMap()

	return _sysmenuCopy
}

type sysmenuCopy struct {
	sysmenuCopyDo sysmenuCopyDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	PermissionName       field.String
	Icon                 field.String
	Route                field.String
	Parameters           field.String
	FeatureDependency    field.String
	IsExternal           field.Field
	IsIframe             field.Field
	IsAuthenticate       field.Field
	SortCode             field.Int64
	IsEnable             field.Field
	ParentID             field.String
	Remark               field.String
	SystemType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s sysmenuCopy) Table(newTableName string) *sysmenuCopy {
	s.sysmenuCopyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysmenuCopy) As(alias string) *sysmenuCopy {
	s.sysmenuCopyDo.DO = *(s.sysmenuCopyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysmenuCopy) updateTableName(table string) *sysmenuCopy {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Code = field.NewString(table, "Code")
	s.Name = field.NewString(table, "Name")
	s.PermissionName = field.NewString(table, "PermissionName")
	s.Icon = field.NewString(table, "Icon")
	s.Route = field.NewString(table, "Route")
	s.Parameters = field.NewString(table, "Parameters")
	s.FeatureDependency = field.NewString(table, "FeatureDependency")
	s.IsExternal = field.NewField(table, "IsExternal")
	s.IsIframe = field.NewField(table, "IsIframe")
	s.IsAuthenticate = field.NewField(table, "IsAuthenticate")
	s.SortCode = field.NewInt64(table, "SortCode")
	s.IsEnable = field.NewField(table, "IsEnable")
	s.ParentID = field.NewString(table, "ParentId")
	s.Remark = field.NewString(table, "Remark")
	s.SystemType = field.NewInt64(table, "SystemType")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysmenuCopy) WithContext(ctx context.Context) ISysmenuCopyDo {
	return s.sysmenuCopyDo.WithContext(ctx)
}

func (s sysmenuCopy) TableName() string { return s.sysmenuCopyDo.TableName() }

func (s sysmenuCopy) Alias() string { return s.sysmenuCopyDo.Alias() }

func (s *sysmenuCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysmenuCopy) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Code"] = s.Code
	s.fieldMap["Name"] = s.Name
	s.fieldMap["PermissionName"] = s.PermissionName
	s.fieldMap["Icon"] = s.Icon
	s.fieldMap["Route"] = s.Route
	s.fieldMap["Parameters"] = s.Parameters
	s.fieldMap["FeatureDependency"] = s.FeatureDependency
	s.fieldMap["IsExternal"] = s.IsExternal
	s.fieldMap["IsIframe"] = s.IsIframe
	s.fieldMap["IsAuthenticate"] = s.IsAuthenticate
	s.fieldMap["SortCode"] = s.SortCode
	s.fieldMap["IsEnable"] = s.IsEnable
	s.fieldMap["ParentId"] = s.ParentID
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["SystemType"] = s.SystemType
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysmenuCopy) clone(db *gorm.DB) sysmenuCopy {
	s.sysmenuCopyDo.ReplaceDB(db)
	return s
}

type sysmenuCopyDo struct{ gen.DO }

type ISysmenuCopyDo interface {
	gen.SubQuery
	Debug() ISysmenuCopyDo
	WithContext(ctx context.Context) ISysmenuCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysmenuCopyDo
	Not(conds ...gen.Condition) ISysmenuCopyDo
	Or(conds ...gen.Condition) ISysmenuCopyDo
	Select(conds ...field.Expr) ISysmenuCopyDo
	Where(conds ...gen.Condition) ISysmenuCopyDo
	Order(conds ...field.Expr) ISysmenuCopyDo
	Distinct(cols ...field.Expr) ISysmenuCopyDo
	Omit(cols ...field.Expr) ISysmenuCopyDo
	Join(table schema.Tabler, on ...field.Expr) ISysmenuCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysmenuCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysmenuCopyDo
	Group(cols ...field.Expr) ISysmenuCopyDo
	Having(conds ...gen.Condition) ISysmenuCopyDo
	Limit(limit int) ISysmenuCopyDo
	Offset(offset int) ISysmenuCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysmenuCopyDo
	Unscoped() ISysmenuCopyDo
	Create(values ...*model.SysmenuCopy) error
	CreateInBatches(values []*model.SysmenuCopy, batchSize int) error
	Save(values ...*model.SysmenuCopy) error
	First() (*model.SysmenuCopy, error)
	Take() (*model.SysmenuCopy, error)
	Last() (*model.SysmenuCopy, error)
	Find() ([]*model.SysmenuCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysmenuCopy, err error)
	FindInBatches(result *[]*model.SysmenuCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysmenuCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysmenuCopyDo
	Assign(attrs ...field.AssignExpr) ISysmenuCopyDo
	Joins(fields ...field.RelationField) ISysmenuCopyDo
	Preload(fields ...field.RelationField) ISysmenuCopyDo
	FirstOrInit() (*model.SysmenuCopy, error)
	FirstOrCreate() (*model.SysmenuCopy, error)
	FindByPage(offset int, limit int) (result []*model.SysmenuCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysmenuCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysmenuCopyDo) Debug() ISysmenuCopyDo {
	return s.withDO(s.DO.Debug())
}

func (s sysmenuCopyDo) WithContext(ctx context.Context) ISysmenuCopyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysmenuCopyDo) ReadDB() ISysmenuCopyDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysmenuCopyDo) WriteDB() ISysmenuCopyDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysmenuCopyDo) Clauses(conds ...clause.Expression) ISysmenuCopyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysmenuCopyDo) Returning(value interface{}, columns ...string) ISysmenuCopyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysmenuCopyDo) Not(conds ...gen.Condition) ISysmenuCopyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysmenuCopyDo) Or(conds ...gen.Condition) ISysmenuCopyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysmenuCopyDo) Select(conds ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysmenuCopyDo) Where(conds ...gen.Condition) ISysmenuCopyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysmenuCopyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysmenuCopyDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysmenuCopyDo) Order(conds ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysmenuCopyDo) Distinct(cols ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysmenuCopyDo) Omit(cols ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysmenuCopyDo) Join(table schema.Tabler, on ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysmenuCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysmenuCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysmenuCopyDo) Group(cols ...field.Expr) ISysmenuCopyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysmenuCopyDo) Having(conds ...gen.Condition) ISysmenuCopyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysmenuCopyDo) Limit(limit int) ISysmenuCopyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysmenuCopyDo) Offset(offset int) ISysmenuCopyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysmenuCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysmenuCopyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysmenuCopyDo) Unscoped() ISysmenuCopyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysmenuCopyDo) Create(values ...*model.SysmenuCopy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysmenuCopyDo) CreateInBatches(values []*model.SysmenuCopy, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysmenuCopyDo) Save(values ...*model.SysmenuCopy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysmenuCopyDo) First() (*model.SysmenuCopy, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysmenuCopy), nil
	}
}

func (s sysmenuCopyDo) Take() (*model.SysmenuCopy, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysmenuCopy), nil
	}
}

func (s sysmenuCopyDo) Last() (*model.SysmenuCopy, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysmenuCopy), nil
	}
}

func (s sysmenuCopyDo) Find() ([]*model.SysmenuCopy, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysmenuCopy), err
}

func (s sysmenuCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysmenuCopy, err error) {
	buf := make([]*model.SysmenuCopy, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysmenuCopyDo) FindInBatches(result *[]*model.SysmenuCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysmenuCopyDo) Attrs(attrs ...field.AssignExpr) ISysmenuCopyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysmenuCopyDo) Assign(attrs ...field.AssignExpr) ISysmenuCopyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysmenuCopyDo) Joins(fields ...field.RelationField) ISysmenuCopyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysmenuCopyDo) Preload(fields ...field.RelationField) ISysmenuCopyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysmenuCopyDo) FirstOrInit() (*model.SysmenuCopy, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysmenuCopy), nil
	}
}

func (s sysmenuCopyDo) FirstOrCreate() (*model.SysmenuCopy, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysmenuCopy), nil
	}
}

func (s sysmenuCopyDo) FindByPage(offset int, limit int) (result []*model.SysmenuCopy, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysmenuCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysmenuCopyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysmenuCopyDo) Delete(models ...*model.SysmenuCopy) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysmenuCopyDo) withDO(do gen.Dao) *sysmenuCopyDo {
	s.DO = *do.(*gen.DO)
	return s
}
