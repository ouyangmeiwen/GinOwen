// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppbinaryobject(db *gorm.DB) appbinaryobject {
	_appbinaryobject := appbinaryobject{}

	_appbinaryobject.appbinaryobjectDo.UseDB(db)
	_appbinaryobject.appbinaryobjectDo.UseModel(&model.Appbinaryobject{})

	tableName := _appbinaryobject.appbinaryobjectDo.TableName()
	_appbinaryobject.ALL = field.NewAsterisk(tableName)
	_appbinaryobject.ID = field.NewString(tableName, "Id")
	_appbinaryobject.TenantID = field.NewInt64(tableName, "TenantId")
	_appbinaryobject.Bytes = field.NewBytes(tableName, "Bytes")

	_appbinaryobject.fillFieldMap()

	return _appbinaryobject
}

type appbinaryobject struct {
	appbinaryobjectDo appbinaryobjectDo

	ALL      field.Asterisk
	ID       field.String
	TenantID field.Int64
	Bytes    field.Bytes

	fieldMap map[string]field.Expr
}

func (a appbinaryobject) Table(newTableName string) *appbinaryobject {
	a.appbinaryobjectDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appbinaryobject) As(alias string) *appbinaryobject {
	a.appbinaryobjectDo.DO = *(a.appbinaryobjectDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appbinaryobject) updateTableName(table string) *appbinaryobject {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.Bytes = field.NewBytes(table, "Bytes")

	a.fillFieldMap()

	return a
}

func (a *appbinaryobject) WithContext(ctx context.Context) IAppbinaryobjectDo {
	return a.appbinaryobjectDo.WithContext(ctx)
}

func (a appbinaryobject) TableName() string { return a.appbinaryobjectDo.TableName() }

func (a appbinaryobject) Alias() string { return a.appbinaryobjectDo.Alias() }

func (a *appbinaryobject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appbinaryobject) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["Bytes"] = a.Bytes
}

func (a appbinaryobject) clone(db *gorm.DB) appbinaryobject {
	a.appbinaryobjectDo.ReplaceDB(db)
	return a
}

type appbinaryobjectDo struct{ gen.DO }

type IAppbinaryobjectDo interface {
	gen.SubQuery
	Debug() IAppbinaryobjectDo
	WithContext(ctx context.Context) IAppbinaryobjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppbinaryobjectDo
	Not(conds ...gen.Condition) IAppbinaryobjectDo
	Or(conds ...gen.Condition) IAppbinaryobjectDo
	Select(conds ...field.Expr) IAppbinaryobjectDo
	Where(conds ...gen.Condition) IAppbinaryobjectDo
	Order(conds ...field.Expr) IAppbinaryobjectDo
	Distinct(cols ...field.Expr) IAppbinaryobjectDo
	Omit(cols ...field.Expr) IAppbinaryobjectDo
	Join(table schema.Tabler, on ...field.Expr) IAppbinaryobjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppbinaryobjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppbinaryobjectDo
	Group(cols ...field.Expr) IAppbinaryobjectDo
	Having(conds ...gen.Condition) IAppbinaryobjectDo
	Limit(limit int) IAppbinaryobjectDo
	Offset(offset int) IAppbinaryobjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppbinaryobjectDo
	Unscoped() IAppbinaryobjectDo
	Create(values ...*model.Appbinaryobject) error
	CreateInBatches(values []*model.Appbinaryobject, batchSize int) error
	Save(values ...*model.Appbinaryobject) error
	First() (*model.Appbinaryobject, error)
	Take() (*model.Appbinaryobject, error)
	Last() (*model.Appbinaryobject, error)
	Find() ([]*model.Appbinaryobject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appbinaryobject, err error)
	FindInBatches(result *[]*model.Appbinaryobject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appbinaryobject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppbinaryobjectDo
	Assign(attrs ...field.AssignExpr) IAppbinaryobjectDo
	Joins(fields ...field.RelationField) IAppbinaryobjectDo
	Preload(fields ...field.RelationField) IAppbinaryobjectDo
	FirstOrInit() (*model.Appbinaryobject, error)
	FirstOrCreate() (*model.Appbinaryobject, error)
	FindByPage(offset int, limit int) (result []*model.Appbinaryobject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppbinaryobjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appbinaryobjectDo) Debug() IAppbinaryobjectDo {
	return a.withDO(a.DO.Debug())
}

func (a appbinaryobjectDo) WithContext(ctx context.Context) IAppbinaryobjectDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appbinaryobjectDo) ReadDB() IAppbinaryobjectDo {
	return a.Clauses(dbresolver.Read)
}

func (a appbinaryobjectDo) WriteDB() IAppbinaryobjectDo {
	return a.Clauses(dbresolver.Write)
}

func (a appbinaryobjectDo) Clauses(conds ...clause.Expression) IAppbinaryobjectDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appbinaryobjectDo) Returning(value interface{}, columns ...string) IAppbinaryobjectDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appbinaryobjectDo) Not(conds ...gen.Condition) IAppbinaryobjectDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appbinaryobjectDo) Or(conds ...gen.Condition) IAppbinaryobjectDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appbinaryobjectDo) Select(conds ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appbinaryobjectDo) Where(conds ...gen.Condition) IAppbinaryobjectDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appbinaryobjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppbinaryobjectDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appbinaryobjectDo) Order(conds ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appbinaryobjectDo) Distinct(cols ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appbinaryobjectDo) Omit(cols ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appbinaryobjectDo) Join(table schema.Tabler, on ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appbinaryobjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appbinaryobjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appbinaryobjectDo) Group(cols ...field.Expr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appbinaryobjectDo) Having(conds ...gen.Condition) IAppbinaryobjectDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appbinaryobjectDo) Limit(limit int) IAppbinaryobjectDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appbinaryobjectDo) Offset(offset int) IAppbinaryobjectDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appbinaryobjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppbinaryobjectDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appbinaryobjectDo) Unscoped() IAppbinaryobjectDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appbinaryobjectDo) Create(values ...*model.Appbinaryobject) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appbinaryobjectDo) CreateInBatches(values []*model.Appbinaryobject, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appbinaryobjectDo) Save(values ...*model.Appbinaryobject) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appbinaryobjectDo) First() (*model.Appbinaryobject, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbinaryobject), nil
	}
}

func (a appbinaryobjectDo) Take() (*model.Appbinaryobject, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbinaryobject), nil
	}
}

func (a appbinaryobjectDo) Last() (*model.Appbinaryobject, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbinaryobject), nil
	}
}

func (a appbinaryobjectDo) Find() ([]*model.Appbinaryobject, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appbinaryobject), err
}

func (a appbinaryobjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appbinaryobject, err error) {
	buf := make([]*model.Appbinaryobject, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appbinaryobjectDo) FindInBatches(result *[]*model.Appbinaryobject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appbinaryobjectDo) Attrs(attrs ...field.AssignExpr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appbinaryobjectDo) Assign(attrs ...field.AssignExpr) IAppbinaryobjectDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appbinaryobjectDo) Joins(fields ...field.RelationField) IAppbinaryobjectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appbinaryobjectDo) Preload(fields ...field.RelationField) IAppbinaryobjectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appbinaryobjectDo) FirstOrInit() (*model.Appbinaryobject, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbinaryobject), nil
	}
}

func (a appbinaryobjectDo) FirstOrCreate() (*model.Appbinaryobject, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appbinaryobject), nil
	}
}

func (a appbinaryobjectDo) FindByPage(offset int, limit int) (result []*model.Appbinaryobject, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appbinaryobjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appbinaryobjectDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appbinaryobjectDo) Delete(models ...*model.Appbinaryobject) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appbinaryobjectDo) withDO(do gen.Dao) *appbinaryobjectDo {
	a.DO = *do.(*gen.DO)
	return a
}
