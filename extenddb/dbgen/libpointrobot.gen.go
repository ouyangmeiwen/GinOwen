// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibpointrobot(db *gorm.DB) libpointrobot {
	_libpointrobot := libpointrobot{}

	_libpointrobot.libpointrobotDo.UseDB(db)
	_libpointrobot.libpointrobotDo.UseModel(&model.Libpointrobot{})

	tableName := _libpointrobot.libpointrobotDo.TableName()
	_libpointrobot.ALL = field.NewAsterisk(tableName)
	_libpointrobot.ID = field.NewString(tableName, "Id")
	_libpointrobot.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpointrobot.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpointrobot.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libpointrobot.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libpointrobot.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libpointrobot.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libpointrobot.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libpointrobot.RobotID = field.NewString(tableName, "RobotId")
	_libpointrobot.RobotName = field.NewString(tableName, "RobotName")
	_libpointrobot.MapID = field.NewString(tableName, "MapId")
	_libpointrobot.MapName = field.NewString(tableName, "MapName")
	_libpointrobot.Remark = field.NewString(tableName, "Remark")
	_libpointrobot.TenantID = field.NewInt64(tableName, "TenantId")

	_libpointrobot.fillFieldMap()

	return _libpointrobot
}

type libpointrobot struct {
	libpointrobotDo libpointrobotDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	RobotID              field.String
	RobotName            field.String
	MapID                field.String
	MapName              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libpointrobot) Table(newTableName string) *libpointrobot {
	l.libpointrobotDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpointrobot) As(alias string) *libpointrobot {
	l.libpointrobotDo.DO = *(l.libpointrobotDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpointrobot) updateTableName(table string) *libpointrobot {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.RobotID = field.NewString(table, "RobotId")
	l.RobotName = field.NewString(table, "RobotName")
	l.MapID = field.NewString(table, "MapId")
	l.MapName = field.NewString(table, "MapName")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpointrobot) WithContext(ctx context.Context) ILibpointrobotDo {
	return l.libpointrobotDo.WithContext(ctx)
}

func (l libpointrobot) TableName() string { return l.libpointrobotDo.TableName() }

func (l libpointrobot) Alias() string { return l.libpointrobotDo.Alias() }

func (l *libpointrobot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpointrobot) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["RobotId"] = l.RobotID
	l.fieldMap["RobotName"] = l.RobotName
	l.fieldMap["MapId"] = l.MapID
	l.fieldMap["MapName"] = l.MapName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpointrobot) clone(db *gorm.DB) libpointrobot {
	l.libpointrobotDo.ReplaceDB(db)
	return l
}

type libpointrobotDo struct{ gen.DO }

type ILibpointrobotDo interface {
	gen.SubQuery
	Debug() ILibpointrobotDo
	WithContext(ctx context.Context) ILibpointrobotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpointrobotDo
	Not(conds ...gen.Condition) ILibpointrobotDo
	Or(conds ...gen.Condition) ILibpointrobotDo
	Select(conds ...field.Expr) ILibpointrobotDo
	Where(conds ...gen.Condition) ILibpointrobotDo
	Order(conds ...field.Expr) ILibpointrobotDo
	Distinct(cols ...field.Expr) ILibpointrobotDo
	Omit(cols ...field.Expr) ILibpointrobotDo
	Join(table schema.Tabler, on ...field.Expr) ILibpointrobotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpointrobotDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpointrobotDo
	Group(cols ...field.Expr) ILibpointrobotDo
	Having(conds ...gen.Condition) ILibpointrobotDo
	Limit(limit int) ILibpointrobotDo
	Offset(offset int) ILibpointrobotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpointrobotDo
	Unscoped() ILibpointrobotDo
	Create(values ...*model.Libpointrobot) error
	CreateInBatches(values []*model.Libpointrobot, batchSize int) error
	Save(values ...*model.Libpointrobot) error
	First() (*model.Libpointrobot, error)
	Take() (*model.Libpointrobot, error)
	Last() (*model.Libpointrobot, error)
	Find() ([]*model.Libpointrobot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpointrobot, err error)
	FindInBatches(result *[]*model.Libpointrobot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpointrobot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpointrobotDo
	Assign(attrs ...field.AssignExpr) ILibpointrobotDo
	Joins(fields ...field.RelationField) ILibpointrobotDo
	Preload(fields ...field.RelationField) ILibpointrobotDo
	FirstOrInit() (*model.Libpointrobot, error)
	FirstOrCreate() (*model.Libpointrobot, error)
	FindByPage(offset int, limit int) (result []*model.Libpointrobot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpointrobotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpointrobotDo) Debug() ILibpointrobotDo {
	return l.withDO(l.DO.Debug())
}

func (l libpointrobotDo) WithContext(ctx context.Context) ILibpointrobotDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpointrobotDo) ReadDB() ILibpointrobotDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpointrobotDo) WriteDB() ILibpointrobotDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpointrobotDo) Clauses(conds ...clause.Expression) ILibpointrobotDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpointrobotDo) Returning(value interface{}, columns ...string) ILibpointrobotDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpointrobotDo) Not(conds ...gen.Condition) ILibpointrobotDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpointrobotDo) Or(conds ...gen.Condition) ILibpointrobotDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpointrobotDo) Select(conds ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpointrobotDo) Where(conds ...gen.Condition) ILibpointrobotDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpointrobotDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpointrobotDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpointrobotDo) Order(conds ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpointrobotDo) Distinct(cols ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpointrobotDo) Omit(cols ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpointrobotDo) Join(table schema.Tabler, on ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpointrobotDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpointrobotDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpointrobotDo) Group(cols ...field.Expr) ILibpointrobotDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpointrobotDo) Having(conds ...gen.Condition) ILibpointrobotDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpointrobotDo) Limit(limit int) ILibpointrobotDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpointrobotDo) Offset(offset int) ILibpointrobotDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpointrobotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpointrobotDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpointrobotDo) Unscoped() ILibpointrobotDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpointrobotDo) Create(values ...*model.Libpointrobot) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpointrobotDo) CreateInBatches(values []*model.Libpointrobot, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpointrobotDo) Save(values ...*model.Libpointrobot) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpointrobotDo) First() (*model.Libpointrobot, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointrobot), nil
	}
}

func (l libpointrobotDo) Take() (*model.Libpointrobot, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointrobot), nil
	}
}

func (l libpointrobotDo) Last() (*model.Libpointrobot, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointrobot), nil
	}
}

func (l libpointrobotDo) Find() ([]*model.Libpointrobot, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpointrobot), err
}

func (l libpointrobotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpointrobot, err error) {
	buf := make([]*model.Libpointrobot, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpointrobotDo) FindInBatches(result *[]*model.Libpointrobot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpointrobotDo) Attrs(attrs ...field.AssignExpr) ILibpointrobotDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpointrobotDo) Assign(attrs ...field.AssignExpr) ILibpointrobotDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpointrobotDo) Joins(fields ...field.RelationField) ILibpointrobotDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpointrobotDo) Preload(fields ...field.RelationField) ILibpointrobotDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpointrobotDo) FirstOrInit() (*model.Libpointrobot, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointrobot), nil
	}
}

func (l libpointrobotDo) FirstOrCreate() (*model.Libpointrobot, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointrobot), nil
	}
}

func (l libpointrobotDo) FindByPage(offset int, limit int) (result []*model.Libpointrobot, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpointrobotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpointrobotDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpointrobotDo) Delete(models ...*model.Libpointrobot) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpointrobotDo) withDO(do gen.Dao) *libpointrobotDo {
	l.DO = *do.(*gen.DO)
	return l
}
