// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysdatalog(db *gorm.DB) sysdatalog {
	_sysdatalog := sysdatalog{}

	_sysdatalog.sysdatalogDo.UseDB(db)
	_sysdatalog.sysdatalogDo.UseModel(&model.Sysdatalog{})

	tableName := _sysdatalog.sysdatalogDo.TableName()
	_sysdatalog.ALL = field.NewAsterisk(tableName)
	_sysdatalog.ID = field.NewString(tableName, "Id")
	_sysdatalog.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysdatalog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysdatalog.KeyValue = field.NewString(tableName, "KeyValue")
	_sysdatalog.InsertType = field.NewInt64(tableName, "InsertType")
	_sysdatalog.DBType = field.NewString(tableName, "DBType")
	_sysdatalog.Business = field.NewString(tableName, "Business")
	_sysdatalog.SysName = field.NewString(tableName, "SysName")
	_sysdatalog.ClientName = field.NewString(tableName, "ClientName")
	_sysdatalog.Description = field.NewString(tableName, "Description")
	_sysdatalog.IsOffLine = field.NewField(tableName, "IsOffLine")
	_sysdatalog.TenantID = field.NewInt64(tableName, "TenantId")
	_sysdatalog.CreatorUserName = field.NewString(tableName, "CreatorUserName")

	_sysdatalog.fillFieldMap()

	return _sysdatalog
}

type sysdatalog struct {
	sysdatalogDo sysdatalogDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	KeyValue        field.String
	InsertType      field.Int64
	DBType          field.String
	Business        field.String
	SysName         field.String
	ClientName      field.String
	Description     field.String
	IsOffLine       field.Field
	TenantID        field.Int64
	CreatorUserName field.String

	fieldMap map[string]field.Expr
}

func (s sysdatalog) Table(newTableName string) *sysdatalog {
	s.sysdatalogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysdatalog) As(alias string) *sysdatalog {
	s.sysdatalogDo.DO = *(s.sysdatalogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysdatalog) updateTableName(table string) *sysdatalog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.KeyValue = field.NewString(table, "KeyValue")
	s.InsertType = field.NewInt64(table, "InsertType")
	s.DBType = field.NewString(table, "DBType")
	s.Business = field.NewString(table, "Business")
	s.SysName = field.NewString(table, "SysName")
	s.ClientName = field.NewString(table, "ClientName")
	s.Description = field.NewString(table, "Description")
	s.IsOffLine = field.NewField(table, "IsOffLine")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.CreatorUserName = field.NewString(table, "CreatorUserName")

	s.fillFieldMap()

	return s
}

func (s *sysdatalog) WithContext(ctx context.Context) ISysdatalogDo {
	return s.sysdatalogDo.WithContext(ctx)
}

func (s sysdatalog) TableName() string { return s.sysdatalogDo.TableName() }

func (s sysdatalog) Alias() string { return s.sysdatalogDo.Alias() }

func (s *sysdatalog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysdatalog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["KeyValue"] = s.KeyValue
	s.fieldMap["InsertType"] = s.InsertType
	s.fieldMap["DBType"] = s.DBType
	s.fieldMap["Business"] = s.Business
	s.fieldMap["SysName"] = s.SysName
	s.fieldMap["ClientName"] = s.ClientName
	s.fieldMap["Description"] = s.Description
	s.fieldMap["IsOffLine"] = s.IsOffLine
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["CreatorUserName"] = s.CreatorUserName
}

func (s sysdatalog) clone(db *gorm.DB) sysdatalog {
	s.sysdatalogDo.ReplaceDB(db)
	return s
}

type sysdatalogDo struct{ gen.DO }

type ISysdatalogDo interface {
	gen.SubQuery
	Debug() ISysdatalogDo
	WithContext(ctx context.Context) ISysdatalogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysdatalogDo
	Not(conds ...gen.Condition) ISysdatalogDo
	Or(conds ...gen.Condition) ISysdatalogDo
	Select(conds ...field.Expr) ISysdatalogDo
	Where(conds ...gen.Condition) ISysdatalogDo
	Order(conds ...field.Expr) ISysdatalogDo
	Distinct(cols ...field.Expr) ISysdatalogDo
	Omit(cols ...field.Expr) ISysdatalogDo
	Join(table schema.Tabler, on ...field.Expr) ISysdatalogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysdatalogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysdatalogDo
	Group(cols ...field.Expr) ISysdatalogDo
	Having(conds ...gen.Condition) ISysdatalogDo
	Limit(limit int) ISysdatalogDo
	Offset(offset int) ISysdatalogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysdatalogDo
	Unscoped() ISysdatalogDo
	Create(values ...*model.Sysdatalog) error
	CreateInBatches(values []*model.Sysdatalog, batchSize int) error
	Save(values ...*model.Sysdatalog) error
	First() (*model.Sysdatalog, error)
	Take() (*model.Sysdatalog, error)
	Last() (*model.Sysdatalog, error)
	Find() ([]*model.Sysdatalog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysdatalog, err error)
	FindInBatches(result *[]*model.Sysdatalog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysdatalog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysdatalogDo
	Assign(attrs ...field.AssignExpr) ISysdatalogDo
	Joins(fields ...field.RelationField) ISysdatalogDo
	Preload(fields ...field.RelationField) ISysdatalogDo
	FirstOrInit() (*model.Sysdatalog, error)
	FirstOrCreate() (*model.Sysdatalog, error)
	FindByPage(offset int, limit int) (result []*model.Sysdatalog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysdatalogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysdatalogDo) Debug() ISysdatalogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysdatalogDo) WithContext(ctx context.Context) ISysdatalogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysdatalogDo) ReadDB() ISysdatalogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysdatalogDo) WriteDB() ISysdatalogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysdatalogDo) Clauses(conds ...clause.Expression) ISysdatalogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysdatalogDo) Returning(value interface{}, columns ...string) ISysdatalogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysdatalogDo) Not(conds ...gen.Condition) ISysdatalogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysdatalogDo) Or(conds ...gen.Condition) ISysdatalogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysdatalogDo) Select(conds ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysdatalogDo) Where(conds ...gen.Condition) ISysdatalogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysdatalogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysdatalogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysdatalogDo) Order(conds ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysdatalogDo) Distinct(cols ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysdatalogDo) Omit(cols ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysdatalogDo) Join(table schema.Tabler, on ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysdatalogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysdatalogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysdatalogDo) Group(cols ...field.Expr) ISysdatalogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysdatalogDo) Having(conds ...gen.Condition) ISysdatalogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysdatalogDo) Limit(limit int) ISysdatalogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysdatalogDo) Offset(offset int) ISysdatalogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysdatalogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysdatalogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysdatalogDo) Unscoped() ISysdatalogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysdatalogDo) Create(values ...*model.Sysdatalog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysdatalogDo) CreateInBatches(values []*model.Sysdatalog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysdatalogDo) Save(values ...*model.Sysdatalog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysdatalogDo) First() (*model.Sysdatalog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdatalog), nil
	}
}

func (s sysdatalogDo) Take() (*model.Sysdatalog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdatalog), nil
	}
}

func (s sysdatalogDo) Last() (*model.Sysdatalog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdatalog), nil
	}
}

func (s sysdatalogDo) Find() ([]*model.Sysdatalog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysdatalog), err
}

func (s sysdatalogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysdatalog, err error) {
	buf := make([]*model.Sysdatalog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysdatalogDo) FindInBatches(result *[]*model.Sysdatalog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysdatalogDo) Attrs(attrs ...field.AssignExpr) ISysdatalogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysdatalogDo) Assign(attrs ...field.AssignExpr) ISysdatalogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysdatalogDo) Joins(fields ...field.RelationField) ISysdatalogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysdatalogDo) Preload(fields ...field.RelationField) ISysdatalogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysdatalogDo) FirstOrInit() (*model.Sysdatalog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdatalog), nil
	}
}

func (s sysdatalogDo) FirstOrCreate() (*model.Sysdatalog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdatalog), nil
	}
}

func (s sysdatalogDo) FindByPage(offset int, limit int) (result []*model.Sysdatalog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysdatalogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysdatalogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysdatalogDo) Delete(models ...*model.Sysdatalog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysdatalogDo) withDO(do gen.Dao) *sysdatalogDo {
	s.DO = *do.(*gen.DO)
	return s
}
