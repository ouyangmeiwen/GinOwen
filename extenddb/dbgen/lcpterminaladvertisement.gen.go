// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminaladvertisement(db *gorm.DB) lcpterminaladvertisement {
	_lcpterminaladvertisement := lcpterminaladvertisement{}

	_lcpterminaladvertisement.lcpterminaladvertisementDo.UseDB(db)
	_lcpterminaladvertisement.lcpterminaladvertisementDo.UseModel(&model.Lcpterminaladvertisement{})

	tableName := _lcpterminaladvertisement.lcpterminaladvertisementDo.TableName()
	_lcpterminaladvertisement.ALL = field.NewAsterisk(tableName)
	_lcpterminaladvertisement.ID = field.NewString(tableName, "Id")
	_lcpterminaladvertisement.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminaladvertisement.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminaladvertisement.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpterminaladvertisement.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpterminaladvertisement.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpterminaladvertisement.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpterminaladvertisement.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpterminaladvertisement.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpterminaladvertisement.TerminalType = field.NewString(tableName, "TerminalType")
	_lcpterminaladvertisement.AttachmentID = field.NewString(tableName, "AttachmentId")
	_lcpterminaladvertisement.SortCode = field.NewInt64(tableName, "SortCode")
	_lcpterminaladvertisement.Remark = field.NewString(tableName, "Remark")
	_lcpterminaladvertisement.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminaladvertisement.fillFieldMap()

	return _lcpterminaladvertisement
}

type lcpterminaladvertisement struct {
	lcpterminaladvertisementDo lcpterminaladvertisementDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TerminalID           field.String
	TerminalType         field.String
	AttachmentID         field.String
	SortCode             field.Int64
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminaladvertisement) Table(newTableName string) *lcpterminaladvertisement {
	l.lcpterminaladvertisementDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminaladvertisement) As(alias string) *lcpterminaladvertisement {
	l.lcpterminaladvertisementDo.DO = *(l.lcpterminaladvertisementDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminaladvertisement) updateTableName(table string) *lcpterminaladvertisement {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalType = field.NewString(table, "TerminalType")
	l.AttachmentID = field.NewString(table, "AttachmentId")
	l.SortCode = field.NewInt64(table, "SortCode")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminaladvertisement) WithContext(ctx context.Context) ILcpterminaladvertisementDo {
	return l.lcpterminaladvertisementDo.WithContext(ctx)
}

func (l lcpterminaladvertisement) TableName() string { return l.lcpterminaladvertisementDo.TableName() }

func (l lcpterminaladvertisement) Alias() string { return l.lcpterminaladvertisementDo.Alias() }

func (l *lcpterminaladvertisement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminaladvertisement) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalType"] = l.TerminalType
	l.fieldMap["AttachmentId"] = l.AttachmentID
	l.fieldMap["SortCode"] = l.SortCode
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminaladvertisement) clone(db *gorm.DB) lcpterminaladvertisement {
	l.lcpterminaladvertisementDo.ReplaceDB(db)
	return l
}

type lcpterminaladvertisementDo struct{ gen.DO }

type ILcpterminaladvertisementDo interface {
	gen.SubQuery
	Debug() ILcpterminaladvertisementDo
	WithContext(ctx context.Context) ILcpterminaladvertisementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminaladvertisementDo
	Not(conds ...gen.Condition) ILcpterminaladvertisementDo
	Or(conds ...gen.Condition) ILcpterminaladvertisementDo
	Select(conds ...field.Expr) ILcpterminaladvertisementDo
	Where(conds ...gen.Condition) ILcpterminaladvertisementDo
	Order(conds ...field.Expr) ILcpterminaladvertisementDo
	Distinct(cols ...field.Expr) ILcpterminaladvertisementDo
	Omit(cols ...field.Expr) ILcpterminaladvertisementDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminaladvertisementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminaladvertisementDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminaladvertisementDo
	Group(cols ...field.Expr) ILcpterminaladvertisementDo
	Having(conds ...gen.Condition) ILcpterminaladvertisementDo
	Limit(limit int) ILcpterminaladvertisementDo
	Offset(offset int) ILcpterminaladvertisementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminaladvertisementDo
	Unscoped() ILcpterminaladvertisementDo
	Create(values ...*model.Lcpterminaladvertisement) error
	CreateInBatches(values []*model.Lcpterminaladvertisement, batchSize int) error
	Save(values ...*model.Lcpterminaladvertisement) error
	First() (*model.Lcpterminaladvertisement, error)
	Take() (*model.Lcpterminaladvertisement, error)
	Last() (*model.Lcpterminaladvertisement, error)
	Find() ([]*model.Lcpterminaladvertisement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminaladvertisement, err error)
	FindInBatches(result *[]*model.Lcpterminaladvertisement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminaladvertisement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminaladvertisementDo
	Assign(attrs ...field.AssignExpr) ILcpterminaladvertisementDo
	Joins(fields ...field.RelationField) ILcpterminaladvertisementDo
	Preload(fields ...field.RelationField) ILcpterminaladvertisementDo
	FirstOrInit() (*model.Lcpterminaladvertisement, error)
	FirstOrCreate() (*model.Lcpterminaladvertisement, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminaladvertisement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminaladvertisementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminaladvertisementDo) Debug() ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminaladvertisementDo) WithContext(ctx context.Context) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminaladvertisementDo) ReadDB() ILcpterminaladvertisementDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminaladvertisementDo) WriteDB() ILcpterminaladvertisementDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminaladvertisementDo) Clauses(conds ...clause.Expression) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminaladvertisementDo) Returning(value interface{}, columns ...string) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminaladvertisementDo) Not(conds ...gen.Condition) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminaladvertisementDo) Or(conds ...gen.Condition) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminaladvertisementDo) Select(conds ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminaladvertisementDo) Where(conds ...gen.Condition) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminaladvertisementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminaladvertisementDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminaladvertisementDo) Order(conds ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminaladvertisementDo) Distinct(cols ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminaladvertisementDo) Omit(cols ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminaladvertisementDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminaladvertisementDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminaladvertisementDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminaladvertisementDo) Group(cols ...field.Expr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminaladvertisementDo) Having(conds ...gen.Condition) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminaladvertisementDo) Limit(limit int) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminaladvertisementDo) Offset(offset int) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminaladvertisementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminaladvertisementDo) Unscoped() ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminaladvertisementDo) Create(values ...*model.Lcpterminaladvertisement) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminaladvertisementDo) CreateInBatches(values []*model.Lcpterminaladvertisement, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminaladvertisementDo) Save(values ...*model.Lcpterminaladvertisement) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminaladvertisementDo) First() (*model.Lcpterminaladvertisement, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaladvertisement), nil
	}
}

func (l lcpterminaladvertisementDo) Take() (*model.Lcpterminaladvertisement, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaladvertisement), nil
	}
}

func (l lcpterminaladvertisementDo) Last() (*model.Lcpterminaladvertisement, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaladvertisement), nil
	}
}

func (l lcpterminaladvertisementDo) Find() ([]*model.Lcpterminaladvertisement, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminaladvertisement), err
}

func (l lcpterminaladvertisementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminaladvertisement, err error) {
	buf := make([]*model.Lcpterminaladvertisement, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminaladvertisementDo) FindInBatches(result *[]*model.Lcpterminaladvertisement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminaladvertisementDo) Attrs(attrs ...field.AssignExpr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminaladvertisementDo) Assign(attrs ...field.AssignExpr) ILcpterminaladvertisementDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminaladvertisementDo) Joins(fields ...field.RelationField) ILcpterminaladvertisementDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminaladvertisementDo) Preload(fields ...field.RelationField) ILcpterminaladvertisementDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminaladvertisementDo) FirstOrInit() (*model.Lcpterminaladvertisement, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaladvertisement), nil
	}
}

func (l lcpterminaladvertisementDo) FirstOrCreate() (*model.Lcpterminaladvertisement, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaladvertisement), nil
	}
}

func (l lcpterminaladvertisementDo) FindByPage(offset int, limit int) (result []*model.Lcpterminaladvertisement, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminaladvertisementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminaladvertisementDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminaladvertisementDo) Delete(models ...*model.Lcpterminaladvertisement) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminaladvertisementDo) withDO(do gen.Dao) *lcpterminaladvertisementDo {
	l.DO = *do.(*gen.DO)
	return l
}
