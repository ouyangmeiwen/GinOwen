// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibpatronitem(db *gorm.DB) libpatronitem {
	_libpatronitem := libpatronitem{}

	_libpatronitem.libpatronitemDo.UseDB(db)
	_libpatronitem.libpatronitemDo.UseModel(&model.Libpatronitem{})

	tableName := _libpatronitem.libpatronitemDo.TableName()
	_libpatronitem.ALL = field.NewAsterisk(tableName)
	_libpatronitem.ID = field.NewString(tableName, "Id")
	_libpatronitem.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpatronitem.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpatronitem.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libpatronitem.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libpatronitem.PatronID = field.NewString(tableName, "PatronId")
	_libpatronitem.PatronName = field.NewString(tableName, "PatronName")
	_libpatronitem.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libpatronitem.ItemID = field.NewString(tableName, "ItemId")
	_libpatronitem.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libpatronitem.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libpatronitem.ItemAuthor = field.NewString(tableName, "ItemAuthor")
	_libpatronitem.ItemType = field.NewInt64(tableName, "ItemType")
	_libpatronitem.PatronItemType = field.NewInt64(tableName, "PatronItemType")
	_libpatronitem.RenewNum = field.NewInt64(tableName, "RenewNum")
	_libpatronitem.OverdueTime = field.NewTime(tableName, "OverdueTime")
	_libpatronitem.TenantID = field.NewInt64(tableName, "TenantId")

	_libpatronitem.fillFieldMap()

	return _libpatronitem
}

type libpatronitem struct {
	libpatronitemDo libpatronitemDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	PatronID             field.String
	PatronName           field.String
	PatronBarcode        field.String
	ItemID               field.String
	ItemBarcode          field.String
	ItemTitle            field.String
	ItemAuthor           field.String
	ItemType             field.Int64
	PatronItemType       field.Int64
	RenewNum             field.Int64
	OverdueTime          field.Time
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libpatronitem) Table(newTableName string) *libpatronitem {
	l.libpatronitemDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpatronitem) As(alias string) *libpatronitem {
	l.libpatronitemDo.DO = *(l.libpatronitemDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpatronitem) updateTableName(table string) *libpatronitem {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronName = field.NewString(table, "PatronName")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemAuthor = field.NewString(table, "ItemAuthor")
	l.ItemType = field.NewInt64(table, "ItemType")
	l.PatronItemType = field.NewInt64(table, "PatronItemType")
	l.RenewNum = field.NewInt64(table, "RenewNum")
	l.OverdueTime = field.NewTime(table, "OverdueTime")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpatronitem) WithContext(ctx context.Context) ILibpatronitemDo {
	return l.libpatronitemDo.WithContext(ctx)
}

func (l libpatronitem) TableName() string { return l.libpatronitemDo.TableName() }

func (l libpatronitem) Alias() string { return l.libpatronitemDo.Alias() }

func (l *libpatronitem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpatronitem) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemAuthor"] = l.ItemAuthor
	l.fieldMap["ItemType"] = l.ItemType
	l.fieldMap["PatronItemType"] = l.PatronItemType
	l.fieldMap["RenewNum"] = l.RenewNum
	l.fieldMap["OverdueTime"] = l.OverdueTime
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpatronitem) clone(db *gorm.DB) libpatronitem {
	l.libpatronitemDo.ReplaceDB(db)
	return l
}

type libpatronitemDo struct{ gen.DO }

type ILibpatronitemDo interface {
	gen.SubQuery
	Debug() ILibpatronitemDo
	WithContext(ctx context.Context) ILibpatronitemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpatronitemDo
	Not(conds ...gen.Condition) ILibpatronitemDo
	Or(conds ...gen.Condition) ILibpatronitemDo
	Select(conds ...field.Expr) ILibpatronitemDo
	Where(conds ...gen.Condition) ILibpatronitemDo
	Order(conds ...field.Expr) ILibpatronitemDo
	Distinct(cols ...field.Expr) ILibpatronitemDo
	Omit(cols ...field.Expr) ILibpatronitemDo
	Join(table schema.Tabler, on ...field.Expr) ILibpatronitemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpatronitemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpatronitemDo
	Group(cols ...field.Expr) ILibpatronitemDo
	Having(conds ...gen.Condition) ILibpatronitemDo
	Limit(limit int) ILibpatronitemDo
	Offset(offset int) ILibpatronitemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpatronitemDo
	Unscoped() ILibpatronitemDo
	Create(values ...*model.Libpatronitem) error
	CreateInBatches(values []*model.Libpatronitem, batchSize int) error
	Save(values ...*model.Libpatronitem) error
	First() (*model.Libpatronitem, error)
	Take() (*model.Libpatronitem, error)
	Last() (*model.Libpatronitem, error)
	Find() ([]*model.Libpatronitem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpatronitem, err error)
	FindInBatches(result *[]*model.Libpatronitem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpatronitem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpatronitemDo
	Assign(attrs ...field.AssignExpr) ILibpatronitemDo
	Joins(fields ...field.RelationField) ILibpatronitemDo
	Preload(fields ...field.RelationField) ILibpatronitemDo
	FirstOrInit() (*model.Libpatronitem, error)
	FirstOrCreate() (*model.Libpatronitem, error)
	FindByPage(offset int, limit int) (result []*model.Libpatronitem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpatronitemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpatronitemDo) Debug() ILibpatronitemDo {
	return l.withDO(l.DO.Debug())
}

func (l libpatronitemDo) WithContext(ctx context.Context) ILibpatronitemDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpatronitemDo) ReadDB() ILibpatronitemDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpatronitemDo) WriteDB() ILibpatronitemDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpatronitemDo) Clauses(conds ...clause.Expression) ILibpatronitemDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpatronitemDo) Returning(value interface{}, columns ...string) ILibpatronitemDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpatronitemDo) Not(conds ...gen.Condition) ILibpatronitemDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpatronitemDo) Or(conds ...gen.Condition) ILibpatronitemDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpatronitemDo) Select(conds ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpatronitemDo) Where(conds ...gen.Condition) ILibpatronitemDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpatronitemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpatronitemDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpatronitemDo) Order(conds ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpatronitemDo) Distinct(cols ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpatronitemDo) Omit(cols ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpatronitemDo) Join(table schema.Tabler, on ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpatronitemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpatronitemDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpatronitemDo) Group(cols ...field.Expr) ILibpatronitemDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpatronitemDo) Having(conds ...gen.Condition) ILibpatronitemDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpatronitemDo) Limit(limit int) ILibpatronitemDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpatronitemDo) Offset(offset int) ILibpatronitemDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpatronitemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpatronitemDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpatronitemDo) Unscoped() ILibpatronitemDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpatronitemDo) Create(values ...*model.Libpatronitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpatronitemDo) CreateInBatches(values []*model.Libpatronitem, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpatronitemDo) Save(values ...*model.Libpatronitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpatronitemDo) First() (*model.Libpatronitem, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronitem), nil
	}
}

func (l libpatronitemDo) Take() (*model.Libpatronitem, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronitem), nil
	}
}

func (l libpatronitemDo) Last() (*model.Libpatronitem, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronitem), nil
	}
}

func (l libpatronitemDo) Find() ([]*model.Libpatronitem, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpatronitem), err
}

func (l libpatronitemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpatronitem, err error) {
	buf := make([]*model.Libpatronitem, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpatronitemDo) FindInBatches(result *[]*model.Libpatronitem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpatronitemDo) Attrs(attrs ...field.AssignExpr) ILibpatronitemDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpatronitemDo) Assign(attrs ...field.AssignExpr) ILibpatronitemDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpatronitemDo) Joins(fields ...field.RelationField) ILibpatronitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpatronitemDo) Preload(fields ...field.RelationField) ILibpatronitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpatronitemDo) FirstOrInit() (*model.Libpatronitem, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronitem), nil
	}
}

func (l libpatronitemDo) FirstOrCreate() (*model.Libpatronitem, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronitem), nil
	}
}

func (l libpatronitemDo) FindByPage(offset int, limit int) (result []*model.Libpatronitem, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpatronitemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpatronitemDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpatronitemDo) Delete(models ...*model.Libpatronitem) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpatronitemDo) withDO(do gen.Dao) *libpatronitemDo {
	l.DO = *do.(*gen.DO)
	return l
}
