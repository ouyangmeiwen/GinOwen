// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysauditsslog(db *gorm.DB) sysauditsslog {
	_sysauditsslog := sysauditsslog{}

	_sysauditsslog.sysauditsslogDo.UseDB(db)
	_sysauditsslog.sysauditsslogDo.UseModel(&model.Sysauditsslog{})

	tableName := _sysauditsslog.sysauditsslogDo.TableName()
	_sysauditsslog.ALL = field.NewAsterisk(tableName)
	_sysauditsslog.ID = field.NewInt64(tableName, "Id")
	_sysauditsslog.BrowserInfo = field.NewString(tableName, "BrowserInfo")
	_sysauditsslog.ClientIPAddress = field.NewString(tableName, "ClientIpAddress")
	_sysauditsslog.ClientName = field.NewString(tableName, "ClientName")
	_sysauditsslog.CustomData = field.NewString(tableName, "CustomData")
	_sysauditsslog.Exception = field.NewString(tableName, "Exception")
	_sysauditsslog.ExecutionDuration = field.NewInt64(tableName, "ExecutionDuration")
	_sysauditsslog.ExecutionTime = field.NewTime(tableName, "ExecutionTime")
	_sysauditsslog.ImpersonatorTenantID = field.NewInt64(tableName, "ImpersonatorTenantId")
	_sysauditsslog.ImpersonatorUserID = field.NewInt64(tableName, "ImpersonatorUserId")
	_sysauditsslog.MethodName = field.NewString(tableName, "MethodName")
	_sysauditsslog.Parameters = field.NewString(tableName, "Parameters")
	_sysauditsslog.ServiceName = field.NewString(tableName, "ServiceName")
	_sysauditsslog.TenantID = field.NewInt64(tableName, "TenantId")
	_sysauditsslog.UserID = field.NewInt64(tableName, "UserId")
	_sysauditsslog.ReturnValue = field.NewString(tableName, "ReturnValue")

	_sysauditsslog.fillFieldMap()

	return _sysauditsslog
}

type sysauditsslog struct {
	sysauditsslogDo sysauditsslogDo

	ALL                  field.Asterisk
	ID                   field.Int64
	BrowserInfo          field.String
	ClientIPAddress      field.String
	ClientName           field.String
	CustomData           field.String
	Exception            field.String
	ExecutionDuration    field.Int64
	ExecutionTime        field.Time
	ImpersonatorTenantID field.Int64
	ImpersonatorUserID   field.Int64
	MethodName           field.String
	Parameters           field.String
	ServiceName          field.String
	TenantID             field.Int64
	UserID               field.Int64
	ReturnValue          field.String

	fieldMap map[string]field.Expr
}

func (s sysauditsslog) Table(newTableName string) *sysauditsslog {
	s.sysauditsslogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysauditsslog) As(alias string) *sysauditsslog {
	s.sysauditsslogDo.DO = *(s.sysauditsslogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysauditsslog) updateTableName(table string) *sysauditsslog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "Id")
	s.BrowserInfo = field.NewString(table, "BrowserInfo")
	s.ClientIPAddress = field.NewString(table, "ClientIpAddress")
	s.ClientName = field.NewString(table, "ClientName")
	s.CustomData = field.NewString(table, "CustomData")
	s.Exception = field.NewString(table, "Exception")
	s.ExecutionDuration = field.NewInt64(table, "ExecutionDuration")
	s.ExecutionTime = field.NewTime(table, "ExecutionTime")
	s.ImpersonatorTenantID = field.NewInt64(table, "ImpersonatorTenantId")
	s.ImpersonatorUserID = field.NewInt64(table, "ImpersonatorUserId")
	s.MethodName = field.NewString(table, "MethodName")
	s.Parameters = field.NewString(table, "Parameters")
	s.ServiceName = field.NewString(table, "ServiceName")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.UserID = field.NewInt64(table, "UserId")
	s.ReturnValue = field.NewString(table, "ReturnValue")

	s.fillFieldMap()

	return s
}

func (s *sysauditsslog) WithContext(ctx context.Context) ISysauditsslogDo {
	return s.sysauditsslogDo.WithContext(ctx)
}

func (s sysauditsslog) TableName() string { return s.sysauditsslogDo.TableName() }

func (s sysauditsslog) Alias() string { return s.sysauditsslogDo.Alias() }

func (s *sysauditsslog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysauditsslog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["BrowserInfo"] = s.BrowserInfo
	s.fieldMap["ClientIpAddress"] = s.ClientIPAddress
	s.fieldMap["ClientName"] = s.ClientName
	s.fieldMap["CustomData"] = s.CustomData
	s.fieldMap["Exception"] = s.Exception
	s.fieldMap["ExecutionDuration"] = s.ExecutionDuration
	s.fieldMap["ExecutionTime"] = s.ExecutionTime
	s.fieldMap["ImpersonatorTenantId"] = s.ImpersonatorTenantID
	s.fieldMap["ImpersonatorUserId"] = s.ImpersonatorUserID
	s.fieldMap["MethodName"] = s.MethodName
	s.fieldMap["Parameters"] = s.Parameters
	s.fieldMap["ServiceName"] = s.ServiceName
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["ReturnValue"] = s.ReturnValue
}

func (s sysauditsslog) clone(db *gorm.DB) sysauditsslog {
	s.sysauditsslogDo.ReplaceDB(db)
	return s
}

type sysauditsslogDo struct{ gen.DO }

type ISysauditsslogDo interface {
	gen.SubQuery
	Debug() ISysauditsslogDo
	WithContext(ctx context.Context) ISysauditsslogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysauditsslogDo
	Not(conds ...gen.Condition) ISysauditsslogDo
	Or(conds ...gen.Condition) ISysauditsslogDo
	Select(conds ...field.Expr) ISysauditsslogDo
	Where(conds ...gen.Condition) ISysauditsslogDo
	Order(conds ...field.Expr) ISysauditsslogDo
	Distinct(cols ...field.Expr) ISysauditsslogDo
	Omit(cols ...field.Expr) ISysauditsslogDo
	Join(table schema.Tabler, on ...field.Expr) ISysauditsslogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditsslogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysauditsslogDo
	Group(cols ...field.Expr) ISysauditsslogDo
	Having(conds ...gen.Condition) ISysauditsslogDo
	Limit(limit int) ISysauditsslogDo
	Offset(offset int) ISysauditsslogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditsslogDo
	Unscoped() ISysauditsslogDo
	Create(values ...*model.Sysauditsslog) error
	CreateInBatches(values []*model.Sysauditsslog, batchSize int) error
	Save(values ...*model.Sysauditsslog) error
	First() (*model.Sysauditsslog, error)
	Take() (*model.Sysauditsslog, error)
	Last() (*model.Sysauditsslog, error)
	Find() ([]*model.Sysauditsslog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditsslog, err error)
	FindInBatches(result *[]*model.Sysauditsslog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysauditsslog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysauditsslogDo
	Assign(attrs ...field.AssignExpr) ISysauditsslogDo
	Joins(fields ...field.RelationField) ISysauditsslogDo
	Preload(fields ...field.RelationField) ISysauditsslogDo
	FirstOrInit() (*model.Sysauditsslog, error)
	FirstOrCreate() (*model.Sysauditsslog, error)
	FindByPage(offset int, limit int) (result []*model.Sysauditsslog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysauditsslogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysauditsslogDo) Debug() ISysauditsslogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysauditsslogDo) WithContext(ctx context.Context) ISysauditsslogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysauditsslogDo) ReadDB() ISysauditsslogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysauditsslogDo) WriteDB() ISysauditsslogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysauditsslogDo) Clauses(conds ...clause.Expression) ISysauditsslogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysauditsslogDo) Returning(value interface{}, columns ...string) ISysauditsslogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysauditsslogDo) Not(conds ...gen.Condition) ISysauditsslogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysauditsslogDo) Or(conds ...gen.Condition) ISysauditsslogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysauditsslogDo) Select(conds ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysauditsslogDo) Where(conds ...gen.Condition) ISysauditsslogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysauditsslogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysauditsslogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysauditsslogDo) Order(conds ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysauditsslogDo) Distinct(cols ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysauditsslogDo) Omit(cols ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysauditsslogDo) Join(table schema.Tabler, on ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysauditsslogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysauditsslogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysauditsslogDo) Group(cols ...field.Expr) ISysauditsslogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysauditsslogDo) Having(conds ...gen.Condition) ISysauditsslogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysauditsslogDo) Limit(limit int) ISysauditsslogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysauditsslogDo) Offset(offset int) ISysauditsslogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysauditsslogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditsslogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysauditsslogDo) Unscoped() ISysauditsslogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysauditsslogDo) Create(values ...*model.Sysauditsslog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysauditsslogDo) CreateInBatches(values []*model.Sysauditsslog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysauditsslogDo) Save(values ...*model.Sysauditsslog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysauditsslogDo) First() (*model.Sysauditsslog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditsslog), nil
	}
}

func (s sysauditsslogDo) Take() (*model.Sysauditsslog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditsslog), nil
	}
}

func (s sysauditsslogDo) Last() (*model.Sysauditsslog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditsslog), nil
	}
}

func (s sysauditsslogDo) Find() ([]*model.Sysauditsslog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysauditsslog), err
}

func (s sysauditsslogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditsslog, err error) {
	buf := make([]*model.Sysauditsslog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysauditsslogDo) FindInBatches(result *[]*model.Sysauditsslog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysauditsslogDo) Attrs(attrs ...field.AssignExpr) ISysauditsslogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysauditsslogDo) Assign(attrs ...field.AssignExpr) ISysauditsslogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysauditsslogDo) Joins(fields ...field.RelationField) ISysauditsslogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysauditsslogDo) Preload(fields ...field.RelationField) ISysauditsslogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysauditsslogDo) FirstOrInit() (*model.Sysauditsslog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditsslog), nil
	}
}

func (s sysauditsslogDo) FirstOrCreate() (*model.Sysauditsslog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditsslog), nil
	}
}

func (s sysauditsslogDo) FindByPage(offset int, limit int) (result []*model.Sysauditsslog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysauditsslogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysauditsslogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysauditsslogDo) Delete(models ...*model.Sysauditsslog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysauditsslogDo) withDO(do gen.Dao) *sysauditsslogDo {
	s.DO = *do.(*gen.DO)
	return s
}
