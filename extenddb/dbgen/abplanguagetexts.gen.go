// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbplanguagetext(db *gorm.DB) abplanguagetext {
	_abplanguagetext := abplanguagetext{}

	_abplanguagetext.abplanguagetextDo.UseDB(db)
	_abplanguagetext.abplanguagetextDo.UseModel(&model.Abplanguagetext{})

	tableName := _abplanguagetext.abplanguagetextDo.TableName()
	_abplanguagetext.ALL = field.NewAsterisk(tableName)
	_abplanguagetext.ID = field.NewInt64(tableName, "Id")
	_abplanguagetext.CreationTime = field.NewTime(tableName, "CreationTime")
	_abplanguagetext.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abplanguagetext.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abplanguagetext.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abplanguagetext.TenantID = field.NewInt64(tableName, "TenantId")
	_abplanguagetext.LanguageName = field.NewString(tableName, "LanguageName")
	_abplanguagetext.Source = field.NewString(tableName, "Source")
	_abplanguagetext.Key = field.NewString(tableName, "Key")
	_abplanguagetext.Value = field.NewString(tableName, "Value")

	_abplanguagetext.fillFieldMap()

	return _abplanguagetext
}

type abplanguagetext struct {
	abplanguagetextDo abplanguagetextDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	TenantID             field.Int64
	LanguageName         field.String
	Source               field.String
	Key                  field.String
	Value                field.String

	fieldMap map[string]field.Expr
}

func (a abplanguagetext) Table(newTableName string) *abplanguagetext {
	a.abplanguagetextDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abplanguagetext) As(alias string) *abplanguagetext {
	a.abplanguagetextDo.DO = *(a.abplanguagetextDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abplanguagetext) updateTableName(table string) *abplanguagetext {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.LanguageName = field.NewString(table, "LanguageName")
	a.Source = field.NewString(table, "Source")
	a.Key = field.NewString(table, "Key")
	a.Value = field.NewString(table, "Value")

	a.fillFieldMap()

	return a
}

func (a *abplanguagetext) WithContext(ctx context.Context) IAbplanguagetextDo {
	return a.abplanguagetextDo.WithContext(ctx)
}

func (a abplanguagetext) TableName() string { return a.abplanguagetextDo.TableName() }

func (a abplanguagetext) Alias() string { return a.abplanguagetextDo.Alias() }

func (a *abplanguagetext) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abplanguagetext) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["LanguageName"] = a.LanguageName
	a.fieldMap["Source"] = a.Source
	a.fieldMap["Key"] = a.Key
	a.fieldMap["Value"] = a.Value
}

func (a abplanguagetext) clone(db *gorm.DB) abplanguagetext {
	a.abplanguagetextDo.ReplaceDB(db)
	return a
}

type abplanguagetextDo struct{ gen.DO }

type IAbplanguagetextDo interface {
	gen.SubQuery
	Debug() IAbplanguagetextDo
	WithContext(ctx context.Context) IAbplanguagetextDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbplanguagetextDo
	Not(conds ...gen.Condition) IAbplanguagetextDo
	Or(conds ...gen.Condition) IAbplanguagetextDo
	Select(conds ...field.Expr) IAbplanguagetextDo
	Where(conds ...gen.Condition) IAbplanguagetextDo
	Order(conds ...field.Expr) IAbplanguagetextDo
	Distinct(cols ...field.Expr) IAbplanguagetextDo
	Omit(cols ...field.Expr) IAbplanguagetextDo
	Join(table schema.Tabler, on ...field.Expr) IAbplanguagetextDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbplanguagetextDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbplanguagetextDo
	Group(cols ...field.Expr) IAbplanguagetextDo
	Having(conds ...gen.Condition) IAbplanguagetextDo
	Limit(limit int) IAbplanguagetextDo
	Offset(offset int) IAbplanguagetextDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbplanguagetextDo
	Unscoped() IAbplanguagetextDo
	Create(values ...*model.Abplanguagetext) error
	CreateInBatches(values []*model.Abplanguagetext, batchSize int) error
	Save(values ...*model.Abplanguagetext) error
	First() (*model.Abplanguagetext, error)
	Take() (*model.Abplanguagetext, error)
	Last() (*model.Abplanguagetext, error)
	Find() ([]*model.Abplanguagetext, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abplanguagetext, err error)
	FindInBatches(result *[]*model.Abplanguagetext, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abplanguagetext) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbplanguagetextDo
	Assign(attrs ...field.AssignExpr) IAbplanguagetextDo
	Joins(fields ...field.RelationField) IAbplanguagetextDo
	Preload(fields ...field.RelationField) IAbplanguagetextDo
	FirstOrInit() (*model.Abplanguagetext, error)
	FirstOrCreate() (*model.Abplanguagetext, error)
	FindByPage(offset int, limit int) (result []*model.Abplanguagetext, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbplanguagetextDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abplanguagetextDo) Debug() IAbplanguagetextDo {
	return a.withDO(a.DO.Debug())
}

func (a abplanguagetextDo) WithContext(ctx context.Context) IAbplanguagetextDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abplanguagetextDo) ReadDB() IAbplanguagetextDo {
	return a.Clauses(dbresolver.Read)
}

func (a abplanguagetextDo) WriteDB() IAbplanguagetextDo {
	return a.Clauses(dbresolver.Write)
}

func (a abplanguagetextDo) Clauses(conds ...clause.Expression) IAbplanguagetextDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abplanguagetextDo) Returning(value interface{}, columns ...string) IAbplanguagetextDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abplanguagetextDo) Not(conds ...gen.Condition) IAbplanguagetextDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abplanguagetextDo) Or(conds ...gen.Condition) IAbplanguagetextDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abplanguagetextDo) Select(conds ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abplanguagetextDo) Where(conds ...gen.Condition) IAbplanguagetextDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abplanguagetextDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbplanguagetextDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abplanguagetextDo) Order(conds ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abplanguagetextDo) Distinct(cols ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abplanguagetextDo) Omit(cols ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abplanguagetextDo) Join(table schema.Tabler, on ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abplanguagetextDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abplanguagetextDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abplanguagetextDo) Group(cols ...field.Expr) IAbplanguagetextDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abplanguagetextDo) Having(conds ...gen.Condition) IAbplanguagetextDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abplanguagetextDo) Limit(limit int) IAbplanguagetextDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abplanguagetextDo) Offset(offset int) IAbplanguagetextDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abplanguagetextDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbplanguagetextDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abplanguagetextDo) Unscoped() IAbplanguagetextDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abplanguagetextDo) Create(values ...*model.Abplanguagetext) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abplanguagetextDo) CreateInBatches(values []*model.Abplanguagetext, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abplanguagetextDo) Save(values ...*model.Abplanguagetext) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abplanguagetextDo) First() (*model.Abplanguagetext, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguagetext), nil
	}
}

func (a abplanguagetextDo) Take() (*model.Abplanguagetext, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguagetext), nil
	}
}

func (a abplanguagetextDo) Last() (*model.Abplanguagetext, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguagetext), nil
	}
}

func (a abplanguagetextDo) Find() ([]*model.Abplanguagetext, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abplanguagetext), err
}

func (a abplanguagetextDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abplanguagetext, err error) {
	buf := make([]*model.Abplanguagetext, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abplanguagetextDo) FindInBatches(result *[]*model.Abplanguagetext, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abplanguagetextDo) Attrs(attrs ...field.AssignExpr) IAbplanguagetextDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abplanguagetextDo) Assign(attrs ...field.AssignExpr) IAbplanguagetextDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abplanguagetextDo) Joins(fields ...field.RelationField) IAbplanguagetextDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abplanguagetextDo) Preload(fields ...field.RelationField) IAbplanguagetextDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abplanguagetextDo) FirstOrInit() (*model.Abplanguagetext, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguagetext), nil
	}
}

func (a abplanguagetextDo) FirstOrCreate() (*model.Abplanguagetext, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguagetext), nil
	}
}

func (a abplanguagetextDo) FindByPage(offset int, limit int) (result []*model.Abplanguagetext, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abplanguagetextDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abplanguagetextDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abplanguagetextDo) Delete(models ...*model.Abplanguagetext) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abplanguagetextDo) withDO(do gen.Dao) *abplanguagetextDo {
	a.DO = *do.(*gen.DO)
	return a
}
