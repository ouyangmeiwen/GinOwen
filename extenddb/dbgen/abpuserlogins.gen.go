// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpuserlogin(db *gorm.DB) abpuserlogin {
	_abpuserlogin := abpuserlogin{}

	_abpuserlogin.abpuserloginDo.UseDB(db)
	_abpuserlogin.abpuserloginDo.UseModel(&model.Abpuserlogin{})

	tableName := _abpuserlogin.abpuserloginDo.TableName()
	_abpuserlogin.ALL = field.NewAsterisk(tableName)
	_abpuserlogin.ID = field.NewInt64(tableName, "Id")
	_abpuserlogin.TenantID = field.NewInt64(tableName, "TenantId")
	_abpuserlogin.UserID = field.NewInt64(tableName, "UserId")
	_abpuserlogin.LoginProvider = field.NewString(tableName, "LoginProvider")
	_abpuserlogin.ProviderKey = field.NewString(tableName, "ProviderKey")

	_abpuserlogin.fillFieldMap()

	return _abpuserlogin
}

type abpuserlogin struct {
	abpuserloginDo abpuserloginDo

	ALL           field.Asterisk
	ID            field.Int64
	TenantID      field.Int64
	UserID        field.Int64
	LoginProvider field.String
	ProviderKey   field.String

	fieldMap map[string]field.Expr
}

func (a abpuserlogin) Table(newTableName string) *abpuserlogin {
	a.abpuserloginDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpuserlogin) As(alias string) *abpuserlogin {
	a.abpuserloginDo.DO = *(a.abpuserloginDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpuserlogin) updateTableName(table string) *abpuserlogin {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.LoginProvider = field.NewString(table, "LoginProvider")
	a.ProviderKey = field.NewString(table, "ProviderKey")

	a.fillFieldMap()

	return a
}

func (a *abpuserlogin) WithContext(ctx context.Context) IAbpuserloginDo {
	return a.abpuserloginDo.WithContext(ctx)
}

func (a abpuserlogin) TableName() string { return a.abpuserloginDo.TableName() }

func (a abpuserlogin) Alias() string { return a.abpuserloginDo.Alias() }

func (a *abpuserlogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpuserlogin) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["LoginProvider"] = a.LoginProvider
	a.fieldMap["ProviderKey"] = a.ProviderKey
}

func (a abpuserlogin) clone(db *gorm.DB) abpuserlogin {
	a.abpuserloginDo.ReplaceDB(db)
	return a
}

type abpuserloginDo struct{ gen.DO }

type IAbpuserloginDo interface {
	gen.SubQuery
	Debug() IAbpuserloginDo
	WithContext(ctx context.Context) IAbpuserloginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpuserloginDo
	Not(conds ...gen.Condition) IAbpuserloginDo
	Or(conds ...gen.Condition) IAbpuserloginDo
	Select(conds ...field.Expr) IAbpuserloginDo
	Where(conds ...gen.Condition) IAbpuserloginDo
	Order(conds ...field.Expr) IAbpuserloginDo
	Distinct(cols ...field.Expr) IAbpuserloginDo
	Omit(cols ...field.Expr) IAbpuserloginDo
	Join(table schema.Tabler, on ...field.Expr) IAbpuserloginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginDo
	Group(cols ...field.Expr) IAbpuserloginDo
	Having(conds ...gen.Condition) IAbpuserloginDo
	Limit(limit int) IAbpuserloginDo
	Offset(offset int) IAbpuserloginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserloginDo
	Unscoped() IAbpuserloginDo
	Create(values ...*model.Abpuserlogin) error
	CreateInBatches(values []*model.Abpuserlogin, batchSize int) error
	Save(values ...*model.Abpuserlogin) error
	First() (*model.Abpuserlogin, error)
	Take() (*model.Abpuserlogin, error)
	Last() (*model.Abpuserlogin, error)
	Find() ([]*model.Abpuserlogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserlogin, err error)
	FindInBatches(result *[]*model.Abpuserlogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpuserlogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpuserloginDo
	Assign(attrs ...field.AssignExpr) IAbpuserloginDo
	Joins(fields ...field.RelationField) IAbpuserloginDo
	Preload(fields ...field.RelationField) IAbpuserloginDo
	FirstOrInit() (*model.Abpuserlogin, error)
	FirstOrCreate() (*model.Abpuserlogin, error)
	FindByPage(offset int, limit int) (result []*model.Abpuserlogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpuserloginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpuserloginDo) Debug() IAbpuserloginDo {
	return a.withDO(a.DO.Debug())
}

func (a abpuserloginDo) WithContext(ctx context.Context) IAbpuserloginDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpuserloginDo) ReadDB() IAbpuserloginDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpuserloginDo) WriteDB() IAbpuserloginDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpuserloginDo) Clauses(conds ...clause.Expression) IAbpuserloginDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpuserloginDo) Returning(value interface{}, columns ...string) IAbpuserloginDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpuserloginDo) Not(conds ...gen.Condition) IAbpuserloginDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpuserloginDo) Or(conds ...gen.Condition) IAbpuserloginDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpuserloginDo) Select(conds ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpuserloginDo) Where(conds ...gen.Condition) IAbpuserloginDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpuserloginDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpuserloginDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpuserloginDo) Order(conds ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpuserloginDo) Distinct(cols ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpuserloginDo) Omit(cols ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpuserloginDo) Join(table schema.Tabler, on ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpuserloginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpuserloginDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpuserloginDo) Group(cols ...field.Expr) IAbpuserloginDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpuserloginDo) Having(conds ...gen.Condition) IAbpuserloginDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpuserloginDo) Limit(limit int) IAbpuserloginDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpuserloginDo) Offset(offset int) IAbpuserloginDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpuserloginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserloginDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpuserloginDo) Unscoped() IAbpuserloginDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpuserloginDo) Create(values ...*model.Abpuserlogin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpuserloginDo) CreateInBatches(values []*model.Abpuserlogin, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpuserloginDo) Save(values ...*model.Abpuserlogin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpuserloginDo) First() (*model.Abpuserlogin, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserlogin), nil
	}
}

func (a abpuserloginDo) Take() (*model.Abpuserlogin, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserlogin), nil
	}
}

func (a abpuserloginDo) Last() (*model.Abpuserlogin, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserlogin), nil
	}
}

func (a abpuserloginDo) Find() ([]*model.Abpuserlogin, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpuserlogin), err
}

func (a abpuserloginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserlogin, err error) {
	buf := make([]*model.Abpuserlogin, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpuserloginDo) FindInBatches(result *[]*model.Abpuserlogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpuserloginDo) Attrs(attrs ...field.AssignExpr) IAbpuserloginDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpuserloginDo) Assign(attrs ...field.AssignExpr) IAbpuserloginDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpuserloginDo) Joins(fields ...field.RelationField) IAbpuserloginDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpuserloginDo) Preload(fields ...field.RelationField) IAbpuserloginDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpuserloginDo) FirstOrInit() (*model.Abpuserlogin, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserlogin), nil
	}
}

func (a abpuserloginDo) FirstOrCreate() (*model.Abpuserlogin, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserlogin), nil
	}
}

func (a abpuserloginDo) FindByPage(offset int, limit int) (result []*model.Abpuserlogin, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpuserloginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpuserloginDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpuserloginDo) Delete(models ...*model.Abpuserlogin) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpuserloginDo) withDO(do gen.Dao) *abpuserloginDo {
	a.DO = *do.(*gen.DO)
	return a
}
