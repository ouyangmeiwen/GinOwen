// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminal(db *gorm.DB) lcpterminal {
	_lcpterminal := lcpterminal{}

	_lcpterminal.lcpterminalDo.UseDB(db)
	_lcpterminal.lcpterminalDo.UseModel(&model.Lcpterminal{})

	tableName := _lcpterminal.lcpterminalDo.TableName()
	_lcpterminal.ALL = field.NewAsterisk(tableName)
	_lcpterminal.ID = field.NewString(tableName, "Id")
	_lcpterminal.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminal.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminal.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpterminal.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpterminal.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpterminal.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpterminal.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpterminal.TerminalCategory = field.NewString(tableName, "TerminalCategory")
	_lcpterminal.TerminalType = field.NewString(tableName, "TerminalType")
	_lcpterminal.Code = field.NewString(tableName, "Code")
	_lcpterminal.Name = field.NewString(tableName, "Name")
	_lcpterminal.IsEnable = field.NewField(tableName, "IsEnable")
	_lcpterminal.VersionCode = field.NewInt64(tableName, "VersionCode")
	_lcpterminal.VersionName = field.NewString(tableName, "VersionName")
	_lcpterminal.Longitude = field.NewFloat64(tableName, "Longitude")
	_lcpterminal.Latitude = field.NewFloat64(tableName, "Latitude")
	_lcpterminal.Province = field.NewString(tableName, "Province")
	_lcpterminal.City = field.NewString(tableName, "City")
	_lcpterminal.District = field.NewString(tableName, "District")
	_lcpterminal.Street = field.NewString(tableName, "Street")
	_lcpterminal.Address = field.NewString(tableName, "Address")
	_lcpterminal.Mac = field.NewString(tableName, "Mac")
	_lcpterminal.IP = field.NewString(tableName, "Ip")
	_lcpterminal.LocationID = field.NewString(tableName, "LocationId")
	_lcpterminal.LocationName = field.NewString(tableName, "LocationName")
	_lcpterminal.Password = field.NewString(tableName, "Password")
	_lcpterminal.Remark = field.NewString(tableName, "Remark")
	_lcpterminal.OriginType = field.NewInt64(tableName, "OriginType")
	_lcpterminal.TenantID = field.NewInt64(tableName, "TenantId")
	_lcpterminal.MachineCode = field.NewString(tableName, "MachineCode")

	_lcpterminal.fillFieldMap()

	return _lcpterminal
}

type lcpterminal struct {
	lcpterminalDo lcpterminalDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TerminalCategory     field.String
	TerminalType         field.String
	Code                 field.String
	Name                 field.String
	IsEnable             field.Field
	VersionCode          field.Int64
	VersionName          field.String
	Longitude            field.Float64
	Latitude             field.Float64
	Province             field.String
	City                 field.String
	District             field.String
	Street               field.String
	Address              field.String
	Mac                  field.String
	IP                   field.String
	LocationID           field.String
	LocationName         field.String
	Password             field.String
	Remark               field.String
	OriginType           field.Int64
	TenantID             field.Int64
	MachineCode          field.String

	fieldMap map[string]field.Expr
}

func (l lcpterminal) Table(newTableName string) *lcpterminal {
	l.lcpterminalDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminal) As(alias string) *lcpterminal {
	l.lcpterminalDo.DO = *(l.lcpterminalDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminal) updateTableName(table string) *lcpterminal {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TerminalCategory = field.NewString(table, "TerminalCategory")
	l.TerminalType = field.NewString(table, "TerminalType")
	l.Code = field.NewString(table, "Code")
	l.Name = field.NewString(table, "Name")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.VersionCode = field.NewInt64(table, "VersionCode")
	l.VersionName = field.NewString(table, "VersionName")
	l.Longitude = field.NewFloat64(table, "Longitude")
	l.Latitude = field.NewFloat64(table, "Latitude")
	l.Province = field.NewString(table, "Province")
	l.City = field.NewString(table, "City")
	l.District = field.NewString(table, "District")
	l.Street = field.NewString(table, "Street")
	l.Address = field.NewString(table, "Address")
	l.Mac = field.NewString(table, "Mac")
	l.IP = field.NewString(table, "Ip")
	l.LocationID = field.NewString(table, "LocationId")
	l.LocationName = field.NewString(table, "LocationName")
	l.Password = field.NewString(table, "Password")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.MachineCode = field.NewString(table, "MachineCode")

	l.fillFieldMap()

	return l
}

func (l *lcpterminal) WithContext(ctx context.Context) ILcpterminalDo {
	return l.lcpterminalDo.WithContext(ctx)
}

func (l lcpterminal) TableName() string { return l.lcpterminalDo.TableName() }

func (l lcpterminal) Alias() string { return l.lcpterminalDo.Alias() }

func (l *lcpterminal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminal) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 31)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TerminalCategory"] = l.TerminalCategory
	l.fieldMap["TerminalType"] = l.TerminalType
	l.fieldMap["Code"] = l.Code
	l.fieldMap["Name"] = l.Name
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["VersionCode"] = l.VersionCode
	l.fieldMap["VersionName"] = l.VersionName
	l.fieldMap["Longitude"] = l.Longitude
	l.fieldMap["Latitude"] = l.Latitude
	l.fieldMap["Province"] = l.Province
	l.fieldMap["City"] = l.City
	l.fieldMap["District"] = l.District
	l.fieldMap["Street"] = l.Street
	l.fieldMap["Address"] = l.Address
	l.fieldMap["Mac"] = l.Mac
	l.fieldMap["Ip"] = l.IP
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["LocationName"] = l.LocationName
	l.fieldMap["Password"] = l.Password
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["MachineCode"] = l.MachineCode
}

func (l lcpterminal) clone(db *gorm.DB) lcpterminal {
	l.lcpterminalDo.ReplaceDB(db)
	return l
}

type lcpterminalDo struct{ gen.DO }

type ILcpterminalDo interface {
	gen.SubQuery
	Debug() ILcpterminalDo
	WithContext(ctx context.Context) ILcpterminalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminalDo
	Not(conds ...gen.Condition) ILcpterminalDo
	Or(conds ...gen.Condition) ILcpterminalDo
	Select(conds ...field.Expr) ILcpterminalDo
	Where(conds ...gen.Condition) ILcpterminalDo
	Order(conds ...field.Expr) ILcpterminalDo
	Distinct(cols ...field.Expr) ILcpterminalDo
	Omit(cols ...field.Expr) ILcpterminalDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalDo
	Group(cols ...field.Expr) ILcpterminalDo
	Having(conds ...gen.Condition) ILcpterminalDo
	Limit(limit int) ILcpterminalDo
	Offset(offset int) ILcpterminalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalDo
	Unscoped() ILcpterminalDo
	Create(values ...*model.Lcpterminal) error
	CreateInBatches(values []*model.Lcpterminal, batchSize int) error
	Save(values ...*model.Lcpterminal) error
	First() (*model.Lcpterminal, error)
	Take() (*model.Lcpterminal, error)
	Last() (*model.Lcpterminal, error)
	Find() ([]*model.Lcpterminal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminal, err error)
	FindInBatches(result *[]*model.Lcpterminal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminalDo
	Assign(attrs ...field.AssignExpr) ILcpterminalDo
	Joins(fields ...field.RelationField) ILcpterminalDo
	Preload(fields ...field.RelationField) ILcpterminalDo
	FirstOrInit() (*model.Lcpterminal, error)
	FirstOrCreate() (*model.Lcpterminal, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminalDo) Debug() ILcpterminalDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminalDo) WithContext(ctx context.Context) ILcpterminalDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminalDo) ReadDB() ILcpterminalDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminalDo) WriteDB() ILcpterminalDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminalDo) Clauses(conds ...clause.Expression) ILcpterminalDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminalDo) Returning(value interface{}, columns ...string) ILcpterminalDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminalDo) Not(conds ...gen.Condition) ILcpterminalDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminalDo) Or(conds ...gen.Condition) ILcpterminalDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminalDo) Select(conds ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminalDo) Where(conds ...gen.Condition) ILcpterminalDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminalDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminalDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminalDo) Order(conds ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminalDo) Distinct(cols ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminalDo) Omit(cols ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminalDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminalDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminalDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminalDo) Group(cols ...field.Expr) ILcpterminalDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminalDo) Having(conds ...gen.Condition) ILcpterminalDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminalDo) Limit(limit int) ILcpterminalDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminalDo) Offset(offset int) ILcpterminalDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminalDo) Unscoped() ILcpterminalDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminalDo) Create(values ...*model.Lcpterminal) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminalDo) CreateInBatches(values []*model.Lcpterminal, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminalDo) Save(values ...*model.Lcpterminal) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminalDo) First() (*model.Lcpterminal, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminal), nil
	}
}

func (l lcpterminalDo) Take() (*model.Lcpterminal, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminal), nil
	}
}

func (l lcpterminalDo) Last() (*model.Lcpterminal, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminal), nil
	}
}

func (l lcpterminalDo) Find() ([]*model.Lcpterminal, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminal), err
}

func (l lcpterminalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminal, err error) {
	buf := make([]*model.Lcpterminal, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminalDo) FindInBatches(result *[]*model.Lcpterminal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminalDo) Attrs(attrs ...field.AssignExpr) ILcpterminalDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminalDo) Assign(attrs ...field.AssignExpr) ILcpterminalDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminalDo) Joins(fields ...field.RelationField) ILcpterminalDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminalDo) Preload(fields ...field.RelationField) ILcpterminalDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminalDo) FirstOrInit() (*model.Lcpterminal, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminal), nil
	}
}

func (l lcpterminalDo) FirstOrCreate() (*model.Lcpterminal, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminal), nil
	}
}

func (l lcpterminalDo) FindByPage(offset int, limit int) (result []*model.Lcpterminal, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminalDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminalDo) Delete(models ...*model.Lcpterminal) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminalDo) withDO(do gen.Dao) *lcpterminalDo {
	l.DO = *do.(*gen.DO)
	return l
}
