// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysblocklist(db *gorm.DB) sysblocklist {
	_sysblocklist := sysblocklist{}

	_sysblocklist.sysblocklistDo.UseDB(db)
	_sysblocklist.sysblocklistDo.UseModel(&model.Sysblocklist{})

	tableName := _sysblocklist.sysblocklistDo.TableName()
	_sysblocklist.ALL = field.NewAsterisk(tableName)
	_sysblocklist.ID = field.NewString(tableName, "Id")
	_sysblocklist.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysblocklist.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysblocklist.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysblocklist.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysblocklist.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysblocklist.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysblocklist.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysblocklist.Name = field.NewString(tableName, "Name")
	_sysblocklist.IDCard = field.NewString(tableName, "IdCard")
	_sysblocklist.Barcode = field.NewString(tableName, "Barcode")
	_sysblocklist.TenantID = field.NewInt64(tableName, "TenantId")
	_sysblocklist.OverdueTime = field.NewTime(tableName, "OverdueTime")
	_sysblocklist.TerminalCategory = field.NewString(tableName, "TerminalCategory")

	_sysblocklist.fillFieldMap()

	return _sysblocklist
}

type sysblocklist struct {
	sysblocklistDo sysblocklistDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	IDCard               field.String
	Barcode              field.String
	TenantID             field.Int64
	OverdueTime          field.Time
	TerminalCategory     field.String

	fieldMap map[string]field.Expr
}

func (s sysblocklist) Table(newTableName string) *sysblocklist {
	s.sysblocklistDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysblocklist) As(alias string) *sysblocklist {
	s.sysblocklistDo.DO = *(s.sysblocklistDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysblocklist) updateTableName(table string) *sysblocklist {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Name = field.NewString(table, "Name")
	s.IDCard = field.NewString(table, "IdCard")
	s.Barcode = field.NewString(table, "Barcode")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.OverdueTime = field.NewTime(table, "OverdueTime")
	s.TerminalCategory = field.NewString(table, "TerminalCategory")

	s.fillFieldMap()

	return s
}

func (s *sysblocklist) WithContext(ctx context.Context) ISysblocklistDo {
	return s.sysblocklistDo.WithContext(ctx)
}

func (s sysblocklist) TableName() string { return s.sysblocklistDo.TableName() }

func (s sysblocklist) Alias() string { return s.sysblocklistDo.Alias() }

func (s *sysblocklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysblocklist) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Name"] = s.Name
	s.fieldMap["IdCard"] = s.IDCard
	s.fieldMap["Barcode"] = s.Barcode
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["OverdueTime"] = s.OverdueTime
	s.fieldMap["TerminalCategory"] = s.TerminalCategory
}

func (s sysblocklist) clone(db *gorm.DB) sysblocklist {
	s.sysblocklistDo.ReplaceDB(db)
	return s
}

type sysblocklistDo struct{ gen.DO }

type ISysblocklistDo interface {
	gen.SubQuery
	Debug() ISysblocklistDo
	WithContext(ctx context.Context) ISysblocklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysblocklistDo
	Not(conds ...gen.Condition) ISysblocklistDo
	Or(conds ...gen.Condition) ISysblocklistDo
	Select(conds ...field.Expr) ISysblocklistDo
	Where(conds ...gen.Condition) ISysblocklistDo
	Order(conds ...field.Expr) ISysblocklistDo
	Distinct(cols ...field.Expr) ISysblocklistDo
	Omit(cols ...field.Expr) ISysblocklistDo
	Join(table schema.Tabler, on ...field.Expr) ISysblocklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysblocklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysblocklistDo
	Group(cols ...field.Expr) ISysblocklistDo
	Having(conds ...gen.Condition) ISysblocklistDo
	Limit(limit int) ISysblocklistDo
	Offset(offset int) ISysblocklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysblocklistDo
	Unscoped() ISysblocklistDo
	Create(values ...*model.Sysblocklist) error
	CreateInBatches(values []*model.Sysblocklist, batchSize int) error
	Save(values ...*model.Sysblocklist) error
	First() (*model.Sysblocklist, error)
	Take() (*model.Sysblocklist, error)
	Last() (*model.Sysblocklist, error)
	Find() ([]*model.Sysblocklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysblocklist, err error)
	FindInBatches(result *[]*model.Sysblocklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysblocklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysblocklistDo
	Assign(attrs ...field.AssignExpr) ISysblocklistDo
	Joins(fields ...field.RelationField) ISysblocklistDo
	Preload(fields ...field.RelationField) ISysblocklistDo
	FirstOrInit() (*model.Sysblocklist, error)
	FirstOrCreate() (*model.Sysblocklist, error)
	FindByPage(offset int, limit int) (result []*model.Sysblocklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysblocklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysblocklistDo) Debug() ISysblocklistDo {
	return s.withDO(s.DO.Debug())
}

func (s sysblocklistDo) WithContext(ctx context.Context) ISysblocklistDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysblocklistDo) ReadDB() ISysblocklistDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysblocklistDo) WriteDB() ISysblocklistDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysblocklistDo) Clauses(conds ...clause.Expression) ISysblocklistDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysblocklistDo) Returning(value interface{}, columns ...string) ISysblocklistDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysblocklistDo) Not(conds ...gen.Condition) ISysblocklistDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysblocklistDo) Or(conds ...gen.Condition) ISysblocklistDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysblocklistDo) Select(conds ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysblocklistDo) Where(conds ...gen.Condition) ISysblocklistDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysblocklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysblocklistDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysblocklistDo) Order(conds ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysblocklistDo) Distinct(cols ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysblocklistDo) Omit(cols ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysblocklistDo) Join(table schema.Tabler, on ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysblocklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysblocklistDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysblocklistDo) Group(cols ...field.Expr) ISysblocklistDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysblocklistDo) Having(conds ...gen.Condition) ISysblocklistDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysblocklistDo) Limit(limit int) ISysblocklistDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysblocklistDo) Offset(offset int) ISysblocklistDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysblocklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysblocklistDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysblocklistDo) Unscoped() ISysblocklistDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysblocklistDo) Create(values ...*model.Sysblocklist) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysblocklistDo) CreateInBatches(values []*model.Sysblocklist, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysblocklistDo) Save(values ...*model.Sysblocklist) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysblocklistDo) First() (*model.Sysblocklist, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysblocklist), nil
	}
}

func (s sysblocklistDo) Take() (*model.Sysblocklist, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysblocklist), nil
	}
}

func (s sysblocklistDo) Last() (*model.Sysblocklist, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysblocklist), nil
	}
}

func (s sysblocklistDo) Find() ([]*model.Sysblocklist, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysblocklist), err
}

func (s sysblocklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysblocklist, err error) {
	buf := make([]*model.Sysblocklist, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysblocklistDo) FindInBatches(result *[]*model.Sysblocklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysblocklistDo) Attrs(attrs ...field.AssignExpr) ISysblocklistDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysblocklistDo) Assign(attrs ...field.AssignExpr) ISysblocklistDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysblocklistDo) Joins(fields ...field.RelationField) ISysblocklistDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysblocklistDo) Preload(fields ...field.RelationField) ISysblocklistDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysblocklistDo) FirstOrInit() (*model.Sysblocklist, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysblocklist), nil
	}
}

func (s sysblocklistDo) FirstOrCreate() (*model.Sysblocklist, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysblocklist), nil
	}
}

func (s sysblocklistDo) FindByPage(offset int, limit int) (result []*model.Sysblocklist, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysblocklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysblocklistDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysblocklistDo) Delete(models ...*model.Sysblocklist) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysblocklistDo) withDO(do gen.Dao) *sysblocklistDo {
	s.DO = *do.(*gen.DO)
	return s
}
