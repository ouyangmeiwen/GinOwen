// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibjournalinfo(db *gorm.DB) libjournalinfo {
	_libjournalinfo := libjournalinfo{}

	_libjournalinfo.libjournalinfoDo.UseDB(db)
	_libjournalinfo.libjournalinfoDo.UseModel(&model.Libjournalinfo{})

	tableName := _libjournalinfo.libjournalinfoDo.TableName()
	_libjournalinfo.ALL = field.NewAsterisk(tableName)
	_libjournalinfo.ID = field.NewString(tableName, "Id")
	_libjournalinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libjournalinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libjournalinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libjournalinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libjournalinfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libjournalinfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libjournalinfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libjournalinfo.PubYear = field.NewString(tableName, "PubYear")
	_libjournalinfo.PostCode = field.NewString(tableName, "PostCode")
	_libjournalinfo.CN = field.NewString(tableName, "CN")
	_libjournalinfo.ISSN = field.NewString(tableName, "ISSN")
	_libjournalinfo.Title = field.NewString(tableName, "Title")
	_libjournalinfo.Publisher = field.NewString(tableName, "Publisher")
	_libjournalinfo.Language = field.NewString(tableName, "Language")
	_libjournalinfo.JournalType = field.NewInt64(tableName, "JournalType")
	_libjournalinfo.CatalogCode = field.NewString(tableName, "CatalogCode")
	_libjournalinfo.Frequency = field.NewString(tableName, "Frequency")
	_libjournalinfo.UnitPrice = field.NewString(tableName, "UnitPrice")
	_libjournalinfo.AnnualPrice = field.NewString(tableName, "AnnualPrice")
	_libjournalinfo.SubscriptionPrice = field.NewString(tableName, "SubscriptionPrice")
	_libjournalinfo.SubscriptionType = field.NewInt64(tableName, "SubscriptionType")
	_libjournalinfo.SubscriptionNPer = field.NewInt64(tableName, "SubscriptionNPer")
	_libjournalinfo.SubscriptionNum = field.NewInt64(tableName, "SubscriptionNum")
	_libjournalinfo.Tags = field.NewString(tableName, "Tags")
	_libjournalinfo.Barcodes = field.NewString(tableName, "Barcodes")
	_libjournalinfo.Summary = field.NewString(tableName, "Summary")
	_libjournalinfo.Remark = field.NewString(tableName, "Remark")
	_libjournalinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_libjournalinfo.fillFieldMap()

	return _libjournalinfo
}

type libjournalinfo struct {
	libjournalinfoDo libjournalinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	PubYear              field.String
	PostCode             field.String
	CN                   field.String
	ISSN                 field.String
	Title                field.String
	Publisher            field.String
	Language             field.String
	JournalType          field.Int64
	CatalogCode          field.String
	Frequency            field.String
	UnitPrice            field.String
	AnnualPrice          field.String
	SubscriptionPrice    field.String
	SubscriptionType     field.Int64
	SubscriptionNPer     field.Int64
	SubscriptionNum      field.Int64
	Tags                 field.String
	Barcodes             field.String
	Summary              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libjournalinfo) Table(newTableName string) *libjournalinfo {
	l.libjournalinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libjournalinfo) As(alias string) *libjournalinfo {
	l.libjournalinfoDo.DO = *(l.libjournalinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libjournalinfo) updateTableName(table string) *libjournalinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.PubYear = field.NewString(table, "PubYear")
	l.PostCode = field.NewString(table, "PostCode")
	l.CN = field.NewString(table, "CN")
	l.ISSN = field.NewString(table, "ISSN")
	l.Title = field.NewString(table, "Title")
	l.Publisher = field.NewString(table, "Publisher")
	l.Language = field.NewString(table, "Language")
	l.JournalType = field.NewInt64(table, "JournalType")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.Frequency = field.NewString(table, "Frequency")
	l.UnitPrice = field.NewString(table, "UnitPrice")
	l.AnnualPrice = field.NewString(table, "AnnualPrice")
	l.SubscriptionPrice = field.NewString(table, "SubscriptionPrice")
	l.SubscriptionType = field.NewInt64(table, "SubscriptionType")
	l.SubscriptionNPer = field.NewInt64(table, "SubscriptionNPer")
	l.SubscriptionNum = field.NewInt64(table, "SubscriptionNum")
	l.Tags = field.NewString(table, "Tags")
	l.Barcodes = field.NewString(table, "Barcodes")
	l.Summary = field.NewString(table, "Summary")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libjournalinfo) WithContext(ctx context.Context) ILibjournalinfoDo {
	return l.libjournalinfoDo.WithContext(ctx)
}

func (l libjournalinfo) TableName() string { return l.libjournalinfoDo.TableName() }

func (l libjournalinfo) Alias() string { return l.libjournalinfoDo.Alias() }

func (l *libjournalinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libjournalinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 29)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["PubYear"] = l.PubYear
	l.fieldMap["PostCode"] = l.PostCode
	l.fieldMap["CN"] = l.CN
	l.fieldMap["ISSN"] = l.ISSN
	l.fieldMap["Title"] = l.Title
	l.fieldMap["Publisher"] = l.Publisher
	l.fieldMap["Language"] = l.Language
	l.fieldMap["JournalType"] = l.JournalType
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["Frequency"] = l.Frequency
	l.fieldMap["UnitPrice"] = l.UnitPrice
	l.fieldMap["AnnualPrice"] = l.AnnualPrice
	l.fieldMap["SubscriptionPrice"] = l.SubscriptionPrice
	l.fieldMap["SubscriptionType"] = l.SubscriptionType
	l.fieldMap["SubscriptionNPer"] = l.SubscriptionNPer
	l.fieldMap["SubscriptionNum"] = l.SubscriptionNum
	l.fieldMap["Tags"] = l.Tags
	l.fieldMap["Barcodes"] = l.Barcodes
	l.fieldMap["Summary"] = l.Summary
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libjournalinfo) clone(db *gorm.DB) libjournalinfo {
	l.libjournalinfoDo.ReplaceDB(db)
	return l
}

type libjournalinfoDo struct{ gen.DO }

type ILibjournalinfoDo interface {
	gen.SubQuery
	Debug() ILibjournalinfoDo
	WithContext(ctx context.Context) ILibjournalinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibjournalinfoDo
	Not(conds ...gen.Condition) ILibjournalinfoDo
	Or(conds ...gen.Condition) ILibjournalinfoDo
	Select(conds ...field.Expr) ILibjournalinfoDo
	Where(conds ...gen.Condition) ILibjournalinfoDo
	Order(conds ...field.Expr) ILibjournalinfoDo
	Distinct(cols ...field.Expr) ILibjournalinfoDo
	Omit(cols ...field.Expr) ILibjournalinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibjournalinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibjournalinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibjournalinfoDo
	Group(cols ...field.Expr) ILibjournalinfoDo
	Having(conds ...gen.Condition) ILibjournalinfoDo
	Limit(limit int) ILibjournalinfoDo
	Offset(offset int) ILibjournalinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibjournalinfoDo
	Unscoped() ILibjournalinfoDo
	Create(values ...*model.Libjournalinfo) error
	CreateInBatches(values []*model.Libjournalinfo, batchSize int) error
	Save(values ...*model.Libjournalinfo) error
	First() (*model.Libjournalinfo, error)
	Take() (*model.Libjournalinfo, error)
	Last() (*model.Libjournalinfo, error)
	Find() ([]*model.Libjournalinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libjournalinfo, err error)
	FindInBatches(result *[]*model.Libjournalinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libjournalinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibjournalinfoDo
	Assign(attrs ...field.AssignExpr) ILibjournalinfoDo
	Joins(fields ...field.RelationField) ILibjournalinfoDo
	Preload(fields ...field.RelationField) ILibjournalinfoDo
	FirstOrInit() (*model.Libjournalinfo, error)
	FirstOrCreate() (*model.Libjournalinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libjournalinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibjournalinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libjournalinfoDo) Debug() ILibjournalinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libjournalinfoDo) WithContext(ctx context.Context) ILibjournalinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libjournalinfoDo) ReadDB() ILibjournalinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libjournalinfoDo) WriteDB() ILibjournalinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libjournalinfoDo) Clauses(conds ...clause.Expression) ILibjournalinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libjournalinfoDo) Returning(value interface{}, columns ...string) ILibjournalinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libjournalinfoDo) Not(conds ...gen.Condition) ILibjournalinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libjournalinfoDo) Or(conds ...gen.Condition) ILibjournalinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libjournalinfoDo) Select(conds ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libjournalinfoDo) Where(conds ...gen.Condition) ILibjournalinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libjournalinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibjournalinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libjournalinfoDo) Order(conds ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libjournalinfoDo) Distinct(cols ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libjournalinfoDo) Omit(cols ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libjournalinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libjournalinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libjournalinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libjournalinfoDo) Group(cols ...field.Expr) ILibjournalinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libjournalinfoDo) Having(conds ...gen.Condition) ILibjournalinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libjournalinfoDo) Limit(limit int) ILibjournalinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libjournalinfoDo) Offset(offset int) ILibjournalinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libjournalinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibjournalinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libjournalinfoDo) Unscoped() ILibjournalinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libjournalinfoDo) Create(values ...*model.Libjournalinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libjournalinfoDo) CreateInBatches(values []*model.Libjournalinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libjournalinfoDo) Save(values ...*model.Libjournalinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libjournalinfoDo) First() (*model.Libjournalinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libjournalinfo), nil
	}
}

func (l libjournalinfoDo) Take() (*model.Libjournalinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libjournalinfo), nil
	}
}

func (l libjournalinfoDo) Last() (*model.Libjournalinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libjournalinfo), nil
	}
}

func (l libjournalinfoDo) Find() ([]*model.Libjournalinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libjournalinfo), err
}

func (l libjournalinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libjournalinfo, err error) {
	buf := make([]*model.Libjournalinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libjournalinfoDo) FindInBatches(result *[]*model.Libjournalinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libjournalinfoDo) Attrs(attrs ...field.AssignExpr) ILibjournalinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libjournalinfoDo) Assign(attrs ...field.AssignExpr) ILibjournalinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libjournalinfoDo) Joins(fields ...field.RelationField) ILibjournalinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libjournalinfoDo) Preload(fields ...field.RelationField) ILibjournalinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libjournalinfoDo) FirstOrInit() (*model.Libjournalinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libjournalinfo), nil
	}
}

func (l libjournalinfoDo) FirstOrCreate() (*model.Libjournalinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libjournalinfo), nil
	}
}

func (l libjournalinfoDo) FindByPage(offset int, limit int) (result []*model.Libjournalinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libjournalinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libjournalinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libjournalinfoDo) Delete(models ...*model.Libjournalinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libjournalinfoDo) withDO(do gen.Dao) *libjournalinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
