// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newApppickupcode(db *gorm.DB) apppickupcode {
	_apppickupcode := apppickupcode{}

	_apppickupcode.apppickupcodeDo.UseDB(db)
	_apppickupcode.apppickupcodeDo.UseModel(&model.Apppickupcode{})

	tableName := _apppickupcode.apppickupcodeDo.TableName()
	_apppickupcode.ALL = field.NewAsterisk(tableName)
	_apppickupcode.ID = field.NewString(tableName, "Id")
	_apppickupcode.CreationTime = field.NewTime(tableName, "CreationTime")
	_apppickupcode.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_apppickupcode.Code = field.NewString(tableName, "Code")
	_apppickupcode.SerialNo = field.NewString(tableName, "SerialNo")
	_apppickupcode.OverdueTime = field.NewTime(tableName, "OverdueTime")
	_apppickupcode.TenantID = field.NewInt64(tableName, "TenantId")

	_apppickupcode.fillFieldMap()

	return _apppickupcode
}

type apppickupcode struct {
	apppickupcodeDo apppickupcodeDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	Code          field.String
	SerialNo      field.String
	OverdueTime   field.Time
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (a apppickupcode) Table(newTableName string) *apppickupcode {
	a.apppickupcodeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apppickupcode) As(alias string) *apppickupcode {
	a.apppickupcodeDo.DO = *(a.apppickupcodeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apppickupcode) updateTableName(table string) *apppickupcode {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.Code = field.NewString(table, "Code")
	a.SerialNo = field.NewString(table, "SerialNo")
	a.OverdueTime = field.NewTime(table, "OverdueTime")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *apppickupcode) WithContext(ctx context.Context) IApppickupcodeDo {
	return a.apppickupcodeDo.WithContext(ctx)
}

func (a apppickupcode) TableName() string { return a.apppickupcodeDo.TableName() }

func (a apppickupcode) Alias() string { return a.apppickupcodeDo.Alias() }

func (a *apppickupcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apppickupcode) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["Code"] = a.Code
	a.fieldMap["SerialNo"] = a.SerialNo
	a.fieldMap["OverdueTime"] = a.OverdueTime
	a.fieldMap["TenantId"] = a.TenantID
}

func (a apppickupcode) clone(db *gorm.DB) apppickupcode {
	a.apppickupcodeDo.ReplaceDB(db)
	return a
}

type apppickupcodeDo struct{ gen.DO }

type IApppickupcodeDo interface {
	gen.SubQuery
	Debug() IApppickupcodeDo
	WithContext(ctx context.Context) IApppickupcodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApppickupcodeDo
	Not(conds ...gen.Condition) IApppickupcodeDo
	Or(conds ...gen.Condition) IApppickupcodeDo
	Select(conds ...field.Expr) IApppickupcodeDo
	Where(conds ...gen.Condition) IApppickupcodeDo
	Order(conds ...field.Expr) IApppickupcodeDo
	Distinct(cols ...field.Expr) IApppickupcodeDo
	Omit(cols ...field.Expr) IApppickupcodeDo
	Join(table schema.Tabler, on ...field.Expr) IApppickupcodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApppickupcodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApppickupcodeDo
	Group(cols ...field.Expr) IApppickupcodeDo
	Having(conds ...gen.Condition) IApppickupcodeDo
	Limit(limit int) IApppickupcodeDo
	Offset(offset int) IApppickupcodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApppickupcodeDo
	Unscoped() IApppickupcodeDo
	Create(values ...*model.Apppickupcode) error
	CreateInBatches(values []*model.Apppickupcode, batchSize int) error
	Save(values ...*model.Apppickupcode) error
	First() (*model.Apppickupcode, error)
	Take() (*model.Apppickupcode, error)
	Last() (*model.Apppickupcode, error)
	Find() ([]*model.Apppickupcode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apppickupcode, err error)
	FindInBatches(result *[]*model.Apppickupcode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Apppickupcode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApppickupcodeDo
	Assign(attrs ...field.AssignExpr) IApppickupcodeDo
	Joins(fields ...field.RelationField) IApppickupcodeDo
	Preload(fields ...field.RelationField) IApppickupcodeDo
	FirstOrInit() (*model.Apppickupcode, error)
	FirstOrCreate() (*model.Apppickupcode, error)
	FindByPage(offset int, limit int) (result []*model.Apppickupcode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApppickupcodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a apppickupcodeDo) Debug() IApppickupcodeDo {
	return a.withDO(a.DO.Debug())
}

func (a apppickupcodeDo) WithContext(ctx context.Context) IApppickupcodeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apppickupcodeDo) ReadDB() IApppickupcodeDo {
	return a.Clauses(dbresolver.Read)
}

func (a apppickupcodeDo) WriteDB() IApppickupcodeDo {
	return a.Clauses(dbresolver.Write)
}

func (a apppickupcodeDo) Clauses(conds ...clause.Expression) IApppickupcodeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apppickupcodeDo) Returning(value interface{}, columns ...string) IApppickupcodeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apppickupcodeDo) Not(conds ...gen.Condition) IApppickupcodeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apppickupcodeDo) Or(conds ...gen.Condition) IApppickupcodeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apppickupcodeDo) Select(conds ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apppickupcodeDo) Where(conds ...gen.Condition) IApppickupcodeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apppickupcodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IApppickupcodeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a apppickupcodeDo) Order(conds ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apppickupcodeDo) Distinct(cols ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apppickupcodeDo) Omit(cols ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apppickupcodeDo) Join(table schema.Tabler, on ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apppickupcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apppickupcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apppickupcodeDo) Group(cols ...field.Expr) IApppickupcodeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apppickupcodeDo) Having(conds ...gen.Condition) IApppickupcodeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apppickupcodeDo) Limit(limit int) IApppickupcodeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apppickupcodeDo) Offset(offset int) IApppickupcodeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apppickupcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApppickupcodeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apppickupcodeDo) Unscoped() IApppickupcodeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apppickupcodeDo) Create(values ...*model.Apppickupcode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apppickupcodeDo) CreateInBatches(values []*model.Apppickupcode, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apppickupcodeDo) Save(values ...*model.Apppickupcode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apppickupcodeDo) First() (*model.Apppickupcode, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppickupcode), nil
	}
}

func (a apppickupcodeDo) Take() (*model.Apppickupcode, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppickupcode), nil
	}
}

func (a apppickupcodeDo) Last() (*model.Apppickupcode, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppickupcode), nil
	}
}

func (a apppickupcodeDo) Find() ([]*model.Apppickupcode, error) {
	result, err := a.DO.Find()
	return result.([]*model.Apppickupcode), err
}

func (a apppickupcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apppickupcode, err error) {
	buf := make([]*model.Apppickupcode, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apppickupcodeDo) FindInBatches(result *[]*model.Apppickupcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apppickupcodeDo) Attrs(attrs ...field.AssignExpr) IApppickupcodeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apppickupcodeDo) Assign(attrs ...field.AssignExpr) IApppickupcodeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apppickupcodeDo) Joins(fields ...field.RelationField) IApppickupcodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apppickupcodeDo) Preload(fields ...field.RelationField) IApppickupcodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apppickupcodeDo) FirstOrInit() (*model.Apppickupcode, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppickupcode), nil
	}
}

func (a apppickupcodeDo) FirstOrCreate() (*model.Apppickupcode, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppickupcode), nil
	}
}

func (a apppickupcodeDo) FindByPage(offset int, limit int) (result []*model.Apppickupcode, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apppickupcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apppickupcodeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apppickupcodeDo) Delete(models ...*model.Apppickupcode) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apppickupcodeDo) withDO(do gen.Dao) *apppickupcodeDo {
	a.DO = *do.(*gen.DO)
	return a
}
