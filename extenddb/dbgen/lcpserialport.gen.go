// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpserialport(db *gorm.DB) lcpserialport {
	_lcpserialport := lcpserialport{}

	_lcpserialport.lcpserialportDo.UseDB(db)
	_lcpserialport.lcpserialportDo.UseModel(&model.Lcpserialport{})

	tableName := _lcpserialport.lcpserialportDo.TableName()
	_lcpserialport.ALL = field.NewAsterisk(tableName)
	_lcpserialport.ID = field.NewString(tableName, "Id")
	_lcpserialport.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpserialport.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpserialport.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpserialport.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpserialport.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpserialport.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpserialport.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpserialport.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpserialport.PortName = field.NewString(tableName, "PortName")
	_lcpserialport.BaudRate = field.NewInt64(tableName, "BaudRate")
	_lcpserialport.DataBits = field.NewInt64(tableName, "DataBits")
	_lcpserialport.StopBits = field.NewInt64(tableName, "StopBits")
	_lcpserialport.Parity = field.NewInt64(tableName, "Parity")
	_lcpserialport.ReadTimeout = field.NewInt64(tableName, "ReadTimeout")
	_lcpserialport.Remark = field.NewString(tableName, "Remark")
	_lcpserialport.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpserialport.fillFieldMap()

	return _lcpserialport
}

type lcpserialport struct {
	lcpserialportDo lcpserialportDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TerminalID           field.String
	PortName             field.String
	BaudRate             field.Int64
	DataBits             field.Int64
	StopBits             field.Int64
	Parity               field.Int64
	ReadTimeout          field.Int64
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpserialport) Table(newTableName string) *lcpserialport {
	l.lcpserialportDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpserialport) As(alias string) *lcpserialport {
	l.lcpserialportDo.DO = *(l.lcpserialportDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpserialport) updateTableName(table string) *lcpserialport {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.PortName = field.NewString(table, "PortName")
	l.BaudRate = field.NewInt64(table, "BaudRate")
	l.DataBits = field.NewInt64(table, "DataBits")
	l.StopBits = field.NewInt64(table, "StopBits")
	l.Parity = field.NewInt64(table, "Parity")
	l.ReadTimeout = field.NewInt64(table, "ReadTimeout")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpserialport) WithContext(ctx context.Context) ILcpserialportDo {
	return l.lcpserialportDo.WithContext(ctx)
}

func (l lcpserialport) TableName() string { return l.lcpserialportDo.TableName() }

func (l lcpserialport) Alias() string { return l.lcpserialportDo.Alias() }

func (l *lcpserialport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpserialport) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["PortName"] = l.PortName
	l.fieldMap["BaudRate"] = l.BaudRate
	l.fieldMap["DataBits"] = l.DataBits
	l.fieldMap["StopBits"] = l.StopBits
	l.fieldMap["Parity"] = l.Parity
	l.fieldMap["ReadTimeout"] = l.ReadTimeout
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpserialport) clone(db *gorm.DB) lcpserialport {
	l.lcpserialportDo.ReplaceDB(db)
	return l
}

type lcpserialportDo struct{ gen.DO }

type ILcpserialportDo interface {
	gen.SubQuery
	Debug() ILcpserialportDo
	WithContext(ctx context.Context) ILcpserialportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpserialportDo
	Not(conds ...gen.Condition) ILcpserialportDo
	Or(conds ...gen.Condition) ILcpserialportDo
	Select(conds ...field.Expr) ILcpserialportDo
	Where(conds ...gen.Condition) ILcpserialportDo
	Order(conds ...field.Expr) ILcpserialportDo
	Distinct(cols ...field.Expr) ILcpserialportDo
	Omit(cols ...field.Expr) ILcpserialportDo
	Join(table schema.Tabler, on ...field.Expr) ILcpserialportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpserialportDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpserialportDo
	Group(cols ...field.Expr) ILcpserialportDo
	Having(conds ...gen.Condition) ILcpserialportDo
	Limit(limit int) ILcpserialportDo
	Offset(offset int) ILcpserialportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpserialportDo
	Unscoped() ILcpserialportDo
	Create(values ...*model.Lcpserialport) error
	CreateInBatches(values []*model.Lcpserialport, batchSize int) error
	Save(values ...*model.Lcpserialport) error
	First() (*model.Lcpserialport, error)
	Take() (*model.Lcpserialport, error)
	Last() (*model.Lcpserialport, error)
	Find() ([]*model.Lcpserialport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpserialport, err error)
	FindInBatches(result *[]*model.Lcpserialport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpserialport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpserialportDo
	Assign(attrs ...field.AssignExpr) ILcpserialportDo
	Joins(fields ...field.RelationField) ILcpserialportDo
	Preload(fields ...field.RelationField) ILcpserialportDo
	FirstOrInit() (*model.Lcpserialport, error)
	FirstOrCreate() (*model.Lcpserialport, error)
	FindByPage(offset int, limit int) (result []*model.Lcpserialport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpserialportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpserialportDo) Debug() ILcpserialportDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpserialportDo) WithContext(ctx context.Context) ILcpserialportDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpserialportDo) ReadDB() ILcpserialportDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpserialportDo) WriteDB() ILcpserialportDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpserialportDo) Clauses(conds ...clause.Expression) ILcpserialportDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpserialportDo) Returning(value interface{}, columns ...string) ILcpserialportDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpserialportDo) Not(conds ...gen.Condition) ILcpserialportDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpserialportDo) Or(conds ...gen.Condition) ILcpserialportDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpserialportDo) Select(conds ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpserialportDo) Where(conds ...gen.Condition) ILcpserialportDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpserialportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpserialportDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpserialportDo) Order(conds ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpserialportDo) Distinct(cols ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpserialportDo) Omit(cols ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpserialportDo) Join(table schema.Tabler, on ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpserialportDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpserialportDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpserialportDo) Group(cols ...field.Expr) ILcpserialportDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpserialportDo) Having(conds ...gen.Condition) ILcpserialportDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpserialportDo) Limit(limit int) ILcpserialportDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpserialportDo) Offset(offset int) ILcpserialportDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpserialportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpserialportDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpserialportDo) Unscoped() ILcpserialportDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpserialportDo) Create(values ...*model.Lcpserialport) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpserialportDo) CreateInBatches(values []*model.Lcpserialport, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpserialportDo) Save(values ...*model.Lcpserialport) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpserialportDo) First() (*model.Lcpserialport, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialport), nil
	}
}

func (l lcpserialportDo) Take() (*model.Lcpserialport, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialport), nil
	}
}

func (l lcpserialportDo) Last() (*model.Lcpserialport, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialport), nil
	}
}

func (l lcpserialportDo) Find() ([]*model.Lcpserialport, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpserialport), err
}

func (l lcpserialportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpserialport, err error) {
	buf := make([]*model.Lcpserialport, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpserialportDo) FindInBatches(result *[]*model.Lcpserialport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpserialportDo) Attrs(attrs ...field.AssignExpr) ILcpserialportDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpserialportDo) Assign(attrs ...field.AssignExpr) ILcpserialportDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpserialportDo) Joins(fields ...field.RelationField) ILcpserialportDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpserialportDo) Preload(fields ...field.RelationField) ILcpserialportDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpserialportDo) FirstOrInit() (*model.Lcpserialport, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialport), nil
	}
}

func (l lcpserialportDo) FirstOrCreate() (*model.Lcpserialport, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialport), nil
	}
}

func (l lcpserialportDo) FindByPage(offset int, limit int) (result []*model.Lcpserialport, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpserialportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpserialportDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpserialportDo) Delete(models ...*model.Lcpserialport) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpserialportDo) withDO(do gen.Dao) *lcpserialportDo {
	l.DO = *do.(*gen.DO)
	return l
}
