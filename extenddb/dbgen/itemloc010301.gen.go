// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newItemloc010301(db *gorm.DB) itemloc010301 {
	_itemloc010301 := itemloc010301{}

	_itemloc010301.itemloc010301Do.UseDB(db)
	_itemloc010301.itemloc010301Do.UseModel(&model.Itemloc010301{})

	tableName := _itemloc010301.itemloc010301Do.TableName()
	_itemloc010301.ALL = field.NewAsterisk(tableName)
	_itemloc010301.SzBookCaseNo = field.NewString(tableName, "szBookCaseNo")
	_itemloc010301.SzBookID = field.NewString(tableName, "szBookID")
	_itemloc010301.SzName = field.NewString(tableName, "szName")
	_itemloc010301.SzBookIndex = field.NewString(tableName, "szBookIndex")
	_itemloc010301.SzlibCD = field.NewString(tableName, "szlibCD")
	_itemloc010301.SzAuthor = field.NewString(tableName, "szAuthor")
	_itemloc010301.SzPublishName = field.NewString(tableName, "szPublishName")
	_itemloc010301.SzISBN = field.NewString(tableName, "szISBN")
	_itemloc010301.ID = field.NewString(tableName, "Id")

	_itemloc010301.fillFieldMap()

	return _itemloc010301
}

type itemloc010301 struct {
	itemloc010301Do itemloc010301Do

	ALL           field.Asterisk
	SzBookCaseNo  field.String
	SzBookID      field.String
	SzName        field.String
	SzBookIndex   field.String
	SzlibCD       field.String
	SzAuthor      field.String
	SzPublishName field.String
	SzISBN        field.String
	ID            field.String

	fieldMap map[string]field.Expr
}

func (i itemloc010301) Table(newTableName string) *itemloc010301 {
	i.itemloc010301Do.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemloc010301) As(alias string) *itemloc010301 {
	i.itemloc010301Do.DO = *(i.itemloc010301Do.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemloc010301) updateTableName(table string) *itemloc010301 {
	i.ALL = field.NewAsterisk(table)
	i.SzBookCaseNo = field.NewString(table, "szBookCaseNo")
	i.SzBookID = field.NewString(table, "szBookID")
	i.SzName = field.NewString(table, "szName")
	i.SzBookIndex = field.NewString(table, "szBookIndex")
	i.SzlibCD = field.NewString(table, "szlibCD")
	i.SzAuthor = field.NewString(table, "szAuthor")
	i.SzPublishName = field.NewString(table, "szPublishName")
	i.SzISBN = field.NewString(table, "szISBN")
	i.ID = field.NewString(table, "Id")

	i.fillFieldMap()

	return i
}

func (i *itemloc010301) WithContext(ctx context.Context) IItemloc010301Do {
	return i.itemloc010301Do.WithContext(ctx)
}

func (i itemloc010301) TableName() string { return i.itemloc010301Do.TableName() }

func (i itemloc010301) Alias() string { return i.itemloc010301Do.Alias() }

func (i *itemloc010301) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemloc010301) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["szBookCaseNo"] = i.SzBookCaseNo
	i.fieldMap["szBookID"] = i.SzBookID
	i.fieldMap["szName"] = i.SzName
	i.fieldMap["szBookIndex"] = i.SzBookIndex
	i.fieldMap["szlibCD"] = i.SzlibCD
	i.fieldMap["szAuthor"] = i.SzAuthor
	i.fieldMap["szPublishName"] = i.SzPublishName
	i.fieldMap["szISBN"] = i.SzISBN
	i.fieldMap["Id"] = i.ID
}

func (i itemloc010301) clone(db *gorm.DB) itemloc010301 {
	i.itemloc010301Do.ReplaceDB(db)
	return i
}

type itemloc010301Do struct{ gen.DO }

type IItemloc010301Do interface {
	gen.SubQuery
	Debug() IItemloc010301Do
	WithContext(ctx context.Context) IItemloc010301Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItemloc010301Do
	Not(conds ...gen.Condition) IItemloc010301Do
	Or(conds ...gen.Condition) IItemloc010301Do
	Select(conds ...field.Expr) IItemloc010301Do
	Where(conds ...gen.Condition) IItemloc010301Do
	Order(conds ...field.Expr) IItemloc010301Do
	Distinct(cols ...field.Expr) IItemloc010301Do
	Omit(cols ...field.Expr) IItemloc010301Do
	Join(table schema.Tabler, on ...field.Expr) IItemloc010301Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IItemloc010301Do
	RightJoin(table schema.Tabler, on ...field.Expr) IItemloc010301Do
	Group(cols ...field.Expr) IItemloc010301Do
	Having(conds ...gen.Condition) IItemloc010301Do
	Limit(limit int) IItemloc010301Do
	Offset(offset int) IItemloc010301Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItemloc010301Do
	Unscoped() IItemloc010301Do
	Create(values ...*model.Itemloc010301) error
	CreateInBatches(values []*model.Itemloc010301, batchSize int) error
	Save(values ...*model.Itemloc010301) error
	First() (*model.Itemloc010301, error)
	Take() (*model.Itemloc010301, error)
	Last() (*model.Itemloc010301, error)
	Find() ([]*model.Itemloc010301, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Itemloc010301, err error)
	FindInBatches(result *[]*model.Itemloc010301, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Itemloc010301) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItemloc010301Do
	Assign(attrs ...field.AssignExpr) IItemloc010301Do
	Joins(fields ...field.RelationField) IItemloc010301Do
	Preload(fields ...field.RelationField) IItemloc010301Do
	FirstOrInit() (*model.Itemloc010301, error)
	FirstOrCreate() (*model.Itemloc010301, error)
	FindByPage(offset int, limit int) (result []*model.Itemloc010301, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItemloc010301Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itemloc010301Do) Debug() IItemloc010301Do {
	return i.withDO(i.DO.Debug())
}

func (i itemloc010301Do) WithContext(ctx context.Context) IItemloc010301Do {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemloc010301Do) ReadDB() IItemloc010301Do {
	return i.Clauses(dbresolver.Read)
}

func (i itemloc010301Do) WriteDB() IItemloc010301Do {
	return i.Clauses(dbresolver.Write)
}

func (i itemloc010301Do) Clauses(conds ...clause.Expression) IItemloc010301Do {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemloc010301Do) Returning(value interface{}, columns ...string) IItemloc010301Do {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemloc010301Do) Not(conds ...gen.Condition) IItemloc010301Do {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemloc010301Do) Or(conds ...gen.Condition) IItemloc010301Do {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemloc010301Do) Select(conds ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemloc010301Do) Where(conds ...gen.Condition) IItemloc010301Do {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemloc010301Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IItemloc010301Do {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i itemloc010301Do) Order(conds ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemloc010301Do) Distinct(cols ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemloc010301Do) Omit(cols ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemloc010301Do) Join(table schema.Tabler, on ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemloc010301Do) LeftJoin(table schema.Tabler, on ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemloc010301Do) RightJoin(table schema.Tabler, on ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemloc010301Do) Group(cols ...field.Expr) IItemloc010301Do {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemloc010301Do) Having(conds ...gen.Condition) IItemloc010301Do {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemloc010301Do) Limit(limit int) IItemloc010301Do {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemloc010301Do) Offset(offset int) IItemloc010301Do {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemloc010301Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IItemloc010301Do {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemloc010301Do) Unscoped() IItemloc010301Do {
	return i.withDO(i.DO.Unscoped())
}

func (i itemloc010301Do) Create(values ...*model.Itemloc010301) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemloc010301Do) CreateInBatches(values []*model.Itemloc010301, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemloc010301Do) Save(values ...*model.Itemloc010301) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemloc010301Do) First() (*model.Itemloc010301, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Itemloc010301), nil
	}
}

func (i itemloc010301Do) Take() (*model.Itemloc010301, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Itemloc010301), nil
	}
}

func (i itemloc010301Do) Last() (*model.Itemloc010301, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Itemloc010301), nil
	}
}

func (i itemloc010301Do) Find() ([]*model.Itemloc010301, error) {
	result, err := i.DO.Find()
	return result.([]*model.Itemloc010301), err
}

func (i itemloc010301Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Itemloc010301, err error) {
	buf := make([]*model.Itemloc010301, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemloc010301Do) FindInBatches(result *[]*model.Itemloc010301, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemloc010301Do) Attrs(attrs ...field.AssignExpr) IItemloc010301Do {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemloc010301Do) Assign(attrs ...field.AssignExpr) IItemloc010301Do {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemloc010301Do) Joins(fields ...field.RelationField) IItemloc010301Do {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemloc010301Do) Preload(fields ...field.RelationField) IItemloc010301Do {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemloc010301Do) FirstOrInit() (*model.Itemloc010301, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Itemloc010301), nil
	}
}

func (i itemloc010301Do) FirstOrCreate() (*model.Itemloc010301, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Itemloc010301), nil
	}
}

func (i itemloc010301Do) FindByPage(offset int, limit int) (result []*model.Itemloc010301, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemloc010301Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemloc010301Do) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemloc010301Do) Delete(models ...*model.Itemloc010301) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemloc010301Do) withDO(do gen.Dao) *itemloc010301Do {
	i.DO = *do.(*gen.DO)
	return i
}
