// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibiteminventoryinfo(db *gorm.DB) libiteminventoryinfo {
	_libiteminventoryinfo := libiteminventoryinfo{}

	_libiteminventoryinfo.libiteminventoryinfoDo.UseDB(db)
	_libiteminventoryinfo.libiteminventoryinfoDo.UseModel(&model.Libiteminventoryinfo{})

	tableName := _libiteminventoryinfo.libiteminventoryinfoDo.TableName()
	_libiteminventoryinfo.ALL = field.NewAsterisk(tableName)
	_libiteminventoryinfo.ID = field.NewString(tableName, "Id")
	_libiteminventoryinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libiteminventoryinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libiteminventoryinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libiteminventoryinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libiteminventoryinfo.ItemTid = field.NewString(tableName, "ItemTid")
	_libiteminventoryinfo.ItemEpc = field.NewString(tableName, "ItemEpc")
	_libiteminventoryinfo.LayerID = field.NewString(tableName, "LayerId")
	_libiteminventoryinfo.Antenna = field.NewString(tableName, "Antenna")
	_libiteminventoryinfo.InventoryState = field.NewInt64(tableName, "InventoryState")
	_libiteminventoryinfo.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libiteminventoryinfo.Remark = field.NewString(tableName, "Remark")
	_libiteminventoryinfo.TenantID = field.NewInt64(tableName, "TenantId")
	_libiteminventoryinfo.LayerCode = field.NewString(tableName, "LayerCode")
	_libiteminventoryinfo.ExceptionMsg = field.NewString(tableName, "ExceptionMsg")
	_libiteminventoryinfo.OCRItemAuthor = field.NewString(tableName, "OCRItemAuthor")
	_libiteminventoryinfo.OCRItemCallNo = field.NewString(tableName, "OCRItemCallNo")
	_libiteminventoryinfo.OCRItemISBN = field.NewString(tableName, "OCRItemISBN")
	_libiteminventoryinfo.OCRItemPublisher = field.NewString(tableName, "OCRItemPublisher")
	_libiteminventoryinfo.OCRItemTitle = field.NewString(tableName, "OCRItemTitle")
	_libiteminventoryinfo.OriginType = field.NewInt64(tableName, "OriginType")
	_libiteminventoryinfo.LayerName = field.NewString(tableName, "LayerName")
	_libiteminventoryinfo.LocLayerCode = field.NewString(tableName, "LocLayerCode")
	_libiteminventoryinfo.LocLayerID = field.NewString(tableName, "LocLayerId")
	_libiteminventoryinfo.LocLayerName = field.NewString(tableName, "LocLayerName")
	_libiteminventoryinfo.OffShelfTime = field.NewTime(tableName, "OffShelfTime")

	_libiteminventoryinfo.fillFieldMap()

	return _libiteminventoryinfo
}

type libiteminventoryinfo struct {
	libiteminventoryinfoDo libiteminventoryinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	ItemTid              field.String
	ItemEpc              field.String
	LayerID              field.String
	Antenna              field.String
	InventoryState       field.Int64
	ItemBarcode          field.String
	Remark               field.String
	TenantID             field.Int64
	LayerCode            field.String
	ExceptionMsg         field.String
	OCRItemAuthor        field.String
	OCRItemCallNo        field.String
	OCRItemISBN          field.String
	OCRItemPublisher     field.String
	OCRItemTitle         field.String
	OriginType           field.Int64
	LayerName            field.String
	LocLayerCode         field.String
	LocLayerID           field.String
	LocLayerName         field.String
	OffShelfTime         field.Time

	fieldMap map[string]field.Expr
}

func (l libiteminventoryinfo) Table(newTableName string) *libiteminventoryinfo {
	l.libiteminventoryinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libiteminventoryinfo) As(alias string) *libiteminventoryinfo {
	l.libiteminventoryinfoDo.DO = *(l.libiteminventoryinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libiteminventoryinfo) updateTableName(table string) *libiteminventoryinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.ItemTid = field.NewString(table, "ItemTid")
	l.ItemEpc = field.NewString(table, "ItemEpc")
	l.LayerID = field.NewString(table, "LayerId")
	l.Antenna = field.NewString(table, "Antenna")
	l.InventoryState = field.NewInt64(table, "InventoryState")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.LayerCode = field.NewString(table, "LayerCode")
	l.ExceptionMsg = field.NewString(table, "ExceptionMsg")
	l.OCRItemAuthor = field.NewString(table, "OCRItemAuthor")
	l.OCRItemCallNo = field.NewString(table, "OCRItemCallNo")
	l.OCRItemISBN = field.NewString(table, "OCRItemISBN")
	l.OCRItemPublisher = field.NewString(table, "OCRItemPublisher")
	l.OCRItemTitle = field.NewString(table, "OCRItemTitle")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.LayerName = field.NewString(table, "LayerName")
	l.LocLayerCode = field.NewString(table, "LocLayerCode")
	l.LocLayerID = field.NewString(table, "LocLayerId")
	l.LocLayerName = field.NewString(table, "LocLayerName")
	l.OffShelfTime = field.NewTime(table, "OffShelfTime")

	l.fillFieldMap()

	return l
}

func (l *libiteminventoryinfo) WithContext(ctx context.Context) ILibiteminventoryinfoDo {
	return l.libiteminventoryinfoDo.WithContext(ctx)
}

func (l libiteminventoryinfo) TableName() string { return l.libiteminventoryinfoDo.TableName() }

func (l libiteminventoryinfo) Alias() string { return l.libiteminventoryinfoDo.Alias() }

func (l *libiteminventoryinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libiteminventoryinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 26)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["ItemTid"] = l.ItemTid
	l.fieldMap["ItemEpc"] = l.ItemEpc
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["Antenna"] = l.Antenna
	l.fieldMap["InventoryState"] = l.InventoryState
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["LayerCode"] = l.LayerCode
	l.fieldMap["ExceptionMsg"] = l.ExceptionMsg
	l.fieldMap["OCRItemAuthor"] = l.OCRItemAuthor
	l.fieldMap["OCRItemCallNo"] = l.OCRItemCallNo
	l.fieldMap["OCRItemISBN"] = l.OCRItemISBN
	l.fieldMap["OCRItemPublisher"] = l.OCRItemPublisher
	l.fieldMap["OCRItemTitle"] = l.OCRItemTitle
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["LayerName"] = l.LayerName
	l.fieldMap["LocLayerCode"] = l.LocLayerCode
	l.fieldMap["LocLayerId"] = l.LocLayerID
	l.fieldMap["LocLayerName"] = l.LocLayerName
	l.fieldMap["OffShelfTime"] = l.OffShelfTime
}

func (l libiteminventoryinfo) clone(db *gorm.DB) libiteminventoryinfo {
	l.libiteminventoryinfoDo.ReplaceDB(db)
	return l
}

type libiteminventoryinfoDo struct{ gen.DO }

type ILibiteminventoryinfoDo interface {
	gen.SubQuery
	Debug() ILibiteminventoryinfoDo
	WithContext(ctx context.Context) ILibiteminventoryinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibiteminventoryinfoDo
	Not(conds ...gen.Condition) ILibiteminventoryinfoDo
	Or(conds ...gen.Condition) ILibiteminventoryinfoDo
	Select(conds ...field.Expr) ILibiteminventoryinfoDo
	Where(conds ...gen.Condition) ILibiteminventoryinfoDo
	Order(conds ...field.Expr) ILibiteminventoryinfoDo
	Distinct(cols ...field.Expr) ILibiteminventoryinfoDo
	Omit(cols ...field.Expr) ILibiteminventoryinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibiteminventoryinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibiteminventoryinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibiteminventoryinfoDo
	Group(cols ...field.Expr) ILibiteminventoryinfoDo
	Having(conds ...gen.Condition) ILibiteminventoryinfoDo
	Limit(limit int) ILibiteminventoryinfoDo
	Offset(offset int) ILibiteminventoryinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibiteminventoryinfoDo
	Unscoped() ILibiteminventoryinfoDo
	Create(values ...*model.Libiteminventoryinfo) error
	CreateInBatches(values []*model.Libiteminventoryinfo, batchSize int) error
	Save(values ...*model.Libiteminventoryinfo) error
	First() (*model.Libiteminventoryinfo, error)
	Take() (*model.Libiteminventoryinfo, error)
	Last() (*model.Libiteminventoryinfo, error)
	Find() ([]*model.Libiteminventoryinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libiteminventoryinfo, err error)
	FindInBatches(result *[]*model.Libiteminventoryinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libiteminventoryinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibiteminventoryinfoDo
	Assign(attrs ...field.AssignExpr) ILibiteminventoryinfoDo
	Joins(fields ...field.RelationField) ILibiteminventoryinfoDo
	Preload(fields ...field.RelationField) ILibiteminventoryinfoDo
	FirstOrInit() (*model.Libiteminventoryinfo, error)
	FirstOrCreate() (*model.Libiteminventoryinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libiteminventoryinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibiteminventoryinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libiteminventoryinfoDo) Debug() ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libiteminventoryinfoDo) WithContext(ctx context.Context) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libiteminventoryinfoDo) ReadDB() ILibiteminventoryinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libiteminventoryinfoDo) WriteDB() ILibiteminventoryinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libiteminventoryinfoDo) Clauses(conds ...clause.Expression) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libiteminventoryinfoDo) Returning(value interface{}, columns ...string) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libiteminventoryinfoDo) Not(conds ...gen.Condition) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libiteminventoryinfoDo) Or(conds ...gen.Condition) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libiteminventoryinfoDo) Select(conds ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libiteminventoryinfoDo) Where(conds ...gen.Condition) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libiteminventoryinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibiteminventoryinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libiteminventoryinfoDo) Order(conds ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libiteminventoryinfoDo) Distinct(cols ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libiteminventoryinfoDo) Omit(cols ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libiteminventoryinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libiteminventoryinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libiteminventoryinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libiteminventoryinfoDo) Group(cols ...field.Expr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libiteminventoryinfoDo) Having(conds ...gen.Condition) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libiteminventoryinfoDo) Limit(limit int) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libiteminventoryinfoDo) Offset(offset int) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libiteminventoryinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libiteminventoryinfoDo) Unscoped() ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libiteminventoryinfoDo) Create(values ...*model.Libiteminventoryinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libiteminventoryinfoDo) CreateInBatches(values []*model.Libiteminventoryinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libiteminventoryinfoDo) Save(values ...*model.Libiteminventoryinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libiteminventoryinfoDo) First() (*model.Libiteminventoryinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libiteminventoryinfo), nil
	}
}

func (l libiteminventoryinfoDo) Take() (*model.Libiteminventoryinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libiteminventoryinfo), nil
	}
}

func (l libiteminventoryinfoDo) Last() (*model.Libiteminventoryinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libiteminventoryinfo), nil
	}
}

func (l libiteminventoryinfoDo) Find() ([]*model.Libiteminventoryinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libiteminventoryinfo), err
}

func (l libiteminventoryinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libiteminventoryinfo, err error) {
	buf := make([]*model.Libiteminventoryinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libiteminventoryinfoDo) FindInBatches(result *[]*model.Libiteminventoryinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libiteminventoryinfoDo) Attrs(attrs ...field.AssignExpr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libiteminventoryinfoDo) Assign(attrs ...field.AssignExpr) ILibiteminventoryinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libiteminventoryinfoDo) Joins(fields ...field.RelationField) ILibiteminventoryinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libiteminventoryinfoDo) Preload(fields ...field.RelationField) ILibiteminventoryinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libiteminventoryinfoDo) FirstOrInit() (*model.Libiteminventoryinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libiteminventoryinfo), nil
	}
}

func (l libiteminventoryinfoDo) FirstOrCreate() (*model.Libiteminventoryinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libiteminventoryinfo), nil
	}
}

func (l libiteminventoryinfoDo) FindByPage(offset int, limit int) (result []*model.Libiteminventoryinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libiteminventoryinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libiteminventoryinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libiteminventoryinfoDo) Delete(models ...*model.Libiteminventoryinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libiteminventoryinfoDo) withDO(do gen.Dao) *libiteminventoryinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
