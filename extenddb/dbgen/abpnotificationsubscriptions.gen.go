// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpnotificationsubscription(db *gorm.DB) abpnotificationsubscription {
	_abpnotificationsubscription := abpnotificationsubscription{}

	_abpnotificationsubscription.abpnotificationsubscriptionDo.UseDB(db)
	_abpnotificationsubscription.abpnotificationsubscriptionDo.UseModel(&model.Abpnotificationsubscription{})

	tableName := _abpnotificationsubscription.abpnotificationsubscriptionDo.TableName()
	_abpnotificationsubscription.ALL = field.NewAsterisk(tableName)
	_abpnotificationsubscription.ID = field.NewString(tableName, "Id")
	_abpnotificationsubscription.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpnotificationsubscription.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpnotificationsubscription.TenantID = field.NewInt64(tableName, "TenantId")
	_abpnotificationsubscription.UserID = field.NewInt64(tableName, "UserId")
	_abpnotificationsubscription.NotificationName = field.NewString(tableName, "NotificationName")
	_abpnotificationsubscription.EntityTypeName = field.NewString(tableName, "EntityTypeName")
	_abpnotificationsubscription.EntityTypeAssemblyQualifiedName = field.NewString(tableName, "EntityTypeAssemblyQualifiedName")
	_abpnotificationsubscription.EntityID = field.NewString(tableName, "EntityId")

	_abpnotificationsubscription.fillFieldMap()

	return _abpnotificationsubscription
}

type abpnotificationsubscription struct {
	abpnotificationsubscriptionDo abpnotificationsubscriptionDo

	ALL                             field.Asterisk
	ID                              field.String
	CreationTime                    field.Time
	CreatorUserID                   field.Int64
	TenantID                        field.Int64
	UserID                          field.Int64
	NotificationName                field.String
	EntityTypeName                  field.String
	EntityTypeAssemblyQualifiedName field.String
	EntityID                        field.String

	fieldMap map[string]field.Expr
}

func (a abpnotificationsubscription) Table(newTableName string) *abpnotificationsubscription {
	a.abpnotificationsubscriptionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpnotificationsubscription) As(alias string) *abpnotificationsubscription {
	a.abpnotificationsubscriptionDo.DO = *(a.abpnotificationsubscriptionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpnotificationsubscription) updateTableName(table string) *abpnotificationsubscription {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.NotificationName = field.NewString(table, "NotificationName")
	a.EntityTypeName = field.NewString(table, "EntityTypeName")
	a.EntityTypeAssemblyQualifiedName = field.NewString(table, "EntityTypeAssemblyQualifiedName")
	a.EntityID = field.NewString(table, "EntityId")

	a.fillFieldMap()

	return a
}

func (a *abpnotificationsubscription) WithContext(ctx context.Context) IAbpnotificationsubscriptionDo {
	return a.abpnotificationsubscriptionDo.WithContext(ctx)
}

func (a abpnotificationsubscription) TableName() string {
	return a.abpnotificationsubscriptionDo.TableName()
}

func (a abpnotificationsubscription) Alias() string { return a.abpnotificationsubscriptionDo.Alias() }

func (a *abpnotificationsubscription) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpnotificationsubscription) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["NotificationName"] = a.NotificationName
	a.fieldMap["EntityTypeName"] = a.EntityTypeName
	a.fieldMap["EntityTypeAssemblyQualifiedName"] = a.EntityTypeAssemblyQualifiedName
	a.fieldMap["EntityId"] = a.EntityID
}

func (a abpnotificationsubscription) clone(db *gorm.DB) abpnotificationsubscription {
	a.abpnotificationsubscriptionDo.ReplaceDB(db)
	return a
}

type abpnotificationsubscriptionDo struct{ gen.DO }

type IAbpnotificationsubscriptionDo interface {
	gen.SubQuery
	Debug() IAbpnotificationsubscriptionDo
	WithContext(ctx context.Context) IAbpnotificationsubscriptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpnotificationsubscriptionDo
	Not(conds ...gen.Condition) IAbpnotificationsubscriptionDo
	Or(conds ...gen.Condition) IAbpnotificationsubscriptionDo
	Select(conds ...field.Expr) IAbpnotificationsubscriptionDo
	Where(conds ...gen.Condition) IAbpnotificationsubscriptionDo
	Order(conds ...field.Expr) IAbpnotificationsubscriptionDo
	Distinct(cols ...field.Expr) IAbpnotificationsubscriptionDo
	Omit(cols ...field.Expr) IAbpnotificationsubscriptionDo
	Join(table schema.Tabler, on ...field.Expr) IAbpnotificationsubscriptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpnotificationsubscriptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpnotificationsubscriptionDo
	Group(cols ...field.Expr) IAbpnotificationsubscriptionDo
	Having(conds ...gen.Condition) IAbpnotificationsubscriptionDo
	Limit(limit int) IAbpnotificationsubscriptionDo
	Offset(offset int) IAbpnotificationsubscriptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpnotificationsubscriptionDo
	Unscoped() IAbpnotificationsubscriptionDo
	Create(values ...*model.Abpnotificationsubscription) error
	CreateInBatches(values []*model.Abpnotificationsubscription, batchSize int) error
	Save(values ...*model.Abpnotificationsubscription) error
	First() (*model.Abpnotificationsubscription, error)
	Take() (*model.Abpnotificationsubscription, error)
	Last() (*model.Abpnotificationsubscription, error)
	Find() ([]*model.Abpnotificationsubscription, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpnotificationsubscription, err error)
	FindInBatches(result *[]*model.Abpnotificationsubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpnotificationsubscription) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpnotificationsubscriptionDo
	Assign(attrs ...field.AssignExpr) IAbpnotificationsubscriptionDo
	Joins(fields ...field.RelationField) IAbpnotificationsubscriptionDo
	Preload(fields ...field.RelationField) IAbpnotificationsubscriptionDo
	FirstOrInit() (*model.Abpnotificationsubscription, error)
	FirstOrCreate() (*model.Abpnotificationsubscription, error)
	FindByPage(offset int, limit int) (result []*model.Abpnotificationsubscription, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpnotificationsubscriptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpnotificationsubscriptionDo) Debug() IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Debug())
}

func (a abpnotificationsubscriptionDo) WithContext(ctx context.Context) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpnotificationsubscriptionDo) ReadDB() IAbpnotificationsubscriptionDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpnotificationsubscriptionDo) WriteDB() IAbpnotificationsubscriptionDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpnotificationsubscriptionDo) Clauses(conds ...clause.Expression) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpnotificationsubscriptionDo) Returning(value interface{}, columns ...string) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpnotificationsubscriptionDo) Not(conds ...gen.Condition) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpnotificationsubscriptionDo) Or(conds ...gen.Condition) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpnotificationsubscriptionDo) Select(conds ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpnotificationsubscriptionDo) Where(conds ...gen.Condition) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpnotificationsubscriptionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpnotificationsubscriptionDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpnotificationsubscriptionDo) Order(conds ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpnotificationsubscriptionDo) Distinct(cols ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpnotificationsubscriptionDo) Omit(cols ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpnotificationsubscriptionDo) Join(table schema.Tabler, on ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpnotificationsubscriptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpnotificationsubscriptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpnotificationsubscriptionDo) Group(cols ...field.Expr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpnotificationsubscriptionDo) Having(conds ...gen.Condition) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpnotificationsubscriptionDo) Limit(limit int) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpnotificationsubscriptionDo) Offset(offset int) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpnotificationsubscriptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpnotificationsubscriptionDo) Unscoped() IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpnotificationsubscriptionDo) Create(values ...*model.Abpnotificationsubscription) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpnotificationsubscriptionDo) CreateInBatches(values []*model.Abpnotificationsubscription, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpnotificationsubscriptionDo) Save(values ...*model.Abpnotificationsubscription) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpnotificationsubscriptionDo) First() (*model.Abpnotificationsubscription, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpnotificationsubscription), nil
	}
}

func (a abpnotificationsubscriptionDo) Take() (*model.Abpnotificationsubscription, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpnotificationsubscription), nil
	}
}

func (a abpnotificationsubscriptionDo) Last() (*model.Abpnotificationsubscription, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpnotificationsubscription), nil
	}
}

func (a abpnotificationsubscriptionDo) Find() ([]*model.Abpnotificationsubscription, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpnotificationsubscription), err
}

func (a abpnotificationsubscriptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpnotificationsubscription, err error) {
	buf := make([]*model.Abpnotificationsubscription, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpnotificationsubscriptionDo) FindInBatches(result *[]*model.Abpnotificationsubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpnotificationsubscriptionDo) Attrs(attrs ...field.AssignExpr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpnotificationsubscriptionDo) Assign(attrs ...field.AssignExpr) IAbpnotificationsubscriptionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpnotificationsubscriptionDo) Joins(fields ...field.RelationField) IAbpnotificationsubscriptionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpnotificationsubscriptionDo) Preload(fields ...field.RelationField) IAbpnotificationsubscriptionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpnotificationsubscriptionDo) FirstOrInit() (*model.Abpnotificationsubscription, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpnotificationsubscription), nil
	}
}

func (a abpnotificationsubscriptionDo) FirstOrCreate() (*model.Abpnotificationsubscription, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpnotificationsubscription), nil
	}
}

func (a abpnotificationsubscriptionDo) FindByPage(offset int, limit int) (result []*model.Abpnotificationsubscription, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpnotificationsubscriptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpnotificationsubscriptionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpnotificationsubscriptionDo) Delete(models ...*model.Abpnotificationsubscription) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpnotificationsubscriptionDo) withDO(do gen.Dao) *abpnotificationsubscriptionDo {
	a.DO = *do.(*gen.DO)
	return a
}
