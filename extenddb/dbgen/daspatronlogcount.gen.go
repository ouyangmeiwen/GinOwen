// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newDaspatronlogcount(db *gorm.DB) daspatronlogcount {
	_daspatronlogcount := daspatronlogcount{}

	_daspatronlogcount.daspatronlogcountDo.UseDB(db)
	_daspatronlogcount.daspatronlogcountDo.UseModel(&model.Daspatronlogcount{})

	tableName := _daspatronlogcount.daspatronlogcountDo.TableName()
	_daspatronlogcount.ALL = field.NewAsterisk(tableName)
	_daspatronlogcount.ID = field.NewString(tableName, "Id")
	_daspatronlogcount.CreationTime = field.NewTime(tableName, "CreationTime")
	_daspatronlogcount.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_daspatronlogcount.TerminalID = field.NewString(tableName, "TerminalId")
	_daspatronlogcount.TerminalCode = field.NewString(tableName, "TerminalCode")
	_daspatronlogcount.TerminalName = field.NewString(tableName, "TerminalName")
	_daspatronlogcount.StartTime = field.NewTime(tableName, "StartTime")
	_daspatronlogcount.EndTime = field.NewTime(tableName, "EndTime")
	_daspatronlogcount.CardTypeID = field.NewString(tableName, "CardTypeId")
	_daspatronlogcount.CardTypeName = field.NewString(tableName, "CardTypeName")
	_daspatronlogcount.PatronLogType = field.NewInt64(tableName, "PatronLogType")
	_daspatronlogcount.PatronLogMode = field.NewInt64(tableName, "PatronLogMode")
	_daspatronlogcount.Result = field.NewInt64(tableName, "Result")
	_daspatronlogcount.Count = field.NewInt64(tableName, "Count")
	_daspatronlogcount.TenantID = field.NewInt64(tableName, "TenantId")

	_daspatronlogcount.fillFieldMap()

	return _daspatronlogcount
}

type daspatronlogcount struct {
	daspatronlogcountDo daspatronlogcountDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	StartTime     field.Time
	EndTime       field.Time
	CardTypeID    field.String
	CardTypeName  field.String
	PatronLogType field.Int64
	PatronLogMode field.Int64
	Result        field.Int64
	Count         field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (d daspatronlogcount) Table(newTableName string) *daspatronlogcount {
	d.daspatronlogcountDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d daspatronlogcount) As(alias string) *daspatronlogcount {
	d.daspatronlogcountDo.DO = *(d.daspatronlogcountDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *daspatronlogcount) updateTableName(table string) *daspatronlogcount {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.TerminalID = field.NewString(table, "TerminalId")
	d.TerminalCode = field.NewString(table, "TerminalCode")
	d.TerminalName = field.NewString(table, "TerminalName")
	d.StartTime = field.NewTime(table, "StartTime")
	d.EndTime = field.NewTime(table, "EndTime")
	d.CardTypeID = field.NewString(table, "CardTypeId")
	d.CardTypeName = field.NewString(table, "CardTypeName")
	d.PatronLogType = field.NewInt64(table, "PatronLogType")
	d.PatronLogMode = field.NewInt64(table, "PatronLogMode")
	d.Result = field.NewInt64(table, "Result")
	d.Count = field.NewInt64(table, "Count")
	d.TenantID = field.NewInt64(table, "TenantId")

	d.fillFieldMap()

	return d
}

func (d *daspatronlogcount) WithContext(ctx context.Context) IDaspatronlogcountDo {
	return d.daspatronlogcountDo.WithContext(ctx)
}

func (d daspatronlogcount) TableName() string { return d.daspatronlogcountDo.TableName() }

func (d daspatronlogcount) Alias() string { return d.daspatronlogcountDo.Alias() }

func (d *daspatronlogcount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *daspatronlogcount) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["TerminalId"] = d.TerminalID
	d.fieldMap["TerminalCode"] = d.TerminalCode
	d.fieldMap["TerminalName"] = d.TerminalName
	d.fieldMap["StartTime"] = d.StartTime
	d.fieldMap["EndTime"] = d.EndTime
	d.fieldMap["CardTypeId"] = d.CardTypeID
	d.fieldMap["CardTypeName"] = d.CardTypeName
	d.fieldMap["PatronLogType"] = d.PatronLogType
	d.fieldMap["PatronLogMode"] = d.PatronLogMode
	d.fieldMap["Result"] = d.Result
	d.fieldMap["Count"] = d.Count
	d.fieldMap["TenantId"] = d.TenantID
}

func (d daspatronlogcount) clone(db *gorm.DB) daspatronlogcount {
	d.daspatronlogcountDo.ReplaceDB(db)
	return d
}

type daspatronlogcountDo struct{ gen.DO }

type IDaspatronlogcountDo interface {
	gen.SubQuery
	Debug() IDaspatronlogcountDo
	WithContext(ctx context.Context) IDaspatronlogcountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDaspatronlogcountDo
	Not(conds ...gen.Condition) IDaspatronlogcountDo
	Or(conds ...gen.Condition) IDaspatronlogcountDo
	Select(conds ...field.Expr) IDaspatronlogcountDo
	Where(conds ...gen.Condition) IDaspatronlogcountDo
	Order(conds ...field.Expr) IDaspatronlogcountDo
	Distinct(cols ...field.Expr) IDaspatronlogcountDo
	Omit(cols ...field.Expr) IDaspatronlogcountDo
	Join(table schema.Tabler, on ...field.Expr) IDaspatronlogcountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDaspatronlogcountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDaspatronlogcountDo
	Group(cols ...field.Expr) IDaspatronlogcountDo
	Having(conds ...gen.Condition) IDaspatronlogcountDo
	Limit(limit int) IDaspatronlogcountDo
	Offset(offset int) IDaspatronlogcountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDaspatronlogcountDo
	Unscoped() IDaspatronlogcountDo
	Create(values ...*model.Daspatronlogcount) error
	CreateInBatches(values []*model.Daspatronlogcount, batchSize int) error
	Save(values ...*model.Daspatronlogcount) error
	First() (*model.Daspatronlogcount, error)
	Take() (*model.Daspatronlogcount, error)
	Last() (*model.Daspatronlogcount, error)
	Find() ([]*model.Daspatronlogcount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Daspatronlogcount, err error)
	FindInBatches(result *[]*model.Daspatronlogcount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Daspatronlogcount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDaspatronlogcountDo
	Assign(attrs ...field.AssignExpr) IDaspatronlogcountDo
	Joins(fields ...field.RelationField) IDaspatronlogcountDo
	Preload(fields ...field.RelationField) IDaspatronlogcountDo
	FirstOrInit() (*model.Daspatronlogcount, error)
	FirstOrCreate() (*model.Daspatronlogcount, error)
	FindByPage(offset int, limit int) (result []*model.Daspatronlogcount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDaspatronlogcountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d daspatronlogcountDo) Debug() IDaspatronlogcountDo {
	return d.withDO(d.DO.Debug())
}

func (d daspatronlogcountDo) WithContext(ctx context.Context) IDaspatronlogcountDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d daspatronlogcountDo) ReadDB() IDaspatronlogcountDo {
	return d.Clauses(dbresolver.Read)
}

func (d daspatronlogcountDo) WriteDB() IDaspatronlogcountDo {
	return d.Clauses(dbresolver.Write)
}

func (d daspatronlogcountDo) Clauses(conds ...clause.Expression) IDaspatronlogcountDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d daspatronlogcountDo) Returning(value interface{}, columns ...string) IDaspatronlogcountDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d daspatronlogcountDo) Not(conds ...gen.Condition) IDaspatronlogcountDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d daspatronlogcountDo) Or(conds ...gen.Condition) IDaspatronlogcountDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d daspatronlogcountDo) Select(conds ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d daspatronlogcountDo) Where(conds ...gen.Condition) IDaspatronlogcountDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d daspatronlogcountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDaspatronlogcountDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d daspatronlogcountDo) Order(conds ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d daspatronlogcountDo) Distinct(cols ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d daspatronlogcountDo) Omit(cols ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d daspatronlogcountDo) Join(table schema.Tabler, on ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d daspatronlogcountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d daspatronlogcountDo) RightJoin(table schema.Tabler, on ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d daspatronlogcountDo) Group(cols ...field.Expr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d daspatronlogcountDo) Having(conds ...gen.Condition) IDaspatronlogcountDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d daspatronlogcountDo) Limit(limit int) IDaspatronlogcountDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d daspatronlogcountDo) Offset(offset int) IDaspatronlogcountDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d daspatronlogcountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDaspatronlogcountDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d daspatronlogcountDo) Unscoped() IDaspatronlogcountDo {
	return d.withDO(d.DO.Unscoped())
}

func (d daspatronlogcountDo) Create(values ...*model.Daspatronlogcount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d daspatronlogcountDo) CreateInBatches(values []*model.Daspatronlogcount, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d daspatronlogcountDo) Save(values ...*model.Daspatronlogcount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d daspatronlogcountDo) First() (*model.Daspatronlogcount, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daspatronlogcount), nil
	}
}

func (d daspatronlogcountDo) Take() (*model.Daspatronlogcount, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daspatronlogcount), nil
	}
}

func (d daspatronlogcountDo) Last() (*model.Daspatronlogcount, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daspatronlogcount), nil
	}
}

func (d daspatronlogcountDo) Find() ([]*model.Daspatronlogcount, error) {
	result, err := d.DO.Find()
	return result.([]*model.Daspatronlogcount), err
}

func (d daspatronlogcountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Daspatronlogcount, err error) {
	buf := make([]*model.Daspatronlogcount, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d daspatronlogcountDo) FindInBatches(result *[]*model.Daspatronlogcount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d daspatronlogcountDo) Attrs(attrs ...field.AssignExpr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d daspatronlogcountDo) Assign(attrs ...field.AssignExpr) IDaspatronlogcountDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d daspatronlogcountDo) Joins(fields ...field.RelationField) IDaspatronlogcountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d daspatronlogcountDo) Preload(fields ...field.RelationField) IDaspatronlogcountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d daspatronlogcountDo) FirstOrInit() (*model.Daspatronlogcount, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daspatronlogcount), nil
	}
}

func (d daspatronlogcountDo) FirstOrCreate() (*model.Daspatronlogcount, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Daspatronlogcount), nil
	}
}

func (d daspatronlogcountDo) FindByPage(offset int, limit int) (result []*model.Daspatronlogcount, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d daspatronlogcountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d daspatronlogcountDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d daspatronlogcountDo) Delete(models ...*model.Daspatronlogcount) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *daspatronlogcountDo) withDO(do gen.Dao) *daspatronlogcountDo {
	d.DO = *do.(*gen.DO)
	return d
}
