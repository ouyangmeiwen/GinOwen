// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibpatronlog(db *gorm.DB) libpatronlog {
	_libpatronlog := libpatronlog{}

	_libpatronlog.libpatronlogDo.UseDB(db)
	_libpatronlog.libpatronlogDo.UseModel(&model.Libpatronlog{})

	tableName := _libpatronlog.libpatronlogDo.TableName()
	_libpatronlog.ALL = field.NewAsterisk(tableName)
	_libpatronlog.ID = field.NewString(tableName, "Id")
	_libpatronlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpatronlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpatronlog.TerminalID = field.NewString(tableName, "TerminalId")
	_libpatronlog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_libpatronlog.TerminalName = field.NewString(tableName, "TerminalName")
	_libpatronlog.PatronID = field.NewString(tableName, "PatronId")
	_libpatronlog.PatronName = field.NewString(tableName, "PatronName")
	_libpatronlog.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libpatronlog.CardTypeID = field.NewString(tableName, "CardTypeId")
	_libpatronlog.CardTypeName = field.NewString(tableName, "CardTypeName")
	_libpatronlog.PatronLogType = field.NewInt64(tableName, "PatronLogType")
	_libpatronlog.PatronLogMode = field.NewInt64(tableName, "PatronLogMode")
	_libpatronlog.Result = field.NewInt64(tableName, "Result")
	_libpatronlog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_libpatronlog.Remark = field.NewString(tableName, "Remark")
	_libpatronlog.OriginType = field.NewInt64(tableName, "OriginType")
	_libpatronlog.TenantID = field.NewInt64(tableName, "TenantId")

	_libpatronlog.fillFieldMap()

	return _libpatronlog
}

type libpatronlog struct {
	libpatronlogDo libpatronlogDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	PatronID      field.String
	PatronName    field.String
	PatronBarcode field.String
	CardTypeID    field.String
	CardTypeName  field.String
	PatronLogType field.Int64
	PatronLogMode field.Int64
	Result        field.Int64
	ErrorMessage  field.String
	Remark        field.String
	OriginType    field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (l libpatronlog) Table(newTableName string) *libpatronlog {
	l.libpatronlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpatronlog) As(alias string) *libpatronlog {
	l.libpatronlogDo.DO = *(l.libpatronlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpatronlog) updateTableName(table string) *libpatronlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronName = field.NewString(table, "PatronName")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.CardTypeID = field.NewString(table, "CardTypeId")
	l.CardTypeName = field.NewString(table, "CardTypeName")
	l.PatronLogType = field.NewInt64(table, "PatronLogType")
	l.PatronLogMode = field.NewInt64(table, "PatronLogMode")
	l.Result = field.NewInt64(table, "Result")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpatronlog) WithContext(ctx context.Context) ILibpatronlogDo {
	return l.libpatronlogDo.WithContext(ctx)
}

func (l libpatronlog) TableName() string { return l.libpatronlogDo.TableName() }

func (l libpatronlog) Alias() string { return l.libpatronlogDo.Alias() }

func (l *libpatronlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpatronlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 18)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["CardTypeId"] = l.CardTypeID
	l.fieldMap["CardTypeName"] = l.CardTypeName
	l.fieldMap["PatronLogType"] = l.PatronLogType
	l.fieldMap["PatronLogMode"] = l.PatronLogMode
	l.fieldMap["Result"] = l.Result
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpatronlog) clone(db *gorm.DB) libpatronlog {
	l.libpatronlogDo.ReplaceDB(db)
	return l
}

type libpatronlogDo struct{ gen.DO }

type ILibpatronlogDo interface {
	gen.SubQuery
	Debug() ILibpatronlogDo
	WithContext(ctx context.Context) ILibpatronlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpatronlogDo
	Not(conds ...gen.Condition) ILibpatronlogDo
	Or(conds ...gen.Condition) ILibpatronlogDo
	Select(conds ...field.Expr) ILibpatronlogDo
	Where(conds ...gen.Condition) ILibpatronlogDo
	Order(conds ...field.Expr) ILibpatronlogDo
	Distinct(cols ...field.Expr) ILibpatronlogDo
	Omit(cols ...field.Expr) ILibpatronlogDo
	Join(table schema.Tabler, on ...field.Expr) ILibpatronlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpatronlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpatronlogDo
	Group(cols ...field.Expr) ILibpatronlogDo
	Having(conds ...gen.Condition) ILibpatronlogDo
	Limit(limit int) ILibpatronlogDo
	Offset(offset int) ILibpatronlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpatronlogDo
	Unscoped() ILibpatronlogDo
	Create(values ...*model.Libpatronlog) error
	CreateInBatches(values []*model.Libpatronlog, batchSize int) error
	Save(values ...*model.Libpatronlog) error
	First() (*model.Libpatronlog, error)
	Take() (*model.Libpatronlog, error)
	Last() (*model.Libpatronlog, error)
	Find() ([]*model.Libpatronlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpatronlog, err error)
	FindInBatches(result *[]*model.Libpatronlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpatronlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpatronlogDo
	Assign(attrs ...field.AssignExpr) ILibpatronlogDo
	Joins(fields ...field.RelationField) ILibpatronlogDo
	Preload(fields ...field.RelationField) ILibpatronlogDo
	FirstOrInit() (*model.Libpatronlog, error)
	FirstOrCreate() (*model.Libpatronlog, error)
	FindByPage(offset int, limit int) (result []*model.Libpatronlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpatronlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpatronlogDo) Debug() ILibpatronlogDo {
	return l.withDO(l.DO.Debug())
}

func (l libpatronlogDo) WithContext(ctx context.Context) ILibpatronlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpatronlogDo) ReadDB() ILibpatronlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpatronlogDo) WriteDB() ILibpatronlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpatronlogDo) Clauses(conds ...clause.Expression) ILibpatronlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpatronlogDo) Returning(value interface{}, columns ...string) ILibpatronlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpatronlogDo) Not(conds ...gen.Condition) ILibpatronlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpatronlogDo) Or(conds ...gen.Condition) ILibpatronlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpatronlogDo) Select(conds ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpatronlogDo) Where(conds ...gen.Condition) ILibpatronlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpatronlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpatronlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpatronlogDo) Order(conds ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpatronlogDo) Distinct(cols ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpatronlogDo) Omit(cols ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpatronlogDo) Join(table schema.Tabler, on ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpatronlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpatronlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpatronlogDo) Group(cols ...field.Expr) ILibpatronlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpatronlogDo) Having(conds ...gen.Condition) ILibpatronlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpatronlogDo) Limit(limit int) ILibpatronlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpatronlogDo) Offset(offset int) ILibpatronlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpatronlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpatronlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpatronlogDo) Unscoped() ILibpatronlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpatronlogDo) Create(values ...*model.Libpatronlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpatronlogDo) CreateInBatches(values []*model.Libpatronlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpatronlogDo) Save(values ...*model.Libpatronlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpatronlogDo) First() (*model.Libpatronlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronlog), nil
	}
}

func (l libpatronlogDo) Take() (*model.Libpatronlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronlog), nil
	}
}

func (l libpatronlogDo) Last() (*model.Libpatronlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronlog), nil
	}
}

func (l libpatronlogDo) Find() ([]*model.Libpatronlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpatronlog), err
}

func (l libpatronlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpatronlog, err error) {
	buf := make([]*model.Libpatronlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpatronlogDo) FindInBatches(result *[]*model.Libpatronlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpatronlogDo) Attrs(attrs ...field.AssignExpr) ILibpatronlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpatronlogDo) Assign(attrs ...field.AssignExpr) ILibpatronlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpatronlogDo) Joins(fields ...field.RelationField) ILibpatronlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpatronlogDo) Preload(fields ...field.RelationField) ILibpatronlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpatronlogDo) FirstOrInit() (*model.Libpatronlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronlog), nil
	}
}

func (l libpatronlogDo) FirstOrCreate() (*model.Libpatronlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatronlog), nil
	}
}

func (l libpatronlogDo) FindByPage(offset int, limit int) (result []*model.Libpatronlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpatronlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpatronlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpatronlogDo) Delete(models ...*model.Libpatronlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpatronlogDo) withDO(do gen.Dao) *libpatronlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
