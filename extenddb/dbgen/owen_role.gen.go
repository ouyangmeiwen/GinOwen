// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newOwenRole(db *gorm.DB) owenRole {
	_owenRole := owenRole{}

	_owenRole.owenRoleDo.UseDB(db)
	_owenRole.owenRoleDo.UseModel(&model.OwenRole{})

	tableName := _owenRole.owenRoleDo.TableName()
	_owenRole.ALL = field.NewAsterisk(tableName)
	_owenRole.ID = field.NewInt64(tableName, "id")
	_owenRole.Name = field.NewString(tableName, "name")
	_owenRole.Permissions = field.NewString(tableName, "permissions")

	_owenRole.fillFieldMap()

	return _owenRole
}

type owenRole struct {
	owenRoleDo owenRoleDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	Permissions field.String

	fieldMap map[string]field.Expr
}

func (o owenRole) Table(newTableName string) *owenRole {
	o.owenRoleDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o owenRole) As(alias string) *owenRole {
	o.owenRoleDo.DO = *(o.owenRoleDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *owenRole) updateTableName(table string) *owenRole {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Name = field.NewString(table, "name")
	o.Permissions = field.NewString(table, "permissions")

	o.fillFieldMap()

	return o
}

func (o *owenRole) WithContext(ctx context.Context) IOwenRoleDo { return o.owenRoleDo.WithContext(ctx) }

func (o owenRole) TableName() string { return o.owenRoleDo.TableName() }

func (o owenRole) Alias() string { return o.owenRoleDo.Alias() }

func (o *owenRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *owenRole) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["permissions"] = o.Permissions
}

func (o owenRole) clone(db *gorm.DB) owenRole {
	o.owenRoleDo.ReplaceDB(db)
	return o
}

type owenRoleDo struct{ gen.DO }

type IOwenRoleDo interface {
	gen.SubQuery
	Debug() IOwenRoleDo
	WithContext(ctx context.Context) IOwenRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOwenRoleDo
	Not(conds ...gen.Condition) IOwenRoleDo
	Or(conds ...gen.Condition) IOwenRoleDo
	Select(conds ...field.Expr) IOwenRoleDo
	Where(conds ...gen.Condition) IOwenRoleDo
	Order(conds ...field.Expr) IOwenRoleDo
	Distinct(cols ...field.Expr) IOwenRoleDo
	Omit(cols ...field.Expr) IOwenRoleDo
	Join(table schema.Tabler, on ...field.Expr) IOwenRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOwenRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOwenRoleDo
	Group(cols ...field.Expr) IOwenRoleDo
	Having(conds ...gen.Condition) IOwenRoleDo
	Limit(limit int) IOwenRoleDo
	Offset(offset int) IOwenRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenRoleDo
	Unscoped() IOwenRoleDo
	Create(values ...*model.OwenRole) error
	CreateInBatches(values []*model.OwenRole, batchSize int) error
	Save(values ...*model.OwenRole) error
	First() (*model.OwenRole, error)
	Take() (*model.OwenRole, error)
	Last() (*model.OwenRole, error)
	Find() ([]*model.OwenRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenRole, err error)
	FindInBatches(result *[]*model.OwenRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OwenRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOwenRoleDo
	Assign(attrs ...field.AssignExpr) IOwenRoleDo
	Joins(fields ...field.RelationField) IOwenRoleDo
	Preload(fields ...field.RelationField) IOwenRoleDo
	FirstOrInit() (*model.OwenRole, error)
	FirstOrCreate() (*model.OwenRole, error)
	FindByPage(offset int, limit int) (result []*model.OwenRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOwenRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o owenRoleDo) Debug() IOwenRoleDo {
	return o.withDO(o.DO.Debug())
}

func (o owenRoleDo) WithContext(ctx context.Context) IOwenRoleDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o owenRoleDo) ReadDB() IOwenRoleDo {
	return o.Clauses(dbresolver.Read)
}

func (o owenRoleDo) WriteDB() IOwenRoleDo {
	return o.Clauses(dbresolver.Write)
}

func (o owenRoleDo) Clauses(conds ...clause.Expression) IOwenRoleDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o owenRoleDo) Returning(value interface{}, columns ...string) IOwenRoleDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o owenRoleDo) Not(conds ...gen.Condition) IOwenRoleDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o owenRoleDo) Or(conds ...gen.Condition) IOwenRoleDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o owenRoleDo) Select(conds ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o owenRoleDo) Where(conds ...gen.Condition) IOwenRoleDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o owenRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOwenRoleDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o owenRoleDo) Order(conds ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o owenRoleDo) Distinct(cols ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o owenRoleDo) Omit(cols ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o owenRoleDo) Join(table schema.Tabler, on ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o owenRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o owenRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o owenRoleDo) Group(cols ...field.Expr) IOwenRoleDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o owenRoleDo) Having(conds ...gen.Condition) IOwenRoleDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o owenRoleDo) Limit(limit int) IOwenRoleDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o owenRoleDo) Offset(offset int) IOwenRoleDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o owenRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenRoleDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o owenRoleDo) Unscoped() IOwenRoleDo {
	return o.withDO(o.DO.Unscoped())
}

func (o owenRoleDo) Create(values ...*model.OwenRole) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o owenRoleDo) CreateInBatches(values []*model.OwenRole, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o owenRoleDo) Save(values ...*model.OwenRole) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o owenRoleDo) First() (*model.OwenRole, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenRole), nil
	}
}

func (o owenRoleDo) Take() (*model.OwenRole, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenRole), nil
	}
}

func (o owenRoleDo) Last() (*model.OwenRole, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenRole), nil
	}
}

func (o owenRoleDo) Find() ([]*model.OwenRole, error) {
	result, err := o.DO.Find()
	return result.([]*model.OwenRole), err
}

func (o owenRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenRole, err error) {
	buf := make([]*model.OwenRole, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o owenRoleDo) FindInBatches(result *[]*model.OwenRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o owenRoleDo) Attrs(attrs ...field.AssignExpr) IOwenRoleDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o owenRoleDo) Assign(attrs ...field.AssignExpr) IOwenRoleDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o owenRoleDo) Joins(fields ...field.RelationField) IOwenRoleDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o owenRoleDo) Preload(fields ...field.RelationField) IOwenRoleDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o owenRoleDo) FirstOrInit() (*model.OwenRole, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenRole), nil
	}
}

func (o owenRoleDo) FirstOrCreate() (*model.OwenRole, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenRole), nil
	}
}

func (o owenRoleDo) FindByPage(offset int, limit int) (result []*model.OwenRole, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o owenRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o owenRoleDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o owenRoleDo) Delete(models ...*model.OwenRole) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *owenRoleDo) withDO(do gen.Dao) *owenRoleDo {
	o.DO = *do.(*gen.DO)
	return o
}
