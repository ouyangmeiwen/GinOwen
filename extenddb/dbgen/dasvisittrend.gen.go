// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newDasvisittrend(db *gorm.DB) dasvisittrend {
	_dasvisittrend := dasvisittrend{}

	_dasvisittrend.dasvisittrendDo.UseDB(db)
	_dasvisittrend.dasvisittrendDo.UseModel(&model.Dasvisittrend{})

	tableName := _dasvisittrend.dasvisittrendDo.TableName()
	_dasvisittrend.ALL = field.NewAsterisk(tableName)
	_dasvisittrend.ID = field.NewString(tableName, "Id")
	_dasvisittrend.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasvisittrend.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasvisittrend.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_dasvisittrend.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_dasvisittrend.RefDate = field.NewString(tableName, "ref_date")
	_dasvisittrend.SessionCnt = field.NewInt64(tableName, "session_cnt")
	_dasvisittrend.VisitPv = field.NewInt64(tableName, "visit_pv")
	_dasvisittrend.VisitUv = field.NewInt64(tableName, "visit_uv")
	_dasvisittrend.VisitUvNew = field.NewInt64(tableName, "visit_uv_new")
	_dasvisittrend.StayTimeUv = field.NewFloat64(tableName, "stay_time_uv")
	_dasvisittrend.StayTimeSession = field.NewFloat64(tableName, "stay_time_session")
	_dasvisittrend.VisitDepth = field.NewFloat64(tableName, "visit_depth")
	_dasvisittrend.TenantID = field.NewInt64(tableName, "TenantId")
	_dasvisittrend.AppID = field.NewString(tableName, "AppId")

	_dasvisittrend.fillFieldMap()

	return _dasvisittrend
}

type dasvisittrend struct {
	dasvisittrendDo dasvisittrendDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	RefDate              field.String
	SessionCnt           field.Int64
	VisitPv              field.Int64
	VisitUv              field.Int64
	VisitUvNew           field.Int64
	StayTimeUv           field.Float64
	StayTimeSession      field.Float64
	VisitDepth           field.Float64
	TenantID             field.Int64
	AppID                field.String

	fieldMap map[string]field.Expr
}

func (d dasvisittrend) Table(newTableName string) *dasvisittrend {
	d.dasvisittrendDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasvisittrend) As(alias string) *dasvisittrend {
	d.dasvisittrendDo.DO = *(d.dasvisittrendDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasvisittrend) updateTableName(table string) *dasvisittrend {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.LastModificationTime = field.NewTime(table, "LastModificationTime")
	d.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	d.RefDate = field.NewString(table, "ref_date")
	d.SessionCnt = field.NewInt64(table, "session_cnt")
	d.VisitPv = field.NewInt64(table, "visit_pv")
	d.VisitUv = field.NewInt64(table, "visit_uv")
	d.VisitUvNew = field.NewInt64(table, "visit_uv_new")
	d.StayTimeUv = field.NewFloat64(table, "stay_time_uv")
	d.StayTimeSession = field.NewFloat64(table, "stay_time_session")
	d.VisitDepth = field.NewFloat64(table, "visit_depth")
	d.TenantID = field.NewInt64(table, "TenantId")
	d.AppID = field.NewString(table, "AppId")

	d.fillFieldMap()

	return d
}

func (d *dasvisittrend) WithContext(ctx context.Context) IDasvisittrendDo {
	return d.dasvisittrendDo.WithContext(ctx)
}

func (d dasvisittrend) TableName() string { return d.dasvisittrendDo.TableName() }

func (d dasvisittrend) Alias() string { return d.dasvisittrendDo.Alias() }

func (d *dasvisittrend) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasvisittrend) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["LastModificationTime"] = d.LastModificationTime
	d.fieldMap["LastModifierUserId"] = d.LastModifierUserID
	d.fieldMap["ref_date"] = d.RefDate
	d.fieldMap["session_cnt"] = d.SessionCnt
	d.fieldMap["visit_pv"] = d.VisitPv
	d.fieldMap["visit_uv"] = d.VisitUv
	d.fieldMap["visit_uv_new"] = d.VisitUvNew
	d.fieldMap["stay_time_uv"] = d.StayTimeUv
	d.fieldMap["stay_time_session"] = d.StayTimeSession
	d.fieldMap["visit_depth"] = d.VisitDepth
	d.fieldMap["TenantId"] = d.TenantID
	d.fieldMap["AppId"] = d.AppID
}

func (d dasvisittrend) clone(db *gorm.DB) dasvisittrend {
	d.dasvisittrendDo.ReplaceDB(db)
	return d
}

type dasvisittrendDo struct{ gen.DO }

type IDasvisittrendDo interface {
	gen.SubQuery
	Debug() IDasvisittrendDo
	WithContext(ctx context.Context) IDasvisittrendDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasvisittrendDo
	Not(conds ...gen.Condition) IDasvisittrendDo
	Or(conds ...gen.Condition) IDasvisittrendDo
	Select(conds ...field.Expr) IDasvisittrendDo
	Where(conds ...gen.Condition) IDasvisittrendDo
	Order(conds ...field.Expr) IDasvisittrendDo
	Distinct(cols ...field.Expr) IDasvisittrendDo
	Omit(cols ...field.Expr) IDasvisittrendDo
	Join(table schema.Tabler, on ...field.Expr) IDasvisittrendDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasvisittrendDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasvisittrendDo
	Group(cols ...field.Expr) IDasvisittrendDo
	Having(conds ...gen.Condition) IDasvisittrendDo
	Limit(limit int) IDasvisittrendDo
	Offset(offset int) IDasvisittrendDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasvisittrendDo
	Unscoped() IDasvisittrendDo
	Create(values ...*model.Dasvisittrend) error
	CreateInBatches(values []*model.Dasvisittrend, batchSize int) error
	Save(values ...*model.Dasvisittrend) error
	First() (*model.Dasvisittrend, error)
	Take() (*model.Dasvisittrend, error)
	Last() (*model.Dasvisittrend, error)
	Find() ([]*model.Dasvisittrend, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasvisittrend, err error)
	FindInBatches(result *[]*model.Dasvisittrend, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasvisittrend) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasvisittrendDo
	Assign(attrs ...field.AssignExpr) IDasvisittrendDo
	Joins(fields ...field.RelationField) IDasvisittrendDo
	Preload(fields ...field.RelationField) IDasvisittrendDo
	FirstOrInit() (*model.Dasvisittrend, error)
	FirstOrCreate() (*model.Dasvisittrend, error)
	FindByPage(offset int, limit int) (result []*model.Dasvisittrend, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasvisittrendDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasvisittrendDo) Debug() IDasvisittrendDo {
	return d.withDO(d.DO.Debug())
}

func (d dasvisittrendDo) WithContext(ctx context.Context) IDasvisittrendDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasvisittrendDo) ReadDB() IDasvisittrendDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasvisittrendDo) WriteDB() IDasvisittrendDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasvisittrendDo) Clauses(conds ...clause.Expression) IDasvisittrendDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasvisittrendDo) Returning(value interface{}, columns ...string) IDasvisittrendDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasvisittrendDo) Not(conds ...gen.Condition) IDasvisittrendDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasvisittrendDo) Or(conds ...gen.Condition) IDasvisittrendDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasvisittrendDo) Select(conds ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasvisittrendDo) Where(conds ...gen.Condition) IDasvisittrendDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasvisittrendDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasvisittrendDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasvisittrendDo) Order(conds ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasvisittrendDo) Distinct(cols ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasvisittrendDo) Omit(cols ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasvisittrendDo) Join(table schema.Tabler, on ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasvisittrendDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasvisittrendDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasvisittrendDo) Group(cols ...field.Expr) IDasvisittrendDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasvisittrendDo) Having(conds ...gen.Condition) IDasvisittrendDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasvisittrendDo) Limit(limit int) IDasvisittrendDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasvisittrendDo) Offset(offset int) IDasvisittrendDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasvisittrendDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasvisittrendDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasvisittrendDo) Unscoped() IDasvisittrendDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasvisittrendDo) Create(values ...*model.Dasvisittrend) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasvisittrendDo) CreateInBatches(values []*model.Dasvisittrend, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasvisittrendDo) Save(values ...*model.Dasvisittrend) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasvisittrendDo) First() (*model.Dasvisittrend, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisittrend), nil
	}
}

func (d dasvisittrendDo) Take() (*model.Dasvisittrend, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisittrend), nil
	}
}

func (d dasvisittrendDo) Last() (*model.Dasvisittrend, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisittrend), nil
	}
}

func (d dasvisittrendDo) Find() ([]*model.Dasvisittrend, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasvisittrend), err
}

func (d dasvisittrendDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasvisittrend, err error) {
	buf := make([]*model.Dasvisittrend, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasvisittrendDo) FindInBatches(result *[]*model.Dasvisittrend, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasvisittrendDo) Attrs(attrs ...field.AssignExpr) IDasvisittrendDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasvisittrendDo) Assign(attrs ...field.AssignExpr) IDasvisittrendDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasvisittrendDo) Joins(fields ...field.RelationField) IDasvisittrendDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasvisittrendDo) Preload(fields ...field.RelationField) IDasvisittrendDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasvisittrendDo) FirstOrInit() (*model.Dasvisittrend, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisittrend), nil
	}
}

func (d dasvisittrendDo) FirstOrCreate() (*model.Dasvisittrend, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisittrend), nil
	}
}

func (d dasvisittrendDo) FindByPage(offset int, limit int) (result []*model.Dasvisittrend, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasvisittrendDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasvisittrendDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasvisittrendDo) Delete(models ...*model.Dasvisittrend) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasvisittrendDo) withDO(do gen.Dao) *dasvisittrendDo {
	d.DO = *do.(*gen.DO)
	return d
}
