// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbplanguage(db *gorm.DB) abplanguage {
	_abplanguage := abplanguage{}

	_abplanguage.abplanguageDo.UseDB(db)
	_abplanguage.abplanguageDo.UseModel(&model.Abplanguage{})

	tableName := _abplanguage.abplanguageDo.TableName()
	_abplanguage.ALL = field.NewAsterisk(tableName)
	_abplanguage.ID = field.NewInt64(tableName, "Id")
	_abplanguage.CreationTime = field.NewTime(tableName, "CreationTime")
	_abplanguage.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abplanguage.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abplanguage.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abplanguage.IsDeleted = field.NewField(tableName, "IsDeleted")
	_abplanguage.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_abplanguage.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_abplanguage.TenantID = field.NewInt64(tableName, "TenantId")
	_abplanguage.Name = field.NewString(tableName, "Name")
	_abplanguage.DisplayName = field.NewString(tableName, "DisplayName")
	_abplanguage.Icon = field.NewString(tableName, "Icon")
	_abplanguage.IsDisabled = field.NewField(tableName, "IsDisabled")

	_abplanguage.fillFieldMap()

	return _abplanguage
}

type abplanguage struct {
	abplanguageDo abplanguageDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TenantID             field.Int64
	Name                 field.String
	DisplayName          field.String
	Icon                 field.String
	IsDisabled           field.Field

	fieldMap map[string]field.Expr
}

func (a abplanguage) Table(newTableName string) *abplanguage {
	a.abplanguageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abplanguage) As(alias string) *abplanguage {
	a.abplanguageDo.DO = *(a.abplanguageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abplanguage) updateTableName(table string) *abplanguage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.Name = field.NewString(table, "Name")
	a.DisplayName = field.NewString(table, "DisplayName")
	a.Icon = field.NewString(table, "Icon")
	a.IsDisabled = field.NewField(table, "IsDisabled")

	a.fillFieldMap()

	return a
}

func (a *abplanguage) WithContext(ctx context.Context) IAbplanguageDo {
	return a.abplanguageDo.WithContext(ctx)
}

func (a abplanguage) TableName() string { return a.abplanguageDo.TableName() }

func (a abplanguage) Alias() string { return a.abplanguageDo.Alias() }

func (a *abplanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abplanguage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["Name"] = a.Name
	a.fieldMap["DisplayName"] = a.DisplayName
	a.fieldMap["Icon"] = a.Icon
	a.fieldMap["IsDisabled"] = a.IsDisabled
}

func (a abplanguage) clone(db *gorm.DB) abplanguage {
	a.abplanguageDo.ReplaceDB(db)
	return a
}

type abplanguageDo struct{ gen.DO }

type IAbplanguageDo interface {
	gen.SubQuery
	Debug() IAbplanguageDo
	WithContext(ctx context.Context) IAbplanguageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbplanguageDo
	Not(conds ...gen.Condition) IAbplanguageDo
	Or(conds ...gen.Condition) IAbplanguageDo
	Select(conds ...field.Expr) IAbplanguageDo
	Where(conds ...gen.Condition) IAbplanguageDo
	Order(conds ...field.Expr) IAbplanguageDo
	Distinct(cols ...field.Expr) IAbplanguageDo
	Omit(cols ...field.Expr) IAbplanguageDo
	Join(table schema.Tabler, on ...field.Expr) IAbplanguageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbplanguageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbplanguageDo
	Group(cols ...field.Expr) IAbplanguageDo
	Having(conds ...gen.Condition) IAbplanguageDo
	Limit(limit int) IAbplanguageDo
	Offset(offset int) IAbplanguageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbplanguageDo
	Unscoped() IAbplanguageDo
	Create(values ...*model.Abplanguage) error
	CreateInBatches(values []*model.Abplanguage, batchSize int) error
	Save(values ...*model.Abplanguage) error
	First() (*model.Abplanguage, error)
	Take() (*model.Abplanguage, error)
	Last() (*model.Abplanguage, error)
	Find() ([]*model.Abplanguage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abplanguage, err error)
	FindInBatches(result *[]*model.Abplanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abplanguage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbplanguageDo
	Assign(attrs ...field.AssignExpr) IAbplanguageDo
	Joins(fields ...field.RelationField) IAbplanguageDo
	Preload(fields ...field.RelationField) IAbplanguageDo
	FirstOrInit() (*model.Abplanguage, error)
	FirstOrCreate() (*model.Abplanguage, error)
	FindByPage(offset int, limit int) (result []*model.Abplanguage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbplanguageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abplanguageDo) Debug() IAbplanguageDo {
	return a.withDO(a.DO.Debug())
}

func (a abplanguageDo) WithContext(ctx context.Context) IAbplanguageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abplanguageDo) ReadDB() IAbplanguageDo {
	return a.Clauses(dbresolver.Read)
}

func (a abplanguageDo) WriteDB() IAbplanguageDo {
	return a.Clauses(dbresolver.Write)
}

func (a abplanguageDo) Clauses(conds ...clause.Expression) IAbplanguageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abplanguageDo) Returning(value interface{}, columns ...string) IAbplanguageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abplanguageDo) Not(conds ...gen.Condition) IAbplanguageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abplanguageDo) Or(conds ...gen.Condition) IAbplanguageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abplanguageDo) Select(conds ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abplanguageDo) Where(conds ...gen.Condition) IAbplanguageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abplanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbplanguageDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abplanguageDo) Order(conds ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abplanguageDo) Distinct(cols ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abplanguageDo) Omit(cols ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abplanguageDo) Join(table schema.Tabler, on ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abplanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abplanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abplanguageDo) Group(cols ...field.Expr) IAbplanguageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abplanguageDo) Having(conds ...gen.Condition) IAbplanguageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abplanguageDo) Limit(limit int) IAbplanguageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abplanguageDo) Offset(offset int) IAbplanguageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abplanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbplanguageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abplanguageDo) Unscoped() IAbplanguageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abplanguageDo) Create(values ...*model.Abplanguage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abplanguageDo) CreateInBatches(values []*model.Abplanguage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abplanguageDo) Save(values ...*model.Abplanguage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abplanguageDo) First() (*model.Abplanguage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguage), nil
	}
}

func (a abplanguageDo) Take() (*model.Abplanguage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguage), nil
	}
}

func (a abplanguageDo) Last() (*model.Abplanguage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguage), nil
	}
}

func (a abplanguageDo) Find() ([]*model.Abplanguage, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abplanguage), err
}

func (a abplanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abplanguage, err error) {
	buf := make([]*model.Abplanguage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abplanguageDo) FindInBatches(result *[]*model.Abplanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abplanguageDo) Attrs(attrs ...field.AssignExpr) IAbplanguageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abplanguageDo) Assign(attrs ...field.AssignExpr) IAbplanguageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abplanguageDo) Joins(fields ...field.RelationField) IAbplanguageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abplanguageDo) Preload(fields ...field.RelationField) IAbplanguageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abplanguageDo) FirstOrInit() (*model.Abplanguage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguage), nil
	}
}

func (a abplanguageDo) FirstOrCreate() (*model.Abplanguage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abplanguage), nil
	}
}

func (a abplanguageDo) FindByPage(offset int, limit int) (result []*model.Abplanguage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abplanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abplanguageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abplanguageDo) Delete(models ...*model.Abplanguage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abplanguageDo) withDO(do gen.Dao) *abplanguageDo {
	a.DO = *do.(*gen.DO)
	return a
}
