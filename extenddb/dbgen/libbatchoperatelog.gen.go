// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibbatchoperatelog(db *gorm.DB) libbatchoperatelog {
	_libbatchoperatelog := libbatchoperatelog{}

	_libbatchoperatelog.libbatchoperatelogDo.UseDB(db)
	_libbatchoperatelog.libbatchoperatelogDo.UseModel(&model.Libbatchoperatelog{})

	tableName := _libbatchoperatelog.libbatchoperatelogDo.TableName()
	_libbatchoperatelog.ALL = field.NewAsterisk(tableName)
	_libbatchoperatelog.ID = field.NewString(tableName, "Id")
	_libbatchoperatelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libbatchoperatelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libbatchoperatelog.IndexID = field.NewString(tableName, "IndexId")
	_libbatchoperatelog.BatchNo = field.NewString(tableName, "BatchNo")
	_libbatchoperatelog.Tid = field.NewString(tableName, "Tid")
	_libbatchoperatelog.LayerID = field.NewString(tableName, "LayerId")
	_libbatchoperatelog.LayerName = field.NewString(tableName, "LayerName")
	_libbatchoperatelog.BatchOperateType = field.NewInt64(tableName, "BatchOperateType")
	_libbatchoperatelog.ItemState = field.NewInt64(tableName, "ItemState")
	_libbatchoperatelog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libbatchoperatelog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libbatchoperatelog.ItemCallNo = field.NewString(tableName, "ItemCallNo")
	_libbatchoperatelog.LocationID = field.NewString(tableName, "LocationId")
	_libbatchoperatelog.LocationName = field.NewString(tableName, "LocationName")
	_libbatchoperatelog.Remark = field.NewString(tableName, "Remark")
	_libbatchoperatelog.TenantID = field.NewInt64(tableName, "TenantId")
	_libbatchoperatelog.CreatorUserName = field.NewString(tableName, "CreatorUserName")
	_libbatchoperatelog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_libbatchoperatelog.LayerCode = field.NewString(tableName, "LayerCode")
	_libbatchoperatelog.Result = field.NewInt64(tableName, "Result")

	_libbatchoperatelog.fillFieldMap()

	return _libbatchoperatelog
}

type libbatchoperatelog struct {
	libbatchoperatelogDo libbatchoperatelogDo

	ALL              field.Asterisk
	ID               field.String
	CreationTime     field.Time
	CreatorUserID    field.Int64
	IndexID          field.String
	BatchNo          field.String
	Tid              field.String
	LayerID          field.String
	LayerName        field.String
	BatchOperateType field.Int64
	ItemState        field.Int64
	ItemBarcode      field.String
	ItemTitle        field.String
	ItemCallNo       field.String
	LocationID       field.String
	LocationName     field.String
	Remark           field.String
	TenantID         field.Int64
	CreatorUserName  field.String
	ErrorMessage     field.String
	LayerCode        field.String
	Result           field.Int64

	fieldMap map[string]field.Expr
}

func (l libbatchoperatelog) Table(newTableName string) *libbatchoperatelog {
	l.libbatchoperatelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libbatchoperatelog) As(alias string) *libbatchoperatelog {
	l.libbatchoperatelogDo.DO = *(l.libbatchoperatelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libbatchoperatelog) updateTableName(table string) *libbatchoperatelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.IndexID = field.NewString(table, "IndexId")
	l.BatchNo = field.NewString(table, "BatchNo")
	l.Tid = field.NewString(table, "Tid")
	l.LayerID = field.NewString(table, "LayerId")
	l.LayerName = field.NewString(table, "LayerName")
	l.BatchOperateType = field.NewInt64(table, "BatchOperateType")
	l.ItemState = field.NewInt64(table, "ItemState")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemCallNo = field.NewString(table, "ItemCallNo")
	l.LocationID = field.NewString(table, "LocationId")
	l.LocationName = field.NewString(table, "LocationName")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.LayerCode = field.NewString(table, "LayerCode")
	l.Result = field.NewInt64(table, "Result")

	l.fillFieldMap()

	return l
}

func (l *libbatchoperatelog) WithContext(ctx context.Context) ILibbatchoperatelogDo {
	return l.libbatchoperatelogDo.WithContext(ctx)
}

func (l libbatchoperatelog) TableName() string { return l.libbatchoperatelogDo.TableName() }

func (l libbatchoperatelog) Alias() string { return l.libbatchoperatelogDo.Alias() }

func (l *libbatchoperatelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libbatchoperatelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 21)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["IndexId"] = l.IndexID
	l.fieldMap["BatchNo"] = l.BatchNo
	l.fieldMap["Tid"] = l.Tid
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["LayerName"] = l.LayerName
	l.fieldMap["BatchOperateType"] = l.BatchOperateType
	l.fieldMap["ItemState"] = l.ItemState
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemCallNo"] = l.ItemCallNo
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["LocationName"] = l.LocationName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["LayerCode"] = l.LayerCode
	l.fieldMap["Result"] = l.Result
}

func (l libbatchoperatelog) clone(db *gorm.DB) libbatchoperatelog {
	l.libbatchoperatelogDo.ReplaceDB(db)
	return l
}

type libbatchoperatelogDo struct{ gen.DO }

type ILibbatchoperatelogDo interface {
	gen.SubQuery
	Debug() ILibbatchoperatelogDo
	WithContext(ctx context.Context) ILibbatchoperatelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibbatchoperatelogDo
	Not(conds ...gen.Condition) ILibbatchoperatelogDo
	Or(conds ...gen.Condition) ILibbatchoperatelogDo
	Select(conds ...field.Expr) ILibbatchoperatelogDo
	Where(conds ...gen.Condition) ILibbatchoperatelogDo
	Order(conds ...field.Expr) ILibbatchoperatelogDo
	Distinct(cols ...field.Expr) ILibbatchoperatelogDo
	Omit(cols ...field.Expr) ILibbatchoperatelogDo
	Join(table schema.Tabler, on ...field.Expr) ILibbatchoperatelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperatelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperatelogDo
	Group(cols ...field.Expr) ILibbatchoperatelogDo
	Having(conds ...gen.Condition) ILibbatchoperatelogDo
	Limit(limit int) ILibbatchoperatelogDo
	Offset(offset int) ILibbatchoperatelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbatchoperatelogDo
	Unscoped() ILibbatchoperatelogDo
	Create(values ...*model.Libbatchoperatelog) error
	CreateInBatches(values []*model.Libbatchoperatelog, batchSize int) error
	Save(values ...*model.Libbatchoperatelog) error
	First() (*model.Libbatchoperatelog, error)
	Take() (*model.Libbatchoperatelog, error)
	Last() (*model.Libbatchoperatelog, error)
	Find() ([]*model.Libbatchoperatelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbatchoperatelog, err error)
	FindInBatches(result *[]*model.Libbatchoperatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libbatchoperatelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibbatchoperatelogDo
	Assign(attrs ...field.AssignExpr) ILibbatchoperatelogDo
	Joins(fields ...field.RelationField) ILibbatchoperatelogDo
	Preload(fields ...field.RelationField) ILibbatchoperatelogDo
	FirstOrInit() (*model.Libbatchoperatelog, error)
	FirstOrCreate() (*model.Libbatchoperatelog, error)
	FindByPage(offset int, limit int) (result []*model.Libbatchoperatelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibbatchoperatelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libbatchoperatelogDo) Debug() ILibbatchoperatelogDo {
	return l.withDO(l.DO.Debug())
}

func (l libbatchoperatelogDo) WithContext(ctx context.Context) ILibbatchoperatelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libbatchoperatelogDo) ReadDB() ILibbatchoperatelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libbatchoperatelogDo) WriteDB() ILibbatchoperatelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libbatchoperatelogDo) Clauses(conds ...clause.Expression) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libbatchoperatelogDo) Returning(value interface{}, columns ...string) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libbatchoperatelogDo) Not(conds ...gen.Condition) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libbatchoperatelogDo) Or(conds ...gen.Condition) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libbatchoperatelogDo) Select(conds ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libbatchoperatelogDo) Where(conds ...gen.Condition) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libbatchoperatelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibbatchoperatelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libbatchoperatelogDo) Order(conds ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libbatchoperatelogDo) Distinct(cols ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libbatchoperatelogDo) Omit(cols ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libbatchoperatelogDo) Join(table schema.Tabler, on ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libbatchoperatelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libbatchoperatelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libbatchoperatelogDo) Group(cols ...field.Expr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libbatchoperatelogDo) Having(conds ...gen.Condition) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libbatchoperatelogDo) Limit(limit int) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libbatchoperatelogDo) Offset(offset int) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libbatchoperatelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libbatchoperatelogDo) Unscoped() ILibbatchoperatelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libbatchoperatelogDo) Create(values ...*model.Libbatchoperatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libbatchoperatelogDo) CreateInBatches(values []*model.Libbatchoperatelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libbatchoperatelogDo) Save(values ...*model.Libbatchoperatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libbatchoperatelogDo) First() (*model.Libbatchoperatelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperatelog), nil
	}
}

func (l libbatchoperatelogDo) Take() (*model.Libbatchoperatelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperatelog), nil
	}
}

func (l libbatchoperatelogDo) Last() (*model.Libbatchoperatelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperatelog), nil
	}
}

func (l libbatchoperatelogDo) Find() ([]*model.Libbatchoperatelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libbatchoperatelog), err
}

func (l libbatchoperatelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbatchoperatelog, err error) {
	buf := make([]*model.Libbatchoperatelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libbatchoperatelogDo) FindInBatches(result *[]*model.Libbatchoperatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libbatchoperatelogDo) Attrs(attrs ...field.AssignExpr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libbatchoperatelogDo) Assign(attrs ...field.AssignExpr) ILibbatchoperatelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libbatchoperatelogDo) Joins(fields ...field.RelationField) ILibbatchoperatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libbatchoperatelogDo) Preload(fields ...field.RelationField) ILibbatchoperatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libbatchoperatelogDo) FirstOrInit() (*model.Libbatchoperatelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperatelog), nil
	}
}

func (l libbatchoperatelogDo) FirstOrCreate() (*model.Libbatchoperatelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperatelog), nil
	}
}

func (l libbatchoperatelogDo) FindByPage(offset int, limit int) (result []*model.Libbatchoperatelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libbatchoperatelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libbatchoperatelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libbatchoperatelogDo) Delete(models ...*model.Libbatchoperatelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libbatchoperatelogDo) withDO(do gen.Dao) *libbatchoperatelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
