// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLiblabel(db *gorm.DB) liblabel {
	_liblabel := liblabel{}

	_liblabel.liblabelDo.UseDB(db)
	_liblabel.liblabelDo.UseModel(&model.Liblabel{})

	tableName := _liblabel.liblabelDo.TableName()
	_liblabel.ALL = field.NewAsterisk(tableName)
	_liblabel.ID = field.NewString(tableName, "Id")
	_liblabel.Barcode = field.NewString(tableName, "Barcode")
	_liblabel.EpcOrder = field.NewString(tableName, "EpcOrder")
	_liblabel.Remark = field.NewString(tableName, "Remark")
	_liblabel.TenantID = field.NewInt64(tableName, "TenantId")
	_liblabel.LabelType = field.NewInt64(tableName, "LabelType")

	_liblabel.fillFieldMap()

	return _liblabel
}

type liblabel struct {
	liblabelDo liblabelDo

	ALL       field.Asterisk
	ID        field.String
	Barcode   field.String
	EpcOrder  field.String
	Remark    field.String
	TenantID  field.Int64
	LabelType field.Int64

	fieldMap map[string]field.Expr
}

func (l liblabel) Table(newTableName string) *liblabel {
	l.liblabelDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liblabel) As(alias string) *liblabel {
	l.liblabelDo.DO = *(l.liblabelDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liblabel) updateTableName(table string) *liblabel {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.Barcode = field.NewString(table, "Barcode")
	l.EpcOrder = field.NewString(table, "EpcOrder")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.LabelType = field.NewInt64(table, "LabelType")

	l.fillFieldMap()

	return l
}

func (l *liblabel) WithContext(ctx context.Context) ILiblabelDo { return l.liblabelDo.WithContext(ctx) }

func (l liblabel) TableName() string { return l.liblabelDo.TableName() }

func (l liblabel) Alias() string { return l.liblabelDo.Alias() }

func (l *liblabel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liblabel) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["Barcode"] = l.Barcode
	l.fieldMap["EpcOrder"] = l.EpcOrder
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["LabelType"] = l.LabelType
}

func (l liblabel) clone(db *gorm.DB) liblabel {
	l.liblabelDo.ReplaceDB(db)
	return l
}

type liblabelDo struct{ gen.DO }

type ILiblabelDo interface {
	gen.SubQuery
	Debug() ILiblabelDo
	WithContext(ctx context.Context) ILiblabelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiblabelDo
	Not(conds ...gen.Condition) ILiblabelDo
	Or(conds ...gen.Condition) ILiblabelDo
	Select(conds ...field.Expr) ILiblabelDo
	Where(conds ...gen.Condition) ILiblabelDo
	Order(conds ...field.Expr) ILiblabelDo
	Distinct(cols ...field.Expr) ILiblabelDo
	Omit(cols ...field.Expr) ILiblabelDo
	Join(table schema.Tabler, on ...field.Expr) ILiblabelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiblabelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiblabelDo
	Group(cols ...field.Expr) ILiblabelDo
	Having(conds ...gen.Condition) ILiblabelDo
	Limit(limit int) ILiblabelDo
	Offset(offset int) ILiblabelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiblabelDo
	Unscoped() ILiblabelDo
	Create(values ...*model.Liblabel) error
	CreateInBatches(values []*model.Liblabel, batchSize int) error
	Save(values ...*model.Liblabel) error
	First() (*model.Liblabel, error)
	Take() (*model.Liblabel, error)
	Last() (*model.Liblabel, error)
	Find() ([]*model.Liblabel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Liblabel, err error)
	FindInBatches(result *[]*model.Liblabel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Liblabel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiblabelDo
	Assign(attrs ...field.AssignExpr) ILiblabelDo
	Joins(fields ...field.RelationField) ILiblabelDo
	Preload(fields ...field.RelationField) ILiblabelDo
	FirstOrInit() (*model.Liblabel, error)
	FirstOrCreate() (*model.Liblabel, error)
	FindByPage(offset int, limit int) (result []*model.Liblabel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiblabelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liblabelDo) Debug() ILiblabelDo {
	return l.withDO(l.DO.Debug())
}

func (l liblabelDo) WithContext(ctx context.Context) ILiblabelDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liblabelDo) ReadDB() ILiblabelDo {
	return l.Clauses(dbresolver.Read)
}

func (l liblabelDo) WriteDB() ILiblabelDo {
	return l.Clauses(dbresolver.Write)
}

func (l liblabelDo) Clauses(conds ...clause.Expression) ILiblabelDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liblabelDo) Returning(value interface{}, columns ...string) ILiblabelDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liblabelDo) Not(conds ...gen.Condition) ILiblabelDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liblabelDo) Or(conds ...gen.Condition) ILiblabelDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liblabelDo) Select(conds ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liblabelDo) Where(conds ...gen.Condition) ILiblabelDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liblabelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILiblabelDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l liblabelDo) Order(conds ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liblabelDo) Distinct(cols ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liblabelDo) Omit(cols ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liblabelDo) Join(table schema.Tabler, on ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liblabelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liblabelDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liblabelDo) Group(cols ...field.Expr) ILiblabelDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liblabelDo) Having(conds ...gen.Condition) ILiblabelDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liblabelDo) Limit(limit int) ILiblabelDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liblabelDo) Offset(offset int) ILiblabelDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liblabelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiblabelDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liblabelDo) Unscoped() ILiblabelDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liblabelDo) Create(values ...*model.Liblabel) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liblabelDo) CreateInBatches(values []*model.Liblabel, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liblabelDo) Save(values ...*model.Liblabel) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liblabelDo) First() (*model.Liblabel, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabel), nil
	}
}

func (l liblabelDo) Take() (*model.Liblabel, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabel), nil
	}
}

func (l liblabelDo) Last() (*model.Liblabel, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabel), nil
	}
}

func (l liblabelDo) Find() ([]*model.Liblabel, error) {
	result, err := l.DO.Find()
	return result.([]*model.Liblabel), err
}

func (l liblabelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Liblabel, err error) {
	buf := make([]*model.Liblabel, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liblabelDo) FindInBatches(result *[]*model.Liblabel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liblabelDo) Attrs(attrs ...field.AssignExpr) ILiblabelDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liblabelDo) Assign(attrs ...field.AssignExpr) ILiblabelDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liblabelDo) Joins(fields ...field.RelationField) ILiblabelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liblabelDo) Preload(fields ...field.RelationField) ILiblabelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liblabelDo) FirstOrInit() (*model.Liblabel, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabel), nil
	}
}

func (l liblabelDo) FirstOrCreate() (*model.Liblabel, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabel), nil
	}
}

func (l liblabelDo) FindByPage(offset int, limit int) (result []*model.Liblabel, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liblabelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liblabelDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liblabelDo) Delete(models ...*model.Liblabel) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liblabelDo) withDO(do gen.Dao) *liblabelDo {
	l.DO = *do.(*gen.DO)
	return l
}
