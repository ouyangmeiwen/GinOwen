// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysenumvalue2(db *gorm.DB) sysenumvalue2 {
	_sysenumvalue2 := sysenumvalue2{}

	_sysenumvalue2.sysenumvalue2Do.UseDB(db)
	_sysenumvalue2.sysenumvalue2Do.UseModel(&model.Sysenumvalue2{})

	tableName := _sysenumvalue2.sysenumvalue2Do.TableName()
	_sysenumvalue2.ALL = field.NewAsterisk(tableName)
	_sysenumvalue2.ID = field.NewString(tableName, "Id")
	_sysenumvalue2.EnumValueID = field.NewInt64(tableName, "EnumValueId")
	_sysenumvalue2.FieldID = field.NewInt64(tableName, "FieldId")
	_sysenumvalue2.EnumValue = field.NewString(tableName, "EnumValue")
	_sysenumvalue2.EnumTrans = field.NewString(tableName, "EnumTrans")
	_sysenumvalue2.IsCanEdit = field.NewField(tableName, "IsCanEdit")
	_sysenumvalue2.Order = field.NewInt64(tableName, "Order")
	_sysenumvalue2.Remark = field.NewString(tableName, "Remark")
	_sysenumvalue2.TenantID = field.NewInt64(tableName, "TenantId")

	_sysenumvalue2.fillFieldMap()

	return _sysenumvalue2
}

type sysenumvalue2 struct {
	sysenumvalue2Do sysenumvalue2Do

	ALL         field.Asterisk
	ID          field.String
	EnumValueID field.Int64
	FieldID     field.Int64
	EnumValue   field.String
	EnumTrans   field.String
	IsCanEdit   field.Field
	Order       field.Int64
	Remark      field.String
	TenantID    field.Int64

	fieldMap map[string]field.Expr
}

func (s sysenumvalue2) Table(newTableName string) *sysenumvalue2 {
	s.sysenumvalue2Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysenumvalue2) As(alias string) *sysenumvalue2 {
	s.sysenumvalue2Do.DO = *(s.sysenumvalue2Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysenumvalue2) updateTableName(table string) *sysenumvalue2 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.EnumValueID = field.NewInt64(table, "EnumValueId")
	s.FieldID = field.NewInt64(table, "FieldId")
	s.EnumValue = field.NewString(table, "EnumValue")
	s.EnumTrans = field.NewString(table, "EnumTrans")
	s.IsCanEdit = field.NewField(table, "IsCanEdit")
	s.Order = field.NewInt64(table, "Order")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysenumvalue2) WithContext(ctx context.Context) ISysenumvalue2Do {
	return s.sysenumvalue2Do.WithContext(ctx)
}

func (s sysenumvalue2) TableName() string { return s.sysenumvalue2Do.TableName() }

func (s sysenumvalue2) Alias() string { return s.sysenumvalue2Do.Alias() }

func (s *sysenumvalue2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysenumvalue2) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["EnumValueId"] = s.EnumValueID
	s.fieldMap["FieldId"] = s.FieldID
	s.fieldMap["EnumValue"] = s.EnumValue
	s.fieldMap["EnumTrans"] = s.EnumTrans
	s.fieldMap["IsCanEdit"] = s.IsCanEdit
	s.fieldMap["Order"] = s.Order
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysenumvalue2) clone(db *gorm.DB) sysenumvalue2 {
	s.sysenumvalue2Do.ReplaceDB(db)
	return s
}

type sysenumvalue2Do struct{ gen.DO }

type ISysenumvalue2Do interface {
	gen.SubQuery
	Debug() ISysenumvalue2Do
	WithContext(ctx context.Context) ISysenumvalue2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysenumvalue2Do
	Not(conds ...gen.Condition) ISysenumvalue2Do
	Or(conds ...gen.Condition) ISysenumvalue2Do
	Select(conds ...field.Expr) ISysenumvalue2Do
	Where(conds ...gen.Condition) ISysenumvalue2Do
	Order(conds ...field.Expr) ISysenumvalue2Do
	Distinct(cols ...field.Expr) ISysenumvalue2Do
	Omit(cols ...field.Expr) ISysenumvalue2Do
	Join(table schema.Tabler, on ...field.Expr) ISysenumvalue2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysenumvalue2Do
	RightJoin(table schema.Tabler, on ...field.Expr) ISysenumvalue2Do
	Group(cols ...field.Expr) ISysenumvalue2Do
	Having(conds ...gen.Condition) ISysenumvalue2Do
	Limit(limit int) ISysenumvalue2Do
	Offset(offset int) ISysenumvalue2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysenumvalue2Do
	Unscoped() ISysenumvalue2Do
	Create(values ...*model.Sysenumvalue2) error
	CreateInBatches(values []*model.Sysenumvalue2, batchSize int) error
	Save(values ...*model.Sysenumvalue2) error
	First() (*model.Sysenumvalue2, error)
	Take() (*model.Sysenumvalue2, error)
	Last() (*model.Sysenumvalue2, error)
	Find() ([]*model.Sysenumvalue2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysenumvalue2, err error)
	FindInBatches(result *[]*model.Sysenumvalue2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysenumvalue2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysenumvalue2Do
	Assign(attrs ...field.AssignExpr) ISysenumvalue2Do
	Joins(fields ...field.RelationField) ISysenumvalue2Do
	Preload(fields ...field.RelationField) ISysenumvalue2Do
	FirstOrInit() (*model.Sysenumvalue2, error)
	FirstOrCreate() (*model.Sysenumvalue2, error)
	FindByPage(offset int, limit int) (result []*model.Sysenumvalue2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysenumvalue2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysenumvalue2Do) Debug() ISysenumvalue2Do {
	return s.withDO(s.DO.Debug())
}

func (s sysenumvalue2Do) WithContext(ctx context.Context) ISysenumvalue2Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysenumvalue2Do) ReadDB() ISysenumvalue2Do {
	return s.Clauses(dbresolver.Read)
}

func (s sysenumvalue2Do) WriteDB() ISysenumvalue2Do {
	return s.Clauses(dbresolver.Write)
}

func (s sysenumvalue2Do) Clauses(conds ...clause.Expression) ISysenumvalue2Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysenumvalue2Do) Returning(value interface{}, columns ...string) ISysenumvalue2Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysenumvalue2Do) Not(conds ...gen.Condition) ISysenumvalue2Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysenumvalue2Do) Or(conds ...gen.Condition) ISysenumvalue2Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysenumvalue2Do) Select(conds ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysenumvalue2Do) Where(conds ...gen.Condition) ISysenumvalue2Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysenumvalue2Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysenumvalue2Do {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysenumvalue2Do) Order(conds ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysenumvalue2Do) Distinct(cols ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysenumvalue2Do) Omit(cols ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysenumvalue2Do) Join(table schema.Tabler, on ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysenumvalue2Do) LeftJoin(table schema.Tabler, on ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysenumvalue2Do) RightJoin(table schema.Tabler, on ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysenumvalue2Do) Group(cols ...field.Expr) ISysenumvalue2Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysenumvalue2Do) Having(conds ...gen.Condition) ISysenumvalue2Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysenumvalue2Do) Limit(limit int) ISysenumvalue2Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysenumvalue2Do) Offset(offset int) ISysenumvalue2Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysenumvalue2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysenumvalue2Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysenumvalue2Do) Unscoped() ISysenumvalue2Do {
	return s.withDO(s.DO.Unscoped())
}

func (s sysenumvalue2Do) Create(values ...*model.Sysenumvalue2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysenumvalue2Do) CreateInBatches(values []*model.Sysenumvalue2, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysenumvalue2Do) Save(values ...*model.Sysenumvalue2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysenumvalue2Do) First() (*model.Sysenumvalue2, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue2), nil
	}
}

func (s sysenumvalue2Do) Take() (*model.Sysenumvalue2, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue2), nil
	}
}

func (s sysenumvalue2Do) Last() (*model.Sysenumvalue2, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue2), nil
	}
}

func (s sysenumvalue2Do) Find() ([]*model.Sysenumvalue2, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysenumvalue2), err
}

func (s sysenumvalue2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysenumvalue2, err error) {
	buf := make([]*model.Sysenumvalue2, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysenumvalue2Do) FindInBatches(result *[]*model.Sysenumvalue2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysenumvalue2Do) Attrs(attrs ...field.AssignExpr) ISysenumvalue2Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysenumvalue2Do) Assign(attrs ...field.AssignExpr) ISysenumvalue2Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysenumvalue2Do) Joins(fields ...field.RelationField) ISysenumvalue2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysenumvalue2Do) Preload(fields ...field.RelationField) ISysenumvalue2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysenumvalue2Do) FirstOrInit() (*model.Sysenumvalue2, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue2), nil
	}
}

func (s sysenumvalue2Do) FirstOrCreate() (*model.Sysenumvalue2, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue2), nil
	}
}

func (s sysenumvalue2Do) FindByPage(offset int, limit int) (result []*model.Sysenumvalue2, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysenumvalue2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysenumvalue2Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysenumvalue2Do) Delete(models ...*model.Sysenumvalue2) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysenumvalue2Do) withDO(do gen.Dao) *sysenumvalue2Do {
	s.DO = *do.(*gen.DO)
	return s
}
