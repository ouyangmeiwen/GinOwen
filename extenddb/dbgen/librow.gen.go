// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibrow(db *gorm.DB) librow {
	_librow := librow{}

	_librow.librowDo.UseDB(db)
	_librow.librowDo.UseModel(&model.Librow{})

	tableName := _librow.librowDo.TableName()
	_librow.ALL = field.NewAsterisk(tableName)
	_librow.ID = field.NewString(tableName, "Id")
	_librow.CreationTime = field.NewTime(tableName, "CreationTime")
	_librow.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_librow.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_librow.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_librow.IsDeleted = field.NewField(tableName, "IsDeleted")
	_librow.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_librow.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_librow.Code = field.NewString(tableName, "Code")
	_librow.Name = field.NewString(tableName, "Name")
	_librow.CatalogCode = field.NewString(tableName, "CatalogCode")
	_librow.RowNo = field.NewInt64(tableName, "RowNo")
	_librow.RowType = field.NewInt64(tableName, "RowType")
	_librow.RowUsageType = field.NewInt64(tableName, "RowUsageType")
	_librow.LocationID = field.NewString(tableName, "LocationId")
	_librow.Remark = field.NewString(tableName, "Remark")
	_librow.TenantID = field.NewInt64(tableName, "TenantId")

	_librow.fillFieldMap()

	return _librow
}

type librow struct {
	librowDo librowDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	CatalogCode          field.String
	RowNo                field.Int64
	RowType              field.Int64
	RowUsageType         field.Int64
	LocationID           field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l librow) Table(newTableName string) *librow {
	l.librowDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l librow) As(alias string) *librow {
	l.librowDo.DO = *(l.librowDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *librow) updateTableName(table string) *librow {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.Code = field.NewString(table, "Code")
	l.Name = field.NewString(table, "Name")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.RowNo = field.NewInt64(table, "RowNo")
	l.RowType = field.NewInt64(table, "RowType")
	l.RowUsageType = field.NewInt64(table, "RowUsageType")
	l.LocationID = field.NewString(table, "LocationId")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *librow) WithContext(ctx context.Context) ILibrowDo { return l.librowDo.WithContext(ctx) }

func (l librow) TableName() string { return l.librowDo.TableName() }

func (l librow) Alias() string { return l.librowDo.Alias() }

func (l *librow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *librow) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["Code"] = l.Code
	l.fieldMap["Name"] = l.Name
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["RowNo"] = l.RowNo
	l.fieldMap["RowType"] = l.RowType
	l.fieldMap["RowUsageType"] = l.RowUsageType
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l librow) clone(db *gorm.DB) librow {
	l.librowDo.ReplaceDB(db)
	return l
}

type librowDo struct{ gen.DO }

type ILibrowDo interface {
	gen.SubQuery
	Debug() ILibrowDo
	WithContext(ctx context.Context) ILibrowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibrowDo
	Not(conds ...gen.Condition) ILibrowDo
	Or(conds ...gen.Condition) ILibrowDo
	Select(conds ...field.Expr) ILibrowDo
	Where(conds ...gen.Condition) ILibrowDo
	Order(conds ...field.Expr) ILibrowDo
	Distinct(cols ...field.Expr) ILibrowDo
	Omit(cols ...field.Expr) ILibrowDo
	Join(table schema.Tabler, on ...field.Expr) ILibrowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibrowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibrowDo
	Group(cols ...field.Expr) ILibrowDo
	Having(conds ...gen.Condition) ILibrowDo
	Limit(limit int) ILibrowDo
	Offset(offset int) ILibrowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrowDo
	Unscoped() ILibrowDo
	Create(values ...*model.Librow) error
	CreateInBatches(values []*model.Librow, batchSize int) error
	Save(values ...*model.Librow) error
	First() (*model.Librow, error)
	Take() (*model.Librow, error)
	Last() (*model.Librow, error)
	Find() ([]*model.Librow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librow, err error)
	FindInBatches(result *[]*model.Librow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Librow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibrowDo
	Assign(attrs ...field.AssignExpr) ILibrowDo
	Joins(fields ...field.RelationField) ILibrowDo
	Preload(fields ...field.RelationField) ILibrowDo
	FirstOrInit() (*model.Librow, error)
	FirstOrCreate() (*model.Librow, error)
	FindByPage(offset int, limit int) (result []*model.Librow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibrowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l librowDo) Debug() ILibrowDo {
	return l.withDO(l.DO.Debug())
}

func (l librowDo) WithContext(ctx context.Context) ILibrowDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l librowDo) ReadDB() ILibrowDo {
	return l.Clauses(dbresolver.Read)
}

func (l librowDo) WriteDB() ILibrowDo {
	return l.Clauses(dbresolver.Write)
}

func (l librowDo) Clauses(conds ...clause.Expression) ILibrowDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l librowDo) Returning(value interface{}, columns ...string) ILibrowDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l librowDo) Not(conds ...gen.Condition) ILibrowDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l librowDo) Or(conds ...gen.Condition) ILibrowDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l librowDo) Select(conds ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l librowDo) Where(conds ...gen.Condition) ILibrowDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l librowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibrowDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l librowDo) Order(conds ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l librowDo) Distinct(cols ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l librowDo) Omit(cols ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l librowDo) Join(table schema.Tabler, on ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l librowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l librowDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l librowDo) Group(cols ...field.Expr) ILibrowDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l librowDo) Having(conds ...gen.Condition) ILibrowDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l librowDo) Limit(limit int) ILibrowDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l librowDo) Offset(offset int) ILibrowDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l librowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrowDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l librowDo) Unscoped() ILibrowDo {
	return l.withDO(l.DO.Unscoped())
}

func (l librowDo) Create(values ...*model.Librow) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l librowDo) CreateInBatches(values []*model.Librow, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l librowDo) Save(values ...*model.Librow) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l librowDo) First() (*model.Librow, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librow), nil
	}
}

func (l librowDo) Take() (*model.Librow, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librow), nil
	}
}

func (l librowDo) Last() (*model.Librow, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librow), nil
	}
}

func (l librowDo) Find() ([]*model.Librow, error) {
	result, err := l.DO.Find()
	return result.([]*model.Librow), err
}

func (l librowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librow, err error) {
	buf := make([]*model.Librow, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l librowDo) FindInBatches(result *[]*model.Librow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l librowDo) Attrs(attrs ...field.AssignExpr) ILibrowDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l librowDo) Assign(attrs ...field.AssignExpr) ILibrowDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l librowDo) Joins(fields ...field.RelationField) ILibrowDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l librowDo) Preload(fields ...field.RelationField) ILibrowDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l librowDo) FirstOrInit() (*model.Librow, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librow), nil
	}
}

func (l librowDo) FirstOrCreate() (*model.Librow, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librow), nil
	}
}

func (l librowDo) FindByPage(offset int, limit int) (result []*model.Librow, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l librowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l librowDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l librowDo) Delete(models ...*model.Librow) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *librowDo) withDO(do gen.Dao) *librowDo {
	l.DO = *do.(*gen.DO)
	return l
}
