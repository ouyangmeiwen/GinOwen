// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibitemCopy(db *gorm.DB) libitemCopy {
	_libitemCopy := libitemCopy{}

	_libitemCopy.libitemCopyDo.UseDB(db)
	_libitemCopy.libitemCopyDo.UseModel(&model.LibitemCopy{})

	tableName := _libitemCopy.libitemCopyDo.TableName()
	_libitemCopy.ALL = field.NewAsterisk(tableName)
	_libitemCopy.ID = field.NewString(tableName, "Id")
	_libitemCopy.CreationTime = field.NewTime(tableName, "CreationTime")
	_libitemCopy.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libitemCopy.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libitemCopy.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libitemCopy.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libitemCopy.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libitemCopy.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libitemCopy.InfoID = field.NewString(tableName, "InfoId")
	_libitemCopy.Title = field.NewString(tableName, "Title")
	_libitemCopy.Author = field.NewString(tableName, "Author")
	_libitemCopy.Barcode = field.NewString(tableName, "Barcode")
	_libitemCopy.IsEnable = field.NewField(tableName, "IsEnable")
	_libitemCopy.CallNo = field.NewString(tableName, "CallNo")
	_libitemCopy.PreCallNo = field.NewString(tableName, "PreCallNo")
	_libitemCopy.CatalogCode = field.NewString(tableName, "CatalogCode")
	_libitemCopy.ItemState = field.NewInt64(tableName, "ItemState")
	_libitemCopy.PressmarkID = field.NewString(tableName, "PressmarkId")
	_libitemCopy.PressmarkName = field.NewString(tableName, "PressmarkName")
	_libitemCopy.LocationID = field.NewString(tableName, "LocationId")
	_libitemCopy.LocationName = field.NewString(tableName, "LocationName")
	_libitemCopy.BookBarcode = field.NewString(tableName, "BookBarcode")
	_libitemCopy.ISBN = field.NewString(tableName, "ISBN")
	_libitemCopy.PubNo = field.NewInt64(tableName, "PubNo")
	_libitemCopy.Publisher = field.NewString(tableName, "Publisher")
	_libitemCopy.PubDate = field.NewString(tableName, "PubDate")
	_libitemCopy.Price = field.NewString(tableName, "Price")
	_libitemCopy.Pages = field.NewString(tableName, "Pages")
	_libitemCopy.Summary = field.NewString(tableName, "Summary")
	_libitemCopy.ItemType = field.NewInt64(tableName, "ItemType")
	_libitemCopy.Remark = field.NewString(tableName, "Remark")
	_libitemCopy.OriginType = field.NewInt64(tableName, "OriginType")
	_libitemCopy.CreateType = field.NewInt64(tableName, "CreateType")
	_libitemCopy.TenantID = field.NewInt64(tableName, "TenantId")

	_libitemCopy.fillFieldMap()

	return _libitemCopy
}

type libitemCopy struct {
	libitemCopyDo libitemCopyDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	InfoID               field.String
	Title                field.String
	Author               field.String
	Barcode              field.String
	IsEnable             field.Field
	CallNo               field.String
	PreCallNo            field.String
	CatalogCode          field.String
	ItemState            field.Int64
	PressmarkID          field.String
	PressmarkName        field.String
	LocationID           field.String
	LocationName         field.String
	BookBarcode          field.String
	ISBN                 field.String
	PubNo                field.Int64
	Publisher            field.String
	PubDate              field.String
	Price                field.String
	Pages                field.String
	Summary              field.String
	ItemType             field.Int64
	Remark               field.String
	OriginType           field.Int64
	CreateType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libitemCopy) Table(newTableName string) *libitemCopy {
	l.libitemCopyDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libitemCopy) As(alias string) *libitemCopy {
	l.libitemCopyDo.DO = *(l.libitemCopyDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libitemCopy) updateTableName(table string) *libitemCopy {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.InfoID = field.NewString(table, "InfoId")
	l.Title = field.NewString(table, "Title")
	l.Author = field.NewString(table, "Author")
	l.Barcode = field.NewString(table, "Barcode")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.CallNo = field.NewString(table, "CallNo")
	l.PreCallNo = field.NewString(table, "PreCallNo")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.ItemState = field.NewInt64(table, "ItemState")
	l.PressmarkID = field.NewString(table, "PressmarkId")
	l.PressmarkName = field.NewString(table, "PressmarkName")
	l.LocationID = field.NewString(table, "LocationId")
	l.LocationName = field.NewString(table, "LocationName")
	l.BookBarcode = field.NewString(table, "BookBarcode")
	l.ISBN = field.NewString(table, "ISBN")
	l.PubNo = field.NewInt64(table, "PubNo")
	l.Publisher = field.NewString(table, "Publisher")
	l.PubDate = field.NewString(table, "PubDate")
	l.Price = field.NewString(table, "Price")
	l.Pages = field.NewString(table, "Pages")
	l.Summary = field.NewString(table, "Summary")
	l.ItemType = field.NewInt64(table, "ItemType")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.CreateType = field.NewInt64(table, "CreateType")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libitemCopy) WithContext(ctx context.Context) ILibitemCopyDo {
	return l.libitemCopyDo.WithContext(ctx)
}

func (l libitemCopy) TableName() string { return l.libitemCopyDo.TableName() }

func (l libitemCopy) Alias() string { return l.libitemCopyDo.Alias() }

func (l *libitemCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libitemCopy) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 34)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["InfoId"] = l.InfoID
	l.fieldMap["Title"] = l.Title
	l.fieldMap["Author"] = l.Author
	l.fieldMap["Barcode"] = l.Barcode
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["CallNo"] = l.CallNo
	l.fieldMap["PreCallNo"] = l.PreCallNo
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["ItemState"] = l.ItemState
	l.fieldMap["PressmarkId"] = l.PressmarkID
	l.fieldMap["PressmarkName"] = l.PressmarkName
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["LocationName"] = l.LocationName
	l.fieldMap["BookBarcode"] = l.BookBarcode
	l.fieldMap["ISBN"] = l.ISBN
	l.fieldMap["PubNo"] = l.PubNo
	l.fieldMap["Publisher"] = l.Publisher
	l.fieldMap["PubDate"] = l.PubDate
	l.fieldMap["Price"] = l.Price
	l.fieldMap["Pages"] = l.Pages
	l.fieldMap["Summary"] = l.Summary
	l.fieldMap["ItemType"] = l.ItemType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["CreateType"] = l.CreateType
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libitemCopy) clone(db *gorm.DB) libitemCopy {
	l.libitemCopyDo.ReplaceDB(db)
	return l
}

type libitemCopyDo struct{ gen.DO }

type ILibitemCopyDo interface {
	gen.SubQuery
	Debug() ILibitemCopyDo
	WithContext(ctx context.Context) ILibitemCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibitemCopyDo
	Not(conds ...gen.Condition) ILibitemCopyDo
	Or(conds ...gen.Condition) ILibitemCopyDo
	Select(conds ...field.Expr) ILibitemCopyDo
	Where(conds ...gen.Condition) ILibitemCopyDo
	Order(conds ...field.Expr) ILibitemCopyDo
	Distinct(cols ...field.Expr) ILibitemCopyDo
	Omit(cols ...field.Expr) ILibitemCopyDo
	Join(table schema.Tabler, on ...field.Expr) ILibitemCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibitemCopyDo
	Group(cols ...field.Expr) ILibitemCopyDo
	Having(conds ...gen.Condition) ILibitemCopyDo
	Limit(limit int) ILibitemCopyDo
	Offset(offset int) ILibitemCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemCopyDo
	Unscoped() ILibitemCopyDo
	Create(values ...*model.LibitemCopy) error
	CreateInBatches(values []*model.LibitemCopy, batchSize int) error
	Save(values ...*model.LibitemCopy) error
	First() (*model.LibitemCopy, error)
	Take() (*model.LibitemCopy, error)
	Last() (*model.LibitemCopy, error)
	Find() ([]*model.LibitemCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LibitemCopy, err error)
	FindInBatches(result *[]*model.LibitemCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LibitemCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibitemCopyDo
	Assign(attrs ...field.AssignExpr) ILibitemCopyDo
	Joins(fields ...field.RelationField) ILibitemCopyDo
	Preload(fields ...field.RelationField) ILibitemCopyDo
	FirstOrInit() (*model.LibitemCopy, error)
	FirstOrCreate() (*model.LibitemCopy, error)
	FindByPage(offset int, limit int) (result []*model.LibitemCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibitemCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libitemCopyDo) Debug() ILibitemCopyDo {
	return l.withDO(l.DO.Debug())
}

func (l libitemCopyDo) WithContext(ctx context.Context) ILibitemCopyDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libitemCopyDo) ReadDB() ILibitemCopyDo {
	return l.Clauses(dbresolver.Read)
}

func (l libitemCopyDo) WriteDB() ILibitemCopyDo {
	return l.Clauses(dbresolver.Write)
}

func (l libitemCopyDo) Clauses(conds ...clause.Expression) ILibitemCopyDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libitemCopyDo) Returning(value interface{}, columns ...string) ILibitemCopyDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libitemCopyDo) Not(conds ...gen.Condition) ILibitemCopyDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libitemCopyDo) Or(conds ...gen.Condition) ILibitemCopyDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libitemCopyDo) Select(conds ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libitemCopyDo) Where(conds ...gen.Condition) ILibitemCopyDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libitemCopyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibitemCopyDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libitemCopyDo) Order(conds ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libitemCopyDo) Distinct(cols ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libitemCopyDo) Omit(cols ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libitemCopyDo) Join(table schema.Tabler, on ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libitemCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libitemCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libitemCopyDo) Group(cols ...field.Expr) ILibitemCopyDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libitemCopyDo) Having(conds ...gen.Condition) ILibitemCopyDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libitemCopyDo) Limit(limit int) ILibitemCopyDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libitemCopyDo) Offset(offset int) ILibitemCopyDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libitemCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemCopyDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libitemCopyDo) Unscoped() ILibitemCopyDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libitemCopyDo) Create(values ...*model.LibitemCopy) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libitemCopyDo) CreateInBatches(values []*model.LibitemCopy, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libitemCopyDo) Save(values ...*model.LibitemCopy) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libitemCopyDo) First() (*model.LibitemCopy, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LibitemCopy), nil
	}
}

func (l libitemCopyDo) Take() (*model.LibitemCopy, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LibitemCopy), nil
	}
}

func (l libitemCopyDo) Last() (*model.LibitemCopy, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LibitemCopy), nil
	}
}

func (l libitemCopyDo) Find() ([]*model.LibitemCopy, error) {
	result, err := l.DO.Find()
	return result.([]*model.LibitemCopy), err
}

func (l libitemCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LibitemCopy, err error) {
	buf := make([]*model.LibitemCopy, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libitemCopyDo) FindInBatches(result *[]*model.LibitemCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libitemCopyDo) Attrs(attrs ...field.AssignExpr) ILibitemCopyDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libitemCopyDo) Assign(attrs ...field.AssignExpr) ILibitemCopyDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libitemCopyDo) Joins(fields ...field.RelationField) ILibitemCopyDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libitemCopyDo) Preload(fields ...field.RelationField) ILibitemCopyDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libitemCopyDo) FirstOrInit() (*model.LibitemCopy, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LibitemCopy), nil
	}
}

func (l libitemCopyDo) FirstOrCreate() (*model.LibitemCopy, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LibitemCopy), nil
	}
}

func (l libitemCopyDo) FindByPage(offset int, limit int) (result []*model.LibitemCopy, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libitemCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libitemCopyDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libitemCopyDo) Delete(models ...*model.LibitemCopy) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libitemCopyDo) withDO(do gen.Dao) *libitemCopyDo {
	l.DO = *do.(*gen.DO)
	return l
}
