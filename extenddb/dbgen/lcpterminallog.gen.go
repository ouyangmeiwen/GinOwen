// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminallog(db *gorm.DB) lcpterminallog {
	_lcpterminallog := lcpterminallog{}

	_lcpterminallog.lcpterminallogDo.UseDB(db)
	_lcpterminallog.lcpterminallogDo.UseModel(&model.Lcpterminallog{})

	tableName := _lcpterminallog.lcpterminallogDo.TableName()
	_lcpterminallog.ALL = field.NewAsterisk(tableName)
	_lcpterminallog.ID = field.NewString(tableName, "Id")
	_lcpterminallog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminallog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminallog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpterminallog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpterminallog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpterminallog.TerminalVersionName = field.NewString(tableName, "TerminalVersionName")
	_lcpterminallog.Business = field.NewInt64(tableName, "Business")
	_lcpterminallog.TerminalLogType = field.NewInt64(tableName, "TerminalLogType")
	_lcpterminallog.ClassName = field.NewString(tableName, "ClassName")
	_lcpterminallog.MethodName = field.NewString(tableName, "MethodName")
	_lcpterminallog.Parameters = field.NewString(tableName, "Parameters")
	_lcpterminallog.Result = field.NewInt64(tableName, "Result")
	_lcpterminallog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpterminallog.Remark = field.NewString(tableName, "Remark")
	_lcpterminallog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminallog.fillFieldMap()

	return _lcpterminallog
}

type lcpterminallog struct {
	lcpterminallogDo lcpterminallogDo

	ALL                 field.Asterisk
	ID                  field.String
	CreationTime        field.Time
	CreatorUserID       field.Int64
	TerminalID          field.String
	TerminalCode        field.String
	TerminalName        field.String
	TerminalVersionName field.String
	Business            field.Int64
	TerminalLogType     field.Int64
	ClassName           field.String
	MethodName          field.String
	Parameters          field.String
	Result              field.Int64
	ErrorMessage        field.String
	Remark              field.String
	TenantID            field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminallog) Table(newTableName string) *lcpterminallog {
	l.lcpterminallogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminallog) As(alias string) *lcpterminallog {
	l.lcpterminallogDo.DO = *(l.lcpterminallogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminallog) updateTableName(table string) *lcpterminallog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.TerminalVersionName = field.NewString(table, "TerminalVersionName")
	l.Business = field.NewInt64(table, "Business")
	l.TerminalLogType = field.NewInt64(table, "TerminalLogType")
	l.ClassName = field.NewString(table, "ClassName")
	l.MethodName = field.NewString(table, "MethodName")
	l.Parameters = field.NewString(table, "Parameters")
	l.Result = field.NewInt64(table, "Result")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminallog) WithContext(ctx context.Context) ILcpterminallogDo {
	return l.lcpterminallogDo.WithContext(ctx)
}

func (l lcpterminallog) TableName() string { return l.lcpterminallogDo.TableName() }

func (l lcpterminallog) Alias() string { return l.lcpterminallogDo.Alias() }

func (l *lcpterminallog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminallog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 16)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["TerminalVersionName"] = l.TerminalVersionName
	l.fieldMap["Business"] = l.Business
	l.fieldMap["TerminalLogType"] = l.TerminalLogType
	l.fieldMap["ClassName"] = l.ClassName
	l.fieldMap["MethodName"] = l.MethodName
	l.fieldMap["Parameters"] = l.Parameters
	l.fieldMap["Result"] = l.Result
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminallog) clone(db *gorm.DB) lcpterminallog {
	l.lcpterminallogDo.ReplaceDB(db)
	return l
}

type lcpterminallogDo struct{ gen.DO }

type ILcpterminallogDo interface {
	gen.SubQuery
	Debug() ILcpterminallogDo
	WithContext(ctx context.Context) ILcpterminallogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminallogDo
	Not(conds ...gen.Condition) ILcpterminallogDo
	Or(conds ...gen.Condition) ILcpterminallogDo
	Select(conds ...field.Expr) ILcpterminallogDo
	Where(conds ...gen.Condition) ILcpterminallogDo
	Order(conds ...field.Expr) ILcpterminallogDo
	Distinct(cols ...field.Expr) ILcpterminallogDo
	Omit(cols ...field.Expr) ILcpterminallogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminallogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminallogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminallogDo
	Group(cols ...field.Expr) ILcpterminallogDo
	Having(conds ...gen.Condition) ILcpterminallogDo
	Limit(limit int) ILcpterminallogDo
	Offset(offset int) ILcpterminallogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminallogDo
	Unscoped() ILcpterminallogDo
	Create(values ...*model.Lcpterminallog) error
	CreateInBatches(values []*model.Lcpterminallog, batchSize int) error
	Save(values ...*model.Lcpterminallog) error
	First() (*model.Lcpterminallog, error)
	Take() (*model.Lcpterminallog, error)
	Last() (*model.Lcpterminallog, error)
	Find() ([]*model.Lcpterminallog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminallog, err error)
	FindInBatches(result *[]*model.Lcpterminallog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminallog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminallogDo
	Assign(attrs ...field.AssignExpr) ILcpterminallogDo
	Joins(fields ...field.RelationField) ILcpterminallogDo
	Preload(fields ...field.RelationField) ILcpterminallogDo
	FirstOrInit() (*model.Lcpterminallog, error)
	FirstOrCreate() (*model.Lcpterminallog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminallog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminallogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminallogDo) Debug() ILcpterminallogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminallogDo) WithContext(ctx context.Context) ILcpterminallogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminallogDo) ReadDB() ILcpterminallogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminallogDo) WriteDB() ILcpterminallogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminallogDo) Clauses(conds ...clause.Expression) ILcpterminallogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminallogDo) Returning(value interface{}, columns ...string) ILcpterminallogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminallogDo) Not(conds ...gen.Condition) ILcpterminallogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminallogDo) Or(conds ...gen.Condition) ILcpterminallogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminallogDo) Select(conds ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminallogDo) Where(conds ...gen.Condition) ILcpterminallogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminallogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminallogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminallogDo) Order(conds ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminallogDo) Distinct(cols ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminallogDo) Omit(cols ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminallogDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminallogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminallogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminallogDo) Group(cols ...field.Expr) ILcpterminallogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminallogDo) Having(conds ...gen.Condition) ILcpterminallogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminallogDo) Limit(limit int) ILcpterminallogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminallogDo) Offset(offset int) ILcpterminallogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminallogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminallogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminallogDo) Unscoped() ILcpterminallogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminallogDo) Create(values ...*model.Lcpterminallog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminallogDo) CreateInBatches(values []*model.Lcpterminallog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminallogDo) Save(values ...*model.Lcpterminallog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminallogDo) First() (*model.Lcpterminallog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminallog), nil
	}
}

func (l lcpterminallogDo) Take() (*model.Lcpterminallog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminallog), nil
	}
}

func (l lcpterminallogDo) Last() (*model.Lcpterminallog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminallog), nil
	}
}

func (l lcpterminallogDo) Find() ([]*model.Lcpterminallog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminallog), err
}

func (l lcpterminallogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminallog, err error) {
	buf := make([]*model.Lcpterminallog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminallogDo) FindInBatches(result *[]*model.Lcpterminallog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminallogDo) Attrs(attrs ...field.AssignExpr) ILcpterminallogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminallogDo) Assign(attrs ...field.AssignExpr) ILcpterminallogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminallogDo) Joins(fields ...field.RelationField) ILcpterminallogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminallogDo) Preload(fields ...field.RelationField) ILcpterminallogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminallogDo) FirstOrInit() (*model.Lcpterminallog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminallog), nil
	}
}

func (l lcpterminallogDo) FirstOrCreate() (*model.Lcpterminallog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminallog), nil
	}
}

func (l lcpterminallogDo) FindByPage(offset int, limit int) (result []*model.Lcpterminallog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminallogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminallogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminallogDo) Delete(models ...*model.Lcpterminallog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminallogDo) withDO(do gen.Dao) *lcpterminallogDo {
	l.DO = *do.(*gen.DO)
	return l
}
