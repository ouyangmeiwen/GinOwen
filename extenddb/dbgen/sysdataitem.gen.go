// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysdataitem(db *gorm.DB) sysdataitem {
	_sysdataitem := sysdataitem{}

	_sysdataitem.sysdataitemDo.UseDB(db)
	_sysdataitem.sysdataitemDo.UseModel(&model.Sysdataitem{})

	tableName := _sysdataitem.sysdataitemDo.TableName()
	_sysdataitem.ALL = field.NewAsterisk(tableName)
	_sysdataitem.ID = field.NewString(tableName, "Id")
	_sysdataitem.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysdataitem.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysdataitem.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysdataitem.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysdataitem.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysdataitem.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysdataitem.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysdataitem.Code = field.NewString(tableName, "Code")
	_sysdataitem.Name = field.NewString(tableName, "Name")
	_sysdataitem.IsTree = field.NewField(tableName, "IsTree")
	_sysdataitem.SortCode = field.NewInt64(tableName, "SortCode")
	_sysdataitem.IsEnable = field.NewField(tableName, "IsEnable")
	_sysdataitem.Remark = field.NewString(tableName, "Remark")
	_sysdataitem.ParentID = field.NewString(tableName, "ParentId")

	_sysdataitem.fillFieldMap()

	return _sysdataitem
}

type sysdataitem struct {
	sysdataitemDo sysdataitemDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	IsTree               field.Field
	SortCode             field.Int64
	IsEnable             field.Field
	Remark               field.String
	ParentID             field.String

	fieldMap map[string]field.Expr
}

func (s sysdataitem) Table(newTableName string) *sysdataitem {
	s.sysdataitemDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysdataitem) As(alias string) *sysdataitem {
	s.sysdataitemDo.DO = *(s.sysdataitemDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysdataitem) updateTableName(table string) *sysdataitem {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Code = field.NewString(table, "Code")
	s.Name = field.NewString(table, "Name")
	s.IsTree = field.NewField(table, "IsTree")
	s.SortCode = field.NewInt64(table, "SortCode")
	s.IsEnable = field.NewField(table, "IsEnable")
	s.Remark = field.NewString(table, "Remark")
	s.ParentID = field.NewString(table, "ParentId")

	s.fillFieldMap()

	return s
}

func (s *sysdataitem) WithContext(ctx context.Context) ISysdataitemDo {
	return s.sysdataitemDo.WithContext(ctx)
}

func (s sysdataitem) TableName() string { return s.sysdataitemDo.TableName() }

func (s sysdataitem) Alias() string { return s.sysdataitemDo.Alias() }

func (s *sysdataitem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysdataitem) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Code"] = s.Code
	s.fieldMap["Name"] = s.Name
	s.fieldMap["IsTree"] = s.IsTree
	s.fieldMap["SortCode"] = s.SortCode
	s.fieldMap["IsEnable"] = s.IsEnable
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["ParentId"] = s.ParentID
}

func (s sysdataitem) clone(db *gorm.DB) sysdataitem {
	s.sysdataitemDo.ReplaceDB(db)
	return s
}

type sysdataitemDo struct{ gen.DO }

type ISysdataitemDo interface {
	gen.SubQuery
	Debug() ISysdataitemDo
	WithContext(ctx context.Context) ISysdataitemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysdataitemDo
	Not(conds ...gen.Condition) ISysdataitemDo
	Or(conds ...gen.Condition) ISysdataitemDo
	Select(conds ...field.Expr) ISysdataitemDo
	Where(conds ...gen.Condition) ISysdataitemDo
	Order(conds ...field.Expr) ISysdataitemDo
	Distinct(cols ...field.Expr) ISysdataitemDo
	Omit(cols ...field.Expr) ISysdataitemDo
	Join(table schema.Tabler, on ...field.Expr) ISysdataitemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysdataitemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysdataitemDo
	Group(cols ...field.Expr) ISysdataitemDo
	Having(conds ...gen.Condition) ISysdataitemDo
	Limit(limit int) ISysdataitemDo
	Offset(offset int) ISysdataitemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysdataitemDo
	Unscoped() ISysdataitemDo
	Create(values ...*model.Sysdataitem) error
	CreateInBatches(values []*model.Sysdataitem, batchSize int) error
	Save(values ...*model.Sysdataitem) error
	First() (*model.Sysdataitem, error)
	Take() (*model.Sysdataitem, error)
	Last() (*model.Sysdataitem, error)
	Find() ([]*model.Sysdataitem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysdataitem, err error)
	FindInBatches(result *[]*model.Sysdataitem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysdataitem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysdataitemDo
	Assign(attrs ...field.AssignExpr) ISysdataitemDo
	Joins(fields ...field.RelationField) ISysdataitemDo
	Preload(fields ...field.RelationField) ISysdataitemDo
	FirstOrInit() (*model.Sysdataitem, error)
	FirstOrCreate() (*model.Sysdataitem, error)
	FindByPage(offset int, limit int) (result []*model.Sysdataitem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysdataitemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysdataitemDo) Debug() ISysdataitemDo {
	return s.withDO(s.DO.Debug())
}

func (s sysdataitemDo) WithContext(ctx context.Context) ISysdataitemDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysdataitemDo) ReadDB() ISysdataitemDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysdataitemDo) WriteDB() ISysdataitemDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysdataitemDo) Clauses(conds ...clause.Expression) ISysdataitemDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysdataitemDo) Returning(value interface{}, columns ...string) ISysdataitemDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysdataitemDo) Not(conds ...gen.Condition) ISysdataitemDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysdataitemDo) Or(conds ...gen.Condition) ISysdataitemDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysdataitemDo) Select(conds ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysdataitemDo) Where(conds ...gen.Condition) ISysdataitemDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysdataitemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysdataitemDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysdataitemDo) Order(conds ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysdataitemDo) Distinct(cols ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysdataitemDo) Omit(cols ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysdataitemDo) Join(table schema.Tabler, on ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysdataitemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysdataitemDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysdataitemDo) Group(cols ...field.Expr) ISysdataitemDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysdataitemDo) Having(conds ...gen.Condition) ISysdataitemDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysdataitemDo) Limit(limit int) ISysdataitemDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysdataitemDo) Offset(offset int) ISysdataitemDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysdataitemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysdataitemDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysdataitemDo) Unscoped() ISysdataitemDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysdataitemDo) Create(values ...*model.Sysdataitem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysdataitemDo) CreateInBatches(values []*model.Sysdataitem, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysdataitemDo) Save(values ...*model.Sysdataitem) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysdataitemDo) First() (*model.Sysdataitem, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitem), nil
	}
}

func (s sysdataitemDo) Take() (*model.Sysdataitem, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitem), nil
	}
}

func (s sysdataitemDo) Last() (*model.Sysdataitem, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitem), nil
	}
}

func (s sysdataitemDo) Find() ([]*model.Sysdataitem, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysdataitem), err
}

func (s sysdataitemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysdataitem, err error) {
	buf := make([]*model.Sysdataitem, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysdataitemDo) FindInBatches(result *[]*model.Sysdataitem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysdataitemDo) Attrs(attrs ...field.AssignExpr) ISysdataitemDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysdataitemDo) Assign(attrs ...field.AssignExpr) ISysdataitemDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysdataitemDo) Joins(fields ...field.RelationField) ISysdataitemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysdataitemDo) Preload(fields ...field.RelationField) ISysdataitemDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysdataitemDo) FirstOrInit() (*model.Sysdataitem, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitem), nil
	}
}

func (s sysdataitemDo) FirstOrCreate() (*model.Sysdataitem, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitem), nil
	}
}

func (s sysdataitemDo) FindByPage(offset int, limit int) (result []*model.Sysdataitem, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysdataitemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysdataitemDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysdataitemDo) Delete(models ...*model.Sysdataitem) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysdataitemDo) withDO(do gen.Dao) *sysdataitemDo {
	s.DO = *do.(*gen.DO)
	return s
}
