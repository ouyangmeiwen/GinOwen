// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newDasdatabaselink(db *gorm.DB) dasdatabaselink {
	_dasdatabaselink := dasdatabaselink{}

	_dasdatabaselink.dasdatabaselinkDo.UseDB(db)
	_dasdatabaselink.dasdatabaselinkDo.UseModel(&model.Dasdatabaselink{})

	tableName := _dasdatabaselink.dasdatabaselinkDo.TableName()
	_dasdatabaselink.ALL = field.NewAsterisk(tableName)
	_dasdatabaselink.ID = field.NewString(tableName, "Id")
	_dasdatabaselink.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasdatabaselink.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasdatabaselink.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_dasdatabaselink.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_dasdatabaselink.IsDeleted = field.NewField(tableName, "IsDeleted")
	_dasdatabaselink.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_dasdatabaselink.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_dasdatabaselink.Name = field.NewString(tableName, "Name")
	_dasdatabaselink.ConnectionString = field.NewString(tableName, "ConnectionString")
	_dasdatabaselink.Remark = field.NewString(tableName, "Remark")

	_dasdatabaselink.fillFieldMap()

	return _dasdatabaselink
}

type dasdatabaselink struct {
	dasdatabaselinkDo dasdatabaselinkDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	ConnectionString     field.String
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (d dasdatabaselink) Table(newTableName string) *dasdatabaselink {
	d.dasdatabaselinkDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasdatabaselink) As(alias string) *dasdatabaselink {
	d.dasdatabaselinkDo.DO = *(d.dasdatabaselinkDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasdatabaselink) updateTableName(table string) *dasdatabaselink {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.LastModificationTime = field.NewTime(table, "LastModificationTime")
	d.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	d.IsDeleted = field.NewField(table, "IsDeleted")
	d.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	d.DeletionTime = field.NewTime(table, "DeletionTime")
	d.Name = field.NewString(table, "Name")
	d.ConnectionString = field.NewString(table, "ConnectionString")
	d.Remark = field.NewString(table, "Remark")

	d.fillFieldMap()

	return d
}

func (d *dasdatabaselink) WithContext(ctx context.Context) IDasdatabaselinkDo {
	return d.dasdatabaselinkDo.WithContext(ctx)
}

func (d dasdatabaselink) TableName() string { return d.dasdatabaselinkDo.TableName() }

func (d dasdatabaselink) Alias() string { return d.dasdatabaselinkDo.Alias() }

func (d *dasdatabaselink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasdatabaselink) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["LastModificationTime"] = d.LastModificationTime
	d.fieldMap["LastModifierUserId"] = d.LastModifierUserID
	d.fieldMap["IsDeleted"] = d.IsDeleted
	d.fieldMap["DeleterUserId"] = d.DeleterUserID
	d.fieldMap["DeletionTime"] = d.DeletionTime
	d.fieldMap["Name"] = d.Name
	d.fieldMap["ConnectionString"] = d.ConnectionString
	d.fieldMap["Remark"] = d.Remark
}

func (d dasdatabaselink) clone(db *gorm.DB) dasdatabaselink {
	d.dasdatabaselinkDo.ReplaceDB(db)
	return d
}

type dasdatabaselinkDo struct{ gen.DO }

type IDasdatabaselinkDo interface {
	gen.SubQuery
	Debug() IDasdatabaselinkDo
	WithContext(ctx context.Context) IDasdatabaselinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasdatabaselinkDo
	Not(conds ...gen.Condition) IDasdatabaselinkDo
	Or(conds ...gen.Condition) IDasdatabaselinkDo
	Select(conds ...field.Expr) IDasdatabaselinkDo
	Where(conds ...gen.Condition) IDasdatabaselinkDo
	Order(conds ...field.Expr) IDasdatabaselinkDo
	Distinct(cols ...field.Expr) IDasdatabaselinkDo
	Omit(cols ...field.Expr) IDasdatabaselinkDo
	Join(table schema.Tabler, on ...field.Expr) IDasdatabaselinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasdatabaselinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasdatabaselinkDo
	Group(cols ...field.Expr) IDasdatabaselinkDo
	Having(conds ...gen.Condition) IDasdatabaselinkDo
	Limit(limit int) IDasdatabaselinkDo
	Offset(offset int) IDasdatabaselinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasdatabaselinkDo
	Unscoped() IDasdatabaselinkDo
	Create(values ...*model.Dasdatabaselink) error
	CreateInBatches(values []*model.Dasdatabaselink, batchSize int) error
	Save(values ...*model.Dasdatabaselink) error
	First() (*model.Dasdatabaselink, error)
	Take() (*model.Dasdatabaselink, error)
	Last() (*model.Dasdatabaselink, error)
	Find() ([]*model.Dasdatabaselink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasdatabaselink, err error)
	FindInBatches(result *[]*model.Dasdatabaselink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasdatabaselink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasdatabaselinkDo
	Assign(attrs ...field.AssignExpr) IDasdatabaselinkDo
	Joins(fields ...field.RelationField) IDasdatabaselinkDo
	Preload(fields ...field.RelationField) IDasdatabaselinkDo
	FirstOrInit() (*model.Dasdatabaselink, error)
	FirstOrCreate() (*model.Dasdatabaselink, error)
	FindByPage(offset int, limit int) (result []*model.Dasdatabaselink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasdatabaselinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasdatabaselinkDo) Debug() IDasdatabaselinkDo {
	return d.withDO(d.DO.Debug())
}

func (d dasdatabaselinkDo) WithContext(ctx context.Context) IDasdatabaselinkDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasdatabaselinkDo) ReadDB() IDasdatabaselinkDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasdatabaselinkDo) WriteDB() IDasdatabaselinkDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasdatabaselinkDo) Clauses(conds ...clause.Expression) IDasdatabaselinkDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasdatabaselinkDo) Returning(value interface{}, columns ...string) IDasdatabaselinkDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasdatabaselinkDo) Not(conds ...gen.Condition) IDasdatabaselinkDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasdatabaselinkDo) Or(conds ...gen.Condition) IDasdatabaselinkDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasdatabaselinkDo) Select(conds ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasdatabaselinkDo) Where(conds ...gen.Condition) IDasdatabaselinkDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasdatabaselinkDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasdatabaselinkDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasdatabaselinkDo) Order(conds ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasdatabaselinkDo) Distinct(cols ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasdatabaselinkDo) Omit(cols ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasdatabaselinkDo) Join(table schema.Tabler, on ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasdatabaselinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasdatabaselinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasdatabaselinkDo) Group(cols ...field.Expr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasdatabaselinkDo) Having(conds ...gen.Condition) IDasdatabaselinkDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasdatabaselinkDo) Limit(limit int) IDasdatabaselinkDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasdatabaselinkDo) Offset(offset int) IDasdatabaselinkDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasdatabaselinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasdatabaselinkDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasdatabaselinkDo) Unscoped() IDasdatabaselinkDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasdatabaselinkDo) Create(values ...*model.Dasdatabaselink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasdatabaselinkDo) CreateInBatches(values []*model.Dasdatabaselink, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasdatabaselinkDo) Save(values ...*model.Dasdatabaselink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasdatabaselinkDo) First() (*model.Dasdatabaselink, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatabaselink), nil
	}
}

func (d dasdatabaselinkDo) Take() (*model.Dasdatabaselink, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatabaselink), nil
	}
}

func (d dasdatabaselinkDo) Last() (*model.Dasdatabaselink, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatabaselink), nil
	}
}

func (d dasdatabaselinkDo) Find() ([]*model.Dasdatabaselink, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasdatabaselink), err
}

func (d dasdatabaselinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasdatabaselink, err error) {
	buf := make([]*model.Dasdatabaselink, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasdatabaselinkDo) FindInBatches(result *[]*model.Dasdatabaselink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasdatabaselinkDo) Attrs(attrs ...field.AssignExpr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasdatabaselinkDo) Assign(attrs ...field.AssignExpr) IDasdatabaselinkDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasdatabaselinkDo) Joins(fields ...field.RelationField) IDasdatabaselinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasdatabaselinkDo) Preload(fields ...field.RelationField) IDasdatabaselinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasdatabaselinkDo) FirstOrInit() (*model.Dasdatabaselink, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatabaselink), nil
	}
}

func (d dasdatabaselinkDo) FirstOrCreate() (*model.Dasdatabaselink, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatabaselink), nil
	}
}

func (d dasdatabaselinkDo) FindByPage(offset int, limit int) (result []*model.Dasdatabaselink, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasdatabaselinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasdatabaselinkDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasdatabaselinkDo) Delete(models ...*model.Dasdatabaselink) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasdatabaselinkDo) withDO(do gen.Dao) *dasdatabaselinkDo {
	d.DO = *do.(*gen.DO)
	return d
}
