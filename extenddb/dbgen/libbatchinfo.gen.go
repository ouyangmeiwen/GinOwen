// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibbatchinfo(db *gorm.DB) libbatchinfo {
	_libbatchinfo := libbatchinfo{}

	_libbatchinfo.libbatchinfoDo.UseDB(db)
	_libbatchinfo.libbatchinfoDo.UseModel(&model.Libbatchinfo{})

	tableName := _libbatchinfo.libbatchinfoDo.TableName()
	_libbatchinfo.ALL = field.NewAsterisk(tableName)
	_libbatchinfo.ID = field.NewString(tableName, "Id")
	_libbatchinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libbatchinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libbatchinfo.BatchNo = field.NewString(tableName, "BatchNo")
	_libbatchinfo.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libbatchinfo.Remark = field.NewString(tableName, "Remark")
	_libbatchinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_libbatchinfo.fillFieldMap()

	return _libbatchinfo
}

type libbatchinfo struct {
	libbatchinfoDo libbatchinfoDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	BatchNo       field.String
	ItemBarcode   field.String
	Remark        field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (l libbatchinfo) Table(newTableName string) *libbatchinfo {
	l.libbatchinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libbatchinfo) As(alias string) *libbatchinfo {
	l.libbatchinfoDo.DO = *(l.libbatchinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libbatchinfo) updateTableName(table string) *libbatchinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.BatchNo = field.NewString(table, "BatchNo")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libbatchinfo) WithContext(ctx context.Context) ILibbatchinfoDo {
	return l.libbatchinfoDo.WithContext(ctx)
}

func (l libbatchinfo) TableName() string { return l.libbatchinfoDo.TableName() }

func (l libbatchinfo) Alias() string { return l.libbatchinfoDo.Alias() }

func (l *libbatchinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libbatchinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["BatchNo"] = l.BatchNo
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libbatchinfo) clone(db *gorm.DB) libbatchinfo {
	l.libbatchinfoDo.ReplaceDB(db)
	return l
}

type libbatchinfoDo struct{ gen.DO }

type ILibbatchinfoDo interface {
	gen.SubQuery
	Debug() ILibbatchinfoDo
	WithContext(ctx context.Context) ILibbatchinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibbatchinfoDo
	Not(conds ...gen.Condition) ILibbatchinfoDo
	Or(conds ...gen.Condition) ILibbatchinfoDo
	Select(conds ...field.Expr) ILibbatchinfoDo
	Where(conds ...gen.Condition) ILibbatchinfoDo
	Order(conds ...field.Expr) ILibbatchinfoDo
	Distinct(cols ...field.Expr) ILibbatchinfoDo
	Omit(cols ...field.Expr) ILibbatchinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibbatchinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibbatchinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibbatchinfoDo
	Group(cols ...field.Expr) ILibbatchinfoDo
	Having(conds ...gen.Condition) ILibbatchinfoDo
	Limit(limit int) ILibbatchinfoDo
	Offset(offset int) ILibbatchinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbatchinfoDo
	Unscoped() ILibbatchinfoDo
	Create(values ...*model.Libbatchinfo) error
	CreateInBatches(values []*model.Libbatchinfo, batchSize int) error
	Save(values ...*model.Libbatchinfo) error
	First() (*model.Libbatchinfo, error)
	Take() (*model.Libbatchinfo, error)
	Last() (*model.Libbatchinfo, error)
	Find() ([]*model.Libbatchinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbatchinfo, err error)
	FindInBatches(result *[]*model.Libbatchinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libbatchinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibbatchinfoDo
	Assign(attrs ...field.AssignExpr) ILibbatchinfoDo
	Joins(fields ...field.RelationField) ILibbatchinfoDo
	Preload(fields ...field.RelationField) ILibbatchinfoDo
	FirstOrInit() (*model.Libbatchinfo, error)
	FirstOrCreate() (*model.Libbatchinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libbatchinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibbatchinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libbatchinfoDo) Debug() ILibbatchinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libbatchinfoDo) WithContext(ctx context.Context) ILibbatchinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libbatchinfoDo) ReadDB() ILibbatchinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libbatchinfoDo) WriteDB() ILibbatchinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libbatchinfoDo) Clauses(conds ...clause.Expression) ILibbatchinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libbatchinfoDo) Returning(value interface{}, columns ...string) ILibbatchinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libbatchinfoDo) Not(conds ...gen.Condition) ILibbatchinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libbatchinfoDo) Or(conds ...gen.Condition) ILibbatchinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libbatchinfoDo) Select(conds ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libbatchinfoDo) Where(conds ...gen.Condition) ILibbatchinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libbatchinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibbatchinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libbatchinfoDo) Order(conds ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libbatchinfoDo) Distinct(cols ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libbatchinfoDo) Omit(cols ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libbatchinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libbatchinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libbatchinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libbatchinfoDo) Group(cols ...field.Expr) ILibbatchinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libbatchinfoDo) Having(conds ...gen.Condition) ILibbatchinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libbatchinfoDo) Limit(limit int) ILibbatchinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libbatchinfoDo) Offset(offset int) ILibbatchinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libbatchinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbatchinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libbatchinfoDo) Unscoped() ILibbatchinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libbatchinfoDo) Create(values ...*model.Libbatchinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libbatchinfoDo) CreateInBatches(values []*model.Libbatchinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libbatchinfoDo) Save(values ...*model.Libbatchinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libbatchinfoDo) First() (*model.Libbatchinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchinfo), nil
	}
}

func (l libbatchinfoDo) Take() (*model.Libbatchinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchinfo), nil
	}
}

func (l libbatchinfoDo) Last() (*model.Libbatchinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchinfo), nil
	}
}

func (l libbatchinfoDo) Find() ([]*model.Libbatchinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libbatchinfo), err
}

func (l libbatchinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbatchinfo, err error) {
	buf := make([]*model.Libbatchinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libbatchinfoDo) FindInBatches(result *[]*model.Libbatchinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libbatchinfoDo) Attrs(attrs ...field.AssignExpr) ILibbatchinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libbatchinfoDo) Assign(attrs ...field.AssignExpr) ILibbatchinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libbatchinfoDo) Joins(fields ...field.RelationField) ILibbatchinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libbatchinfoDo) Preload(fields ...field.RelationField) ILibbatchinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libbatchinfoDo) FirstOrInit() (*model.Libbatchinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchinfo), nil
	}
}

func (l libbatchinfoDo) FirstOrCreate() (*model.Libbatchinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchinfo), nil
	}
}

func (l libbatchinfoDo) FindByPage(offset int, limit int) (result []*model.Libbatchinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libbatchinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libbatchinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libbatchinfoDo) Delete(models ...*model.Libbatchinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libbatchinfoDo) withDO(do gen.Dao) *libbatchinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
