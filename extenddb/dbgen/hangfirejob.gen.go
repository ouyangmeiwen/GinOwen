// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfirejob(db *gorm.DB) hangfirejob {
	_hangfirejob := hangfirejob{}

	_hangfirejob.hangfirejobDo.UseDB(db)
	_hangfirejob.hangfirejobDo.UseModel(&model.Hangfirejob{})

	tableName := _hangfirejob.hangfirejobDo.TableName()
	_hangfirejob.ALL = field.NewAsterisk(tableName)
	_hangfirejob.ID = field.NewInt64(tableName, "Id")
	_hangfirejob.StateID = field.NewInt64(tableName, "StateId")
	_hangfirejob.StateName = field.NewString(tableName, "StateName")
	_hangfirejob.InvocationData = field.NewString(tableName, "InvocationData")
	_hangfirejob.Arguments = field.NewString(tableName, "Arguments")
	_hangfirejob.CreatedAt = field.NewTime(tableName, "CreatedAt")
	_hangfirejob.ExpireAt = field.NewTime(tableName, "ExpireAt")

	_hangfirejob.fillFieldMap()

	return _hangfirejob
}

type hangfirejob struct {
	hangfirejobDo hangfirejobDo

	ALL            field.Asterisk
	ID             field.Int64
	StateID        field.Int64
	StateName      field.String
	InvocationData field.String
	Arguments      field.String
	CreatedAt      field.Time
	ExpireAt       field.Time

	fieldMap map[string]field.Expr
}

func (h hangfirejob) Table(newTableName string) *hangfirejob {
	h.hangfirejobDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirejob) As(alias string) *hangfirejob {
	h.hangfirejobDo.DO = *(h.hangfirejobDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirejob) updateTableName(table string) *hangfirejob {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.StateID = field.NewInt64(table, "StateId")
	h.StateName = field.NewString(table, "StateName")
	h.InvocationData = field.NewString(table, "InvocationData")
	h.Arguments = field.NewString(table, "Arguments")
	h.CreatedAt = field.NewTime(table, "CreatedAt")
	h.ExpireAt = field.NewTime(table, "ExpireAt")

	h.fillFieldMap()

	return h
}

func (h *hangfirejob) WithContext(ctx context.Context) IHangfirejobDo {
	return h.hangfirejobDo.WithContext(ctx)
}

func (h hangfirejob) TableName() string { return h.hangfirejobDo.TableName() }

func (h hangfirejob) Alias() string { return h.hangfirejobDo.Alias() }

func (h *hangfirejob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirejob) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 7)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["StateId"] = h.StateID
	h.fieldMap["StateName"] = h.StateName
	h.fieldMap["InvocationData"] = h.InvocationData
	h.fieldMap["Arguments"] = h.Arguments
	h.fieldMap["CreatedAt"] = h.CreatedAt
	h.fieldMap["ExpireAt"] = h.ExpireAt
}

func (h hangfirejob) clone(db *gorm.DB) hangfirejob {
	h.hangfirejobDo.ReplaceDB(db)
	return h
}

type hangfirejobDo struct{ gen.DO }

type IHangfirejobDo interface {
	gen.SubQuery
	Debug() IHangfirejobDo
	WithContext(ctx context.Context) IHangfirejobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirejobDo
	Not(conds ...gen.Condition) IHangfirejobDo
	Or(conds ...gen.Condition) IHangfirejobDo
	Select(conds ...field.Expr) IHangfirejobDo
	Where(conds ...gen.Condition) IHangfirejobDo
	Order(conds ...field.Expr) IHangfirejobDo
	Distinct(cols ...field.Expr) IHangfirejobDo
	Omit(cols ...field.Expr) IHangfirejobDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirejobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobDo
	Group(cols ...field.Expr) IHangfirejobDo
	Having(conds ...gen.Condition) IHangfirejobDo
	Limit(limit int) IHangfirejobDo
	Offset(offset int) IHangfirejobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobDo
	Unscoped() IHangfirejobDo
	Create(values ...*model.Hangfirejob) error
	CreateInBatches(values []*model.Hangfirejob, batchSize int) error
	Save(values ...*model.Hangfirejob) error
	First() (*model.Hangfirejob, error)
	Take() (*model.Hangfirejob, error)
	Last() (*model.Hangfirejob, error)
	Find() ([]*model.Hangfirejob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejob, err error)
	FindInBatches(result *[]*model.Hangfirejob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirejob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirejobDo
	Assign(attrs ...field.AssignExpr) IHangfirejobDo
	Joins(fields ...field.RelationField) IHangfirejobDo
	Preload(fields ...field.RelationField) IHangfirejobDo
	FirstOrInit() (*model.Hangfirejob, error)
	FirstOrCreate() (*model.Hangfirejob, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirejob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirejobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirejobDo) Debug() IHangfirejobDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirejobDo) WithContext(ctx context.Context) IHangfirejobDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirejobDo) ReadDB() IHangfirejobDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirejobDo) WriteDB() IHangfirejobDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirejobDo) Clauses(conds ...clause.Expression) IHangfirejobDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirejobDo) Returning(value interface{}, columns ...string) IHangfirejobDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirejobDo) Not(conds ...gen.Condition) IHangfirejobDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirejobDo) Or(conds ...gen.Condition) IHangfirejobDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirejobDo) Select(conds ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirejobDo) Where(conds ...gen.Condition) IHangfirejobDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirejobDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirejobDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirejobDo) Order(conds ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirejobDo) Distinct(cols ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirejobDo) Omit(cols ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirejobDo) Join(table schema.Tabler, on ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirejobDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirejobDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirejobDo) Group(cols ...field.Expr) IHangfirejobDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirejobDo) Having(conds ...gen.Condition) IHangfirejobDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirejobDo) Limit(limit int) IHangfirejobDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirejobDo) Offset(offset int) IHangfirejobDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirejobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirejobDo) Unscoped() IHangfirejobDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirejobDo) Create(values ...*model.Hangfirejob) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirejobDo) CreateInBatches(values []*model.Hangfirejob, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirejobDo) Save(values ...*model.Hangfirejob) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirejobDo) First() (*model.Hangfirejob, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejob), nil
	}
}

func (h hangfirejobDo) Take() (*model.Hangfirejob, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejob), nil
	}
}

func (h hangfirejobDo) Last() (*model.Hangfirejob, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejob), nil
	}
}

func (h hangfirejobDo) Find() ([]*model.Hangfirejob, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirejob), err
}

func (h hangfirejobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejob, err error) {
	buf := make([]*model.Hangfirejob, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirejobDo) FindInBatches(result *[]*model.Hangfirejob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirejobDo) Attrs(attrs ...field.AssignExpr) IHangfirejobDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirejobDo) Assign(attrs ...field.AssignExpr) IHangfirejobDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirejobDo) Joins(fields ...field.RelationField) IHangfirejobDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirejobDo) Preload(fields ...field.RelationField) IHangfirejobDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirejobDo) FirstOrInit() (*model.Hangfirejob, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejob), nil
	}
}

func (h hangfirejobDo) FirstOrCreate() (*model.Hangfirejob, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejob), nil
	}
}

func (h hangfirejobDo) FindByPage(offset int, limit int) (result []*model.Hangfirejob, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirejobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirejobDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirejobDo) Delete(models ...*model.Hangfirejob) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirejobDo) withDO(do gen.Dao) *hangfirejobDo {
	h.DO = *do.(*gen.DO)
	return h
}
