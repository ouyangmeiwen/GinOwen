// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppinvoice(db *gorm.DB) appinvoice {
	_appinvoice := appinvoice{}

	_appinvoice.appinvoiceDo.UseDB(db)
	_appinvoice.appinvoiceDo.UseModel(&model.Appinvoice{})

	tableName := _appinvoice.appinvoiceDo.TableName()
	_appinvoice.ALL = field.NewAsterisk(tableName)
	_appinvoice.ID = field.NewInt64(tableName, "Id")
	_appinvoice.InvoiceNo = field.NewString(tableName, "InvoiceNo")
	_appinvoice.InvoiceDate = field.NewTime(tableName, "InvoiceDate")
	_appinvoice.TenantLegalName = field.NewString(tableName, "TenantLegalName")
	_appinvoice.TenantAddress = field.NewString(tableName, "TenantAddress")
	_appinvoice.TenantTaxNo = field.NewString(tableName, "TenantTaxNo")

	_appinvoice.fillFieldMap()

	return _appinvoice
}

type appinvoice struct {
	appinvoiceDo appinvoiceDo

	ALL             field.Asterisk
	ID              field.Int64
	InvoiceNo       field.String
	InvoiceDate     field.Time
	TenantLegalName field.String
	TenantAddress   field.String
	TenantTaxNo     field.String

	fieldMap map[string]field.Expr
}

func (a appinvoice) Table(newTableName string) *appinvoice {
	a.appinvoiceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appinvoice) As(alias string) *appinvoice {
	a.appinvoiceDo.DO = *(a.appinvoiceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appinvoice) updateTableName(table string) *appinvoice {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.InvoiceNo = field.NewString(table, "InvoiceNo")
	a.InvoiceDate = field.NewTime(table, "InvoiceDate")
	a.TenantLegalName = field.NewString(table, "TenantLegalName")
	a.TenantAddress = field.NewString(table, "TenantAddress")
	a.TenantTaxNo = field.NewString(table, "TenantTaxNo")

	a.fillFieldMap()

	return a
}

func (a *appinvoice) WithContext(ctx context.Context) IAppinvoiceDo {
	return a.appinvoiceDo.WithContext(ctx)
}

func (a appinvoice) TableName() string { return a.appinvoiceDo.TableName() }

func (a appinvoice) Alias() string { return a.appinvoiceDo.Alias() }

func (a *appinvoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appinvoice) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["InvoiceNo"] = a.InvoiceNo
	a.fieldMap["InvoiceDate"] = a.InvoiceDate
	a.fieldMap["TenantLegalName"] = a.TenantLegalName
	a.fieldMap["TenantAddress"] = a.TenantAddress
	a.fieldMap["TenantTaxNo"] = a.TenantTaxNo
}

func (a appinvoice) clone(db *gorm.DB) appinvoice {
	a.appinvoiceDo.ReplaceDB(db)
	return a
}

type appinvoiceDo struct{ gen.DO }

type IAppinvoiceDo interface {
	gen.SubQuery
	Debug() IAppinvoiceDo
	WithContext(ctx context.Context) IAppinvoiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppinvoiceDo
	Not(conds ...gen.Condition) IAppinvoiceDo
	Or(conds ...gen.Condition) IAppinvoiceDo
	Select(conds ...field.Expr) IAppinvoiceDo
	Where(conds ...gen.Condition) IAppinvoiceDo
	Order(conds ...field.Expr) IAppinvoiceDo
	Distinct(cols ...field.Expr) IAppinvoiceDo
	Omit(cols ...field.Expr) IAppinvoiceDo
	Join(table schema.Tabler, on ...field.Expr) IAppinvoiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppinvoiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppinvoiceDo
	Group(cols ...field.Expr) IAppinvoiceDo
	Having(conds ...gen.Condition) IAppinvoiceDo
	Limit(limit int) IAppinvoiceDo
	Offset(offset int) IAppinvoiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppinvoiceDo
	Unscoped() IAppinvoiceDo
	Create(values ...*model.Appinvoice) error
	CreateInBatches(values []*model.Appinvoice, batchSize int) error
	Save(values ...*model.Appinvoice) error
	First() (*model.Appinvoice, error)
	Take() (*model.Appinvoice, error)
	Last() (*model.Appinvoice, error)
	Find() ([]*model.Appinvoice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appinvoice, err error)
	FindInBatches(result *[]*model.Appinvoice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appinvoice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppinvoiceDo
	Assign(attrs ...field.AssignExpr) IAppinvoiceDo
	Joins(fields ...field.RelationField) IAppinvoiceDo
	Preload(fields ...field.RelationField) IAppinvoiceDo
	FirstOrInit() (*model.Appinvoice, error)
	FirstOrCreate() (*model.Appinvoice, error)
	FindByPage(offset int, limit int) (result []*model.Appinvoice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppinvoiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appinvoiceDo) Debug() IAppinvoiceDo {
	return a.withDO(a.DO.Debug())
}

func (a appinvoiceDo) WithContext(ctx context.Context) IAppinvoiceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appinvoiceDo) ReadDB() IAppinvoiceDo {
	return a.Clauses(dbresolver.Read)
}

func (a appinvoiceDo) WriteDB() IAppinvoiceDo {
	return a.Clauses(dbresolver.Write)
}

func (a appinvoiceDo) Clauses(conds ...clause.Expression) IAppinvoiceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appinvoiceDo) Returning(value interface{}, columns ...string) IAppinvoiceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appinvoiceDo) Not(conds ...gen.Condition) IAppinvoiceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appinvoiceDo) Or(conds ...gen.Condition) IAppinvoiceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appinvoiceDo) Select(conds ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appinvoiceDo) Where(conds ...gen.Condition) IAppinvoiceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appinvoiceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppinvoiceDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appinvoiceDo) Order(conds ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appinvoiceDo) Distinct(cols ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appinvoiceDo) Omit(cols ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appinvoiceDo) Join(table schema.Tabler, on ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appinvoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appinvoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appinvoiceDo) Group(cols ...field.Expr) IAppinvoiceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appinvoiceDo) Having(conds ...gen.Condition) IAppinvoiceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appinvoiceDo) Limit(limit int) IAppinvoiceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appinvoiceDo) Offset(offset int) IAppinvoiceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appinvoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppinvoiceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appinvoiceDo) Unscoped() IAppinvoiceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appinvoiceDo) Create(values ...*model.Appinvoice) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appinvoiceDo) CreateInBatches(values []*model.Appinvoice, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appinvoiceDo) Save(values ...*model.Appinvoice) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appinvoiceDo) First() (*model.Appinvoice, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appinvoice), nil
	}
}

func (a appinvoiceDo) Take() (*model.Appinvoice, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appinvoice), nil
	}
}

func (a appinvoiceDo) Last() (*model.Appinvoice, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appinvoice), nil
	}
}

func (a appinvoiceDo) Find() ([]*model.Appinvoice, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appinvoice), err
}

func (a appinvoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appinvoice, err error) {
	buf := make([]*model.Appinvoice, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appinvoiceDo) FindInBatches(result *[]*model.Appinvoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appinvoiceDo) Attrs(attrs ...field.AssignExpr) IAppinvoiceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appinvoiceDo) Assign(attrs ...field.AssignExpr) IAppinvoiceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appinvoiceDo) Joins(fields ...field.RelationField) IAppinvoiceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appinvoiceDo) Preload(fields ...field.RelationField) IAppinvoiceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appinvoiceDo) FirstOrInit() (*model.Appinvoice, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appinvoice), nil
	}
}

func (a appinvoiceDo) FirstOrCreate() (*model.Appinvoice, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appinvoice), nil
	}
}

func (a appinvoiceDo) FindByPage(offset int, limit int) (result []*model.Appinvoice, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appinvoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appinvoiceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appinvoiceDo) Delete(models ...*model.Appinvoice) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appinvoiceDo) withDO(do gen.Dao) *appinvoiceDo {
	a.DO = *do.(*gen.DO)
	return a
}
