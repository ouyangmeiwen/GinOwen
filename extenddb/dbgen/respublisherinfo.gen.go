// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newRespublisherinfo(db *gorm.DB) respublisherinfo {
	_respublisherinfo := respublisherinfo{}

	_respublisherinfo.respublisherinfoDo.UseDB(db)
	_respublisherinfo.respublisherinfoDo.UseModel(&model.Respublisherinfo{})

	tableName := _respublisherinfo.respublisherinfoDo.TableName()
	_respublisherinfo.ALL = field.NewAsterisk(tableName)
	_respublisherinfo.ID = field.NewInt64(tableName, "Id")
	_respublisherinfo.Code = field.NewString(tableName, "Code")
	_respublisherinfo.Name = field.NewString(tableName, "Name")
	_respublisherinfo.Area = field.NewString(tableName, "Area")
	_respublisherinfo.Address = field.NewString(tableName, "Address")
	_respublisherinfo.ZipCode = field.NewString(tableName, "ZipCode")
	_respublisherinfo.Phone = field.NewString(tableName, "Phone")
	_respublisherinfo.PublisherType = field.NewString(tableName, "PublisherType")

	_respublisherinfo.fillFieldMap()

	return _respublisherinfo
}

type respublisherinfo struct {
	respublisherinfoDo respublisherinfoDo

	ALL           field.Asterisk
	ID            field.Int64
	Code          field.String
	Name          field.String
	Area          field.String
	Address       field.String
	ZipCode       field.String
	Phone         field.String
	PublisherType field.String

	fieldMap map[string]field.Expr
}

func (r respublisherinfo) Table(newTableName string) *respublisherinfo {
	r.respublisherinfoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r respublisherinfo) As(alias string) *respublisherinfo {
	r.respublisherinfoDo.DO = *(r.respublisherinfoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *respublisherinfo) updateTableName(table string) *respublisherinfo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "Id")
	r.Code = field.NewString(table, "Code")
	r.Name = field.NewString(table, "Name")
	r.Area = field.NewString(table, "Area")
	r.Address = field.NewString(table, "Address")
	r.ZipCode = field.NewString(table, "ZipCode")
	r.Phone = field.NewString(table, "Phone")
	r.PublisherType = field.NewString(table, "PublisherType")

	r.fillFieldMap()

	return r
}

func (r *respublisherinfo) WithContext(ctx context.Context) IRespublisherinfoDo {
	return r.respublisherinfoDo.WithContext(ctx)
}

func (r respublisherinfo) TableName() string { return r.respublisherinfoDo.TableName() }

func (r respublisherinfo) Alias() string { return r.respublisherinfoDo.Alias() }

func (r *respublisherinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *respublisherinfo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["Id"] = r.ID
	r.fieldMap["Code"] = r.Code
	r.fieldMap["Name"] = r.Name
	r.fieldMap["Area"] = r.Area
	r.fieldMap["Address"] = r.Address
	r.fieldMap["ZipCode"] = r.ZipCode
	r.fieldMap["Phone"] = r.Phone
	r.fieldMap["PublisherType"] = r.PublisherType
}

func (r respublisherinfo) clone(db *gorm.DB) respublisherinfo {
	r.respublisherinfoDo.ReplaceDB(db)
	return r
}

type respublisherinfoDo struct{ gen.DO }

type IRespublisherinfoDo interface {
	gen.SubQuery
	Debug() IRespublisherinfoDo
	WithContext(ctx context.Context) IRespublisherinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRespublisherinfoDo
	Not(conds ...gen.Condition) IRespublisherinfoDo
	Or(conds ...gen.Condition) IRespublisherinfoDo
	Select(conds ...field.Expr) IRespublisherinfoDo
	Where(conds ...gen.Condition) IRespublisherinfoDo
	Order(conds ...field.Expr) IRespublisherinfoDo
	Distinct(cols ...field.Expr) IRespublisherinfoDo
	Omit(cols ...field.Expr) IRespublisherinfoDo
	Join(table schema.Tabler, on ...field.Expr) IRespublisherinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRespublisherinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRespublisherinfoDo
	Group(cols ...field.Expr) IRespublisherinfoDo
	Having(conds ...gen.Condition) IRespublisherinfoDo
	Limit(limit int) IRespublisherinfoDo
	Offset(offset int) IRespublisherinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRespublisherinfoDo
	Unscoped() IRespublisherinfoDo
	Create(values ...*model.Respublisherinfo) error
	CreateInBatches(values []*model.Respublisherinfo, batchSize int) error
	Save(values ...*model.Respublisherinfo) error
	First() (*model.Respublisherinfo, error)
	Take() (*model.Respublisherinfo, error)
	Last() (*model.Respublisherinfo, error)
	Find() ([]*model.Respublisherinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Respublisherinfo, err error)
	FindInBatches(result *[]*model.Respublisherinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Respublisherinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRespublisherinfoDo
	Assign(attrs ...field.AssignExpr) IRespublisherinfoDo
	Joins(fields ...field.RelationField) IRespublisherinfoDo
	Preload(fields ...field.RelationField) IRespublisherinfoDo
	FirstOrInit() (*model.Respublisherinfo, error)
	FirstOrCreate() (*model.Respublisherinfo, error)
	FindByPage(offset int, limit int) (result []*model.Respublisherinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRespublisherinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r respublisherinfoDo) Debug() IRespublisherinfoDo {
	return r.withDO(r.DO.Debug())
}

func (r respublisherinfoDo) WithContext(ctx context.Context) IRespublisherinfoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r respublisherinfoDo) ReadDB() IRespublisherinfoDo {
	return r.Clauses(dbresolver.Read)
}

func (r respublisherinfoDo) WriteDB() IRespublisherinfoDo {
	return r.Clauses(dbresolver.Write)
}

func (r respublisherinfoDo) Clauses(conds ...clause.Expression) IRespublisherinfoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r respublisherinfoDo) Returning(value interface{}, columns ...string) IRespublisherinfoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r respublisherinfoDo) Not(conds ...gen.Condition) IRespublisherinfoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r respublisherinfoDo) Or(conds ...gen.Condition) IRespublisherinfoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r respublisherinfoDo) Select(conds ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r respublisherinfoDo) Where(conds ...gen.Condition) IRespublisherinfoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r respublisherinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRespublisherinfoDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r respublisherinfoDo) Order(conds ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r respublisherinfoDo) Distinct(cols ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r respublisherinfoDo) Omit(cols ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r respublisherinfoDo) Join(table schema.Tabler, on ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r respublisherinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r respublisherinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r respublisherinfoDo) Group(cols ...field.Expr) IRespublisherinfoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r respublisherinfoDo) Having(conds ...gen.Condition) IRespublisherinfoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r respublisherinfoDo) Limit(limit int) IRespublisherinfoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r respublisherinfoDo) Offset(offset int) IRespublisherinfoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r respublisherinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRespublisherinfoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r respublisherinfoDo) Unscoped() IRespublisherinfoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r respublisherinfoDo) Create(values ...*model.Respublisherinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r respublisherinfoDo) CreateInBatches(values []*model.Respublisherinfo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r respublisherinfoDo) Save(values ...*model.Respublisherinfo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r respublisherinfoDo) First() (*model.Respublisherinfo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Respublisherinfo), nil
	}
}

func (r respublisherinfoDo) Take() (*model.Respublisherinfo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Respublisherinfo), nil
	}
}

func (r respublisherinfoDo) Last() (*model.Respublisherinfo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Respublisherinfo), nil
	}
}

func (r respublisherinfoDo) Find() ([]*model.Respublisherinfo, error) {
	result, err := r.DO.Find()
	return result.([]*model.Respublisherinfo), err
}

func (r respublisherinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Respublisherinfo, err error) {
	buf := make([]*model.Respublisherinfo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r respublisherinfoDo) FindInBatches(result *[]*model.Respublisherinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r respublisherinfoDo) Attrs(attrs ...field.AssignExpr) IRespublisherinfoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r respublisherinfoDo) Assign(attrs ...field.AssignExpr) IRespublisherinfoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r respublisherinfoDo) Joins(fields ...field.RelationField) IRespublisherinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r respublisherinfoDo) Preload(fields ...field.RelationField) IRespublisherinfoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r respublisherinfoDo) FirstOrInit() (*model.Respublisherinfo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Respublisherinfo), nil
	}
}

func (r respublisherinfoDo) FirstOrCreate() (*model.Respublisherinfo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Respublisherinfo), nil
	}
}

func (r respublisherinfoDo) FindByPage(offset int, limit int) (result []*model.Respublisherinfo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r respublisherinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r respublisherinfoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r respublisherinfoDo) Delete(models ...*model.Respublisherinfo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *respublisherinfoDo) withDO(do gen.Dao) *respublisherinfoDo {
	r.DO = *do.(*gen.DO)
	return r
}
