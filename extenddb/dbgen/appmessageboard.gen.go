// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppmessageboard(db *gorm.DB) appmessageboard {
	_appmessageboard := appmessageboard{}

	_appmessageboard.appmessageboardDo.UseDB(db)
	_appmessageboard.appmessageboardDo.UseModel(&model.Appmessageboard{})

	tableName := _appmessageboard.appmessageboardDo.TableName()
	_appmessageboard.ALL = field.NewAsterisk(tableName)
	_appmessageboard.ID = field.NewString(tableName, "Id")
	_appmessageboard.CreationTime = field.NewTime(tableName, "CreationTime")
	_appmessageboard.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appmessageboard.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appmessageboard.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appmessageboard.IsDeleted = field.NewField(tableName, "IsDeleted")
	_appmessageboard.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_appmessageboard.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_appmessageboard.OpenID = field.NewString(tableName, "OpenId")
	_appmessageboard.PatronID = field.NewString(tableName, "PatronId")
	_appmessageboard.PatronName = field.NewString(tableName, "PatronName")
	_appmessageboard.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_appmessageboard.Content = field.NewString(tableName, "Content")
	_appmessageboard.ParentID = field.NewString(tableName, "ParentId")
	_appmessageboard.AttachmentID = field.NewString(tableName, "AttachmentId")
	_appmessageboard.TenantID = field.NewInt64(tableName, "TenantId")

	_appmessageboard.fillFieldMap()

	return _appmessageboard
}

type appmessageboard struct {
	appmessageboardDo appmessageboardDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	OpenID               field.String
	PatronID             field.String
	PatronName           field.String
	PatronBarcode        field.String
	Content              field.String
	ParentID             field.String
	AttachmentID         field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appmessageboard) Table(newTableName string) *appmessageboard {
	a.appmessageboardDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appmessageboard) As(alias string) *appmessageboard {
	a.appmessageboardDo.DO = *(a.appmessageboardDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appmessageboard) updateTableName(table string) *appmessageboard {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.OpenID = field.NewString(table, "OpenId")
	a.PatronID = field.NewString(table, "PatronId")
	a.PatronName = field.NewString(table, "PatronName")
	a.PatronBarcode = field.NewString(table, "PatronBarcode")
	a.Content = field.NewString(table, "Content")
	a.ParentID = field.NewString(table, "ParentId")
	a.AttachmentID = field.NewString(table, "AttachmentId")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appmessageboard) WithContext(ctx context.Context) IAppmessageboardDo {
	return a.appmessageboardDo.WithContext(ctx)
}

func (a appmessageboard) TableName() string { return a.appmessageboardDo.TableName() }

func (a appmessageboard) Alias() string { return a.appmessageboardDo.Alias() }

func (a *appmessageboard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appmessageboard) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["OpenId"] = a.OpenID
	a.fieldMap["PatronId"] = a.PatronID
	a.fieldMap["PatronName"] = a.PatronName
	a.fieldMap["PatronBarcode"] = a.PatronBarcode
	a.fieldMap["Content"] = a.Content
	a.fieldMap["ParentId"] = a.ParentID
	a.fieldMap["AttachmentId"] = a.AttachmentID
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appmessageboard) clone(db *gorm.DB) appmessageboard {
	a.appmessageboardDo.ReplaceDB(db)
	return a
}

type appmessageboardDo struct{ gen.DO }

type IAppmessageboardDo interface {
	gen.SubQuery
	Debug() IAppmessageboardDo
	WithContext(ctx context.Context) IAppmessageboardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppmessageboardDo
	Not(conds ...gen.Condition) IAppmessageboardDo
	Or(conds ...gen.Condition) IAppmessageboardDo
	Select(conds ...field.Expr) IAppmessageboardDo
	Where(conds ...gen.Condition) IAppmessageboardDo
	Order(conds ...field.Expr) IAppmessageboardDo
	Distinct(cols ...field.Expr) IAppmessageboardDo
	Omit(cols ...field.Expr) IAppmessageboardDo
	Join(table schema.Tabler, on ...field.Expr) IAppmessageboardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppmessageboardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppmessageboardDo
	Group(cols ...field.Expr) IAppmessageboardDo
	Having(conds ...gen.Condition) IAppmessageboardDo
	Limit(limit int) IAppmessageboardDo
	Offset(offset int) IAppmessageboardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppmessageboardDo
	Unscoped() IAppmessageboardDo
	Create(values ...*model.Appmessageboard) error
	CreateInBatches(values []*model.Appmessageboard, batchSize int) error
	Save(values ...*model.Appmessageboard) error
	First() (*model.Appmessageboard, error)
	Take() (*model.Appmessageboard, error)
	Last() (*model.Appmessageboard, error)
	Find() ([]*model.Appmessageboard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appmessageboard, err error)
	FindInBatches(result *[]*model.Appmessageboard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appmessageboard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppmessageboardDo
	Assign(attrs ...field.AssignExpr) IAppmessageboardDo
	Joins(fields ...field.RelationField) IAppmessageboardDo
	Preload(fields ...field.RelationField) IAppmessageboardDo
	FirstOrInit() (*model.Appmessageboard, error)
	FirstOrCreate() (*model.Appmessageboard, error)
	FindByPage(offset int, limit int) (result []*model.Appmessageboard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppmessageboardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appmessageboardDo) Debug() IAppmessageboardDo {
	return a.withDO(a.DO.Debug())
}

func (a appmessageboardDo) WithContext(ctx context.Context) IAppmessageboardDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appmessageboardDo) ReadDB() IAppmessageboardDo {
	return a.Clauses(dbresolver.Read)
}

func (a appmessageboardDo) WriteDB() IAppmessageboardDo {
	return a.Clauses(dbresolver.Write)
}

func (a appmessageboardDo) Clauses(conds ...clause.Expression) IAppmessageboardDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appmessageboardDo) Returning(value interface{}, columns ...string) IAppmessageboardDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appmessageboardDo) Not(conds ...gen.Condition) IAppmessageboardDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appmessageboardDo) Or(conds ...gen.Condition) IAppmessageboardDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appmessageboardDo) Select(conds ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appmessageboardDo) Where(conds ...gen.Condition) IAppmessageboardDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appmessageboardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppmessageboardDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appmessageboardDo) Order(conds ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appmessageboardDo) Distinct(cols ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appmessageboardDo) Omit(cols ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appmessageboardDo) Join(table schema.Tabler, on ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appmessageboardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appmessageboardDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appmessageboardDo) Group(cols ...field.Expr) IAppmessageboardDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appmessageboardDo) Having(conds ...gen.Condition) IAppmessageboardDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appmessageboardDo) Limit(limit int) IAppmessageboardDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appmessageboardDo) Offset(offset int) IAppmessageboardDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appmessageboardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppmessageboardDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appmessageboardDo) Unscoped() IAppmessageboardDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appmessageboardDo) Create(values ...*model.Appmessageboard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appmessageboardDo) CreateInBatches(values []*model.Appmessageboard, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appmessageboardDo) Save(values ...*model.Appmessageboard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appmessageboardDo) First() (*model.Appmessageboard, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appmessageboard), nil
	}
}

func (a appmessageboardDo) Take() (*model.Appmessageboard, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appmessageboard), nil
	}
}

func (a appmessageboardDo) Last() (*model.Appmessageboard, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appmessageboard), nil
	}
}

func (a appmessageboardDo) Find() ([]*model.Appmessageboard, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appmessageboard), err
}

func (a appmessageboardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appmessageboard, err error) {
	buf := make([]*model.Appmessageboard, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appmessageboardDo) FindInBatches(result *[]*model.Appmessageboard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appmessageboardDo) Attrs(attrs ...field.AssignExpr) IAppmessageboardDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appmessageboardDo) Assign(attrs ...field.AssignExpr) IAppmessageboardDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appmessageboardDo) Joins(fields ...field.RelationField) IAppmessageboardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appmessageboardDo) Preload(fields ...field.RelationField) IAppmessageboardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appmessageboardDo) FirstOrInit() (*model.Appmessageboard, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appmessageboard), nil
	}
}

func (a appmessageboardDo) FirstOrCreate() (*model.Appmessageboard, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appmessageboard), nil
	}
}

func (a appmessageboardDo) FindByPage(offset int, limit int) (result []*model.Appmessageboard, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appmessageboardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appmessageboardDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appmessageboardDo) Delete(models ...*model.Appmessageboard) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appmessageboardDo) withDO(do gen.Dao) *appmessageboardDo {
	a.DO = *do.(*gen.DO)
	return a
}
