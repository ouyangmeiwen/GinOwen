// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysauditlmslog(db *gorm.DB) sysauditlmslog {
	_sysauditlmslog := sysauditlmslog{}

	_sysauditlmslog.sysauditlmslogDo.UseDB(db)
	_sysauditlmslog.sysauditlmslogDo.UseModel(&model.Sysauditlmslog{})

	tableName := _sysauditlmslog.sysauditlmslogDo.TableName()
	_sysauditlmslog.ALL = field.NewAsterisk(tableName)
	_sysauditlmslog.ID = field.NewInt64(tableName, "Id")
	_sysauditlmslog.BrowserInfo = field.NewString(tableName, "BrowserInfo")
	_sysauditlmslog.ClientIPAddress = field.NewString(tableName, "ClientIpAddress")
	_sysauditlmslog.ClientName = field.NewString(tableName, "ClientName")
	_sysauditlmslog.CustomData = field.NewString(tableName, "CustomData")
	_sysauditlmslog.Exception = field.NewString(tableName, "Exception")
	_sysauditlmslog.ExecutionDuration = field.NewInt64(tableName, "ExecutionDuration")
	_sysauditlmslog.ExecutionTime = field.NewTime(tableName, "ExecutionTime")
	_sysauditlmslog.ImpersonatorTenantID = field.NewInt64(tableName, "ImpersonatorTenantId")
	_sysauditlmslog.ImpersonatorUserID = field.NewInt64(tableName, "ImpersonatorUserId")
	_sysauditlmslog.MethodName = field.NewString(tableName, "MethodName")
	_sysauditlmslog.Parameters = field.NewString(tableName, "Parameters")
	_sysauditlmslog.ServiceName = field.NewString(tableName, "ServiceName")
	_sysauditlmslog.TenantID = field.NewInt64(tableName, "TenantId")
	_sysauditlmslog.UserID = field.NewInt64(tableName, "UserId")
	_sysauditlmslog.ReturnValue = field.NewString(tableName, "ReturnValue")

	_sysauditlmslog.fillFieldMap()

	return _sysauditlmslog
}

type sysauditlmslog struct {
	sysauditlmslogDo sysauditlmslogDo

	ALL                  field.Asterisk
	ID                   field.Int64
	BrowserInfo          field.String
	ClientIPAddress      field.String
	ClientName           field.String
	CustomData           field.String
	Exception            field.String
	ExecutionDuration    field.Int64
	ExecutionTime        field.Time
	ImpersonatorTenantID field.Int64
	ImpersonatorUserID   field.Int64
	MethodName           field.String
	Parameters           field.String
	ServiceName          field.String
	TenantID             field.Int64
	UserID               field.Int64
	ReturnValue          field.String

	fieldMap map[string]field.Expr
}

func (s sysauditlmslog) Table(newTableName string) *sysauditlmslog {
	s.sysauditlmslogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysauditlmslog) As(alias string) *sysauditlmslog {
	s.sysauditlmslogDo.DO = *(s.sysauditlmslogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysauditlmslog) updateTableName(table string) *sysauditlmslog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "Id")
	s.BrowserInfo = field.NewString(table, "BrowserInfo")
	s.ClientIPAddress = field.NewString(table, "ClientIpAddress")
	s.ClientName = field.NewString(table, "ClientName")
	s.CustomData = field.NewString(table, "CustomData")
	s.Exception = field.NewString(table, "Exception")
	s.ExecutionDuration = field.NewInt64(table, "ExecutionDuration")
	s.ExecutionTime = field.NewTime(table, "ExecutionTime")
	s.ImpersonatorTenantID = field.NewInt64(table, "ImpersonatorTenantId")
	s.ImpersonatorUserID = field.NewInt64(table, "ImpersonatorUserId")
	s.MethodName = field.NewString(table, "MethodName")
	s.Parameters = field.NewString(table, "Parameters")
	s.ServiceName = field.NewString(table, "ServiceName")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.UserID = field.NewInt64(table, "UserId")
	s.ReturnValue = field.NewString(table, "ReturnValue")

	s.fillFieldMap()

	return s
}

func (s *sysauditlmslog) WithContext(ctx context.Context) ISysauditlmslogDo {
	return s.sysauditlmslogDo.WithContext(ctx)
}

func (s sysauditlmslog) TableName() string { return s.sysauditlmslogDo.TableName() }

func (s sysauditlmslog) Alias() string { return s.sysauditlmslogDo.Alias() }

func (s *sysauditlmslog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysauditlmslog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["BrowserInfo"] = s.BrowserInfo
	s.fieldMap["ClientIpAddress"] = s.ClientIPAddress
	s.fieldMap["ClientName"] = s.ClientName
	s.fieldMap["CustomData"] = s.CustomData
	s.fieldMap["Exception"] = s.Exception
	s.fieldMap["ExecutionDuration"] = s.ExecutionDuration
	s.fieldMap["ExecutionTime"] = s.ExecutionTime
	s.fieldMap["ImpersonatorTenantId"] = s.ImpersonatorTenantID
	s.fieldMap["ImpersonatorUserId"] = s.ImpersonatorUserID
	s.fieldMap["MethodName"] = s.MethodName
	s.fieldMap["Parameters"] = s.Parameters
	s.fieldMap["ServiceName"] = s.ServiceName
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["ReturnValue"] = s.ReturnValue
}

func (s sysauditlmslog) clone(db *gorm.DB) sysauditlmslog {
	s.sysauditlmslogDo.ReplaceDB(db)
	return s
}

type sysauditlmslogDo struct{ gen.DO }

type ISysauditlmslogDo interface {
	gen.SubQuery
	Debug() ISysauditlmslogDo
	WithContext(ctx context.Context) ISysauditlmslogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysauditlmslogDo
	Not(conds ...gen.Condition) ISysauditlmslogDo
	Or(conds ...gen.Condition) ISysauditlmslogDo
	Select(conds ...field.Expr) ISysauditlmslogDo
	Where(conds ...gen.Condition) ISysauditlmslogDo
	Order(conds ...field.Expr) ISysauditlmslogDo
	Distinct(cols ...field.Expr) ISysauditlmslogDo
	Omit(cols ...field.Expr) ISysauditlmslogDo
	Join(table schema.Tabler, on ...field.Expr) ISysauditlmslogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditlmslogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysauditlmslogDo
	Group(cols ...field.Expr) ISysauditlmslogDo
	Having(conds ...gen.Condition) ISysauditlmslogDo
	Limit(limit int) ISysauditlmslogDo
	Offset(offset int) ISysauditlmslogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditlmslogDo
	Unscoped() ISysauditlmslogDo
	Create(values ...*model.Sysauditlmslog) error
	CreateInBatches(values []*model.Sysauditlmslog, batchSize int) error
	Save(values ...*model.Sysauditlmslog) error
	First() (*model.Sysauditlmslog, error)
	Take() (*model.Sysauditlmslog, error)
	Last() (*model.Sysauditlmslog, error)
	Find() ([]*model.Sysauditlmslog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditlmslog, err error)
	FindInBatches(result *[]*model.Sysauditlmslog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysauditlmslog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysauditlmslogDo
	Assign(attrs ...field.AssignExpr) ISysauditlmslogDo
	Joins(fields ...field.RelationField) ISysauditlmslogDo
	Preload(fields ...field.RelationField) ISysauditlmslogDo
	FirstOrInit() (*model.Sysauditlmslog, error)
	FirstOrCreate() (*model.Sysauditlmslog, error)
	FindByPage(offset int, limit int) (result []*model.Sysauditlmslog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysauditlmslogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysauditlmslogDo) Debug() ISysauditlmslogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysauditlmslogDo) WithContext(ctx context.Context) ISysauditlmslogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysauditlmslogDo) ReadDB() ISysauditlmslogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysauditlmslogDo) WriteDB() ISysauditlmslogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysauditlmslogDo) Clauses(conds ...clause.Expression) ISysauditlmslogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysauditlmslogDo) Returning(value interface{}, columns ...string) ISysauditlmslogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysauditlmslogDo) Not(conds ...gen.Condition) ISysauditlmslogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysauditlmslogDo) Or(conds ...gen.Condition) ISysauditlmslogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysauditlmslogDo) Select(conds ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysauditlmslogDo) Where(conds ...gen.Condition) ISysauditlmslogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysauditlmslogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysauditlmslogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysauditlmslogDo) Order(conds ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysauditlmslogDo) Distinct(cols ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysauditlmslogDo) Omit(cols ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysauditlmslogDo) Join(table schema.Tabler, on ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysauditlmslogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysauditlmslogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysauditlmslogDo) Group(cols ...field.Expr) ISysauditlmslogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysauditlmslogDo) Having(conds ...gen.Condition) ISysauditlmslogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysauditlmslogDo) Limit(limit int) ISysauditlmslogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysauditlmslogDo) Offset(offset int) ISysauditlmslogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysauditlmslogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditlmslogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysauditlmslogDo) Unscoped() ISysauditlmslogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysauditlmslogDo) Create(values ...*model.Sysauditlmslog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysauditlmslogDo) CreateInBatches(values []*model.Sysauditlmslog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysauditlmslogDo) Save(values ...*model.Sysauditlmslog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysauditlmslogDo) First() (*model.Sysauditlmslog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlmslog), nil
	}
}

func (s sysauditlmslogDo) Take() (*model.Sysauditlmslog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlmslog), nil
	}
}

func (s sysauditlmslogDo) Last() (*model.Sysauditlmslog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlmslog), nil
	}
}

func (s sysauditlmslogDo) Find() ([]*model.Sysauditlmslog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysauditlmslog), err
}

func (s sysauditlmslogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditlmslog, err error) {
	buf := make([]*model.Sysauditlmslog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysauditlmslogDo) FindInBatches(result *[]*model.Sysauditlmslog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysauditlmslogDo) Attrs(attrs ...field.AssignExpr) ISysauditlmslogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysauditlmslogDo) Assign(attrs ...field.AssignExpr) ISysauditlmslogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysauditlmslogDo) Joins(fields ...field.RelationField) ISysauditlmslogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysauditlmslogDo) Preload(fields ...field.RelationField) ISysauditlmslogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysauditlmslogDo) FirstOrInit() (*model.Sysauditlmslog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlmslog), nil
	}
}

func (s sysauditlmslogDo) FirstOrCreate() (*model.Sysauditlmslog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlmslog), nil
	}
}

func (s sysauditlmslogDo) FindByPage(offset int, limit int) (result []*model.Sysauditlmslog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysauditlmslogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysauditlmslogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysauditlmslogDo) Delete(models ...*model.Sysauditlmslog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysauditlmslogDo) withDO(do gen.Dao) *sysauditlmslogDo {
	s.DO = *do.(*gen.DO)
	return s
}
