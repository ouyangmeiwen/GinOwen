// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpedition(db *gorm.DB) abpedition {
	_abpedition := abpedition{}

	_abpedition.abpeditionDo.UseDB(db)
	_abpedition.abpeditionDo.UseModel(&model.Abpedition{})

	tableName := _abpedition.abpeditionDo.TableName()
	_abpedition.ALL = field.NewAsterisk(tableName)
	_abpedition.ID = field.NewInt64(tableName, "Id")
	_abpedition.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpedition.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpedition.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abpedition.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abpedition.IsDeleted = field.NewField(tableName, "IsDeleted")
	_abpedition.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_abpedition.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_abpedition.Name = field.NewString(tableName, "Name")
	_abpedition.DisplayName = field.NewString(tableName, "DisplayName")
	_abpedition.Discriminator = field.NewString(tableName, "Discriminator")
	_abpedition.ExpiringEditionID = field.NewInt64(tableName, "ExpiringEditionId")
	_abpedition.MonthlyPrice = field.NewFloat64(tableName, "MonthlyPrice")
	_abpedition.AnnualPrice = field.NewFloat64(tableName, "AnnualPrice")
	_abpedition.TrialDayCount = field.NewInt64(tableName, "TrialDayCount")
	_abpedition.WaitingDayAfterExpire = field.NewInt64(tableName, "WaitingDayAfterExpire")

	_abpedition.fillFieldMap()

	return _abpedition
}

type abpedition struct {
	abpeditionDo abpeditionDo

	ALL                   field.Asterisk
	ID                    field.Int64
	CreationTime          field.Time
	CreatorUserID         field.Int64
	LastModificationTime  field.Time
	LastModifierUserID    field.Int64
	IsDeleted             field.Field
	DeleterUserID         field.Int64
	DeletionTime          field.Time
	Name                  field.String
	DisplayName           field.String
	Discriminator         field.String
	ExpiringEditionID     field.Int64
	MonthlyPrice          field.Float64
	AnnualPrice           field.Float64
	TrialDayCount         field.Int64
	WaitingDayAfterExpire field.Int64

	fieldMap map[string]field.Expr
}

func (a abpedition) Table(newTableName string) *abpedition {
	a.abpeditionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpedition) As(alias string) *abpedition {
	a.abpeditionDo.DO = *(a.abpeditionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpedition) updateTableName(table string) *abpedition {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.Name = field.NewString(table, "Name")
	a.DisplayName = field.NewString(table, "DisplayName")
	a.Discriminator = field.NewString(table, "Discriminator")
	a.ExpiringEditionID = field.NewInt64(table, "ExpiringEditionId")
	a.MonthlyPrice = field.NewFloat64(table, "MonthlyPrice")
	a.AnnualPrice = field.NewFloat64(table, "AnnualPrice")
	a.TrialDayCount = field.NewInt64(table, "TrialDayCount")
	a.WaitingDayAfterExpire = field.NewInt64(table, "WaitingDayAfterExpire")

	a.fillFieldMap()

	return a
}

func (a *abpedition) WithContext(ctx context.Context) IAbpeditionDo {
	return a.abpeditionDo.WithContext(ctx)
}

func (a abpedition) TableName() string { return a.abpeditionDo.TableName() }

func (a abpedition) Alias() string { return a.abpeditionDo.Alias() }

func (a *abpedition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpedition) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["Name"] = a.Name
	a.fieldMap["DisplayName"] = a.DisplayName
	a.fieldMap["Discriminator"] = a.Discriminator
	a.fieldMap["ExpiringEditionId"] = a.ExpiringEditionID
	a.fieldMap["MonthlyPrice"] = a.MonthlyPrice
	a.fieldMap["AnnualPrice"] = a.AnnualPrice
	a.fieldMap["TrialDayCount"] = a.TrialDayCount
	a.fieldMap["WaitingDayAfterExpire"] = a.WaitingDayAfterExpire
}

func (a abpedition) clone(db *gorm.DB) abpedition {
	a.abpeditionDo.ReplaceDB(db)
	return a
}

type abpeditionDo struct{ gen.DO }

type IAbpeditionDo interface {
	gen.SubQuery
	Debug() IAbpeditionDo
	WithContext(ctx context.Context) IAbpeditionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpeditionDo
	Not(conds ...gen.Condition) IAbpeditionDo
	Or(conds ...gen.Condition) IAbpeditionDo
	Select(conds ...field.Expr) IAbpeditionDo
	Where(conds ...gen.Condition) IAbpeditionDo
	Order(conds ...field.Expr) IAbpeditionDo
	Distinct(cols ...field.Expr) IAbpeditionDo
	Omit(cols ...field.Expr) IAbpeditionDo
	Join(table schema.Tabler, on ...field.Expr) IAbpeditionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpeditionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpeditionDo
	Group(cols ...field.Expr) IAbpeditionDo
	Having(conds ...gen.Condition) IAbpeditionDo
	Limit(limit int) IAbpeditionDo
	Offset(offset int) IAbpeditionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpeditionDo
	Unscoped() IAbpeditionDo
	Create(values ...*model.Abpedition) error
	CreateInBatches(values []*model.Abpedition, batchSize int) error
	Save(values ...*model.Abpedition) error
	First() (*model.Abpedition, error)
	Take() (*model.Abpedition, error)
	Last() (*model.Abpedition, error)
	Find() ([]*model.Abpedition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpedition, err error)
	FindInBatches(result *[]*model.Abpedition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpedition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpeditionDo
	Assign(attrs ...field.AssignExpr) IAbpeditionDo
	Joins(fields ...field.RelationField) IAbpeditionDo
	Preload(fields ...field.RelationField) IAbpeditionDo
	FirstOrInit() (*model.Abpedition, error)
	FirstOrCreate() (*model.Abpedition, error)
	FindByPage(offset int, limit int) (result []*model.Abpedition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpeditionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpeditionDo) Debug() IAbpeditionDo {
	return a.withDO(a.DO.Debug())
}

func (a abpeditionDo) WithContext(ctx context.Context) IAbpeditionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpeditionDo) ReadDB() IAbpeditionDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpeditionDo) WriteDB() IAbpeditionDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpeditionDo) Clauses(conds ...clause.Expression) IAbpeditionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpeditionDo) Returning(value interface{}, columns ...string) IAbpeditionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpeditionDo) Not(conds ...gen.Condition) IAbpeditionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpeditionDo) Or(conds ...gen.Condition) IAbpeditionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpeditionDo) Select(conds ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpeditionDo) Where(conds ...gen.Condition) IAbpeditionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpeditionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpeditionDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpeditionDo) Order(conds ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpeditionDo) Distinct(cols ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpeditionDo) Omit(cols ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpeditionDo) Join(table schema.Tabler, on ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpeditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpeditionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpeditionDo) Group(cols ...field.Expr) IAbpeditionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpeditionDo) Having(conds ...gen.Condition) IAbpeditionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpeditionDo) Limit(limit int) IAbpeditionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpeditionDo) Offset(offset int) IAbpeditionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpeditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpeditionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpeditionDo) Unscoped() IAbpeditionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpeditionDo) Create(values ...*model.Abpedition) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpeditionDo) CreateInBatches(values []*model.Abpedition, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpeditionDo) Save(values ...*model.Abpedition) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpeditionDo) First() (*model.Abpedition, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpedition), nil
	}
}

func (a abpeditionDo) Take() (*model.Abpedition, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpedition), nil
	}
}

func (a abpeditionDo) Last() (*model.Abpedition, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpedition), nil
	}
}

func (a abpeditionDo) Find() ([]*model.Abpedition, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpedition), err
}

func (a abpeditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpedition, err error) {
	buf := make([]*model.Abpedition, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpeditionDo) FindInBatches(result *[]*model.Abpedition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpeditionDo) Attrs(attrs ...field.AssignExpr) IAbpeditionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpeditionDo) Assign(attrs ...field.AssignExpr) IAbpeditionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpeditionDo) Joins(fields ...field.RelationField) IAbpeditionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpeditionDo) Preload(fields ...field.RelationField) IAbpeditionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpeditionDo) FirstOrInit() (*model.Abpedition, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpedition), nil
	}
}

func (a abpeditionDo) FirstOrCreate() (*model.Abpedition, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpedition), nil
	}
}

func (a abpeditionDo) FindByPage(offset int, limit int) (result []*model.Abpedition, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpeditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpeditionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpeditionDo) Delete(models ...*model.Abpedition) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpeditionDo) withDO(do gen.Dao) *abpeditionDo {
	a.DO = *do.(*gen.DO)
	return a
}
