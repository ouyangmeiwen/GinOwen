// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysauditlinklog(db *gorm.DB) sysauditlinklog {
	_sysauditlinklog := sysauditlinklog{}

	_sysauditlinklog.sysauditlinklogDo.UseDB(db)
	_sysauditlinklog.sysauditlinklogDo.UseModel(&model.Sysauditlinklog{})

	tableName := _sysauditlinklog.sysauditlinklogDo.TableName()
	_sysauditlinklog.ALL = field.NewAsterisk(tableName)
	_sysauditlinklog.ID = field.NewInt64(tableName, "Id")
	_sysauditlinklog.ClientIPAddress = field.NewString(tableName, "ClientIpAddress")
	_sysauditlinklog.ClientName = field.NewString(tableName, "ClientName")
	_sysauditlinklog.Exception = field.NewString(tableName, "Exception")
	_sysauditlinklog.ExecutionDuration = field.NewInt64(tableName, "ExecutionDuration")
	_sysauditlinklog.ExecutionTime = field.NewTime(tableName, "ExecutionTime")
	_sysauditlinklog.MethodName = field.NewString(tableName, "MethodName")
	_sysauditlinklog.Parameters = field.NewString(tableName, "Parameters")
	_sysauditlinklog.ServiceName = field.NewString(tableName, "ServiceName")
	_sysauditlinklog.TenantID = field.NewInt64(tableName, "TenantId")
	_sysauditlinklog.UserID = field.NewInt64(tableName, "UserId")
	_sysauditlinklog.ReturnValue = field.NewString(tableName, "ReturnValue")

	_sysauditlinklog.fillFieldMap()

	return _sysauditlinklog
}

type sysauditlinklog struct {
	sysauditlinklogDo sysauditlinklogDo

	ALL               field.Asterisk
	ID                field.Int64
	ClientIPAddress   field.String
	ClientName        field.String
	Exception         field.String
	ExecutionDuration field.Int64
	ExecutionTime     field.Time
	MethodName        field.String
	Parameters        field.String
	ServiceName       field.String
	TenantID          field.Int64
	UserID            field.Int64
	ReturnValue       field.String

	fieldMap map[string]field.Expr
}

func (s sysauditlinklog) Table(newTableName string) *sysauditlinklog {
	s.sysauditlinklogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysauditlinklog) As(alias string) *sysauditlinklog {
	s.sysauditlinklogDo.DO = *(s.sysauditlinklogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysauditlinklog) updateTableName(table string) *sysauditlinklog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "Id")
	s.ClientIPAddress = field.NewString(table, "ClientIpAddress")
	s.ClientName = field.NewString(table, "ClientName")
	s.Exception = field.NewString(table, "Exception")
	s.ExecutionDuration = field.NewInt64(table, "ExecutionDuration")
	s.ExecutionTime = field.NewTime(table, "ExecutionTime")
	s.MethodName = field.NewString(table, "MethodName")
	s.Parameters = field.NewString(table, "Parameters")
	s.ServiceName = field.NewString(table, "ServiceName")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.UserID = field.NewInt64(table, "UserId")
	s.ReturnValue = field.NewString(table, "ReturnValue")

	s.fillFieldMap()

	return s
}

func (s *sysauditlinklog) WithContext(ctx context.Context) ISysauditlinklogDo {
	return s.sysauditlinklogDo.WithContext(ctx)
}

func (s sysauditlinklog) TableName() string { return s.sysauditlinklogDo.TableName() }

func (s sysauditlinklog) Alias() string { return s.sysauditlinklogDo.Alias() }

func (s *sysauditlinklog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysauditlinklog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["ClientIpAddress"] = s.ClientIPAddress
	s.fieldMap["ClientName"] = s.ClientName
	s.fieldMap["Exception"] = s.Exception
	s.fieldMap["ExecutionDuration"] = s.ExecutionDuration
	s.fieldMap["ExecutionTime"] = s.ExecutionTime
	s.fieldMap["MethodName"] = s.MethodName
	s.fieldMap["Parameters"] = s.Parameters
	s.fieldMap["ServiceName"] = s.ServiceName
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["ReturnValue"] = s.ReturnValue
}

func (s sysauditlinklog) clone(db *gorm.DB) sysauditlinklog {
	s.sysauditlinklogDo.ReplaceDB(db)
	return s
}

type sysauditlinklogDo struct{ gen.DO }

type ISysauditlinklogDo interface {
	gen.SubQuery
	Debug() ISysauditlinklogDo
	WithContext(ctx context.Context) ISysauditlinklogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysauditlinklogDo
	Not(conds ...gen.Condition) ISysauditlinklogDo
	Or(conds ...gen.Condition) ISysauditlinklogDo
	Select(conds ...field.Expr) ISysauditlinklogDo
	Where(conds ...gen.Condition) ISysauditlinklogDo
	Order(conds ...field.Expr) ISysauditlinklogDo
	Distinct(cols ...field.Expr) ISysauditlinklogDo
	Omit(cols ...field.Expr) ISysauditlinklogDo
	Join(table schema.Tabler, on ...field.Expr) ISysauditlinklogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditlinklogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysauditlinklogDo
	Group(cols ...field.Expr) ISysauditlinklogDo
	Having(conds ...gen.Condition) ISysauditlinklogDo
	Limit(limit int) ISysauditlinklogDo
	Offset(offset int) ISysauditlinklogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditlinklogDo
	Unscoped() ISysauditlinklogDo
	Create(values ...*model.Sysauditlinklog) error
	CreateInBatches(values []*model.Sysauditlinklog, batchSize int) error
	Save(values ...*model.Sysauditlinklog) error
	First() (*model.Sysauditlinklog, error)
	Take() (*model.Sysauditlinklog, error)
	Last() (*model.Sysauditlinklog, error)
	Find() ([]*model.Sysauditlinklog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditlinklog, err error)
	FindInBatches(result *[]*model.Sysauditlinklog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysauditlinklog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysauditlinklogDo
	Assign(attrs ...field.AssignExpr) ISysauditlinklogDo
	Joins(fields ...field.RelationField) ISysauditlinklogDo
	Preload(fields ...field.RelationField) ISysauditlinklogDo
	FirstOrInit() (*model.Sysauditlinklog, error)
	FirstOrCreate() (*model.Sysauditlinklog, error)
	FindByPage(offset int, limit int) (result []*model.Sysauditlinklog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysauditlinklogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysauditlinklogDo) Debug() ISysauditlinklogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysauditlinklogDo) WithContext(ctx context.Context) ISysauditlinklogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysauditlinklogDo) ReadDB() ISysauditlinklogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysauditlinklogDo) WriteDB() ISysauditlinklogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysauditlinklogDo) Clauses(conds ...clause.Expression) ISysauditlinklogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysauditlinklogDo) Returning(value interface{}, columns ...string) ISysauditlinklogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysauditlinklogDo) Not(conds ...gen.Condition) ISysauditlinklogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysauditlinklogDo) Or(conds ...gen.Condition) ISysauditlinklogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysauditlinklogDo) Select(conds ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysauditlinklogDo) Where(conds ...gen.Condition) ISysauditlinklogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysauditlinklogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysauditlinklogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysauditlinklogDo) Order(conds ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysauditlinklogDo) Distinct(cols ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysauditlinklogDo) Omit(cols ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysauditlinklogDo) Join(table schema.Tabler, on ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysauditlinklogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysauditlinklogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysauditlinklogDo) Group(cols ...field.Expr) ISysauditlinklogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysauditlinklogDo) Having(conds ...gen.Condition) ISysauditlinklogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysauditlinklogDo) Limit(limit int) ISysauditlinklogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysauditlinklogDo) Offset(offset int) ISysauditlinklogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysauditlinklogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditlinklogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysauditlinklogDo) Unscoped() ISysauditlinklogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysauditlinklogDo) Create(values ...*model.Sysauditlinklog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysauditlinklogDo) CreateInBatches(values []*model.Sysauditlinklog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysauditlinklogDo) Save(values ...*model.Sysauditlinklog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysauditlinklogDo) First() (*model.Sysauditlinklog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlinklog), nil
	}
}

func (s sysauditlinklogDo) Take() (*model.Sysauditlinklog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlinklog), nil
	}
}

func (s sysauditlinklogDo) Last() (*model.Sysauditlinklog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlinklog), nil
	}
}

func (s sysauditlinklogDo) Find() ([]*model.Sysauditlinklog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysauditlinklog), err
}

func (s sysauditlinklogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditlinklog, err error) {
	buf := make([]*model.Sysauditlinklog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysauditlinklogDo) FindInBatches(result *[]*model.Sysauditlinklog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysauditlinklogDo) Attrs(attrs ...field.AssignExpr) ISysauditlinklogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysauditlinklogDo) Assign(attrs ...field.AssignExpr) ISysauditlinklogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysauditlinklogDo) Joins(fields ...field.RelationField) ISysauditlinklogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysauditlinklogDo) Preload(fields ...field.RelationField) ISysauditlinklogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysauditlinklogDo) FirstOrInit() (*model.Sysauditlinklog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlinklog), nil
	}
}

func (s sysauditlinklogDo) FirstOrCreate() (*model.Sysauditlinklog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditlinklog), nil
	}
}

func (s sysauditlinklogDo) FindByPage(offset int, limit int) (result []*model.Sysauditlinklog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysauditlinklogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysauditlinklogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysauditlinklogDo) Delete(models ...*model.Sysauditlinklog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysauditlinklogDo) withDO(do gen.Dao) *sysauditlinklogDo {
	s.DO = *do.(*gen.DO)
	return s
}
