// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibinventoryworkdetail(db *gorm.DB) libinventoryworkdetail {
	_libinventoryworkdetail := libinventoryworkdetail{}

	_libinventoryworkdetail.libinventoryworkdetailDo.UseDB(db)
	_libinventoryworkdetail.libinventoryworkdetailDo.UseModel(&model.Libinventoryworkdetail{})

	tableName := _libinventoryworkdetail.libinventoryworkdetailDo.TableName()
	_libinventoryworkdetail.ALL = field.NewAsterisk(tableName)
	_libinventoryworkdetail.ID = field.NewString(tableName, "Id")
	_libinventoryworkdetail.CreationTime = field.NewTime(tableName, "CreationTime")
	_libinventoryworkdetail.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libinventoryworkdetail.TaskStatus = field.NewInt64(tableName, "TaskStatus")
	_libinventoryworkdetail.WorkID = field.NewString(tableName, "WorkId")
	_libinventoryworkdetail.LayerID = field.NewString(tableName, "LayerId")
	_libinventoryworkdetail.LayerCode = field.NewString(tableName, "LayerCode")
	_libinventoryworkdetail.LayerName = field.NewString(tableName, "LayerName")
	_libinventoryworkdetail.Remark = field.NewString(tableName, "Remark")
	_libinventoryworkdetail.ExceptionMsg = field.NewString(tableName, "ExceptionMsg")
	_libinventoryworkdetail.TenantID = field.NewInt64(tableName, "TenantId")

	_libinventoryworkdetail.fillFieldMap()

	return _libinventoryworkdetail
}

type libinventoryworkdetail struct {
	libinventoryworkdetailDo libinventoryworkdetailDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TaskStatus    field.Int64
	WorkID        field.String
	LayerID       field.String
	LayerCode     field.String
	LayerName     field.String
	Remark        field.String
	ExceptionMsg  field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (l libinventoryworkdetail) Table(newTableName string) *libinventoryworkdetail {
	l.libinventoryworkdetailDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libinventoryworkdetail) As(alias string) *libinventoryworkdetail {
	l.libinventoryworkdetailDo.DO = *(l.libinventoryworkdetailDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libinventoryworkdetail) updateTableName(table string) *libinventoryworkdetail {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TaskStatus = field.NewInt64(table, "TaskStatus")
	l.WorkID = field.NewString(table, "WorkId")
	l.LayerID = field.NewString(table, "LayerId")
	l.LayerCode = field.NewString(table, "LayerCode")
	l.LayerName = field.NewString(table, "LayerName")
	l.Remark = field.NewString(table, "Remark")
	l.ExceptionMsg = field.NewString(table, "ExceptionMsg")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libinventoryworkdetail) WithContext(ctx context.Context) ILibinventoryworkdetailDo {
	return l.libinventoryworkdetailDo.WithContext(ctx)
}

func (l libinventoryworkdetail) TableName() string { return l.libinventoryworkdetailDo.TableName() }

func (l libinventoryworkdetail) Alias() string { return l.libinventoryworkdetailDo.Alias() }

func (l *libinventoryworkdetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libinventoryworkdetail) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TaskStatus"] = l.TaskStatus
	l.fieldMap["WorkId"] = l.WorkID
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["LayerCode"] = l.LayerCode
	l.fieldMap["LayerName"] = l.LayerName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["ExceptionMsg"] = l.ExceptionMsg
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libinventoryworkdetail) clone(db *gorm.DB) libinventoryworkdetail {
	l.libinventoryworkdetailDo.ReplaceDB(db)
	return l
}

type libinventoryworkdetailDo struct{ gen.DO }

type ILibinventoryworkdetailDo interface {
	gen.SubQuery
	Debug() ILibinventoryworkdetailDo
	WithContext(ctx context.Context) ILibinventoryworkdetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibinventoryworkdetailDo
	Not(conds ...gen.Condition) ILibinventoryworkdetailDo
	Or(conds ...gen.Condition) ILibinventoryworkdetailDo
	Select(conds ...field.Expr) ILibinventoryworkdetailDo
	Where(conds ...gen.Condition) ILibinventoryworkdetailDo
	Order(conds ...field.Expr) ILibinventoryworkdetailDo
	Distinct(cols ...field.Expr) ILibinventoryworkdetailDo
	Omit(cols ...field.Expr) ILibinventoryworkdetailDo
	Join(table schema.Tabler, on ...field.Expr) ILibinventoryworkdetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkdetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkdetailDo
	Group(cols ...field.Expr) ILibinventoryworkdetailDo
	Having(conds ...gen.Condition) ILibinventoryworkdetailDo
	Limit(limit int) ILibinventoryworkdetailDo
	Offset(offset int) ILibinventoryworkdetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventoryworkdetailDo
	Unscoped() ILibinventoryworkdetailDo
	Create(values ...*model.Libinventoryworkdetail) error
	CreateInBatches(values []*model.Libinventoryworkdetail, batchSize int) error
	Save(values ...*model.Libinventoryworkdetail) error
	First() (*model.Libinventoryworkdetail, error)
	Take() (*model.Libinventoryworkdetail, error)
	Last() (*model.Libinventoryworkdetail, error)
	Find() ([]*model.Libinventoryworkdetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventoryworkdetail, err error)
	FindInBatches(result *[]*model.Libinventoryworkdetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libinventoryworkdetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibinventoryworkdetailDo
	Assign(attrs ...field.AssignExpr) ILibinventoryworkdetailDo
	Joins(fields ...field.RelationField) ILibinventoryworkdetailDo
	Preload(fields ...field.RelationField) ILibinventoryworkdetailDo
	FirstOrInit() (*model.Libinventoryworkdetail, error)
	FirstOrCreate() (*model.Libinventoryworkdetail, error)
	FindByPage(offset int, limit int) (result []*model.Libinventoryworkdetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibinventoryworkdetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libinventoryworkdetailDo) Debug() ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Debug())
}

func (l libinventoryworkdetailDo) WithContext(ctx context.Context) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libinventoryworkdetailDo) ReadDB() ILibinventoryworkdetailDo {
	return l.Clauses(dbresolver.Read)
}

func (l libinventoryworkdetailDo) WriteDB() ILibinventoryworkdetailDo {
	return l.Clauses(dbresolver.Write)
}

func (l libinventoryworkdetailDo) Clauses(conds ...clause.Expression) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libinventoryworkdetailDo) Returning(value interface{}, columns ...string) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libinventoryworkdetailDo) Not(conds ...gen.Condition) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libinventoryworkdetailDo) Or(conds ...gen.Condition) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libinventoryworkdetailDo) Select(conds ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libinventoryworkdetailDo) Where(conds ...gen.Condition) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libinventoryworkdetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibinventoryworkdetailDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libinventoryworkdetailDo) Order(conds ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libinventoryworkdetailDo) Distinct(cols ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libinventoryworkdetailDo) Omit(cols ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libinventoryworkdetailDo) Join(table schema.Tabler, on ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libinventoryworkdetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libinventoryworkdetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libinventoryworkdetailDo) Group(cols ...field.Expr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libinventoryworkdetailDo) Having(conds ...gen.Condition) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libinventoryworkdetailDo) Limit(limit int) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libinventoryworkdetailDo) Offset(offset int) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libinventoryworkdetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libinventoryworkdetailDo) Unscoped() ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libinventoryworkdetailDo) Create(values ...*model.Libinventoryworkdetail) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libinventoryworkdetailDo) CreateInBatches(values []*model.Libinventoryworkdetail, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libinventoryworkdetailDo) Save(values ...*model.Libinventoryworkdetail) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libinventoryworkdetailDo) First() (*model.Libinventoryworkdetail, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworkdetail), nil
	}
}

func (l libinventoryworkdetailDo) Take() (*model.Libinventoryworkdetail, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworkdetail), nil
	}
}

func (l libinventoryworkdetailDo) Last() (*model.Libinventoryworkdetail, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworkdetail), nil
	}
}

func (l libinventoryworkdetailDo) Find() ([]*model.Libinventoryworkdetail, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libinventoryworkdetail), err
}

func (l libinventoryworkdetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventoryworkdetail, err error) {
	buf := make([]*model.Libinventoryworkdetail, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libinventoryworkdetailDo) FindInBatches(result *[]*model.Libinventoryworkdetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libinventoryworkdetailDo) Attrs(attrs ...field.AssignExpr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libinventoryworkdetailDo) Assign(attrs ...field.AssignExpr) ILibinventoryworkdetailDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libinventoryworkdetailDo) Joins(fields ...field.RelationField) ILibinventoryworkdetailDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libinventoryworkdetailDo) Preload(fields ...field.RelationField) ILibinventoryworkdetailDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libinventoryworkdetailDo) FirstOrInit() (*model.Libinventoryworkdetail, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworkdetail), nil
	}
}

func (l libinventoryworkdetailDo) FirstOrCreate() (*model.Libinventoryworkdetail, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventoryworkdetail), nil
	}
}

func (l libinventoryworkdetailDo) FindByPage(offset int, limit int) (result []*model.Libinventoryworkdetail, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libinventoryworkdetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libinventoryworkdetailDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libinventoryworkdetailDo) Delete(models ...*model.Libinventoryworkdetail) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libinventoryworkdetailDo) withDO(do gen.Dao) *libinventoryworkdetailDo {
	l.DO = *do.(*gen.DO)
	return l
}
