// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newOwenUser(db *gorm.DB) owenUser {
	_owenUser := owenUser{}

	_owenUser.owenUserDo.UseDB(db)
	_owenUser.owenUserDo.UseModel(&model.OwenUser{})

	tableName := _owenUser.owenUserDo.TableName()
	_owenUser.ALL = field.NewAsterisk(tableName)
	_owenUser.ID = field.NewInt64(tableName, "id")
	_owenUser.Username = field.NewString(tableName, "username")
	_owenUser.Password = field.NewString(tableName, "password")
	_owenUser.RoleID = field.NewInt64(tableName, "role_id")

	_owenUser.fillFieldMap()

	return _owenUser
}

type owenUser struct {
	owenUserDo owenUserDo

	ALL      field.Asterisk
	ID       field.Int64
	Username field.String
	Password field.String
	RoleID   field.Int64

	fieldMap map[string]field.Expr
}

func (o owenUser) Table(newTableName string) *owenUser {
	o.owenUserDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o owenUser) As(alias string) *owenUser {
	o.owenUserDo.DO = *(o.owenUserDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *owenUser) updateTableName(table string) *owenUser {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Username = field.NewString(table, "username")
	o.Password = field.NewString(table, "password")
	o.RoleID = field.NewInt64(table, "role_id")

	o.fillFieldMap()

	return o
}

func (o *owenUser) WithContext(ctx context.Context) IOwenUserDo { return o.owenUserDo.WithContext(ctx) }

func (o owenUser) TableName() string { return o.owenUserDo.TableName() }

func (o owenUser) Alias() string { return o.owenUserDo.Alias() }

func (o *owenUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *owenUser) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["id"] = o.ID
	o.fieldMap["username"] = o.Username
	o.fieldMap["password"] = o.Password
	o.fieldMap["role_id"] = o.RoleID
}

func (o owenUser) clone(db *gorm.DB) owenUser {
	o.owenUserDo.ReplaceDB(db)
	return o
}

type owenUserDo struct{ gen.DO }

type IOwenUserDo interface {
	gen.SubQuery
	Debug() IOwenUserDo
	WithContext(ctx context.Context) IOwenUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOwenUserDo
	Not(conds ...gen.Condition) IOwenUserDo
	Or(conds ...gen.Condition) IOwenUserDo
	Select(conds ...field.Expr) IOwenUserDo
	Where(conds ...gen.Condition) IOwenUserDo
	Order(conds ...field.Expr) IOwenUserDo
	Distinct(cols ...field.Expr) IOwenUserDo
	Omit(cols ...field.Expr) IOwenUserDo
	Join(table schema.Tabler, on ...field.Expr) IOwenUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOwenUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOwenUserDo
	Group(cols ...field.Expr) IOwenUserDo
	Having(conds ...gen.Condition) IOwenUserDo
	Limit(limit int) IOwenUserDo
	Offset(offset int) IOwenUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenUserDo
	Unscoped() IOwenUserDo
	Create(values ...*model.OwenUser) error
	CreateInBatches(values []*model.OwenUser, batchSize int) error
	Save(values ...*model.OwenUser) error
	First() (*model.OwenUser, error)
	Take() (*model.OwenUser, error)
	Last() (*model.OwenUser, error)
	Find() ([]*model.OwenUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenUser, err error)
	FindInBatches(result *[]*model.OwenUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OwenUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOwenUserDo
	Assign(attrs ...field.AssignExpr) IOwenUserDo
	Joins(fields ...field.RelationField) IOwenUserDo
	Preload(fields ...field.RelationField) IOwenUserDo
	FirstOrInit() (*model.OwenUser, error)
	FirstOrCreate() (*model.OwenUser, error)
	FindByPage(offset int, limit int) (result []*model.OwenUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOwenUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o owenUserDo) Debug() IOwenUserDo {
	return o.withDO(o.DO.Debug())
}

func (o owenUserDo) WithContext(ctx context.Context) IOwenUserDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o owenUserDo) ReadDB() IOwenUserDo {
	return o.Clauses(dbresolver.Read)
}

func (o owenUserDo) WriteDB() IOwenUserDo {
	return o.Clauses(dbresolver.Write)
}

func (o owenUserDo) Clauses(conds ...clause.Expression) IOwenUserDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o owenUserDo) Returning(value interface{}, columns ...string) IOwenUserDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o owenUserDo) Not(conds ...gen.Condition) IOwenUserDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o owenUserDo) Or(conds ...gen.Condition) IOwenUserDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o owenUserDo) Select(conds ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o owenUserDo) Where(conds ...gen.Condition) IOwenUserDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o owenUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOwenUserDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o owenUserDo) Order(conds ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o owenUserDo) Distinct(cols ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o owenUserDo) Omit(cols ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o owenUserDo) Join(table schema.Tabler, on ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o owenUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o owenUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o owenUserDo) Group(cols ...field.Expr) IOwenUserDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o owenUserDo) Having(conds ...gen.Condition) IOwenUserDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o owenUserDo) Limit(limit int) IOwenUserDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o owenUserDo) Offset(offset int) IOwenUserDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o owenUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenUserDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o owenUserDo) Unscoped() IOwenUserDo {
	return o.withDO(o.DO.Unscoped())
}

func (o owenUserDo) Create(values ...*model.OwenUser) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o owenUserDo) CreateInBatches(values []*model.OwenUser, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o owenUserDo) Save(values ...*model.OwenUser) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o owenUserDo) First() (*model.OwenUser, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenUser), nil
	}
}

func (o owenUserDo) Take() (*model.OwenUser, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenUser), nil
	}
}

func (o owenUserDo) Last() (*model.OwenUser, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenUser), nil
	}
}

func (o owenUserDo) Find() ([]*model.OwenUser, error) {
	result, err := o.DO.Find()
	return result.([]*model.OwenUser), err
}

func (o owenUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenUser, err error) {
	buf := make([]*model.OwenUser, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o owenUserDo) FindInBatches(result *[]*model.OwenUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o owenUserDo) Attrs(attrs ...field.AssignExpr) IOwenUserDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o owenUserDo) Assign(attrs ...field.AssignExpr) IOwenUserDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o owenUserDo) Joins(fields ...field.RelationField) IOwenUserDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o owenUserDo) Preload(fields ...field.RelationField) IOwenUserDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o owenUserDo) FirstOrInit() (*model.OwenUser, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenUser), nil
	}
}

func (o owenUserDo) FirstOrCreate() (*model.OwenUser, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenUser), nil
	}
}

func (o owenUserDo) FindByPage(offset int, limit int) (result []*model.OwenUser, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o owenUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o owenUserDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o owenUserDo) Delete(models ...*model.OwenUser) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *owenUserDo) withDO(do gen.Dao) *owenUserDo {
	o.DO = *do.(*gen.DO)
	return o
}
