// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbpuserloginattempt(db *gorm.DB) abpuserloginattempt {
	_abpuserloginattempt := abpuserloginattempt{}

	_abpuserloginattempt.abpuserloginattemptDo.UseDB(db)
	_abpuserloginattempt.abpuserloginattemptDo.UseModel(&model.Abpuserloginattempt{})

	tableName := _abpuserloginattempt.abpuserloginattemptDo.TableName()
	_abpuserloginattempt.ALL = field.NewAsterisk(tableName)
	_abpuserloginattempt.ID = field.NewInt64(tableName, "Id")
	_abpuserloginattempt.TenantID = field.NewInt64(tableName, "TenantId")
	_abpuserloginattempt.TenancyName = field.NewString(tableName, "TenancyName")
	_abpuserloginattempt.UserID = field.NewInt64(tableName, "UserId")
	_abpuserloginattempt.UserNameOrEmailAddress = field.NewString(tableName, "UserNameOrEmailAddress")
	_abpuserloginattempt.ClientIPAddress = field.NewString(tableName, "ClientIpAddress")
	_abpuserloginattempt.ClientName = field.NewString(tableName, "ClientName")
	_abpuserloginattempt.BrowserInfo = field.NewString(tableName, "BrowserInfo")
	_abpuserloginattempt.Result = field.NewInt64(tableName, "Result")
	_abpuserloginattempt.CreationTime = field.NewTime(tableName, "CreationTime")

	_abpuserloginattempt.fillFieldMap()

	return _abpuserloginattempt
}

type abpuserloginattempt struct {
	abpuserloginattemptDo abpuserloginattemptDo

	ALL                    field.Asterisk
	ID                     field.Int64
	TenantID               field.Int64
	TenancyName            field.String
	UserID                 field.Int64
	UserNameOrEmailAddress field.String
	ClientIPAddress        field.String
	ClientName             field.String
	BrowserInfo            field.String
	Result                 field.Int64
	CreationTime           field.Time

	fieldMap map[string]field.Expr
}

func (a abpuserloginattempt) Table(newTableName string) *abpuserloginattempt {
	a.abpuserloginattemptDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpuserloginattempt) As(alias string) *abpuserloginattempt {
	a.abpuserloginattemptDo.DO = *(a.abpuserloginattemptDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpuserloginattempt) updateTableName(table string) *abpuserloginattempt {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.TenancyName = field.NewString(table, "TenancyName")
	a.UserID = field.NewInt64(table, "UserId")
	a.UserNameOrEmailAddress = field.NewString(table, "UserNameOrEmailAddress")
	a.ClientIPAddress = field.NewString(table, "ClientIpAddress")
	a.ClientName = field.NewString(table, "ClientName")
	a.BrowserInfo = field.NewString(table, "BrowserInfo")
	a.Result = field.NewInt64(table, "Result")
	a.CreationTime = field.NewTime(table, "CreationTime")

	a.fillFieldMap()

	return a
}

func (a *abpuserloginattempt) WithContext(ctx context.Context) IAbpuserloginattemptDo {
	return a.abpuserloginattemptDo.WithContext(ctx)
}

func (a abpuserloginattempt) TableName() string { return a.abpuserloginattemptDo.TableName() }

func (a abpuserloginattempt) Alias() string { return a.abpuserloginattemptDo.Alias() }

func (a *abpuserloginattempt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpuserloginattempt) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["TenancyName"] = a.TenancyName
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["UserNameOrEmailAddress"] = a.UserNameOrEmailAddress
	a.fieldMap["ClientIpAddress"] = a.ClientIPAddress
	a.fieldMap["ClientName"] = a.ClientName
	a.fieldMap["BrowserInfo"] = a.BrowserInfo
	a.fieldMap["Result"] = a.Result
	a.fieldMap["CreationTime"] = a.CreationTime
}

func (a abpuserloginattempt) clone(db *gorm.DB) abpuserloginattempt {
	a.abpuserloginattemptDo.ReplaceDB(db)
	return a
}

type abpuserloginattemptDo struct{ gen.DO }

type IAbpuserloginattemptDo interface {
	gen.SubQuery
	Debug() IAbpuserloginattemptDo
	WithContext(ctx context.Context) IAbpuserloginattemptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpuserloginattemptDo
	Not(conds ...gen.Condition) IAbpuserloginattemptDo
	Or(conds ...gen.Condition) IAbpuserloginattemptDo
	Select(conds ...field.Expr) IAbpuserloginattemptDo
	Where(conds ...gen.Condition) IAbpuserloginattemptDo
	Order(conds ...field.Expr) IAbpuserloginattemptDo
	Distinct(cols ...field.Expr) IAbpuserloginattemptDo
	Omit(cols ...field.Expr) IAbpuserloginattemptDo
	Join(table schema.Tabler, on ...field.Expr) IAbpuserloginattemptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginattemptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginattemptDo
	Group(cols ...field.Expr) IAbpuserloginattemptDo
	Having(conds ...gen.Condition) IAbpuserloginattemptDo
	Limit(limit int) IAbpuserloginattemptDo
	Offset(offset int) IAbpuserloginattemptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserloginattemptDo
	Unscoped() IAbpuserloginattemptDo
	Create(values ...*model.Abpuserloginattempt) error
	CreateInBatches(values []*model.Abpuserloginattempt, batchSize int) error
	Save(values ...*model.Abpuserloginattempt) error
	First() (*model.Abpuserloginattempt, error)
	Take() (*model.Abpuserloginattempt, error)
	Last() (*model.Abpuserloginattempt, error)
	Find() ([]*model.Abpuserloginattempt, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserloginattempt, err error)
	FindInBatches(result *[]*model.Abpuserloginattempt, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpuserloginattempt) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpuserloginattemptDo
	Assign(attrs ...field.AssignExpr) IAbpuserloginattemptDo
	Joins(fields ...field.RelationField) IAbpuserloginattemptDo
	Preload(fields ...field.RelationField) IAbpuserloginattemptDo
	FirstOrInit() (*model.Abpuserloginattempt, error)
	FirstOrCreate() (*model.Abpuserloginattempt, error)
	FindByPage(offset int, limit int) (result []*model.Abpuserloginattempt, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpuserloginattemptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpuserloginattemptDo) Debug() IAbpuserloginattemptDo {
	return a.withDO(a.DO.Debug())
}

func (a abpuserloginattemptDo) WithContext(ctx context.Context) IAbpuserloginattemptDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpuserloginattemptDo) ReadDB() IAbpuserloginattemptDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpuserloginattemptDo) WriteDB() IAbpuserloginattemptDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpuserloginattemptDo) Clauses(conds ...clause.Expression) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpuserloginattemptDo) Returning(value interface{}, columns ...string) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpuserloginattemptDo) Not(conds ...gen.Condition) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpuserloginattemptDo) Or(conds ...gen.Condition) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpuserloginattemptDo) Select(conds ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpuserloginattemptDo) Where(conds ...gen.Condition) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpuserloginattemptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpuserloginattemptDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpuserloginattemptDo) Order(conds ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpuserloginattemptDo) Distinct(cols ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpuserloginattemptDo) Omit(cols ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpuserloginattemptDo) Join(table schema.Tabler, on ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpuserloginattemptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpuserloginattemptDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpuserloginattemptDo) Group(cols ...field.Expr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpuserloginattemptDo) Having(conds ...gen.Condition) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpuserloginattemptDo) Limit(limit int) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpuserloginattemptDo) Offset(offset int) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpuserloginattemptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpuserloginattemptDo) Unscoped() IAbpuserloginattemptDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpuserloginattemptDo) Create(values ...*model.Abpuserloginattempt) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpuserloginattemptDo) CreateInBatches(values []*model.Abpuserloginattempt, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpuserloginattemptDo) Save(values ...*model.Abpuserloginattempt) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpuserloginattemptDo) First() (*model.Abpuserloginattempt, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserloginattempt), nil
	}
}

func (a abpuserloginattemptDo) Take() (*model.Abpuserloginattempt, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserloginattempt), nil
	}
}

func (a abpuserloginattemptDo) Last() (*model.Abpuserloginattempt, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserloginattempt), nil
	}
}

func (a abpuserloginattemptDo) Find() ([]*model.Abpuserloginattempt, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpuserloginattempt), err
}

func (a abpuserloginattemptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserloginattempt, err error) {
	buf := make([]*model.Abpuserloginattempt, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpuserloginattemptDo) FindInBatches(result *[]*model.Abpuserloginattempt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpuserloginattemptDo) Attrs(attrs ...field.AssignExpr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpuserloginattemptDo) Assign(attrs ...field.AssignExpr) IAbpuserloginattemptDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpuserloginattemptDo) Joins(fields ...field.RelationField) IAbpuserloginattemptDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpuserloginattemptDo) Preload(fields ...field.RelationField) IAbpuserloginattemptDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpuserloginattemptDo) FirstOrInit() (*model.Abpuserloginattempt, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserloginattempt), nil
	}
}

func (a abpuserloginattemptDo) FirstOrCreate() (*model.Abpuserloginattempt, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserloginattempt), nil
	}
}

func (a abpuserloginattemptDo) FindByPage(offset int, limit int) (result []*model.Abpuserloginattempt, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpuserloginattemptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpuserloginattemptDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpuserloginattemptDo) Delete(models ...*model.Abpuserloginattempt) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpuserloginattemptDo) withDO(do gen.Dao) *abpuserloginattemptDo {
	a.DO = *do.(*gen.DO)
	return a
}
