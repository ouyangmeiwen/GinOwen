// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSyscardconfig(db *gorm.DB) syscardconfig {
	_syscardconfig := syscardconfig{}

	_syscardconfig.syscardconfigDo.UseDB(db)
	_syscardconfig.syscardconfigDo.UseModel(&model.Syscardconfig{})

	tableName := _syscardconfig.syscardconfigDo.TableName()
	_syscardconfig.ALL = field.NewAsterisk(tableName)
	_syscardconfig.ID = field.NewString(tableName, "Id")
	_syscardconfig.CreationTime = field.NewTime(tableName, "CreationTime")
	_syscardconfig.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_syscardconfig.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_syscardconfig.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_syscardconfig.CardTypeID = field.NewString(tableName, "CardTypeId")
	_syscardconfig.ItemType = field.NewInt64(tableName, "ItemType")
	_syscardconfig.CheckoutDays = field.NewInt64(tableName, "CheckoutDays")
	_syscardconfig.MaxCheckout = field.NewInt64(tableName, "MaxCheckout")
	_syscardconfig.MaxOverdue = field.NewInt64(tableName, "MaxOverdue")
	_syscardconfig.LateFee = field.NewInt64(tableName, "LateFee")
	_syscardconfig.RenewNum = field.NewInt64(tableName, "RenewNum")
	_syscardconfig.CanRenewTime = field.NewInt64(tableName, "CanRenewTime")
	_syscardconfig.RenewDays = field.NewInt64(tableName, "RenewDays")
	_syscardconfig.TenantID = field.NewInt64(tableName, "TenantId")

	_syscardconfig.fillFieldMap()

	return _syscardconfig
}

type syscardconfig struct {
	syscardconfigDo syscardconfigDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	CardTypeID           field.String
	ItemType             field.Int64
	CheckoutDays         field.Int64
	MaxCheckout          field.Int64
	MaxOverdue           field.Int64
	LateFee              field.Int64
	RenewNum             field.Int64
	CanRenewTime         field.Int64
	RenewDays            field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s syscardconfig) Table(newTableName string) *syscardconfig {
	s.syscardconfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syscardconfig) As(alias string) *syscardconfig {
	s.syscardconfigDo.DO = *(s.syscardconfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syscardconfig) updateTableName(table string) *syscardconfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.CardTypeID = field.NewString(table, "CardTypeId")
	s.ItemType = field.NewInt64(table, "ItemType")
	s.CheckoutDays = field.NewInt64(table, "CheckoutDays")
	s.MaxCheckout = field.NewInt64(table, "MaxCheckout")
	s.MaxOverdue = field.NewInt64(table, "MaxOverdue")
	s.LateFee = field.NewInt64(table, "LateFee")
	s.RenewNum = field.NewInt64(table, "RenewNum")
	s.CanRenewTime = field.NewInt64(table, "CanRenewTime")
	s.RenewDays = field.NewInt64(table, "RenewDays")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *syscardconfig) WithContext(ctx context.Context) ISyscardconfigDo {
	return s.syscardconfigDo.WithContext(ctx)
}

func (s syscardconfig) TableName() string { return s.syscardconfigDo.TableName() }

func (s syscardconfig) Alias() string { return s.syscardconfigDo.Alias() }

func (s *syscardconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syscardconfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["CardTypeId"] = s.CardTypeID
	s.fieldMap["ItemType"] = s.ItemType
	s.fieldMap["CheckoutDays"] = s.CheckoutDays
	s.fieldMap["MaxCheckout"] = s.MaxCheckout
	s.fieldMap["MaxOverdue"] = s.MaxOverdue
	s.fieldMap["LateFee"] = s.LateFee
	s.fieldMap["RenewNum"] = s.RenewNum
	s.fieldMap["CanRenewTime"] = s.CanRenewTime
	s.fieldMap["RenewDays"] = s.RenewDays
	s.fieldMap["TenantId"] = s.TenantID
}

func (s syscardconfig) clone(db *gorm.DB) syscardconfig {
	s.syscardconfigDo.ReplaceDB(db)
	return s
}

type syscardconfigDo struct{ gen.DO }

type ISyscardconfigDo interface {
	gen.SubQuery
	Debug() ISyscardconfigDo
	WithContext(ctx context.Context) ISyscardconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyscardconfigDo
	Not(conds ...gen.Condition) ISyscardconfigDo
	Or(conds ...gen.Condition) ISyscardconfigDo
	Select(conds ...field.Expr) ISyscardconfigDo
	Where(conds ...gen.Condition) ISyscardconfigDo
	Order(conds ...field.Expr) ISyscardconfigDo
	Distinct(cols ...field.Expr) ISyscardconfigDo
	Omit(cols ...field.Expr) ISyscardconfigDo
	Join(table schema.Tabler, on ...field.Expr) ISyscardconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyscardconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyscardconfigDo
	Group(cols ...field.Expr) ISyscardconfigDo
	Having(conds ...gen.Condition) ISyscardconfigDo
	Limit(limit int) ISyscardconfigDo
	Offset(offset int) ISyscardconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscardconfigDo
	Unscoped() ISyscardconfigDo
	Create(values ...*model.Syscardconfig) error
	CreateInBatches(values []*model.Syscardconfig, batchSize int) error
	Save(values ...*model.Syscardconfig) error
	First() (*model.Syscardconfig, error)
	Take() (*model.Syscardconfig, error)
	Last() (*model.Syscardconfig, error)
	Find() ([]*model.Syscardconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscardconfig, err error)
	FindInBatches(result *[]*model.Syscardconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syscardconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyscardconfigDo
	Assign(attrs ...field.AssignExpr) ISyscardconfigDo
	Joins(fields ...field.RelationField) ISyscardconfigDo
	Preload(fields ...field.RelationField) ISyscardconfigDo
	FirstOrInit() (*model.Syscardconfig, error)
	FirstOrCreate() (*model.Syscardconfig, error)
	FindByPage(offset int, limit int) (result []*model.Syscardconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyscardconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syscardconfigDo) Debug() ISyscardconfigDo {
	return s.withDO(s.DO.Debug())
}

func (s syscardconfigDo) WithContext(ctx context.Context) ISyscardconfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syscardconfigDo) ReadDB() ISyscardconfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s syscardconfigDo) WriteDB() ISyscardconfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s syscardconfigDo) Clauses(conds ...clause.Expression) ISyscardconfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syscardconfigDo) Returning(value interface{}, columns ...string) ISyscardconfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syscardconfigDo) Not(conds ...gen.Condition) ISyscardconfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syscardconfigDo) Or(conds ...gen.Condition) ISyscardconfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syscardconfigDo) Select(conds ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syscardconfigDo) Where(conds ...gen.Condition) ISyscardconfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syscardconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyscardconfigDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syscardconfigDo) Order(conds ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syscardconfigDo) Distinct(cols ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syscardconfigDo) Omit(cols ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syscardconfigDo) Join(table schema.Tabler, on ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syscardconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syscardconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syscardconfigDo) Group(cols ...field.Expr) ISyscardconfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syscardconfigDo) Having(conds ...gen.Condition) ISyscardconfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syscardconfigDo) Limit(limit int) ISyscardconfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syscardconfigDo) Offset(offset int) ISyscardconfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syscardconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscardconfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syscardconfigDo) Unscoped() ISyscardconfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syscardconfigDo) Create(values ...*model.Syscardconfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syscardconfigDo) CreateInBatches(values []*model.Syscardconfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syscardconfigDo) Save(values ...*model.Syscardconfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syscardconfigDo) First() (*model.Syscardconfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardconfig), nil
	}
}

func (s syscardconfigDo) Take() (*model.Syscardconfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardconfig), nil
	}
}

func (s syscardconfigDo) Last() (*model.Syscardconfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardconfig), nil
	}
}

func (s syscardconfigDo) Find() ([]*model.Syscardconfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syscardconfig), err
}

func (s syscardconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscardconfig, err error) {
	buf := make([]*model.Syscardconfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syscardconfigDo) FindInBatches(result *[]*model.Syscardconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syscardconfigDo) Attrs(attrs ...field.AssignExpr) ISyscardconfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syscardconfigDo) Assign(attrs ...field.AssignExpr) ISyscardconfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syscardconfigDo) Joins(fields ...field.RelationField) ISyscardconfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syscardconfigDo) Preload(fields ...field.RelationField) ISyscardconfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syscardconfigDo) FirstOrInit() (*model.Syscardconfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardconfig), nil
	}
}

func (s syscardconfigDo) FirstOrCreate() (*model.Syscardconfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardconfig), nil
	}
}

func (s syscardconfigDo) FindByPage(offset int, limit int) (result []*model.Syscardconfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syscardconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syscardconfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syscardconfigDo) Delete(models ...*model.Syscardconfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syscardconfigDo) withDO(do gen.Dao) *syscardconfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
