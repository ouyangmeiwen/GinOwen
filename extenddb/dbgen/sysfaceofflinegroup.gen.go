// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysfaceofflinegroup(db *gorm.DB) sysfaceofflinegroup {
	_sysfaceofflinegroup := sysfaceofflinegroup{}

	_sysfaceofflinegroup.sysfaceofflinegroupDo.UseDB(db)
	_sysfaceofflinegroup.sysfaceofflinegroupDo.UseModel(&model.Sysfaceofflinegroup{})

	tableName := _sysfaceofflinegroup.sysfaceofflinegroupDo.TableName()
	_sysfaceofflinegroup.ALL = field.NewAsterisk(tableName)
	_sysfaceofflinegroup.ID = field.NewString(tableName, "Id")
	_sysfaceofflinegroup.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysfaceofflinegroup.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysfaceofflinegroup.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysfaceofflinegroup.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysfaceofflinegroup.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysfaceofflinegroup.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysfaceofflinegroup.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysfaceofflinegroup.GroupID = field.NewString(tableName, "GroupId")
	_sysfaceofflinegroup.GroupName = field.NewString(tableName, "GroupName")
	_sysfaceofflinegroup.Remark = field.NewString(tableName, "Remark")

	_sysfaceofflinegroup.fillFieldMap()

	return _sysfaceofflinegroup
}

type sysfaceofflinegroup struct {
	sysfaceofflinegroupDo sysfaceofflinegroupDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	GroupID              field.String
	GroupName            field.String
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (s sysfaceofflinegroup) Table(newTableName string) *sysfaceofflinegroup {
	s.sysfaceofflinegroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysfaceofflinegroup) As(alias string) *sysfaceofflinegroup {
	s.sysfaceofflinegroupDo.DO = *(s.sysfaceofflinegroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysfaceofflinegroup) updateTableName(table string) *sysfaceofflinegroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.GroupID = field.NewString(table, "GroupId")
	s.GroupName = field.NewString(table, "GroupName")
	s.Remark = field.NewString(table, "Remark")

	s.fillFieldMap()

	return s
}

func (s *sysfaceofflinegroup) WithContext(ctx context.Context) ISysfaceofflinegroupDo {
	return s.sysfaceofflinegroupDo.WithContext(ctx)
}

func (s sysfaceofflinegroup) TableName() string { return s.sysfaceofflinegroupDo.TableName() }

func (s sysfaceofflinegroup) Alias() string { return s.sysfaceofflinegroupDo.Alias() }

func (s *sysfaceofflinegroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysfaceofflinegroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["GroupId"] = s.GroupID
	s.fieldMap["GroupName"] = s.GroupName
	s.fieldMap["Remark"] = s.Remark
}

func (s sysfaceofflinegroup) clone(db *gorm.DB) sysfaceofflinegroup {
	s.sysfaceofflinegroupDo.ReplaceDB(db)
	return s
}

type sysfaceofflinegroupDo struct{ gen.DO }

type ISysfaceofflinegroupDo interface {
	gen.SubQuery
	Debug() ISysfaceofflinegroupDo
	WithContext(ctx context.Context) ISysfaceofflinegroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysfaceofflinegroupDo
	Not(conds ...gen.Condition) ISysfaceofflinegroupDo
	Or(conds ...gen.Condition) ISysfaceofflinegroupDo
	Select(conds ...field.Expr) ISysfaceofflinegroupDo
	Where(conds ...gen.Condition) ISysfaceofflinegroupDo
	Order(conds ...field.Expr) ISysfaceofflinegroupDo
	Distinct(cols ...field.Expr) ISysfaceofflinegroupDo
	Omit(cols ...field.Expr) ISysfaceofflinegroupDo
	Join(table schema.Tabler, on ...field.Expr) ISysfaceofflinegroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinegroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinegroupDo
	Group(cols ...field.Expr) ISysfaceofflinegroupDo
	Having(conds ...gen.Condition) ISysfaceofflinegroupDo
	Limit(limit int) ISysfaceofflinegroupDo
	Offset(offset int) ISysfaceofflinegroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceofflinegroupDo
	Unscoped() ISysfaceofflinegroupDo
	Create(values ...*model.Sysfaceofflinegroup) error
	CreateInBatches(values []*model.Sysfaceofflinegroup, batchSize int) error
	Save(values ...*model.Sysfaceofflinegroup) error
	First() (*model.Sysfaceofflinegroup, error)
	Take() (*model.Sysfaceofflinegroup, error)
	Last() (*model.Sysfaceofflinegroup, error)
	Find() ([]*model.Sysfaceofflinegroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceofflinegroup, err error)
	FindInBatches(result *[]*model.Sysfaceofflinegroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysfaceofflinegroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysfaceofflinegroupDo
	Assign(attrs ...field.AssignExpr) ISysfaceofflinegroupDo
	Joins(fields ...field.RelationField) ISysfaceofflinegroupDo
	Preload(fields ...field.RelationField) ISysfaceofflinegroupDo
	FirstOrInit() (*model.Sysfaceofflinegroup, error)
	FirstOrCreate() (*model.Sysfaceofflinegroup, error)
	FindByPage(offset int, limit int) (result []*model.Sysfaceofflinegroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysfaceofflinegroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysfaceofflinegroupDo) Debug() ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Debug())
}

func (s sysfaceofflinegroupDo) WithContext(ctx context.Context) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysfaceofflinegroupDo) ReadDB() ISysfaceofflinegroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysfaceofflinegroupDo) WriteDB() ISysfaceofflinegroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysfaceofflinegroupDo) Clauses(conds ...clause.Expression) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysfaceofflinegroupDo) Returning(value interface{}, columns ...string) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysfaceofflinegroupDo) Not(conds ...gen.Condition) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysfaceofflinegroupDo) Or(conds ...gen.Condition) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysfaceofflinegroupDo) Select(conds ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysfaceofflinegroupDo) Where(conds ...gen.Condition) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysfaceofflinegroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysfaceofflinegroupDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysfaceofflinegroupDo) Order(conds ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysfaceofflinegroupDo) Distinct(cols ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysfaceofflinegroupDo) Omit(cols ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysfaceofflinegroupDo) Join(table schema.Tabler, on ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysfaceofflinegroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysfaceofflinegroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysfaceofflinegroupDo) Group(cols ...field.Expr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysfaceofflinegroupDo) Having(conds ...gen.Condition) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysfaceofflinegroupDo) Limit(limit int) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysfaceofflinegroupDo) Offset(offset int) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysfaceofflinegroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysfaceofflinegroupDo) Unscoped() ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysfaceofflinegroupDo) Create(values ...*model.Sysfaceofflinegroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysfaceofflinegroupDo) CreateInBatches(values []*model.Sysfaceofflinegroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysfaceofflinegroupDo) Save(values ...*model.Sysfaceofflinegroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysfaceofflinegroupDo) First() (*model.Sysfaceofflinegroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinegroup), nil
	}
}

func (s sysfaceofflinegroupDo) Take() (*model.Sysfaceofflinegroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinegroup), nil
	}
}

func (s sysfaceofflinegroupDo) Last() (*model.Sysfaceofflinegroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinegroup), nil
	}
}

func (s sysfaceofflinegroupDo) Find() ([]*model.Sysfaceofflinegroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysfaceofflinegroup), err
}

func (s sysfaceofflinegroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceofflinegroup, err error) {
	buf := make([]*model.Sysfaceofflinegroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysfaceofflinegroupDo) FindInBatches(result *[]*model.Sysfaceofflinegroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysfaceofflinegroupDo) Attrs(attrs ...field.AssignExpr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysfaceofflinegroupDo) Assign(attrs ...field.AssignExpr) ISysfaceofflinegroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysfaceofflinegroupDo) Joins(fields ...field.RelationField) ISysfaceofflinegroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysfaceofflinegroupDo) Preload(fields ...field.RelationField) ISysfaceofflinegroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysfaceofflinegroupDo) FirstOrInit() (*model.Sysfaceofflinegroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinegroup), nil
	}
}

func (s sysfaceofflinegroupDo) FirstOrCreate() (*model.Sysfaceofflinegroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinegroup), nil
	}
}

func (s sysfaceofflinegroupDo) FindByPage(offset int, limit int) (result []*model.Sysfaceofflinegroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysfaceofflinegroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysfaceofflinegroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysfaceofflinegroupDo) Delete(models ...*model.Sysfaceofflinegroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysfaceofflinegroupDo) withDO(do gen.Dao) *sysfaceofflinegroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
