// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppsubbookinfo(db *gorm.DB) appsubbookinfo {
	_appsubbookinfo := appsubbookinfo{}

	_appsubbookinfo.appsubbookinfoDo.UseDB(db)
	_appsubbookinfo.appsubbookinfoDo.UseModel(&model.Appsubbookinfo{})

	tableName := _appsubbookinfo.appsubbookinfoDo.TableName()
	_appsubbookinfo.ALL = field.NewAsterisk(tableName)
	_appsubbookinfo.ID = field.NewString(tableName, "Id")
	_appsubbookinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_appsubbookinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appsubbookinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appsubbookinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appsubbookinfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_appsubbookinfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_appsubbookinfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_appsubbookinfo.ISBN = field.NewString(tableName, "ISBN")
	_appsubbookinfo.Title = field.NewString(tableName, "Title")
	_appsubbookinfo.Author = field.NewString(tableName, "Author")
	_appsubbookinfo.AuthorCode = field.NewString(tableName, "AuthorCode")
	_appsubbookinfo.Publisher = field.NewString(tableName, "Publisher")
	_appsubbookinfo.PubDate = field.NewString(tableName, "PubDate")
	_appsubbookinfo.CatalogCode = field.NewString(tableName, "CatalogCode")
	_appsubbookinfo.Language = field.NewString(tableName, "Language")
	_appsubbookinfo.Price = field.NewString(tableName, "Price")
	_appsubbookinfo.Pages = field.NewString(tableName, "Pages")
	_appsubbookinfo.Format = field.NewString(tableName, "Format")
	_appsubbookinfo.Image = field.NewString(tableName, "Image")
	_appsubbookinfo.Summary = field.NewString(tableName, "Summary")
	_appsubbookinfo.Tags = field.NewString(tableName, "Tags")
	_appsubbookinfo.Series = field.NewString(tableName, "Series")
	_appsubbookinfo.Barcodes = field.NewString(tableName, "Barcodes")
	_appsubbookinfo.IsRecommend = field.NewField(tableName, "IsRecommend")
	_appsubbookinfo.Remark = field.NewString(tableName, "Remark")
	_appsubbookinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_appsubbookinfo.fillFieldMap()

	return _appsubbookinfo
}

type appsubbookinfo struct {
	appsubbookinfoDo appsubbookinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ISBN                 field.String
	Title                field.String
	Author               field.String
	AuthorCode           field.String
	Publisher            field.String
	PubDate              field.String
	CatalogCode          field.String
	Language             field.String
	Price                field.String
	Pages                field.String
	Format               field.String
	Image                field.String
	Summary              field.String
	Tags                 field.String
	Series               field.String
	Barcodes             field.String
	IsRecommend          field.Field
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appsubbookinfo) Table(newTableName string) *appsubbookinfo {
	a.appsubbookinfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appsubbookinfo) As(alias string) *appsubbookinfo {
	a.appsubbookinfoDo.DO = *(a.appsubbookinfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appsubbookinfo) updateTableName(table string) *appsubbookinfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.ISBN = field.NewString(table, "ISBN")
	a.Title = field.NewString(table, "Title")
	a.Author = field.NewString(table, "Author")
	a.AuthorCode = field.NewString(table, "AuthorCode")
	a.Publisher = field.NewString(table, "Publisher")
	a.PubDate = field.NewString(table, "PubDate")
	a.CatalogCode = field.NewString(table, "CatalogCode")
	a.Language = field.NewString(table, "Language")
	a.Price = field.NewString(table, "Price")
	a.Pages = field.NewString(table, "Pages")
	a.Format = field.NewString(table, "Format")
	a.Image = field.NewString(table, "Image")
	a.Summary = field.NewString(table, "Summary")
	a.Tags = field.NewString(table, "Tags")
	a.Series = field.NewString(table, "Series")
	a.Barcodes = field.NewString(table, "Barcodes")
	a.IsRecommend = field.NewField(table, "IsRecommend")
	a.Remark = field.NewString(table, "Remark")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appsubbookinfo) WithContext(ctx context.Context) IAppsubbookinfoDo {
	return a.appsubbookinfoDo.WithContext(ctx)
}

func (a appsubbookinfo) TableName() string { return a.appsubbookinfoDo.TableName() }

func (a appsubbookinfo) Alias() string { return a.appsubbookinfoDo.Alias() }

func (a *appsubbookinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appsubbookinfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 27)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["ISBN"] = a.ISBN
	a.fieldMap["Title"] = a.Title
	a.fieldMap["Author"] = a.Author
	a.fieldMap["AuthorCode"] = a.AuthorCode
	a.fieldMap["Publisher"] = a.Publisher
	a.fieldMap["PubDate"] = a.PubDate
	a.fieldMap["CatalogCode"] = a.CatalogCode
	a.fieldMap["Language"] = a.Language
	a.fieldMap["Price"] = a.Price
	a.fieldMap["Pages"] = a.Pages
	a.fieldMap["Format"] = a.Format
	a.fieldMap["Image"] = a.Image
	a.fieldMap["Summary"] = a.Summary
	a.fieldMap["Tags"] = a.Tags
	a.fieldMap["Series"] = a.Series
	a.fieldMap["Barcodes"] = a.Barcodes
	a.fieldMap["IsRecommend"] = a.IsRecommend
	a.fieldMap["Remark"] = a.Remark
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appsubbookinfo) clone(db *gorm.DB) appsubbookinfo {
	a.appsubbookinfoDo.ReplaceDB(db)
	return a
}

type appsubbookinfoDo struct{ gen.DO }

type IAppsubbookinfoDo interface {
	gen.SubQuery
	Debug() IAppsubbookinfoDo
	WithContext(ctx context.Context) IAppsubbookinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppsubbookinfoDo
	Not(conds ...gen.Condition) IAppsubbookinfoDo
	Or(conds ...gen.Condition) IAppsubbookinfoDo
	Select(conds ...field.Expr) IAppsubbookinfoDo
	Where(conds ...gen.Condition) IAppsubbookinfoDo
	Order(conds ...field.Expr) IAppsubbookinfoDo
	Distinct(cols ...field.Expr) IAppsubbookinfoDo
	Omit(cols ...field.Expr) IAppsubbookinfoDo
	Join(table schema.Tabler, on ...field.Expr) IAppsubbookinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppsubbookinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppsubbookinfoDo
	Group(cols ...field.Expr) IAppsubbookinfoDo
	Having(conds ...gen.Condition) IAppsubbookinfoDo
	Limit(limit int) IAppsubbookinfoDo
	Offset(offset int) IAppsubbookinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppsubbookinfoDo
	Unscoped() IAppsubbookinfoDo
	Create(values ...*model.Appsubbookinfo) error
	CreateInBatches(values []*model.Appsubbookinfo, batchSize int) error
	Save(values ...*model.Appsubbookinfo) error
	First() (*model.Appsubbookinfo, error)
	Take() (*model.Appsubbookinfo, error)
	Last() (*model.Appsubbookinfo, error)
	Find() ([]*model.Appsubbookinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appsubbookinfo, err error)
	FindInBatches(result *[]*model.Appsubbookinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appsubbookinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppsubbookinfoDo
	Assign(attrs ...field.AssignExpr) IAppsubbookinfoDo
	Joins(fields ...field.RelationField) IAppsubbookinfoDo
	Preload(fields ...field.RelationField) IAppsubbookinfoDo
	FirstOrInit() (*model.Appsubbookinfo, error)
	FirstOrCreate() (*model.Appsubbookinfo, error)
	FindByPage(offset int, limit int) (result []*model.Appsubbookinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppsubbookinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appsubbookinfoDo) Debug() IAppsubbookinfoDo {
	return a.withDO(a.DO.Debug())
}

func (a appsubbookinfoDo) WithContext(ctx context.Context) IAppsubbookinfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appsubbookinfoDo) ReadDB() IAppsubbookinfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a appsubbookinfoDo) WriteDB() IAppsubbookinfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a appsubbookinfoDo) Clauses(conds ...clause.Expression) IAppsubbookinfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appsubbookinfoDo) Returning(value interface{}, columns ...string) IAppsubbookinfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appsubbookinfoDo) Not(conds ...gen.Condition) IAppsubbookinfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appsubbookinfoDo) Or(conds ...gen.Condition) IAppsubbookinfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appsubbookinfoDo) Select(conds ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appsubbookinfoDo) Where(conds ...gen.Condition) IAppsubbookinfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appsubbookinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppsubbookinfoDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appsubbookinfoDo) Order(conds ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appsubbookinfoDo) Distinct(cols ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appsubbookinfoDo) Omit(cols ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appsubbookinfoDo) Join(table schema.Tabler, on ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appsubbookinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appsubbookinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appsubbookinfoDo) Group(cols ...field.Expr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appsubbookinfoDo) Having(conds ...gen.Condition) IAppsubbookinfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appsubbookinfoDo) Limit(limit int) IAppsubbookinfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appsubbookinfoDo) Offset(offset int) IAppsubbookinfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appsubbookinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppsubbookinfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appsubbookinfoDo) Unscoped() IAppsubbookinfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appsubbookinfoDo) Create(values ...*model.Appsubbookinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appsubbookinfoDo) CreateInBatches(values []*model.Appsubbookinfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appsubbookinfoDo) Save(values ...*model.Appsubbookinfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appsubbookinfoDo) First() (*model.Appsubbookinfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubbookinfo), nil
	}
}

func (a appsubbookinfoDo) Take() (*model.Appsubbookinfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubbookinfo), nil
	}
}

func (a appsubbookinfoDo) Last() (*model.Appsubbookinfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubbookinfo), nil
	}
}

func (a appsubbookinfoDo) Find() ([]*model.Appsubbookinfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appsubbookinfo), err
}

func (a appsubbookinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appsubbookinfo, err error) {
	buf := make([]*model.Appsubbookinfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appsubbookinfoDo) FindInBatches(result *[]*model.Appsubbookinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appsubbookinfoDo) Attrs(attrs ...field.AssignExpr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appsubbookinfoDo) Assign(attrs ...field.AssignExpr) IAppsubbookinfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appsubbookinfoDo) Joins(fields ...field.RelationField) IAppsubbookinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appsubbookinfoDo) Preload(fields ...field.RelationField) IAppsubbookinfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appsubbookinfoDo) FirstOrInit() (*model.Appsubbookinfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubbookinfo), nil
	}
}

func (a appsubbookinfoDo) FirstOrCreate() (*model.Appsubbookinfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appsubbookinfo), nil
	}
}

func (a appsubbookinfoDo) FindByPage(offset int, limit int) (result []*model.Appsubbookinfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appsubbookinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appsubbookinfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appsubbookinfoDo) Delete(models ...*model.Appsubbookinfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appsubbookinfoDo) withDO(do gen.Dao) *appsubbookinfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
