// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibtaskpackage(db *gorm.DB) libtaskpackage {
	_libtaskpackage := libtaskpackage{}

	_libtaskpackage.libtaskpackageDo.UseDB(db)
	_libtaskpackage.libtaskpackageDo.UseModel(&model.Libtaskpackage{})

	tableName := _libtaskpackage.libtaskpackageDo.TableName()
	_libtaskpackage.ALL = field.NewAsterisk(tableName)
	_libtaskpackage.ID = field.NewString(tableName, "Id")
	_libtaskpackage.CreationTime = field.NewTime(tableName, "CreationTime")
	_libtaskpackage.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libtaskpackage.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libtaskpackage.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libtaskpackage.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libtaskpackage.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libtaskpackage.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libtaskpackage.Name = field.NewString(tableName, "Name")
	_libtaskpackage.TaskPackageStatus = field.NewInt64(tableName, "TaskPackageStatus")
	_libtaskpackage.PatronID = field.NewString(tableName, "PatronId")
	_libtaskpackage.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libtaskpackage.PatronName = field.NewString(tableName, "PatronName")
	_libtaskpackage.ExpireTime = field.NewTime(tableName, "ExpireTime")
	_libtaskpackage.Remark = field.NewString(tableName, "Remark")
	_libtaskpackage.TenantID = field.NewInt64(tableName, "TenantId")

	_libtaskpackage.fillFieldMap()

	return _libtaskpackage
}

type libtaskpackage struct {
	libtaskpackageDo libtaskpackageDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	TaskPackageStatus    field.Int64
	PatronID             field.String
	PatronBarcode        field.String
	PatronName           field.String
	ExpireTime           field.Time
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libtaskpackage) Table(newTableName string) *libtaskpackage {
	l.libtaskpackageDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libtaskpackage) As(alias string) *libtaskpackage {
	l.libtaskpackageDo.DO = *(l.libtaskpackageDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libtaskpackage) updateTableName(table string) *libtaskpackage {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.Name = field.NewString(table, "Name")
	l.TaskPackageStatus = field.NewInt64(table, "TaskPackageStatus")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.PatronName = field.NewString(table, "PatronName")
	l.ExpireTime = field.NewTime(table, "ExpireTime")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libtaskpackage) WithContext(ctx context.Context) ILibtaskpackageDo {
	return l.libtaskpackageDo.WithContext(ctx)
}

func (l libtaskpackage) TableName() string { return l.libtaskpackageDo.TableName() }

func (l libtaskpackage) Alias() string { return l.libtaskpackageDo.Alias() }

func (l *libtaskpackage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libtaskpackage) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 16)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["Name"] = l.Name
	l.fieldMap["TaskPackageStatus"] = l.TaskPackageStatus
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["ExpireTime"] = l.ExpireTime
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libtaskpackage) clone(db *gorm.DB) libtaskpackage {
	l.libtaskpackageDo.ReplaceDB(db)
	return l
}

type libtaskpackageDo struct{ gen.DO }

type ILibtaskpackageDo interface {
	gen.SubQuery
	Debug() ILibtaskpackageDo
	WithContext(ctx context.Context) ILibtaskpackageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibtaskpackageDo
	Not(conds ...gen.Condition) ILibtaskpackageDo
	Or(conds ...gen.Condition) ILibtaskpackageDo
	Select(conds ...field.Expr) ILibtaskpackageDo
	Where(conds ...gen.Condition) ILibtaskpackageDo
	Order(conds ...field.Expr) ILibtaskpackageDo
	Distinct(cols ...field.Expr) ILibtaskpackageDo
	Omit(cols ...field.Expr) ILibtaskpackageDo
	Join(table schema.Tabler, on ...field.Expr) ILibtaskpackageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibtaskpackageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibtaskpackageDo
	Group(cols ...field.Expr) ILibtaskpackageDo
	Having(conds ...gen.Condition) ILibtaskpackageDo
	Limit(limit int) ILibtaskpackageDo
	Offset(offset int) ILibtaskpackageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibtaskpackageDo
	Unscoped() ILibtaskpackageDo
	Create(values ...*model.Libtaskpackage) error
	CreateInBatches(values []*model.Libtaskpackage, batchSize int) error
	Save(values ...*model.Libtaskpackage) error
	First() (*model.Libtaskpackage, error)
	Take() (*model.Libtaskpackage, error)
	Last() (*model.Libtaskpackage, error)
	Find() ([]*model.Libtaskpackage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libtaskpackage, err error)
	FindInBatches(result *[]*model.Libtaskpackage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libtaskpackage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibtaskpackageDo
	Assign(attrs ...field.AssignExpr) ILibtaskpackageDo
	Joins(fields ...field.RelationField) ILibtaskpackageDo
	Preload(fields ...field.RelationField) ILibtaskpackageDo
	FirstOrInit() (*model.Libtaskpackage, error)
	FirstOrCreate() (*model.Libtaskpackage, error)
	FindByPage(offset int, limit int) (result []*model.Libtaskpackage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibtaskpackageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libtaskpackageDo) Debug() ILibtaskpackageDo {
	return l.withDO(l.DO.Debug())
}

func (l libtaskpackageDo) WithContext(ctx context.Context) ILibtaskpackageDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libtaskpackageDo) ReadDB() ILibtaskpackageDo {
	return l.Clauses(dbresolver.Read)
}

func (l libtaskpackageDo) WriteDB() ILibtaskpackageDo {
	return l.Clauses(dbresolver.Write)
}

func (l libtaskpackageDo) Clauses(conds ...clause.Expression) ILibtaskpackageDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libtaskpackageDo) Returning(value interface{}, columns ...string) ILibtaskpackageDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libtaskpackageDo) Not(conds ...gen.Condition) ILibtaskpackageDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libtaskpackageDo) Or(conds ...gen.Condition) ILibtaskpackageDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libtaskpackageDo) Select(conds ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libtaskpackageDo) Where(conds ...gen.Condition) ILibtaskpackageDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libtaskpackageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibtaskpackageDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libtaskpackageDo) Order(conds ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libtaskpackageDo) Distinct(cols ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libtaskpackageDo) Omit(cols ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libtaskpackageDo) Join(table schema.Tabler, on ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libtaskpackageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libtaskpackageDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libtaskpackageDo) Group(cols ...field.Expr) ILibtaskpackageDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libtaskpackageDo) Having(conds ...gen.Condition) ILibtaskpackageDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libtaskpackageDo) Limit(limit int) ILibtaskpackageDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libtaskpackageDo) Offset(offset int) ILibtaskpackageDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libtaskpackageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibtaskpackageDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libtaskpackageDo) Unscoped() ILibtaskpackageDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libtaskpackageDo) Create(values ...*model.Libtaskpackage) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libtaskpackageDo) CreateInBatches(values []*model.Libtaskpackage, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libtaskpackageDo) Save(values ...*model.Libtaskpackage) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libtaskpackageDo) First() (*model.Libtaskpackage, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtaskpackage), nil
	}
}

func (l libtaskpackageDo) Take() (*model.Libtaskpackage, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtaskpackage), nil
	}
}

func (l libtaskpackageDo) Last() (*model.Libtaskpackage, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtaskpackage), nil
	}
}

func (l libtaskpackageDo) Find() ([]*model.Libtaskpackage, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libtaskpackage), err
}

func (l libtaskpackageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libtaskpackage, err error) {
	buf := make([]*model.Libtaskpackage, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libtaskpackageDo) FindInBatches(result *[]*model.Libtaskpackage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libtaskpackageDo) Attrs(attrs ...field.AssignExpr) ILibtaskpackageDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libtaskpackageDo) Assign(attrs ...field.AssignExpr) ILibtaskpackageDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libtaskpackageDo) Joins(fields ...field.RelationField) ILibtaskpackageDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libtaskpackageDo) Preload(fields ...field.RelationField) ILibtaskpackageDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libtaskpackageDo) FirstOrInit() (*model.Libtaskpackage, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtaskpackage), nil
	}
}

func (l libtaskpackageDo) FirstOrCreate() (*model.Libtaskpackage, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtaskpackage), nil
	}
}

func (l libtaskpackageDo) FindByPage(offset int, limit int) (result []*model.Libtaskpackage, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libtaskpackageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libtaskpackageDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libtaskpackageDo) Delete(models ...*model.Libtaskpackage) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libtaskpackageDo) withDO(do gen.Dao) *libtaskpackageDo {
	l.DO = *do.(*gen.DO)
	return l
}
