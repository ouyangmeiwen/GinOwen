// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibinventorystat(db *gorm.DB) libinventorystat {
	_libinventorystat := libinventorystat{}

	_libinventorystat.libinventorystatDo.UseDB(db)
	_libinventorystat.libinventorystatDo.UseModel(&model.Libinventorystat{})

	tableName := _libinventorystat.libinventorystatDo.TableName()
	_libinventorystat.ALL = field.NewAsterisk(tableName)
	_libinventorystat.ID = field.NewString(tableName, "Id")
	_libinventorystat.CreationTime = field.NewTime(tableName, "CreationTime")
	_libinventorystat.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libinventorystat.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libinventorystat.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libinventorystat.StatDate = field.NewTime(tableName, "StatDate")
	_libinventorystat.StatType = field.NewInt64(tableName, "StatType")
	_libinventorystat.InventoryState = field.NewInt64(tableName, "InventoryState")
	_libinventorystat.InventoryCount = field.NewInt64(tableName, "InventoryCount")
	_libinventorystat.Remark = field.NewString(tableName, "Remark")
	_libinventorystat.TenantID = field.NewInt64(tableName, "TenantId")
	_libinventorystat.OriginType = field.NewInt64(tableName, "OriginType")

	_libinventorystat.fillFieldMap()

	return _libinventorystat
}

type libinventorystat struct {
	libinventorystatDo libinventorystatDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	StatDate             field.Time
	StatType             field.Int64
	InventoryState       field.Int64
	InventoryCount       field.Int64
	Remark               field.String
	TenantID             field.Int64
	OriginType           field.Int64

	fieldMap map[string]field.Expr
}

func (l libinventorystat) Table(newTableName string) *libinventorystat {
	l.libinventorystatDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libinventorystat) As(alias string) *libinventorystat {
	l.libinventorystatDo.DO = *(l.libinventorystatDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libinventorystat) updateTableName(table string) *libinventorystat {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.StatDate = field.NewTime(table, "StatDate")
	l.StatType = field.NewInt64(table, "StatType")
	l.InventoryState = field.NewInt64(table, "InventoryState")
	l.InventoryCount = field.NewInt64(table, "InventoryCount")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.OriginType = field.NewInt64(table, "OriginType")

	l.fillFieldMap()

	return l
}

func (l *libinventorystat) WithContext(ctx context.Context) ILibinventorystatDo {
	return l.libinventorystatDo.WithContext(ctx)
}

func (l libinventorystat) TableName() string { return l.libinventorystatDo.TableName() }

func (l libinventorystat) Alias() string { return l.libinventorystatDo.Alias() }

func (l *libinventorystat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libinventorystat) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["StatDate"] = l.StatDate
	l.fieldMap["StatType"] = l.StatType
	l.fieldMap["InventoryState"] = l.InventoryState
	l.fieldMap["InventoryCount"] = l.InventoryCount
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["OriginType"] = l.OriginType
}

func (l libinventorystat) clone(db *gorm.DB) libinventorystat {
	l.libinventorystatDo.ReplaceDB(db)
	return l
}

type libinventorystatDo struct{ gen.DO }

type ILibinventorystatDo interface {
	gen.SubQuery
	Debug() ILibinventorystatDo
	WithContext(ctx context.Context) ILibinventorystatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibinventorystatDo
	Not(conds ...gen.Condition) ILibinventorystatDo
	Or(conds ...gen.Condition) ILibinventorystatDo
	Select(conds ...field.Expr) ILibinventorystatDo
	Where(conds ...gen.Condition) ILibinventorystatDo
	Order(conds ...field.Expr) ILibinventorystatDo
	Distinct(cols ...field.Expr) ILibinventorystatDo
	Omit(cols ...field.Expr) ILibinventorystatDo
	Join(table schema.Tabler, on ...field.Expr) ILibinventorystatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventorystatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibinventorystatDo
	Group(cols ...field.Expr) ILibinventorystatDo
	Having(conds ...gen.Condition) ILibinventorystatDo
	Limit(limit int) ILibinventorystatDo
	Offset(offset int) ILibinventorystatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventorystatDo
	Unscoped() ILibinventorystatDo
	Create(values ...*model.Libinventorystat) error
	CreateInBatches(values []*model.Libinventorystat, batchSize int) error
	Save(values ...*model.Libinventorystat) error
	First() (*model.Libinventorystat, error)
	Take() (*model.Libinventorystat, error)
	Last() (*model.Libinventorystat, error)
	Find() ([]*model.Libinventorystat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventorystat, err error)
	FindInBatches(result *[]*model.Libinventorystat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libinventorystat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibinventorystatDo
	Assign(attrs ...field.AssignExpr) ILibinventorystatDo
	Joins(fields ...field.RelationField) ILibinventorystatDo
	Preload(fields ...field.RelationField) ILibinventorystatDo
	FirstOrInit() (*model.Libinventorystat, error)
	FirstOrCreate() (*model.Libinventorystat, error)
	FindByPage(offset int, limit int) (result []*model.Libinventorystat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibinventorystatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libinventorystatDo) Debug() ILibinventorystatDo {
	return l.withDO(l.DO.Debug())
}

func (l libinventorystatDo) WithContext(ctx context.Context) ILibinventorystatDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libinventorystatDo) ReadDB() ILibinventorystatDo {
	return l.Clauses(dbresolver.Read)
}

func (l libinventorystatDo) WriteDB() ILibinventorystatDo {
	return l.Clauses(dbresolver.Write)
}

func (l libinventorystatDo) Clauses(conds ...clause.Expression) ILibinventorystatDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libinventorystatDo) Returning(value interface{}, columns ...string) ILibinventorystatDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libinventorystatDo) Not(conds ...gen.Condition) ILibinventorystatDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libinventorystatDo) Or(conds ...gen.Condition) ILibinventorystatDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libinventorystatDo) Select(conds ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libinventorystatDo) Where(conds ...gen.Condition) ILibinventorystatDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libinventorystatDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibinventorystatDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libinventorystatDo) Order(conds ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libinventorystatDo) Distinct(cols ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libinventorystatDo) Omit(cols ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libinventorystatDo) Join(table schema.Tabler, on ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libinventorystatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libinventorystatDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libinventorystatDo) Group(cols ...field.Expr) ILibinventorystatDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libinventorystatDo) Having(conds ...gen.Condition) ILibinventorystatDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libinventorystatDo) Limit(limit int) ILibinventorystatDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libinventorystatDo) Offset(offset int) ILibinventorystatDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libinventorystatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventorystatDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libinventorystatDo) Unscoped() ILibinventorystatDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libinventorystatDo) Create(values ...*model.Libinventorystat) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libinventorystatDo) CreateInBatches(values []*model.Libinventorystat, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libinventorystatDo) Save(values ...*model.Libinventorystat) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libinventorystatDo) First() (*model.Libinventorystat, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorystat), nil
	}
}

func (l libinventorystatDo) Take() (*model.Libinventorystat, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorystat), nil
	}
}

func (l libinventorystatDo) Last() (*model.Libinventorystat, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorystat), nil
	}
}

func (l libinventorystatDo) Find() ([]*model.Libinventorystat, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libinventorystat), err
}

func (l libinventorystatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventorystat, err error) {
	buf := make([]*model.Libinventorystat, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libinventorystatDo) FindInBatches(result *[]*model.Libinventorystat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libinventorystatDo) Attrs(attrs ...field.AssignExpr) ILibinventorystatDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libinventorystatDo) Assign(attrs ...field.AssignExpr) ILibinventorystatDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libinventorystatDo) Joins(fields ...field.RelationField) ILibinventorystatDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libinventorystatDo) Preload(fields ...field.RelationField) ILibinventorystatDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libinventorystatDo) FirstOrInit() (*model.Libinventorystat, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorystat), nil
	}
}

func (l libinventorystatDo) FirstOrCreate() (*model.Libinventorystat, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorystat), nil
	}
}

func (l libinventorystatDo) FindByPage(offset int, limit int) (result []*model.Libinventorystat, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libinventorystatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libinventorystatDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libinventorystatDo) Delete(models ...*model.Libinventorystat) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libinventorystatDo) withDO(do gen.Dao) *libinventorystatDo {
	l.DO = *do.(*gen.DO)
	return l
}
