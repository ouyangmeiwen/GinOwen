// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSyscarddevdtl(db *gorm.DB) syscarddevdtl {
	_syscarddevdtl := syscarddevdtl{}

	_syscarddevdtl.syscarddevdtlDo.UseDB(db)
	_syscarddevdtl.syscarddevdtlDo.UseModel(&model.Syscarddevdtl{})

	tableName := _syscarddevdtl.syscarddevdtlDo.TableName()
	_syscarddevdtl.ALL = field.NewAsterisk(tableName)
	_syscarddevdtl.ID = field.NewString(tableName, "Id")
	_syscarddevdtl.SzCardName = field.NewString(tableName, "szCardName")
	_syscarddevdtl.SzCardCaption = field.NewString(tableName, "szCardCaption")
	_syscarddevdtl.SzMemo = field.NewString(tableName, "szMemo")
	_syscarddevdtl.BValid = field.NewField(tableName, "bValid")
	_syscarddevdtl.BDEV01 = field.NewField(tableName, "bDEV_01")
	_syscarddevdtl.BDEV02 = field.NewField(tableName, "bDEV_02")
	_syscarddevdtl.BDEV03 = field.NewField(tableName, "bDEV_03")
	_syscarddevdtl.BDEV04 = field.NewField(tableName, "bDEV_04")
	_syscarddevdtl.BDEV05 = field.NewField(tableName, "bDEV_05")
	_syscarddevdtl.BDEV09 = field.NewField(tableName, "bDEV_09")
	_syscarddevdtl.NOrder = field.NewInt64(tableName, "nOrder")
	_syscarddevdtl.TenantID = field.NewInt64(tableName, "TenantId")

	_syscarddevdtl.fillFieldMap()

	return _syscarddevdtl
}

type syscarddevdtl struct {
	syscarddevdtlDo syscarddevdtlDo

	ALL           field.Asterisk
	ID            field.String
	SzCardName    field.String
	SzCardCaption field.String
	SzMemo        field.String
	BValid        field.Field
	BDEV01        field.Field
	BDEV02        field.Field
	BDEV03        field.Field
	BDEV04        field.Field
	BDEV05        field.Field
	BDEV09        field.Field
	NOrder        field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (s syscarddevdtl) Table(newTableName string) *syscarddevdtl {
	s.syscarddevdtlDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syscarddevdtl) As(alias string) *syscarddevdtl {
	s.syscarddevdtlDo.DO = *(s.syscarddevdtlDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syscarddevdtl) updateTableName(table string) *syscarddevdtl {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.SzCardName = field.NewString(table, "szCardName")
	s.SzCardCaption = field.NewString(table, "szCardCaption")
	s.SzMemo = field.NewString(table, "szMemo")
	s.BValid = field.NewField(table, "bValid")
	s.BDEV01 = field.NewField(table, "bDEV_01")
	s.BDEV02 = field.NewField(table, "bDEV_02")
	s.BDEV03 = field.NewField(table, "bDEV_03")
	s.BDEV04 = field.NewField(table, "bDEV_04")
	s.BDEV05 = field.NewField(table, "bDEV_05")
	s.BDEV09 = field.NewField(table, "bDEV_09")
	s.NOrder = field.NewInt64(table, "nOrder")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *syscarddevdtl) WithContext(ctx context.Context) ISyscarddevdtlDo {
	return s.syscarddevdtlDo.WithContext(ctx)
}

func (s syscarddevdtl) TableName() string { return s.syscarddevdtlDo.TableName() }

func (s syscarddevdtl) Alias() string { return s.syscarddevdtlDo.Alias() }

func (s *syscarddevdtl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syscarddevdtl) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["szCardName"] = s.SzCardName
	s.fieldMap["szCardCaption"] = s.SzCardCaption
	s.fieldMap["szMemo"] = s.SzMemo
	s.fieldMap["bValid"] = s.BValid
	s.fieldMap["bDEV_01"] = s.BDEV01
	s.fieldMap["bDEV_02"] = s.BDEV02
	s.fieldMap["bDEV_03"] = s.BDEV03
	s.fieldMap["bDEV_04"] = s.BDEV04
	s.fieldMap["bDEV_05"] = s.BDEV05
	s.fieldMap["bDEV_09"] = s.BDEV09
	s.fieldMap["nOrder"] = s.NOrder
	s.fieldMap["TenantId"] = s.TenantID
}

func (s syscarddevdtl) clone(db *gorm.DB) syscarddevdtl {
	s.syscarddevdtlDo.ReplaceDB(db)
	return s
}

type syscarddevdtlDo struct{ gen.DO }

type ISyscarddevdtlDo interface {
	gen.SubQuery
	Debug() ISyscarddevdtlDo
	WithContext(ctx context.Context) ISyscarddevdtlDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyscarddevdtlDo
	Not(conds ...gen.Condition) ISyscarddevdtlDo
	Or(conds ...gen.Condition) ISyscarddevdtlDo
	Select(conds ...field.Expr) ISyscarddevdtlDo
	Where(conds ...gen.Condition) ISyscarddevdtlDo
	Order(conds ...field.Expr) ISyscarddevdtlDo
	Distinct(cols ...field.Expr) ISyscarddevdtlDo
	Omit(cols ...field.Expr) ISyscarddevdtlDo
	Join(table schema.Tabler, on ...field.Expr) ISyscarddevdtlDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyscarddevdtlDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyscarddevdtlDo
	Group(cols ...field.Expr) ISyscarddevdtlDo
	Having(conds ...gen.Condition) ISyscarddevdtlDo
	Limit(limit int) ISyscarddevdtlDo
	Offset(offset int) ISyscarddevdtlDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscarddevdtlDo
	Unscoped() ISyscarddevdtlDo
	Create(values ...*model.Syscarddevdtl) error
	CreateInBatches(values []*model.Syscarddevdtl, batchSize int) error
	Save(values ...*model.Syscarddevdtl) error
	First() (*model.Syscarddevdtl, error)
	Take() (*model.Syscarddevdtl, error)
	Last() (*model.Syscarddevdtl, error)
	Find() ([]*model.Syscarddevdtl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscarddevdtl, err error)
	FindInBatches(result *[]*model.Syscarddevdtl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syscarddevdtl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyscarddevdtlDo
	Assign(attrs ...field.AssignExpr) ISyscarddevdtlDo
	Joins(fields ...field.RelationField) ISyscarddevdtlDo
	Preload(fields ...field.RelationField) ISyscarddevdtlDo
	FirstOrInit() (*model.Syscarddevdtl, error)
	FirstOrCreate() (*model.Syscarddevdtl, error)
	FindByPage(offset int, limit int) (result []*model.Syscarddevdtl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyscarddevdtlDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syscarddevdtlDo) Debug() ISyscarddevdtlDo {
	return s.withDO(s.DO.Debug())
}

func (s syscarddevdtlDo) WithContext(ctx context.Context) ISyscarddevdtlDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syscarddevdtlDo) ReadDB() ISyscarddevdtlDo {
	return s.Clauses(dbresolver.Read)
}

func (s syscarddevdtlDo) WriteDB() ISyscarddevdtlDo {
	return s.Clauses(dbresolver.Write)
}

func (s syscarddevdtlDo) Clauses(conds ...clause.Expression) ISyscarddevdtlDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syscarddevdtlDo) Returning(value interface{}, columns ...string) ISyscarddevdtlDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syscarddevdtlDo) Not(conds ...gen.Condition) ISyscarddevdtlDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syscarddevdtlDo) Or(conds ...gen.Condition) ISyscarddevdtlDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syscarddevdtlDo) Select(conds ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syscarddevdtlDo) Where(conds ...gen.Condition) ISyscarddevdtlDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syscarddevdtlDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyscarddevdtlDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syscarddevdtlDo) Order(conds ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syscarddevdtlDo) Distinct(cols ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syscarddevdtlDo) Omit(cols ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syscarddevdtlDo) Join(table schema.Tabler, on ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syscarddevdtlDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syscarddevdtlDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syscarddevdtlDo) Group(cols ...field.Expr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syscarddevdtlDo) Having(conds ...gen.Condition) ISyscarddevdtlDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syscarddevdtlDo) Limit(limit int) ISyscarddevdtlDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syscarddevdtlDo) Offset(offset int) ISyscarddevdtlDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syscarddevdtlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscarddevdtlDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syscarddevdtlDo) Unscoped() ISyscarddevdtlDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syscarddevdtlDo) Create(values ...*model.Syscarddevdtl) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syscarddevdtlDo) CreateInBatches(values []*model.Syscarddevdtl, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syscarddevdtlDo) Save(values ...*model.Syscarddevdtl) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syscarddevdtlDo) First() (*model.Syscarddevdtl, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscarddevdtl), nil
	}
}

func (s syscarddevdtlDo) Take() (*model.Syscarddevdtl, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscarddevdtl), nil
	}
}

func (s syscarddevdtlDo) Last() (*model.Syscarddevdtl, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscarddevdtl), nil
	}
}

func (s syscarddevdtlDo) Find() ([]*model.Syscarddevdtl, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syscarddevdtl), err
}

func (s syscarddevdtlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscarddevdtl, err error) {
	buf := make([]*model.Syscarddevdtl, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syscarddevdtlDo) FindInBatches(result *[]*model.Syscarddevdtl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syscarddevdtlDo) Attrs(attrs ...field.AssignExpr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syscarddevdtlDo) Assign(attrs ...field.AssignExpr) ISyscarddevdtlDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syscarddevdtlDo) Joins(fields ...field.RelationField) ISyscarddevdtlDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syscarddevdtlDo) Preload(fields ...field.RelationField) ISyscarddevdtlDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syscarddevdtlDo) FirstOrInit() (*model.Syscarddevdtl, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscarddevdtl), nil
	}
}

func (s syscarddevdtlDo) FirstOrCreate() (*model.Syscarddevdtl, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscarddevdtl), nil
	}
}

func (s syscarddevdtlDo) FindByPage(offset int, limit int) (result []*model.Syscarddevdtl, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syscarddevdtlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syscarddevdtlDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syscarddevdtlDo) Delete(models ...*model.Syscarddevdtl) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syscarddevdtlDo) withDO(do gen.Dao) *syscarddevdtlDo {
	s.DO = *do.(*gen.DO)
	return s
}
