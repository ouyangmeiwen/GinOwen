// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSyscoderule(db *gorm.DB) syscoderule {
	_syscoderule := syscoderule{}

	_syscoderule.syscoderuleDo.UseDB(db)
	_syscoderule.syscoderuleDo.UseModel(&model.Syscoderule{})

	tableName := _syscoderule.syscoderuleDo.TableName()
	_syscoderule.ALL = field.NewAsterisk(tableName)
	_syscoderule.ID = field.NewString(tableName, "Id")
	_syscoderule.CreationTime = field.NewTime(tableName, "CreationTime")
	_syscoderule.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_syscoderule.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_syscoderule.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_syscoderule.IsDeleted = field.NewField(tableName, "IsDeleted")
	_syscoderule.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_syscoderule.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_syscoderule.Code = field.NewString(tableName, "Code")
	_syscoderule.Name = field.NewString(tableName, "Name")
	_syscoderule.CurrentNumber = field.NewString(tableName, "CurrentNumber")
	_syscoderule.RuleFormatJSON = field.NewString(tableName, "RuleFormatJson")
	_syscoderule.IsEnable = field.NewField(tableName, "IsEnable")
	_syscoderule.Remark = field.NewString(tableName, "Remark")

	_syscoderule.fillFieldMap()

	return _syscoderule
}

type syscoderule struct {
	syscoderuleDo syscoderuleDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	CurrentNumber        field.String
	RuleFormatJSON       field.String
	IsEnable             field.Field
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (s syscoderule) Table(newTableName string) *syscoderule {
	s.syscoderuleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syscoderule) As(alias string) *syscoderule {
	s.syscoderuleDo.DO = *(s.syscoderuleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syscoderule) updateTableName(table string) *syscoderule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Code = field.NewString(table, "Code")
	s.Name = field.NewString(table, "Name")
	s.CurrentNumber = field.NewString(table, "CurrentNumber")
	s.RuleFormatJSON = field.NewString(table, "RuleFormatJson")
	s.IsEnable = field.NewField(table, "IsEnable")
	s.Remark = field.NewString(table, "Remark")

	s.fillFieldMap()

	return s
}

func (s *syscoderule) WithContext(ctx context.Context) ISyscoderuleDo {
	return s.syscoderuleDo.WithContext(ctx)
}

func (s syscoderule) TableName() string { return s.syscoderuleDo.TableName() }

func (s syscoderule) Alias() string { return s.syscoderuleDo.Alias() }

func (s *syscoderule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syscoderule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Code"] = s.Code
	s.fieldMap["Name"] = s.Name
	s.fieldMap["CurrentNumber"] = s.CurrentNumber
	s.fieldMap["RuleFormatJson"] = s.RuleFormatJSON
	s.fieldMap["IsEnable"] = s.IsEnable
	s.fieldMap["Remark"] = s.Remark
}

func (s syscoderule) clone(db *gorm.DB) syscoderule {
	s.syscoderuleDo.ReplaceDB(db)
	return s
}

type syscoderuleDo struct{ gen.DO }

type ISyscoderuleDo interface {
	gen.SubQuery
	Debug() ISyscoderuleDo
	WithContext(ctx context.Context) ISyscoderuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyscoderuleDo
	Not(conds ...gen.Condition) ISyscoderuleDo
	Or(conds ...gen.Condition) ISyscoderuleDo
	Select(conds ...field.Expr) ISyscoderuleDo
	Where(conds ...gen.Condition) ISyscoderuleDo
	Order(conds ...field.Expr) ISyscoderuleDo
	Distinct(cols ...field.Expr) ISyscoderuleDo
	Omit(cols ...field.Expr) ISyscoderuleDo
	Join(table schema.Tabler, on ...field.Expr) ISyscoderuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleDo
	Group(cols ...field.Expr) ISyscoderuleDo
	Having(conds ...gen.Condition) ISyscoderuleDo
	Limit(limit int) ISyscoderuleDo
	Offset(offset int) ISyscoderuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscoderuleDo
	Unscoped() ISyscoderuleDo
	Create(values ...*model.Syscoderule) error
	CreateInBatches(values []*model.Syscoderule, batchSize int) error
	Save(values ...*model.Syscoderule) error
	First() (*model.Syscoderule, error)
	Take() (*model.Syscoderule, error)
	Last() (*model.Syscoderule, error)
	Find() ([]*model.Syscoderule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscoderule, err error)
	FindInBatches(result *[]*model.Syscoderule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syscoderule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyscoderuleDo
	Assign(attrs ...field.AssignExpr) ISyscoderuleDo
	Joins(fields ...field.RelationField) ISyscoderuleDo
	Preload(fields ...field.RelationField) ISyscoderuleDo
	FirstOrInit() (*model.Syscoderule, error)
	FirstOrCreate() (*model.Syscoderule, error)
	FindByPage(offset int, limit int) (result []*model.Syscoderule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyscoderuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syscoderuleDo) Debug() ISyscoderuleDo {
	return s.withDO(s.DO.Debug())
}

func (s syscoderuleDo) WithContext(ctx context.Context) ISyscoderuleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syscoderuleDo) ReadDB() ISyscoderuleDo {
	return s.Clauses(dbresolver.Read)
}

func (s syscoderuleDo) WriteDB() ISyscoderuleDo {
	return s.Clauses(dbresolver.Write)
}

func (s syscoderuleDo) Clauses(conds ...clause.Expression) ISyscoderuleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syscoderuleDo) Returning(value interface{}, columns ...string) ISyscoderuleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syscoderuleDo) Not(conds ...gen.Condition) ISyscoderuleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syscoderuleDo) Or(conds ...gen.Condition) ISyscoderuleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syscoderuleDo) Select(conds ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syscoderuleDo) Where(conds ...gen.Condition) ISyscoderuleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syscoderuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyscoderuleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syscoderuleDo) Order(conds ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syscoderuleDo) Distinct(cols ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syscoderuleDo) Omit(cols ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syscoderuleDo) Join(table schema.Tabler, on ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syscoderuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syscoderuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syscoderuleDo) Group(cols ...field.Expr) ISyscoderuleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syscoderuleDo) Having(conds ...gen.Condition) ISyscoderuleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syscoderuleDo) Limit(limit int) ISyscoderuleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syscoderuleDo) Offset(offset int) ISyscoderuleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syscoderuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscoderuleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syscoderuleDo) Unscoped() ISyscoderuleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syscoderuleDo) Create(values ...*model.Syscoderule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syscoderuleDo) CreateInBatches(values []*model.Syscoderule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syscoderuleDo) Save(values ...*model.Syscoderule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syscoderuleDo) First() (*model.Syscoderule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderule), nil
	}
}

func (s syscoderuleDo) Take() (*model.Syscoderule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderule), nil
	}
}

func (s syscoderuleDo) Last() (*model.Syscoderule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderule), nil
	}
}

func (s syscoderuleDo) Find() ([]*model.Syscoderule, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syscoderule), err
}

func (s syscoderuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscoderule, err error) {
	buf := make([]*model.Syscoderule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syscoderuleDo) FindInBatches(result *[]*model.Syscoderule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syscoderuleDo) Attrs(attrs ...field.AssignExpr) ISyscoderuleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syscoderuleDo) Assign(attrs ...field.AssignExpr) ISyscoderuleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syscoderuleDo) Joins(fields ...field.RelationField) ISyscoderuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syscoderuleDo) Preload(fields ...field.RelationField) ISyscoderuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syscoderuleDo) FirstOrInit() (*model.Syscoderule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderule), nil
	}
}

func (s syscoderuleDo) FirstOrCreate() (*model.Syscoderule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderule), nil
	}
}

func (s syscoderuleDo) FindByPage(offset int, limit int) (result []*model.Syscoderule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syscoderuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syscoderuleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syscoderuleDo) Delete(models ...*model.Syscoderule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syscoderuleDo) withDO(do gen.Dao) *syscoderuleDo {
	s.DO = *do.(*gen.DO)
	return s
}
