// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSystenantextend(db *gorm.DB) systenantextend {
	_systenantextend := systenantextend{}

	_systenantextend.systenantextendDo.UseDB(db)
	_systenantextend.systenantextendDo.UseModel(&model.Systenantextend{})

	tableName := _systenantextend.systenantextendDo.TableName()
	_systenantextend.ALL = field.NewAsterisk(tableName)
	_systenantextend.ID = field.NewString(tableName, "Id")
	_systenantextend.CreationTime = field.NewTime(tableName, "CreationTime")
	_systenantextend.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_systenantextend.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_systenantextend.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_systenantextend.LibraryCode = field.NewString(tableName, "LibraryCode")
	_systenantextend.TenantType = field.NewInt64(tableName, "TenantType")
	_systenantextend.Level = field.NewInt64(tableName, "Level")
	_systenantextend.Custom = field.NewString(tableName, "Custom")
	_systenantextend.Remark = field.NewString(tableName, "Remark")
	_systenantextend.TenantID = field.NewInt64(tableName, "TenantId")
	_systenantextend.RegistrationCode = field.NewString(tableName, "RegistrationCode")

	_systenantextend.fillFieldMap()

	return _systenantextend
}

type systenantextend struct {
	systenantextendDo systenantextendDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	LibraryCode          field.String
	TenantType           field.Int64
	Level                field.Int64
	Custom               field.String
	Remark               field.String
	TenantID             field.Int64
	RegistrationCode     field.String

	fieldMap map[string]field.Expr
}

func (s systenantextend) Table(newTableName string) *systenantextend {
	s.systenantextendDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systenantextend) As(alias string) *systenantextend {
	s.systenantextendDo.DO = *(s.systenantextendDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systenantextend) updateTableName(table string) *systenantextend {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.LibraryCode = field.NewString(table, "LibraryCode")
	s.TenantType = field.NewInt64(table, "TenantType")
	s.Level = field.NewInt64(table, "Level")
	s.Custom = field.NewString(table, "Custom")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.RegistrationCode = field.NewString(table, "RegistrationCode")

	s.fillFieldMap()

	return s
}

func (s *systenantextend) WithContext(ctx context.Context) ISystenantextendDo {
	return s.systenantextendDo.WithContext(ctx)
}

func (s systenantextend) TableName() string { return s.systenantextendDo.TableName() }

func (s systenantextend) Alias() string { return s.systenantextendDo.Alias() }

func (s *systenantextend) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systenantextend) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["LibraryCode"] = s.LibraryCode
	s.fieldMap["TenantType"] = s.TenantType
	s.fieldMap["Level"] = s.Level
	s.fieldMap["Custom"] = s.Custom
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["RegistrationCode"] = s.RegistrationCode
}

func (s systenantextend) clone(db *gorm.DB) systenantextend {
	s.systenantextendDo.ReplaceDB(db)
	return s
}

type systenantextendDo struct{ gen.DO }

type ISystenantextendDo interface {
	gen.SubQuery
	Debug() ISystenantextendDo
	WithContext(ctx context.Context) ISystenantextendDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystenantextendDo
	Not(conds ...gen.Condition) ISystenantextendDo
	Or(conds ...gen.Condition) ISystenantextendDo
	Select(conds ...field.Expr) ISystenantextendDo
	Where(conds ...gen.Condition) ISystenantextendDo
	Order(conds ...field.Expr) ISystenantextendDo
	Distinct(cols ...field.Expr) ISystenantextendDo
	Omit(cols ...field.Expr) ISystenantextendDo
	Join(table schema.Tabler, on ...field.Expr) ISystenantextendDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystenantextendDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystenantextendDo
	Group(cols ...field.Expr) ISystenantextendDo
	Having(conds ...gen.Condition) ISystenantextendDo
	Limit(limit int) ISystenantextendDo
	Offset(offset int) ISystenantextendDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystenantextendDo
	Unscoped() ISystenantextendDo
	Create(values ...*model.Systenantextend) error
	CreateInBatches(values []*model.Systenantextend, batchSize int) error
	Save(values ...*model.Systenantextend) error
	First() (*model.Systenantextend, error)
	Take() (*model.Systenantextend, error)
	Last() (*model.Systenantextend, error)
	Find() ([]*model.Systenantextend, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Systenantextend, err error)
	FindInBatches(result *[]*model.Systenantextend, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Systenantextend) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystenantextendDo
	Assign(attrs ...field.AssignExpr) ISystenantextendDo
	Joins(fields ...field.RelationField) ISystenantextendDo
	Preload(fields ...field.RelationField) ISystenantextendDo
	FirstOrInit() (*model.Systenantextend, error)
	FirstOrCreate() (*model.Systenantextend, error)
	FindByPage(offset int, limit int) (result []*model.Systenantextend, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystenantextendDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systenantextendDo) Debug() ISystenantextendDo {
	return s.withDO(s.DO.Debug())
}

func (s systenantextendDo) WithContext(ctx context.Context) ISystenantextendDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systenantextendDo) ReadDB() ISystenantextendDo {
	return s.Clauses(dbresolver.Read)
}

func (s systenantextendDo) WriteDB() ISystenantextendDo {
	return s.Clauses(dbresolver.Write)
}

func (s systenantextendDo) Clauses(conds ...clause.Expression) ISystenantextendDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systenantextendDo) Returning(value interface{}, columns ...string) ISystenantextendDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systenantextendDo) Not(conds ...gen.Condition) ISystenantextendDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systenantextendDo) Or(conds ...gen.Condition) ISystenantextendDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systenantextendDo) Select(conds ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systenantextendDo) Where(conds ...gen.Condition) ISystenantextendDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systenantextendDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystenantextendDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systenantextendDo) Order(conds ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systenantextendDo) Distinct(cols ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systenantextendDo) Omit(cols ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systenantextendDo) Join(table schema.Tabler, on ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systenantextendDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systenantextendDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systenantextendDo) Group(cols ...field.Expr) ISystenantextendDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systenantextendDo) Having(conds ...gen.Condition) ISystenantextendDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systenantextendDo) Limit(limit int) ISystenantextendDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systenantextendDo) Offset(offset int) ISystenantextendDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systenantextendDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystenantextendDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systenantextendDo) Unscoped() ISystenantextendDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systenantextendDo) Create(values ...*model.Systenantextend) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systenantextendDo) CreateInBatches(values []*model.Systenantextend, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systenantextendDo) Save(values ...*model.Systenantextend) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systenantextendDo) First() (*model.Systenantextend, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantextend), nil
	}
}

func (s systenantextendDo) Take() (*model.Systenantextend, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantextend), nil
	}
}

func (s systenantextendDo) Last() (*model.Systenantextend, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantextend), nil
	}
}

func (s systenantextendDo) Find() ([]*model.Systenantextend, error) {
	result, err := s.DO.Find()
	return result.([]*model.Systenantextend), err
}

func (s systenantextendDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Systenantextend, err error) {
	buf := make([]*model.Systenantextend, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systenantextendDo) FindInBatches(result *[]*model.Systenantextend, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systenantextendDo) Attrs(attrs ...field.AssignExpr) ISystenantextendDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systenantextendDo) Assign(attrs ...field.AssignExpr) ISystenantextendDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systenantextendDo) Joins(fields ...field.RelationField) ISystenantextendDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systenantextendDo) Preload(fields ...field.RelationField) ISystenantextendDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systenantextendDo) FirstOrInit() (*model.Systenantextend, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantextend), nil
	}
}

func (s systenantextendDo) FirstOrCreate() (*model.Systenantextend, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systenantextend), nil
	}
}

func (s systenantextendDo) FindByPage(offset int, limit int) (result []*model.Systenantextend, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systenantextendDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systenantextendDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systenantextendDo) Delete(models ...*model.Systenantextend) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systenantextendDo) withDO(do gen.Dao) *systenantextendDo {
	s.DO = *do.(*gen.DO)
	return s
}
