// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpserialportext(db *gorm.DB) lcpserialportext {
	_lcpserialportext := lcpserialportext{}

	_lcpserialportext.lcpserialportextDo.UseDB(db)
	_lcpserialportext.lcpserialportextDo.UseModel(&model.Lcpserialportext{})

	tableName := _lcpserialportext.lcpserialportextDo.TableName()
	_lcpserialportext.ALL = field.NewAsterisk(tableName)
	_lcpserialportext.ID = field.NewString(tableName, "Id")
	_lcpserialportext.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpserialportext.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpserialportext.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpserialportext.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpserialportext.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpserialportext.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpserialportext.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpserialportext.Name = field.NewString(tableName, "Name")
	_lcpserialportext.SerialPortID = field.NewString(tableName, "SerialPortId")
	_lcpserialportext.HubID = field.NewInt64(tableName, "HubId")
	_lcpserialportext.SerialPortExtPort = field.NewInt64(tableName, "SerialPortExtPort")
	_lcpserialportext.LayerID = field.NewString(tableName, "LayerId")
	_lcpserialportext.Remark = field.NewString(tableName, "Remark")
	_lcpserialportext.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpserialportext.fillFieldMap()

	return _lcpserialportext
}

type lcpserialportext struct {
	lcpserialportextDo lcpserialportextDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	SerialPortID         field.String
	HubID                field.Int64
	SerialPortExtPort    field.Int64
	LayerID              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpserialportext) Table(newTableName string) *lcpserialportext {
	l.lcpserialportextDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpserialportext) As(alias string) *lcpserialportext {
	l.lcpserialportextDo.DO = *(l.lcpserialportextDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpserialportext) updateTableName(table string) *lcpserialportext {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.Name = field.NewString(table, "Name")
	l.SerialPortID = field.NewString(table, "SerialPortId")
	l.HubID = field.NewInt64(table, "HubId")
	l.SerialPortExtPort = field.NewInt64(table, "SerialPortExtPort")
	l.LayerID = field.NewString(table, "LayerId")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpserialportext) WithContext(ctx context.Context) ILcpserialportextDo {
	return l.lcpserialportextDo.WithContext(ctx)
}

func (l lcpserialportext) TableName() string { return l.lcpserialportextDo.TableName() }

func (l lcpserialportext) Alias() string { return l.lcpserialportextDo.Alias() }

func (l *lcpserialportext) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpserialportext) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["Name"] = l.Name
	l.fieldMap["SerialPortId"] = l.SerialPortID
	l.fieldMap["HubId"] = l.HubID
	l.fieldMap["SerialPortExtPort"] = l.SerialPortExtPort
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpserialportext) clone(db *gorm.DB) lcpserialportext {
	l.lcpserialportextDo.ReplaceDB(db)
	return l
}

type lcpserialportextDo struct{ gen.DO }

type ILcpserialportextDo interface {
	gen.SubQuery
	Debug() ILcpserialportextDo
	WithContext(ctx context.Context) ILcpserialportextDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpserialportextDo
	Not(conds ...gen.Condition) ILcpserialportextDo
	Or(conds ...gen.Condition) ILcpserialportextDo
	Select(conds ...field.Expr) ILcpserialportextDo
	Where(conds ...gen.Condition) ILcpserialportextDo
	Order(conds ...field.Expr) ILcpserialportextDo
	Distinct(cols ...field.Expr) ILcpserialportextDo
	Omit(cols ...field.Expr) ILcpserialportextDo
	Join(table schema.Tabler, on ...field.Expr) ILcpserialportextDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpserialportextDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpserialportextDo
	Group(cols ...field.Expr) ILcpserialportextDo
	Having(conds ...gen.Condition) ILcpserialportextDo
	Limit(limit int) ILcpserialportextDo
	Offset(offset int) ILcpserialportextDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpserialportextDo
	Unscoped() ILcpserialportextDo
	Create(values ...*model.Lcpserialportext) error
	CreateInBatches(values []*model.Lcpserialportext, batchSize int) error
	Save(values ...*model.Lcpserialportext) error
	First() (*model.Lcpserialportext, error)
	Take() (*model.Lcpserialportext, error)
	Last() (*model.Lcpserialportext, error)
	Find() ([]*model.Lcpserialportext, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpserialportext, err error)
	FindInBatches(result *[]*model.Lcpserialportext, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpserialportext) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpserialportextDo
	Assign(attrs ...field.AssignExpr) ILcpserialportextDo
	Joins(fields ...field.RelationField) ILcpserialportextDo
	Preload(fields ...field.RelationField) ILcpserialportextDo
	FirstOrInit() (*model.Lcpserialportext, error)
	FirstOrCreate() (*model.Lcpserialportext, error)
	FindByPage(offset int, limit int) (result []*model.Lcpserialportext, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpserialportextDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpserialportextDo) Debug() ILcpserialportextDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpserialportextDo) WithContext(ctx context.Context) ILcpserialportextDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpserialportextDo) ReadDB() ILcpserialportextDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpserialportextDo) WriteDB() ILcpserialportextDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpserialportextDo) Clauses(conds ...clause.Expression) ILcpserialportextDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpserialportextDo) Returning(value interface{}, columns ...string) ILcpserialportextDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpserialportextDo) Not(conds ...gen.Condition) ILcpserialportextDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpserialportextDo) Or(conds ...gen.Condition) ILcpserialportextDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpserialportextDo) Select(conds ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpserialportextDo) Where(conds ...gen.Condition) ILcpserialportextDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpserialportextDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpserialportextDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpserialportextDo) Order(conds ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpserialportextDo) Distinct(cols ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpserialportextDo) Omit(cols ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpserialportextDo) Join(table schema.Tabler, on ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpserialportextDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpserialportextDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpserialportextDo) Group(cols ...field.Expr) ILcpserialportextDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpserialportextDo) Having(conds ...gen.Condition) ILcpserialportextDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpserialportextDo) Limit(limit int) ILcpserialportextDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpserialportextDo) Offset(offset int) ILcpserialportextDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpserialportextDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpserialportextDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpserialportextDo) Unscoped() ILcpserialportextDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpserialportextDo) Create(values ...*model.Lcpserialportext) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpserialportextDo) CreateInBatches(values []*model.Lcpserialportext, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpserialportextDo) Save(values ...*model.Lcpserialportext) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpserialportextDo) First() (*model.Lcpserialportext, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialportext), nil
	}
}

func (l lcpserialportextDo) Take() (*model.Lcpserialportext, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialportext), nil
	}
}

func (l lcpserialportextDo) Last() (*model.Lcpserialportext, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialportext), nil
	}
}

func (l lcpserialportextDo) Find() ([]*model.Lcpserialportext, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpserialportext), err
}

func (l lcpserialportextDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpserialportext, err error) {
	buf := make([]*model.Lcpserialportext, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpserialportextDo) FindInBatches(result *[]*model.Lcpserialportext, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpserialportextDo) Attrs(attrs ...field.AssignExpr) ILcpserialportextDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpserialportextDo) Assign(attrs ...field.AssignExpr) ILcpserialportextDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpserialportextDo) Joins(fields ...field.RelationField) ILcpserialportextDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpserialportextDo) Preload(fields ...field.RelationField) ILcpserialportextDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpserialportextDo) FirstOrInit() (*model.Lcpserialportext, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialportext), nil
	}
}

func (l lcpserialportextDo) FirstOrCreate() (*model.Lcpserialportext, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpserialportext), nil
	}
}

func (l lcpserialportextDo) FindByPage(offset int, limit int) (result []*model.Lcpserialportext, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpserialportextDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpserialportextDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpserialportextDo) Delete(models ...*model.Lcpserialportext) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpserialportextDo) withDO(do gen.Dao) *lcpserialportextDo {
	l.DO = *do.(*gen.DO)
	return l
}
