// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAbprole(db *gorm.DB) abprole {
	_abprole := abprole{}

	_abprole.abproleDo.UseDB(db)
	_abprole.abproleDo.UseModel(&model.Abprole{})

	tableName := _abprole.abproleDo.TableName()
	_abprole.ALL = field.NewAsterisk(tableName)
	_abprole.ID = field.NewInt64(tableName, "Id")
	_abprole.CreationTime = field.NewTime(tableName, "CreationTime")
	_abprole.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abprole.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abprole.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abprole.IsDeleted = field.NewField(tableName, "IsDeleted")
	_abprole.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_abprole.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_abprole.TenantID = field.NewInt64(tableName, "TenantId")
	_abprole.Name = field.NewString(tableName, "Name")
	_abprole.DisplayName = field.NewString(tableName, "DisplayName")
	_abprole.IsStatic = field.NewField(tableName, "IsStatic")
	_abprole.IsDefault = field.NewField(tableName, "IsDefault")
	_abprole.NormalizedName = field.NewString(tableName, "NormalizedName")
	_abprole.ConcurrencyStamp = field.NewString(tableName, "ConcurrencyStamp")

	_abprole.fillFieldMap()

	return _abprole
}

type abprole struct {
	abproleDo abproleDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TenantID             field.Int64
	Name                 field.String
	DisplayName          field.String
	IsStatic             field.Field
	IsDefault            field.Field
	NormalizedName       field.String
	ConcurrencyStamp     field.String

	fieldMap map[string]field.Expr
}

func (a abprole) Table(newTableName string) *abprole {
	a.abproleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abprole) As(alias string) *abprole {
	a.abproleDo.DO = *(a.abproleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abprole) updateTableName(table string) *abprole {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.Name = field.NewString(table, "Name")
	a.DisplayName = field.NewString(table, "DisplayName")
	a.IsStatic = field.NewField(table, "IsStatic")
	a.IsDefault = field.NewField(table, "IsDefault")
	a.NormalizedName = field.NewString(table, "NormalizedName")
	a.ConcurrencyStamp = field.NewString(table, "ConcurrencyStamp")

	a.fillFieldMap()

	return a
}

func (a *abprole) WithContext(ctx context.Context) IAbproleDo { return a.abproleDo.WithContext(ctx) }

func (a abprole) TableName() string { return a.abproleDo.TableName() }

func (a abprole) Alias() string { return a.abproleDo.Alias() }

func (a *abprole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abprole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["Name"] = a.Name
	a.fieldMap["DisplayName"] = a.DisplayName
	a.fieldMap["IsStatic"] = a.IsStatic
	a.fieldMap["IsDefault"] = a.IsDefault
	a.fieldMap["NormalizedName"] = a.NormalizedName
	a.fieldMap["ConcurrencyStamp"] = a.ConcurrencyStamp
}

func (a abprole) clone(db *gorm.DB) abprole {
	a.abproleDo.ReplaceDB(db)
	return a
}

type abproleDo struct{ gen.DO }

type IAbproleDo interface {
	gen.SubQuery
	Debug() IAbproleDo
	WithContext(ctx context.Context) IAbproleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbproleDo
	Not(conds ...gen.Condition) IAbproleDo
	Or(conds ...gen.Condition) IAbproleDo
	Select(conds ...field.Expr) IAbproleDo
	Where(conds ...gen.Condition) IAbproleDo
	Order(conds ...field.Expr) IAbproleDo
	Distinct(cols ...field.Expr) IAbproleDo
	Omit(cols ...field.Expr) IAbproleDo
	Join(table schema.Tabler, on ...field.Expr) IAbproleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbproleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbproleDo
	Group(cols ...field.Expr) IAbproleDo
	Having(conds ...gen.Condition) IAbproleDo
	Limit(limit int) IAbproleDo
	Offset(offset int) IAbproleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbproleDo
	Unscoped() IAbproleDo
	Create(values ...*model.Abprole) error
	CreateInBatches(values []*model.Abprole, batchSize int) error
	Save(values ...*model.Abprole) error
	First() (*model.Abprole, error)
	Take() (*model.Abprole, error)
	Last() (*model.Abprole, error)
	Find() ([]*model.Abprole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abprole, err error)
	FindInBatches(result *[]*model.Abprole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abprole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbproleDo
	Assign(attrs ...field.AssignExpr) IAbproleDo
	Joins(fields ...field.RelationField) IAbproleDo
	Preload(fields ...field.RelationField) IAbproleDo
	FirstOrInit() (*model.Abprole, error)
	FirstOrCreate() (*model.Abprole, error)
	FindByPage(offset int, limit int) (result []*model.Abprole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbproleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abproleDo) Debug() IAbproleDo {
	return a.withDO(a.DO.Debug())
}

func (a abproleDo) WithContext(ctx context.Context) IAbproleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abproleDo) ReadDB() IAbproleDo {
	return a.Clauses(dbresolver.Read)
}

func (a abproleDo) WriteDB() IAbproleDo {
	return a.Clauses(dbresolver.Write)
}

func (a abproleDo) Clauses(conds ...clause.Expression) IAbproleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abproleDo) Returning(value interface{}, columns ...string) IAbproleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abproleDo) Not(conds ...gen.Condition) IAbproleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abproleDo) Or(conds ...gen.Condition) IAbproleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abproleDo) Select(conds ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abproleDo) Where(conds ...gen.Condition) IAbproleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abproleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbproleDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abproleDo) Order(conds ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abproleDo) Distinct(cols ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abproleDo) Omit(cols ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abproleDo) Join(table schema.Tabler, on ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abproleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abproleDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abproleDo) Group(cols ...field.Expr) IAbproleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abproleDo) Having(conds ...gen.Condition) IAbproleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abproleDo) Limit(limit int) IAbproleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abproleDo) Offset(offset int) IAbproleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abproleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbproleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abproleDo) Unscoped() IAbproleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abproleDo) Create(values ...*model.Abprole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abproleDo) CreateInBatches(values []*model.Abprole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abproleDo) Save(values ...*model.Abprole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abproleDo) First() (*model.Abprole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abprole), nil
	}
}

func (a abproleDo) Take() (*model.Abprole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abprole), nil
	}
}

func (a abproleDo) Last() (*model.Abprole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abprole), nil
	}
}

func (a abproleDo) Find() ([]*model.Abprole, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abprole), err
}

func (a abproleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abprole, err error) {
	buf := make([]*model.Abprole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abproleDo) FindInBatches(result *[]*model.Abprole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abproleDo) Attrs(attrs ...field.AssignExpr) IAbproleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abproleDo) Assign(attrs ...field.AssignExpr) IAbproleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abproleDo) Joins(fields ...field.RelationField) IAbproleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abproleDo) Preload(fields ...field.RelationField) IAbproleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abproleDo) FirstOrInit() (*model.Abprole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abprole), nil
	}
}

func (a abproleDo) FirstOrCreate() (*model.Abprole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abprole), nil
	}
}

func (a abproleDo) FindByPage(offset int, limit int) (result []*model.Abprole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abproleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abproleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abproleDo) Delete(models ...*model.Abprole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abproleDo) withDO(do gen.Dao) *abproleDo {
	a.DO = *do.(*gen.DO)
	return a
}
