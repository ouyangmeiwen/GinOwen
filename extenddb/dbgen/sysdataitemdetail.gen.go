// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysdataitemdetail(db *gorm.DB) sysdataitemdetail {
	_sysdataitemdetail := sysdataitemdetail{}

	_sysdataitemdetail.sysdataitemdetailDo.UseDB(db)
	_sysdataitemdetail.sysdataitemdetailDo.UseModel(&model.Sysdataitemdetail{})

	tableName := _sysdataitemdetail.sysdataitemdetailDo.TableName()
	_sysdataitemdetail.ALL = field.NewAsterisk(tableName)
	_sysdataitemdetail.ID = field.NewString(tableName, "Id")
	_sysdataitemdetail.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysdataitemdetail.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysdataitemdetail.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysdataitemdetail.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysdataitemdetail.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysdataitemdetail.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysdataitemdetail.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysdataitemdetail.ItemID = field.NewString(tableName, "ItemId")
	_sysdataitemdetail.ItemCode = field.NewString(tableName, "ItemCode")
	_sysdataitemdetail.Name = field.NewString(tableName, "Name")
	_sysdataitemdetail.Value = field.NewString(tableName, "Value")
	_sysdataitemdetail.QuickQuery = field.NewString(tableName, "QuickQuery")
	_sysdataitemdetail.SimpleSpelling = field.NewString(tableName, "SimpleSpelling")
	_sysdataitemdetail.IsDefault = field.NewField(tableName, "IsDefault")
	_sysdataitemdetail.SortCode = field.NewInt64(tableName, "SortCode")
	_sysdataitemdetail.IsEnable = field.NewField(tableName, "IsEnable")
	_sysdataitemdetail.ParentID = field.NewString(tableName, "ParentId")
	_sysdataitemdetail.Remark = field.NewString(tableName, "Remark")

	_sysdataitemdetail.fillFieldMap()

	return _sysdataitemdetail
}

type sysdataitemdetail struct {
	sysdataitemdetailDo sysdataitemdetailDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ItemID               field.String
	ItemCode             field.String
	Name                 field.String
	Value                field.String
	QuickQuery           field.String
	SimpleSpelling       field.String
	IsDefault            field.Field
	SortCode             field.Int64
	IsEnable             field.Field
	ParentID             field.String
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (s sysdataitemdetail) Table(newTableName string) *sysdataitemdetail {
	s.sysdataitemdetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysdataitemdetail) As(alias string) *sysdataitemdetail {
	s.sysdataitemdetailDo.DO = *(s.sysdataitemdetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysdataitemdetail) updateTableName(table string) *sysdataitemdetail {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.ItemID = field.NewString(table, "ItemId")
	s.ItemCode = field.NewString(table, "ItemCode")
	s.Name = field.NewString(table, "Name")
	s.Value = field.NewString(table, "Value")
	s.QuickQuery = field.NewString(table, "QuickQuery")
	s.SimpleSpelling = field.NewString(table, "SimpleSpelling")
	s.IsDefault = field.NewField(table, "IsDefault")
	s.SortCode = field.NewInt64(table, "SortCode")
	s.IsEnable = field.NewField(table, "IsEnable")
	s.ParentID = field.NewString(table, "ParentId")
	s.Remark = field.NewString(table, "Remark")

	s.fillFieldMap()

	return s
}

func (s *sysdataitemdetail) WithContext(ctx context.Context) ISysdataitemdetailDo {
	return s.sysdataitemdetailDo.WithContext(ctx)
}

func (s sysdataitemdetail) TableName() string { return s.sysdataitemdetailDo.TableName() }

func (s sysdataitemdetail) Alias() string { return s.sysdataitemdetailDo.Alias() }

func (s *sysdataitemdetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysdataitemdetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["ItemId"] = s.ItemID
	s.fieldMap["ItemCode"] = s.ItemCode
	s.fieldMap["Name"] = s.Name
	s.fieldMap["Value"] = s.Value
	s.fieldMap["QuickQuery"] = s.QuickQuery
	s.fieldMap["SimpleSpelling"] = s.SimpleSpelling
	s.fieldMap["IsDefault"] = s.IsDefault
	s.fieldMap["SortCode"] = s.SortCode
	s.fieldMap["IsEnable"] = s.IsEnable
	s.fieldMap["ParentId"] = s.ParentID
	s.fieldMap["Remark"] = s.Remark
}

func (s sysdataitemdetail) clone(db *gorm.DB) sysdataitemdetail {
	s.sysdataitemdetailDo.ReplaceDB(db)
	return s
}

type sysdataitemdetailDo struct{ gen.DO }

type ISysdataitemdetailDo interface {
	gen.SubQuery
	Debug() ISysdataitemdetailDo
	WithContext(ctx context.Context) ISysdataitemdetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysdataitemdetailDo
	Not(conds ...gen.Condition) ISysdataitemdetailDo
	Or(conds ...gen.Condition) ISysdataitemdetailDo
	Select(conds ...field.Expr) ISysdataitemdetailDo
	Where(conds ...gen.Condition) ISysdataitemdetailDo
	Order(conds ...field.Expr) ISysdataitemdetailDo
	Distinct(cols ...field.Expr) ISysdataitemdetailDo
	Omit(cols ...field.Expr) ISysdataitemdetailDo
	Join(table schema.Tabler, on ...field.Expr) ISysdataitemdetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysdataitemdetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysdataitemdetailDo
	Group(cols ...field.Expr) ISysdataitemdetailDo
	Having(conds ...gen.Condition) ISysdataitemdetailDo
	Limit(limit int) ISysdataitemdetailDo
	Offset(offset int) ISysdataitemdetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysdataitemdetailDo
	Unscoped() ISysdataitemdetailDo
	Create(values ...*model.Sysdataitemdetail) error
	CreateInBatches(values []*model.Sysdataitemdetail, batchSize int) error
	Save(values ...*model.Sysdataitemdetail) error
	First() (*model.Sysdataitemdetail, error)
	Take() (*model.Sysdataitemdetail, error)
	Last() (*model.Sysdataitemdetail, error)
	Find() ([]*model.Sysdataitemdetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysdataitemdetail, err error)
	FindInBatches(result *[]*model.Sysdataitemdetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysdataitemdetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysdataitemdetailDo
	Assign(attrs ...field.AssignExpr) ISysdataitemdetailDo
	Joins(fields ...field.RelationField) ISysdataitemdetailDo
	Preload(fields ...field.RelationField) ISysdataitemdetailDo
	FirstOrInit() (*model.Sysdataitemdetail, error)
	FirstOrCreate() (*model.Sysdataitemdetail, error)
	FindByPage(offset int, limit int) (result []*model.Sysdataitemdetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysdataitemdetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysdataitemdetailDo) Debug() ISysdataitemdetailDo {
	return s.withDO(s.DO.Debug())
}

func (s sysdataitemdetailDo) WithContext(ctx context.Context) ISysdataitemdetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysdataitemdetailDo) ReadDB() ISysdataitemdetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysdataitemdetailDo) WriteDB() ISysdataitemdetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysdataitemdetailDo) Clauses(conds ...clause.Expression) ISysdataitemdetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysdataitemdetailDo) Returning(value interface{}, columns ...string) ISysdataitemdetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysdataitemdetailDo) Not(conds ...gen.Condition) ISysdataitemdetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysdataitemdetailDo) Or(conds ...gen.Condition) ISysdataitemdetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysdataitemdetailDo) Select(conds ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysdataitemdetailDo) Where(conds ...gen.Condition) ISysdataitemdetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysdataitemdetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysdataitemdetailDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysdataitemdetailDo) Order(conds ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysdataitemdetailDo) Distinct(cols ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysdataitemdetailDo) Omit(cols ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysdataitemdetailDo) Join(table schema.Tabler, on ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysdataitemdetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysdataitemdetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysdataitemdetailDo) Group(cols ...field.Expr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysdataitemdetailDo) Having(conds ...gen.Condition) ISysdataitemdetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysdataitemdetailDo) Limit(limit int) ISysdataitemdetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysdataitemdetailDo) Offset(offset int) ISysdataitemdetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysdataitemdetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysdataitemdetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysdataitemdetailDo) Unscoped() ISysdataitemdetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysdataitemdetailDo) Create(values ...*model.Sysdataitemdetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysdataitemdetailDo) CreateInBatches(values []*model.Sysdataitemdetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysdataitemdetailDo) Save(values ...*model.Sysdataitemdetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysdataitemdetailDo) First() (*model.Sysdataitemdetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitemdetail), nil
	}
}

func (s sysdataitemdetailDo) Take() (*model.Sysdataitemdetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitemdetail), nil
	}
}

func (s sysdataitemdetailDo) Last() (*model.Sysdataitemdetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitemdetail), nil
	}
}

func (s sysdataitemdetailDo) Find() ([]*model.Sysdataitemdetail, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysdataitemdetail), err
}

func (s sysdataitemdetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysdataitemdetail, err error) {
	buf := make([]*model.Sysdataitemdetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysdataitemdetailDo) FindInBatches(result *[]*model.Sysdataitemdetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysdataitemdetailDo) Attrs(attrs ...field.AssignExpr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysdataitemdetailDo) Assign(attrs ...field.AssignExpr) ISysdataitemdetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysdataitemdetailDo) Joins(fields ...field.RelationField) ISysdataitemdetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysdataitemdetailDo) Preload(fields ...field.RelationField) ISysdataitemdetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysdataitemdetailDo) FirstOrInit() (*model.Sysdataitemdetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitemdetail), nil
	}
}

func (s sysdataitemdetailDo) FirstOrCreate() (*model.Sysdataitemdetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysdataitemdetail), nil
	}
}

func (s sysdataitemdetailDo) FindByPage(offset int, limit int) (result []*model.Sysdataitemdetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysdataitemdetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysdataitemdetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysdataitemdetailDo) Delete(models ...*model.Sysdataitemdetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysdataitemdetailDo) withDO(do gen.Dao) *sysdataitemdetailDo {
	s.DO = *do.(*gen.DO)
	return s
}
