// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibainirobotinfo(db *gorm.DB) libainirobotinfo {
	_libainirobotinfo := libainirobotinfo{}

	_libainirobotinfo.libainirobotinfoDo.UseDB(db)
	_libainirobotinfo.libainirobotinfoDo.UseModel(&model.Libainirobotinfo{})

	tableName := _libainirobotinfo.libainirobotinfoDo.TableName()
	_libainirobotinfo.ALL = field.NewAsterisk(tableName)
	_libainirobotinfo.ID = field.NewString(tableName, "Id")
	_libainirobotinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libainirobotinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libainirobotinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libainirobotinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libainirobotinfo.Date = field.NewString(tableName, "Date")
	_libainirobotinfo.TerminalID = field.NewString(tableName, "TerminalId")
	_libainirobotinfo.FlowList = field.NewString(tableName, "FlowList")
	_libainirobotinfo.InteractionListNum = field.NewString(tableName, "InteractionListNum")
	_libainirobotinfo.DialogListNum = field.NewString(tableName, "DialogListNum")
	_libainirobotinfo.AskListNum = field.NewString(tableName, "AskListNum")
	_libainirobotinfo.Remark = field.NewString(tableName, "Remark")
	_libainirobotinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_libainirobotinfo.fillFieldMap()

	return _libainirobotinfo
}

type libainirobotinfo struct {
	libainirobotinfoDo libainirobotinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	Date                 field.String
	TerminalID           field.String
	FlowList             field.String
	InteractionListNum   field.String
	DialogListNum        field.String
	AskListNum           field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libainirobotinfo) Table(newTableName string) *libainirobotinfo {
	l.libainirobotinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libainirobotinfo) As(alias string) *libainirobotinfo {
	l.libainirobotinfoDo.DO = *(l.libainirobotinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libainirobotinfo) updateTableName(table string) *libainirobotinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.Date = field.NewString(table, "Date")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.FlowList = field.NewString(table, "FlowList")
	l.InteractionListNum = field.NewString(table, "InteractionListNum")
	l.DialogListNum = field.NewString(table, "DialogListNum")
	l.AskListNum = field.NewString(table, "AskListNum")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libainirobotinfo) WithContext(ctx context.Context) ILibainirobotinfoDo {
	return l.libainirobotinfoDo.WithContext(ctx)
}

func (l libainirobotinfo) TableName() string { return l.libainirobotinfoDo.TableName() }

func (l libainirobotinfo) Alias() string { return l.libainirobotinfoDo.Alias() }

func (l *libainirobotinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libainirobotinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 13)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["Date"] = l.Date
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["FlowList"] = l.FlowList
	l.fieldMap["InteractionListNum"] = l.InteractionListNum
	l.fieldMap["DialogListNum"] = l.DialogListNum
	l.fieldMap["AskListNum"] = l.AskListNum
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libainirobotinfo) clone(db *gorm.DB) libainirobotinfo {
	l.libainirobotinfoDo.ReplaceDB(db)
	return l
}

type libainirobotinfoDo struct{ gen.DO }

type ILibainirobotinfoDo interface {
	gen.SubQuery
	Debug() ILibainirobotinfoDo
	WithContext(ctx context.Context) ILibainirobotinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibainirobotinfoDo
	Not(conds ...gen.Condition) ILibainirobotinfoDo
	Or(conds ...gen.Condition) ILibainirobotinfoDo
	Select(conds ...field.Expr) ILibainirobotinfoDo
	Where(conds ...gen.Condition) ILibainirobotinfoDo
	Order(conds ...field.Expr) ILibainirobotinfoDo
	Distinct(cols ...field.Expr) ILibainirobotinfoDo
	Omit(cols ...field.Expr) ILibainirobotinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibainirobotinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibainirobotinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibainirobotinfoDo
	Group(cols ...field.Expr) ILibainirobotinfoDo
	Having(conds ...gen.Condition) ILibainirobotinfoDo
	Limit(limit int) ILibainirobotinfoDo
	Offset(offset int) ILibainirobotinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibainirobotinfoDo
	Unscoped() ILibainirobotinfoDo
	Create(values ...*model.Libainirobotinfo) error
	CreateInBatches(values []*model.Libainirobotinfo, batchSize int) error
	Save(values ...*model.Libainirobotinfo) error
	First() (*model.Libainirobotinfo, error)
	Take() (*model.Libainirobotinfo, error)
	Last() (*model.Libainirobotinfo, error)
	Find() ([]*model.Libainirobotinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libainirobotinfo, err error)
	FindInBatches(result *[]*model.Libainirobotinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libainirobotinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibainirobotinfoDo
	Assign(attrs ...field.AssignExpr) ILibainirobotinfoDo
	Joins(fields ...field.RelationField) ILibainirobotinfoDo
	Preload(fields ...field.RelationField) ILibainirobotinfoDo
	FirstOrInit() (*model.Libainirobotinfo, error)
	FirstOrCreate() (*model.Libainirobotinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libainirobotinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibainirobotinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libainirobotinfoDo) Debug() ILibainirobotinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libainirobotinfoDo) WithContext(ctx context.Context) ILibainirobotinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libainirobotinfoDo) ReadDB() ILibainirobotinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libainirobotinfoDo) WriteDB() ILibainirobotinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libainirobotinfoDo) Clauses(conds ...clause.Expression) ILibainirobotinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libainirobotinfoDo) Returning(value interface{}, columns ...string) ILibainirobotinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libainirobotinfoDo) Not(conds ...gen.Condition) ILibainirobotinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libainirobotinfoDo) Or(conds ...gen.Condition) ILibainirobotinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libainirobotinfoDo) Select(conds ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libainirobotinfoDo) Where(conds ...gen.Condition) ILibainirobotinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libainirobotinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibainirobotinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libainirobotinfoDo) Order(conds ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libainirobotinfoDo) Distinct(cols ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libainirobotinfoDo) Omit(cols ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libainirobotinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libainirobotinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libainirobotinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libainirobotinfoDo) Group(cols ...field.Expr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libainirobotinfoDo) Having(conds ...gen.Condition) ILibainirobotinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libainirobotinfoDo) Limit(limit int) ILibainirobotinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libainirobotinfoDo) Offset(offset int) ILibainirobotinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libainirobotinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibainirobotinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libainirobotinfoDo) Unscoped() ILibainirobotinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libainirobotinfoDo) Create(values ...*model.Libainirobotinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libainirobotinfoDo) CreateInBatches(values []*model.Libainirobotinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libainirobotinfoDo) Save(values ...*model.Libainirobotinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libainirobotinfoDo) First() (*model.Libainirobotinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libainirobotinfo), nil
	}
}

func (l libainirobotinfoDo) Take() (*model.Libainirobotinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libainirobotinfo), nil
	}
}

func (l libainirobotinfoDo) Last() (*model.Libainirobotinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libainirobotinfo), nil
	}
}

func (l libainirobotinfoDo) Find() ([]*model.Libainirobotinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libainirobotinfo), err
}

func (l libainirobotinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libainirobotinfo, err error) {
	buf := make([]*model.Libainirobotinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libainirobotinfoDo) FindInBatches(result *[]*model.Libainirobotinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libainirobotinfoDo) Attrs(attrs ...field.AssignExpr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libainirobotinfoDo) Assign(attrs ...field.AssignExpr) ILibainirobotinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libainirobotinfoDo) Joins(fields ...field.RelationField) ILibainirobotinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libainirobotinfoDo) Preload(fields ...field.RelationField) ILibainirobotinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libainirobotinfoDo) FirstOrInit() (*model.Libainirobotinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libainirobotinfo), nil
	}
}

func (l libainirobotinfoDo) FirstOrCreate() (*model.Libainirobotinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libainirobotinfo), nil
	}
}

func (l libainirobotinfoDo) FindByPage(offset int, limit int) (result []*model.Libainirobotinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libainirobotinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libainirobotinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libainirobotinfoDo) Delete(models ...*model.Libainirobotinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libainirobotinfoDo) withDO(do gen.Dao) *libainirobotinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
