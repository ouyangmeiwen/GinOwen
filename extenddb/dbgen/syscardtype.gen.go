// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSyscardtype(db *gorm.DB) syscardtype {
	_syscardtype := syscardtype{}

	_syscardtype.syscardtypeDo.UseDB(db)
	_syscardtype.syscardtypeDo.UseModel(&model.Syscardtype{})

	tableName := _syscardtype.syscardtypeDo.TableName()
	_syscardtype.ALL = field.NewAsterisk(tableName)
	_syscardtype.ID = field.NewString(tableName, "Id")
	_syscardtype.CreationTime = field.NewTime(tableName, "CreationTime")
	_syscardtype.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_syscardtype.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_syscardtype.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_syscardtype.IsDeleted = field.NewField(tableName, "IsDeleted")
	_syscardtype.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_syscardtype.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_syscardtype.Code = field.NewString(tableName, "Code")
	_syscardtype.Name = field.NewString(tableName, "Name")
	_syscardtype.Deposit = field.NewInt64(tableName, "Deposit")
	_syscardtype.ExpirTime = field.NewInt64(tableName, "ExpirTime")
	_syscardtype.Remark = field.NewString(tableName, "Remark")
	_syscardtype.TenantID = field.NewInt64(tableName, "TenantId")

	_syscardtype.fillFieldMap()

	return _syscardtype
}

type syscardtype struct {
	syscardtypeDo syscardtypeDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	Deposit              field.Int64
	ExpirTime            field.Int64
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s syscardtype) Table(newTableName string) *syscardtype {
	s.syscardtypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syscardtype) As(alias string) *syscardtype {
	s.syscardtypeDo.DO = *(s.syscardtypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syscardtype) updateTableName(table string) *syscardtype {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Code = field.NewString(table, "Code")
	s.Name = field.NewString(table, "Name")
	s.Deposit = field.NewInt64(table, "Deposit")
	s.ExpirTime = field.NewInt64(table, "ExpirTime")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *syscardtype) WithContext(ctx context.Context) ISyscardtypeDo {
	return s.syscardtypeDo.WithContext(ctx)
}

func (s syscardtype) TableName() string { return s.syscardtypeDo.TableName() }

func (s syscardtype) Alias() string { return s.syscardtypeDo.Alias() }

func (s *syscardtype) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syscardtype) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Code"] = s.Code
	s.fieldMap["Name"] = s.Name
	s.fieldMap["Deposit"] = s.Deposit
	s.fieldMap["ExpirTime"] = s.ExpirTime
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s syscardtype) clone(db *gorm.DB) syscardtype {
	s.syscardtypeDo.ReplaceDB(db)
	return s
}

type syscardtypeDo struct{ gen.DO }

type ISyscardtypeDo interface {
	gen.SubQuery
	Debug() ISyscardtypeDo
	WithContext(ctx context.Context) ISyscardtypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyscardtypeDo
	Not(conds ...gen.Condition) ISyscardtypeDo
	Or(conds ...gen.Condition) ISyscardtypeDo
	Select(conds ...field.Expr) ISyscardtypeDo
	Where(conds ...gen.Condition) ISyscardtypeDo
	Order(conds ...field.Expr) ISyscardtypeDo
	Distinct(cols ...field.Expr) ISyscardtypeDo
	Omit(cols ...field.Expr) ISyscardtypeDo
	Join(table schema.Tabler, on ...field.Expr) ISyscardtypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyscardtypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyscardtypeDo
	Group(cols ...field.Expr) ISyscardtypeDo
	Having(conds ...gen.Condition) ISyscardtypeDo
	Limit(limit int) ISyscardtypeDo
	Offset(offset int) ISyscardtypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscardtypeDo
	Unscoped() ISyscardtypeDo
	Create(values ...*model.Syscardtype) error
	CreateInBatches(values []*model.Syscardtype, batchSize int) error
	Save(values ...*model.Syscardtype) error
	First() (*model.Syscardtype, error)
	Take() (*model.Syscardtype, error)
	Last() (*model.Syscardtype, error)
	Find() ([]*model.Syscardtype, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscardtype, err error)
	FindInBatches(result *[]*model.Syscardtype, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syscardtype) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyscardtypeDo
	Assign(attrs ...field.AssignExpr) ISyscardtypeDo
	Joins(fields ...field.RelationField) ISyscardtypeDo
	Preload(fields ...field.RelationField) ISyscardtypeDo
	FirstOrInit() (*model.Syscardtype, error)
	FirstOrCreate() (*model.Syscardtype, error)
	FindByPage(offset int, limit int) (result []*model.Syscardtype, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyscardtypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syscardtypeDo) Debug() ISyscardtypeDo {
	return s.withDO(s.DO.Debug())
}

func (s syscardtypeDo) WithContext(ctx context.Context) ISyscardtypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syscardtypeDo) ReadDB() ISyscardtypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s syscardtypeDo) WriteDB() ISyscardtypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s syscardtypeDo) Clauses(conds ...clause.Expression) ISyscardtypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syscardtypeDo) Returning(value interface{}, columns ...string) ISyscardtypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syscardtypeDo) Not(conds ...gen.Condition) ISyscardtypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syscardtypeDo) Or(conds ...gen.Condition) ISyscardtypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syscardtypeDo) Select(conds ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syscardtypeDo) Where(conds ...gen.Condition) ISyscardtypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syscardtypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyscardtypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syscardtypeDo) Order(conds ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syscardtypeDo) Distinct(cols ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syscardtypeDo) Omit(cols ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syscardtypeDo) Join(table schema.Tabler, on ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syscardtypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syscardtypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syscardtypeDo) Group(cols ...field.Expr) ISyscardtypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syscardtypeDo) Having(conds ...gen.Condition) ISyscardtypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syscardtypeDo) Limit(limit int) ISyscardtypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syscardtypeDo) Offset(offset int) ISyscardtypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syscardtypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscardtypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syscardtypeDo) Unscoped() ISyscardtypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syscardtypeDo) Create(values ...*model.Syscardtype) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syscardtypeDo) CreateInBatches(values []*model.Syscardtype, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syscardtypeDo) Save(values ...*model.Syscardtype) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syscardtypeDo) First() (*model.Syscardtype, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardtype), nil
	}
}

func (s syscardtypeDo) Take() (*model.Syscardtype, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardtype), nil
	}
}

func (s syscardtypeDo) Last() (*model.Syscardtype, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardtype), nil
	}
}

func (s syscardtypeDo) Find() ([]*model.Syscardtype, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syscardtype), err
}

func (s syscardtypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscardtype, err error) {
	buf := make([]*model.Syscardtype, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syscardtypeDo) FindInBatches(result *[]*model.Syscardtype, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syscardtypeDo) Attrs(attrs ...field.AssignExpr) ISyscardtypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syscardtypeDo) Assign(attrs ...field.AssignExpr) ISyscardtypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syscardtypeDo) Joins(fields ...field.RelationField) ISyscardtypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syscardtypeDo) Preload(fields ...field.RelationField) ISyscardtypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syscardtypeDo) FirstOrInit() (*model.Syscardtype, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardtype), nil
	}
}

func (s syscardtypeDo) FirstOrCreate() (*model.Syscardtype, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscardtype), nil
	}
}

func (s syscardtypeDo) FindByPage(offset int, limit int) (result []*model.Syscardtype, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syscardtypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syscardtypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syscardtypeDo) Delete(models ...*model.Syscardtype) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syscardtypeDo) withDO(do gen.Dao) *syscardtypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
