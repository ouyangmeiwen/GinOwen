// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminalpermission(db *gorm.DB) lcpterminalpermission {
	_lcpterminalpermission := lcpterminalpermission{}

	_lcpterminalpermission.lcpterminalpermissionDo.UseDB(db)
	_lcpterminalpermission.lcpterminalpermissionDo.UseModel(&model.Lcpterminalpermission{})

	tableName := _lcpterminalpermission.lcpterminalpermissionDo.TableName()
	_lcpterminalpermission.ALL = field.NewAsterisk(tableName)
	_lcpterminalpermission.ID = field.NewString(tableName, "Id")
	_lcpterminalpermission.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminalpermission.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminalpermission.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpterminalpermission.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpterminalpermission.RoleID = field.NewInt64(tableName, "RoleId")
	_lcpterminalpermission.IsGranted = field.NewField(tableName, "IsGranted")
	_lcpterminalpermission.Name = field.NewString(tableName, "Name")
	_lcpterminalpermission.Remark = field.NewString(tableName, "Remark")
	_lcpterminalpermission.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminalpermission.fillFieldMap()

	return _lcpterminalpermission
}

type lcpterminalpermission struct {
	lcpterminalpermissionDo lcpterminalpermissionDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	RoleID               field.Int64
	IsGranted            field.Field
	Name                 field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminalpermission) Table(newTableName string) *lcpterminalpermission {
	l.lcpterminalpermissionDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminalpermission) As(alias string) *lcpterminalpermission {
	l.lcpterminalpermissionDo.DO = *(l.lcpterminalpermissionDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminalpermission) updateTableName(table string) *lcpterminalpermission {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.RoleID = field.NewInt64(table, "RoleId")
	l.IsGranted = field.NewField(table, "IsGranted")
	l.Name = field.NewString(table, "Name")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminalpermission) WithContext(ctx context.Context) ILcpterminalpermissionDo {
	return l.lcpterminalpermissionDo.WithContext(ctx)
}

func (l lcpterminalpermission) TableName() string { return l.lcpterminalpermissionDo.TableName() }

func (l lcpterminalpermission) Alias() string { return l.lcpterminalpermissionDo.Alias() }

func (l *lcpterminalpermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminalpermission) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["RoleId"] = l.RoleID
	l.fieldMap["IsGranted"] = l.IsGranted
	l.fieldMap["Name"] = l.Name
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminalpermission) clone(db *gorm.DB) lcpterminalpermission {
	l.lcpterminalpermissionDo.ReplaceDB(db)
	return l
}

type lcpterminalpermissionDo struct{ gen.DO }

type ILcpterminalpermissionDo interface {
	gen.SubQuery
	Debug() ILcpterminalpermissionDo
	WithContext(ctx context.Context) ILcpterminalpermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminalpermissionDo
	Not(conds ...gen.Condition) ILcpterminalpermissionDo
	Or(conds ...gen.Condition) ILcpterminalpermissionDo
	Select(conds ...field.Expr) ILcpterminalpermissionDo
	Where(conds ...gen.Condition) ILcpterminalpermissionDo
	Order(conds ...field.Expr) ILcpterminalpermissionDo
	Distinct(cols ...field.Expr) ILcpterminalpermissionDo
	Omit(cols ...field.Expr) ILcpterminalpermissionDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminalpermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalpermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalpermissionDo
	Group(cols ...field.Expr) ILcpterminalpermissionDo
	Having(conds ...gen.Condition) ILcpterminalpermissionDo
	Limit(limit int) ILcpterminalpermissionDo
	Offset(offset int) ILcpterminalpermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalpermissionDo
	Unscoped() ILcpterminalpermissionDo
	Create(values ...*model.Lcpterminalpermission) error
	CreateInBatches(values []*model.Lcpterminalpermission, batchSize int) error
	Save(values ...*model.Lcpterminalpermission) error
	First() (*model.Lcpterminalpermission, error)
	Take() (*model.Lcpterminalpermission, error)
	Last() (*model.Lcpterminalpermission, error)
	Find() ([]*model.Lcpterminalpermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalpermission, err error)
	FindInBatches(result *[]*model.Lcpterminalpermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminalpermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminalpermissionDo
	Assign(attrs ...field.AssignExpr) ILcpterminalpermissionDo
	Joins(fields ...field.RelationField) ILcpterminalpermissionDo
	Preload(fields ...field.RelationField) ILcpterminalpermissionDo
	FirstOrInit() (*model.Lcpterminalpermission, error)
	FirstOrCreate() (*model.Lcpterminalpermission, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminalpermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminalpermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminalpermissionDo) Debug() ILcpterminalpermissionDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminalpermissionDo) WithContext(ctx context.Context) ILcpterminalpermissionDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminalpermissionDo) ReadDB() ILcpterminalpermissionDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminalpermissionDo) WriteDB() ILcpterminalpermissionDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminalpermissionDo) Clauses(conds ...clause.Expression) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminalpermissionDo) Returning(value interface{}, columns ...string) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminalpermissionDo) Not(conds ...gen.Condition) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminalpermissionDo) Or(conds ...gen.Condition) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminalpermissionDo) Select(conds ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminalpermissionDo) Where(conds ...gen.Condition) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminalpermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminalpermissionDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminalpermissionDo) Order(conds ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminalpermissionDo) Distinct(cols ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminalpermissionDo) Omit(cols ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminalpermissionDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminalpermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminalpermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminalpermissionDo) Group(cols ...field.Expr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminalpermissionDo) Having(conds ...gen.Condition) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminalpermissionDo) Limit(limit int) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminalpermissionDo) Offset(offset int) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminalpermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminalpermissionDo) Unscoped() ILcpterminalpermissionDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminalpermissionDo) Create(values ...*model.Lcpterminalpermission) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminalpermissionDo) CreateInBatches(values []*model.Lcpterminalpermission, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminalpermissionDo) Save(values ...*model.Lcpterminalpermission) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminalpermissionDo) First() (*model.Lcpterminalpermission, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalpermission), nil
	}
}

func (l lcpterminalpermissionDo) Take() (*model.Lcpterminalpermission, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalpermission), nil
	}
}

func (l lcpterminalpermissionDo) Last() (*model.Lcpterminalpermission, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalpermission), nil
	}
}

func (l lcpterminalpermissionDo) Find() ([]*model.Lcpterminalpermission, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminalpermission), err
}

func (l lcpterminalpermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminalpermission, err error) {
	buf := make([]*model.Lcpterminalpermission, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminalpermissionDo) FindInBatches(result *[]*model.Lcpterminalpermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminalpermissionDo) Attrs(attrs ...field.AssignExpr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminalpermissionDo) Assign(attrs ...field.AssignExpr) ILcpterminalpermissionDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminalpermissionDo) Joins(fields ...field.RelationField) ILcpterminalpermissionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminalpermissionDo) Preload(fields ...field.RelationField) ILcpterminalpermissionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminalpermissionDo) FirstOrInit() (*model.Lcpterminalpermission, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalpermission), nil
	}
}

func (l lcpterminalpermissionDo) FirstOrCreate() (*model.Lcpterminalpermission, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminalpermission), nil
	}
}

func (l lcpterminalpermissionDo) FindByPage(offset int, limit int) (result []*model.Lcpterminalpermission, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminalpermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminalpermissionDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminalpermissionDo) Delete(models ...*model.Lcpterminalpermission) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminalpermissionDo) withDO(do gen.Dao) *lcpterminalpermissionDo {
	l.DO = *do.(*gen.DO)
	return l
}
