// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppcreditloginorder(db *gorm.DB) appcreditloginorder {
	_appcreditloginorder := appcreditloginorder{}

	_appcreditloginorder.appcreditloginorderDo.UseDB(db)
	_appcreditloginorder.appcreditloginorderDo.UseModel(&model.Appcreditloginorder{})

	tableName := _appcreditloginorder.appcreditloginorderDo.TableName()
	_appcreditloginorder.ALL = field.NewAsterisk(tableName)
	_appcreditloginorder.ID = field.NewString(tableName, "Id")
	_appcreditloginorder.CreationTime = field.NewTime(tableName, "CreationTime")
	_appcreditloginorder.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appcreditloginorder.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appcreditloginorder.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appcreditloginorder.OutTransNo = field.NewString(tableName, "OutTransNo")
	_appcreditloginorder.QrURL = field.NewString(tableName, "QrUrl")
	_appcreditloginorder.Code = field.NewString(tableName, "Code")
	_appcreditloginorder.Message = field.NewString(tableName, "Message")
	_appcreditloginorder.CertType = field.NewString(tableName, "CertType")
	_appcreditloginorder.CertName = field.NewString(tableName, "CertName")
	_appcreditloginorder.CertNo = field.NewString(tableName, "CertNo")
	_appcreditloginorder.AliUserID = field.NewString(tableName, "AliUserId")
	_appcreditloginorder.IsAdmit = field.NewField(tableName, "IsAdmit")
	_appcreditloginorder.IsSuccess = field.NewField(tableName, "IsSuccess")
	_appcreditloginorder.IsCancel = field.NewField(tableName, "IsCancel")
	_appcreditloginorder.Remark = field.NewString(tableName, "Remark")
	_appcreditloginorder.TenantID = field.NewInt64(tableName, "TenantId")

	_appcreditloginorder.fillFieldMap()

	return _appcreditloginorder
}

type appcreditloginorder struct {
	appcreditloginorderDo appcreditloginorderDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	OutTransNo           field.String
	QrURL                field.String
	Code                 field.String
	Message              field.String
	CertType             field.String
	CertName             field.String
	CertNo               field.String
	AliUserID            field.String
	IsAdmit              field.Field
	IsSuccess            field.Field
	IsCancel             field.Field
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appcreditloginorder) Table(newTableName string) *appcreditloginorder {
	a.appcreditloginorderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appcreditloginorder) As(alias string) *appcreditloginorder {
	a.appcreditloginorderDo.DO = *(a.appcreditloginorderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appcreditloginorder) updateTableName(table string) *appcreditloginorder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.OutTransNo = field.NewString(table, "OutTransNo")
	a.QrURL = field.NewString(table, "QrUrl")
	a.Code = field.NewString(table, "Code")
	a.Message = field.NewString(table, "Message")
	a.CertType = field.NewString(table, "CertType")
	a.CertName = field.NewString(table, "CertName")
	a.CertNo = field.NewString(table, "CertNo")
	a.AliUserID = field.NewString(table, "AliUserId")
	a.IsAdmit = field.NewField(table, "IsAdmit")
	a.IsSuccess = field.NewField(table, "IsSuccess")
	a.IsCancel = field.NewField(table, "IsCancel")
	a.Remark = field.NewString(table, "Remark")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appcreditloginorder) WithContext(ctx context.Context) IAppcreditloginorderDo {
	return a.appcreditloginorderDo.WithContext(ctx)
}

func (a appcreditloginorder) TableName() string { return a.appcreditloginorderDo.TableName() }

func (a appcreditloginorder) Alias() string { return a.appcreditloginorderDo.Alias() }

func (a *appcreditloginorder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appcreditloginorder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["OutTransNo"] = a.OutTransNo
	a.fieldMap["QrUrl"] = a.QrURL
	a.fieldMap["Code"] = a.Code
	a.fieldMap["Message"] = a.Message
	a.fieldMap["CertType"] = a.CertType
	a.fieldMap["CertName"] = a.CertName
	a.fieldMap["CertNo"] = a.CertNo
	a.fieldMap["AliUserId"] = a.AliUserID
	a.fieldMap["IsAdmit"] = a.IsAdmit
	a.fieldMap["IsSuccess"] = a.IsSuccess
	a.fieldMap["IsCancel"] = a.IsCancel
	a.fieldMap["Remark"] = a.Remark
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appcreditloginorder) clone(db *gorm.DB) appcreditloginorder {
	a.appcreditloginorderDo.ReplaceDB(db)
	return a
}

type appcreditloginorderDo struct{ gen.DO }

type IAppcreditloginorderDo interface {
	gen.SubQuery
	Debug() IAppcreditloginorderDo
	WithContext(ctx context.Context) IAppcreditloginorderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppcreditloginorderDo
	Not(conds ...gen.Condition) IAppcreditloginorderDo
	Or(conds ...gen.Condition) IAppcreditloginorderDo
	Select(conds ...field.Expr) IAppcreditloginorderDo
	Where(conds ...gen.Condition) IAppcreditloginorderDo
	Order(conds ...field.Expr) IAppcreditloginorderDo
	Distinct(cols ...field.Expr) IAppcreditloginorderDo
	Omit(cols ...field.Expr) IAppcreditloginorderDo
	Join(table schema.Tabler, on ...field.Expr) IAppcreditloginorderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppcreditloginorderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppcreditloginorderDo
	Group(cols ...field.Expr) IAppcreditloginorderDo
	Having(conds ...gen.Condition) IAppcreditloginorderDo
	Limit(limit int) IAppcreditloginorderDo
	Offset(offset int) IAppcreditloginorderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppcreditloginorderDo
	Unscoped() IAppcreditloginorderDo
	Create(values ...*model.Appcreditloginorder) error
	CreateInBatches(values []*model.Appcreditloginorder, batchSize int) error
	Save(values ...*model.Appcreditloginorder) error
	First() (*model.Appcreditloginorder, error)
	Take() (*model.Appcreditloginorder, error)
	Last() (*model.Appcreditloginorder, error)
	Find() ([]*model.Appcreditloginorder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appcreditloginorder, err error)
	FindInBatches(result *[]*model.Appcreditloginorder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appcreditloginorder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppcreditloginorderDo
	Assign(attrs ...field.AssignExpr) IAppcreditloginorderDo
	Joins(fields ...field.RelationField) IAppcreditloginorderDo
	Preload(fields ...field.RelationField) IAppcreditloginorderDo
	FirstOrInit() (*model.Appcreditloginorder, error)
	FirstOrCreate() (*model.Appcreditloginorder, error)
	FindByPage(offset int, limit int) (result []*model.Appcreditloginorder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppcreditloginorderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appcreditloginorderDo) Debug() IAppcreditloginorderDo {
	return a.withDO(a.DO.Debug())
}

func (a appcreditloginorderDo) WithContext(ctx context.Context) IAppcreditloginorderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appcreditloginorderDo) ReadDB() IAppcreditloginorderDo {
	return a.Clauses(dbresolver.Read)
}

func (a appcreditloginorderDo) WriteDB() IAppcreditloginorderDo {
	return a.Clauses(dbresolver.Write)
}

func (a appcreditloginorderDo) Clauses(conds ...clause.Expression) IAppcreditloginorderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appcreditloginorderDo) Returning(value interface{}, columns ...string) IAppcreditloginorderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appcreditloginorderDo) Not(conds ...gen.Condition) IAppcreditloginorderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appcreditloginorderDo) Or(conds ...gen.Condition) IAppcreditloginorderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appcreditloginorderDo) Select(conds ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appcreditloginorderDo) Where(conds ...gen.Condition) IAppcreditloginorderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appcreditloginorderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppcreditloginorderDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appcreditloginorderDo) Order(conds ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appcreditloginorderDo) Distinct(cols ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appcreditloginorderDo) Omit(cols ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appcreditloginorderDo) Join(table schema.Tabler, on ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appcreditloginorderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appcreditloginorderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appcreditloginorderDo) Group(cols ...field.Expr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appcreditloginorderDo) Having(conds ...gen.Condition) IAppcreditloginorderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appcreditloginorderDo) Limit(limit int) IAppcreditloginorderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appcreditloginorderDo) Offset(offset int) IAppcreditloginorderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appcreditloginorderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppcreditloginorderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appcreditloginorderDo) Unscoped() IAppcreditloginorderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appcreditloginorderDo) Create(values ...*model.Appcreditloginorder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appcreditloginorderDo) CreateInBatches(values []*model.Appcreditloginorder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appcreditloginorderDo) Save(values ...*model.Appcreditloginorder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appcreditloginorderDo) First() (*model.Appcreditloginorder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appcreditloginorder), nil
	}
}

func (a appcreditloginorderDo) Take() (*model.Appcreditloginorder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appcreditloginorder), nil
	}
}

func (a appcreditloginorderDo) Last() (*model.Appcreditloginorder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appcreditloginorder), nil
	}
}

func (a appcreditloginorderDo) Find() ([]*model.Appcreditloginorder, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appcreditloginorder), err
}

func (a appcreditloginorderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appcreditloginorder, err error) {
	buf := make([]*model.Appcreditloginorder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appcreditloginorderDo) FindInBatches(result *[]*model.Appcreditloginorder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appcreditloginorderDo) Attrs(attrs ...field.AssignExpr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appcreditloginorderDo) Assign(attrs ...field.AssignExpr) IAppcreditloginorderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appcreditloginorderDo) Joins(fields ...field.RelationField) IAppcreditloginorderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appcreditloginorderDo) Preload(fields ...field.RelationField) IAppcreditloginorderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appcreditloginorderDo) FirstOrInit() (*model.Appcreditloginorder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appcreditloginorder), nil
	}
}

func (a appcreditloginorderDo) FirstOrCreate() (*model.Appcreditloginorder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appcreditloginorder), nil
	}
}

func (a appcreditloginorderDo) FindByPage(offset int, limit int) (result []*model.Appcreditloginorder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appcreditloginorderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appcreditloginorderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appcreditloginorderDo) Delete(models ...*model.Appcreditloginorder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appcreditloginorderDo) withDO(do gen.Dao) *appcreditloginorderDo {
	a.DO = *do.(*gen.DO)
	return a
}
