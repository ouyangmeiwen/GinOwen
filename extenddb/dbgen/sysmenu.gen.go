// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysmenu(db *gorm.DB) sysmenu {
	_sysmenu := sysmenu{}

	_sysmenu.sysmenuDo.UseDB(db)
	_sysmenu.sysmenuDo.UseModel(&model.Sysmenu{})

	tableName := _sysmenu.sysmenuDo.TableName()
	_sysmenu.ALL = field.NewAsterisk(tableName)
	_sysmenu.ID = field.NewString(tableName, "Id")
	_sysmenu.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysmenu.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysmenu.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysmenu.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysmenu.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysmenu.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysmenu.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysmenu.Code = field.NewString(tableName, "Code")
	_sysmenu.Name = field.NewString(tableName, "Name")
	_sysmenu.PermissionName = field.NewString(tableName, "PermissionName")
	_sysmenu.Icon = field.NewString(tableName, "Icon")
	_sysmenu.Route = field.NewString(tableName, "Route")
	_sysmenu.Parameters = field.NewString(tableName, "Parameters")
	_sysmenu.FeatureDependency = field.NewString(tableName, "FeatureDependency")
	_sysmenu.IsExternal = field.NewField(tableName, "IsExternal")
	_sysmenu.IsIframe = field.NewField(tableName, "IsIframe")
	_sysmenu.IsAuthenticate = field.NewField(tableName, "IsAuthenticate")
	_sysmenu.SortCode = field.NewInt64(tableName, "SortCode")
	_sysmenu.IsEnable = field.NewField(tableName, "IsEnable")
	_sysmenu.ParentID = field.NewString(tableName, "ParentId")
	_sysmenu.Remark = field.NewString(tableName, "Remark")
	_sysmenu.SystemType = field.NewInt64(tableName, "SystemType")
	_sysmenu.TenantID = field.NewInt64(tableName, "TenantId")

	_sysmenu.fillFieldMap()

	return _sysmenu
}

type sysmenu struct {
	sysmenuDo sysmenuDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	PermissionName       field.String
	Icon                 field.String
	Route                field.String
	Parameters           field.String
	FeatureDependency    field.String
	IsExternal           field.Field
	IsIframe             field.Field
	IsAuthenticate       field.Field
	SortCode             field.Int64
	IsEnable             field.Field
	ParentID             field.String
	Remark               field.String
	SystemType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s sysmenu) Table(newTableName string) *sysmenu {
	s.sysmenuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysmenu) As(alias string) *sysmenu {
	s.sysmenuDo.DO = *(s.sysmenuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysmenu) updateTableName(table string) *sysmenu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.Code = field.NewString(table, "Code")
	s.Name = field.NewString(table, "Name")
	s.PermissionName = field.NewString(table, "PermissionName")
	s.Icon = field.NewString(table, "Icon")
	s.Route = field.NewString(table, "Route")
	s.Parameters = field.NewString(table, "Parameters")
	s.FeatureDependency = field.NewString(table, "FeatureDependency")
	s.IsExternal = field.NewField(table, "IsExternal")
	s.IsIframe = field.NewField(table, "IsIframe")
	s.IsAuthenticate = field.NewField(table, "IsAuthenticate")
	s.SortCode = field.NewInt64(table, "SortCode")
	s.IsEnable = field.NewField(table, "IsEnable")
	s.ParentID = field.NewString(table, "ParentId")
	s.Remark = field.NewString(table, "Remark")
	s.SystemType = field.NewInt64(table, "SystemType")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysmenu) WithContext(ctx context.Context) ISysmenuDo { return s.sysmenuDo.WithContext(ctx) }

func (s sysmenu) TableName() string { return s.sysmenuDo.TableName() }

func (s sysmenu) Alias() string { return s.sysmenuDo.Alias() }

func (s *sysmenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysmenu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["Code"] = s.Code
	s.fieldMap["Name"] = s.Name
	s.fieldMap["PermissionName"] = s.PermissionName
	s.fieldMap["Icon"] = s.Icon
	s.fieldMap["Route"] = s.Route
	s.fieldMap["Parameters"] = s.Parameters
	s.fieldMap["FeatureDependency"] = s.FeatureDependency
	s.fieldMap["IsExternal"] = s.IsExternal
	s.fieldMap["IsIframe"] = s.IsIframe
	s.fieldMap["IsAuthenticate"] = s.IsAuthenticate
	s.fieldMap["SortCode"] = s.SortCode
	s.fieldMap["IsEnable"] = s.IsEnable
	s.fieldMap["ParentId"] = s.ParentID
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["SystemType"] = s.SystemType
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysmenu) clone(db *gorm.DB) sysmenu {
	s.sysmenuDo.ReplaceDB(db)
	return s
}

type sysmenuDo struct{ gen.DO }

type ISysmenuDo interface {
	gen.SubQuery
	Debug() ISysmenuDo
	WithContext(ctx context.Context) ISysmenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysmenuDo
	Not(conds ...gen.Condition) ISysmenuDo
	Or(conds ...gen.Condition) ISysmenuDo
	Select(conds ...field.Expr) ISysmenuDo
	Where(conds ...gen.Condition) ISysmenuDo
	Order(conds ...field.Expr) ISysmenuDo
	Distinct(cols ...field.Expr) ISysmenuDo
	Omit(cols ...field.Expr) ISysmenuDo
	Join(table schema.Tabler, on ...field.Expr) ISysmenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysmenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysmenuDo
	Group(cols ...field.Expr) ISysmenuDo
	Having(conds ...gen.Condition) ISysmenuDo
	Limit(limit int) ISysmenuDo
	Offset(offset int) ISysmenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysmenuDo
	Unscoped() ISysmenuDo
	Create(values ...*model.Sysmenu) error
	CreateInBatches(values []*model.Sysmenu, batchSize int) error
	Save(values ...*model.Sysmenu) error
	First() (*model.Sysmenu, error)
	Take() (*model.Sysmenu, error)
	Last() (*model.Sysmenu, error)
	Find() ([]*model.Sysmenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysmenu, err error)
	FindInBatches(result *[]*model.Sysmenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysmenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysmenuDo
	Assign(attrs ...field.AssignExpr) ISysmenuDo
	Joins(fields ...field.RelationField) ISysmenuDo
	Preload(fields ...field.RelationField) ISysmenuDo
	FirstOrInit() (*model.Sysmenu, error)
	FirstOrCreate() (*model.Sysmenu, error)
	FindByPage(offset int, limit int) (result []*model.Sysmenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysmenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysmenuDo) Debug() ISysmenuDo {
	return s.withDO(s.DO.Debug())
}

func (s sysmenuDo) WithContext(ctx context.Context) ISysmenuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysmenuDo) ReadDB() ISysmenuDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysmenuDo) WriteDB() ISysmenuDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysmenuDo) Clauses(conds ...clause.Expression) ISysmenuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysmenuDo) Returning(value interface{}, columns ...string) ISysmenuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysmenuDo) Not(conds ...gen.Condition) ISysmenuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysmenuDo) Or(conds ...gen.Condition) ISysmenuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysmenuDo) Select(conds ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysmenuDo) Where(conds ...gen.Condition) ISysmenuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysmenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysmenuDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysmenuDo) Order(conds ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysmenuDo) Distinct(cols ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysmenuDo) Omit(cols ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysmenuDo) Join(table schema.Tabler, on ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysmenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysmenuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysmenuDo) Group(cols ...field.Expr) ISysmenuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysmenuDo) Having(conds ...gen.Condition) ISysmenuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysmenuDo) Limit(limit int) ISysmenuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysmenuDo) Offset(offset int) ISysmenuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysmenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysmenuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysmenuDo) Unscoped() ISysmenuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysmenuDo) Create(values ...*model.Sysmenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysmenuDo) CreateInBatches(values []*model.Sysmenu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysmenuDo) Save(values ...*model.Sysmenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysmenuDo) First() (*model.Sysmenu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysmenu), nil
	}
}

func (s sysmenuDo) Take() (*model.Sysmenu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysmenu), nil
	}
}

func (s sysmenuDo) Last() (*model.Sysmenu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysmenu), nil
	}
}

func (s sysmenuDo) Find() ([]*model.Sysmenu, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysmenu), err
}

func (s sysmenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysmenu, err error) {
	buf := make([]*model.Sysmenu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysmenuDo) FindInBatches(result *[]*model.Sysmenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysmenuDo) Attrs(attrs ...field.AssignExpr) ISysmenuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysmenuDo) Assign(attrs ...field.AssignExpr) ISysmenuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysmenuDo) Joins(fields ...field.RelationField) ISysmenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysmenuDo) Preload(fields ...field.RelationField) ISysmenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysmenuDo) FirstOrInit() (*model.Sysmenu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysmenu), nil
	}
}

func (s sysmenuDo) FirstOrCreate() (*model.Sysmenu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysmenu), nil
	}
}

func (s sysmenuDo) FindByPage(offset int, limit int) (result []*model.Sysmenu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysmenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysmenuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysmenuDo) Delete(models ...*model.Sysmenu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysmenuDo) withDO(do gen.Dao) *sysmenuDo {
	s.DO = *do.(*gen.DO)
	return s
}
