// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newAppusercard(db *gorm.DB) appusercard {
	_appusercard := appusercard{}

	_appusercard.appusercardDo.UseDB(db)
	_appusercard.appusercardDo.UseModel(&model.Appusercard{})

	tableName := _appusercard.appusercardDo.TableName()
	_appusercard.ALL = field.NewAsterisk(tableName)
	_appusercard.ID = field.NewString(tableName, "Id")
	_appusercard.CreationTime = field.NewTime(tableName, "CreationTime")
	_appusercard.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appusercard.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appusercard.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appusercard.IsDeleted = field.NewField(tableName, "IsDeleted")
	_appusercard.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_appusercard.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_appusercard.OpenID = field.NewString(tableName, "OpenId")
	_appusercard.CardNo = field.NewString(tableName, "CardNo")
	_appusercard.AppType = field.NewInt64(tableName, "AppType")
	_appusercard.RoleType = field.NewInt64(tableName, "RoleType")
	_appusercard.IsEnabled = field.NewField(tableName, "IsEnabled")
	_appusercard.TenantID = field.NewInt64(tableName, "TenantId")
	_appusercard.Password = field.NewString(tableName, "Password")

	_appusercard.fillFieldMap()

	return _appusercard
}

type appusercard struct {
	appusercardDo appusercardDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	OpenID               field.String
	CardNo               field.String
	AppType              field.Int64
	RoleType             field.Int64
	IsEnabled            field.Field
	TenantID             field.Int64
	Password             field.String

	fieldMap map[string]field.Expr
}

func (a appusercard) Table(newTableName string) *appusercard {
	a.appusercardDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appusercard) As(alias string) *appusercard {
	a.appusercardDo.DO = *(a.appusercardDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appusercard) updateTableName(table string) *appusercard {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.OpenID = field.NewString(table, "OpenId")
	a.CardNo = field.NewString(table, "CardNo")
	a.AppType = field.NewInt64(table, "AppType")
	a.RoleType = field.NewInt64(table, "RoleType")
	a.IsEnabled = field.NewField(table, "IsEnabled")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.Password = field.NewString(table, "Password")

	a.fillFieldMap()

	return a
}

func (a *appusercard) WithContext(ctx context.Context) IAppusercardDo {
	return a.appusercardDo.WithContext(ctx)
}

func (a appusercard) TableName() string { return a.appusercardDo.TableName() }

func (a appusercard) Alias() string { return a.appusercardDo.Alias() }

func (a *appusercard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appusercard) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["OpenId"] = a.OpenID
	a.fieldMap["CardNo"] = a.CardNo
	a.fieldMap["AppType"] = a.AppType
	a.fieldMap["RoleType"] = a.RoleType
	a.fieldMap["IsEnabled"] = a.IsEnabled
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["Password"] = a.Password
}

func (a appusercard) clone(db *gorm.DB) appusercard {
	a.appusercardDo.ReplaceDB(db)
	return a
}

type appusercardDo struct{ gen.DO }

type IAppusercardDo interface {
	gen.SubQuery
	Debug() IAppusercardDo
	WithContext(ctx context.Context) IAppusercardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppusercardDo
	Not(conds ...gen.Condition) IAppusercardDo
	Or(conds ...gen.Condition) IAppusercardDo
	Select(conds ...field.Expr) IAppusercardDo
	Where(conds ...gen.Condition) IAppusercardDo
	Order(conds ...field.Expr) IAppusercardDo
	Distinct(cols ...field.Expr) IAppusercardDo
	Omit(cols ...field.Expr) IAppusercardDo
	Join(table schema.Tabler, on ...field.Expr) IAppusercardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppusercardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppusercardDo
	Group(cols ...field.Expr) IAppusercardDo
	Having(conds ...gen.Condition) IAppusercardDo
	Limit(limit int) IAppusercardDo
	Offset(offset int) IAppusercardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppusercardDo
	Unscoped() IAppusercardDo
	Create(values ...*model.Appusercard) error
	CreateInBatches(values []*model.Appusercard, batchSize int) error
	Save(values ...*model.Appusercard) error
	First() (*model.Appusercard, error)
	Take() (*model.Appusercard, error)
	Last() (*model.Appusercard, error)
	Find() ([]*model.Appusercard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appusercard, err error)
	FindInBatches(result *[]*model.Appusercard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appusercard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppusercardDo
	Assign(attrs ...field.AssignExpr) IAppusercardDo
	Joins(fields ...field.RelationField) IAppusercardDo
	Preload(fields ...field.RelationField) IAppusercardDo
	FirstOrInit() (*model.Appusercard, error)
	FirstOrCreate() (*model.Appusercard, error)
	FindByPage(offset int, limit int) (result []*model.Appusercard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppusercardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appusercardDo) Debug() IAppusercardDo {
	return a.withDO(a.DO.Debug())
}

func (a appusercardDo) WithContext(ctx context.Context) IAppusercardDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appusercardDo) ReadDB() IAppusercardDo {
	return a.Clauses(dbresolver.Read)
}

func (a appusercardDo) WriteDB() IAppusercardDo {
	return a.Clauses(dbresolver.Write)
}

func (a appusercardDo) Clauses(conds ...clause.Expression) IAppusercardDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appusercardDo) Returning(value interface{}, columns ...string) IAppusercardDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appusercardDo) Not(conds ...gen.Condition) IAppusercardDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appusercardDo) Or(conds ...gen.Condition) IAppusercardDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appusercardDo) Select(conds ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appusercardDo) Where(conds ...gen.Condition) IAppusercardDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appusercardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppusercardDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appusercardDo) Order(conds ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appusercardDo) Distinct(cols ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appusercardDo) Omit(cols ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appusercardDo) Join(table schema.Tabler, on ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appusercardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appusercardDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appusercardDo) Group(cols ...field.Expr) IAppusercardDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appusercardDo) Having(conds ...gen.Condition) IAppusercardDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appusercardDo) Limit(limit int) IAppusercardDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appusercardDo) Offset(offset int) IAppusercardDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appusercardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppusercardDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appusercardDo) Unscoped() IAppusercardDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appusercardDo) Create(values ...*model.Appusercard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appusercardDo) CreateInBatches(values []*model.Appusercard, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appusercardDo) Save(values ...*model.Appusercard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appusercardDo) First() (*model.Appusercard, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appusercard), nil
	}
}

func (a appusercardDo) Take() (*model.Appusercard, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appusercard), nil
	}
}

func (a appusercardDo) Last() (*model.Appusercard, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appusercard), nil
	}
}

func (a appusercardDo) Find() ([]*model.Appusercard, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appusercard), err
}

func (a appusercardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appusercard, err error) {
	buf := make([]*model.Appusercard, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appusercardDo) FindInBatches(result *[]*model.Appusercard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appusercardDo) Attrs(attrs ...field.AssignExpr) IAppusercardDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appusercardDo) Assign(attrs ...field.AssignExpr) IAppusercardDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appusercardDo) Joins(fields ...field.RelationField) IAppusercardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appusercardDo) Preload(fields ...field.RelationField) IAppusercardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appusercardDo) FirstOrInit() (*model.Appusercard, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appusercard), nil
	}
}

func (a appusercardDo) FirstOrCreate() (*model.Appusercard, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appusercard), nil
	}
}

func (a appusercardDo) FindByPage(offset int, limit int) (result []*model.Appusercard, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appusercardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appusercardDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appusercardDo) Delete(models ...*model.Appusercard) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appusercardDo) withDO(do gen.Dao) *appusercardDo {
	a.DO = *do.(*gen.DO)
	return a
}
