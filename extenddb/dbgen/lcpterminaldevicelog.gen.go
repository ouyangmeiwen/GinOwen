// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpterminaldevicelog(db *gorm.DB) lcpterminaldevicelog {
	_lcpterminaldevicelog := lcpterminaldevicelog{}

	_lcpterminaldevicelog.lcpterminaldevicelogDo.UseDB(db)
	_lcpterminaldevicelog.lcpterminaldevicelogDo.UseModel(&model.Lcpterminaldevicelog{})

	tableName := _lcpterminaldevicelog.lcpterminaldevicelogDo.TableName()
	_lcpterminaldevicelog.ALL = field.NewAsterisk(tableName)
	_lcpterminaldevicelog.ID = field.NewString(tableName, "Id")
	_lcpterminaldevicelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminaldevicelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminaldevicelog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpterminaldevicelog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpterminaldevicelog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpterminaldevicelog.TerminalDeviceID = field.NewString(tableName, "TerminalDeviceId")
	_lcpterminaldevicelog.TerminalDeviceType = field.NewInt64(tableName, "TerminalDeviceType")
	_lcpterminaldevicelog.IsError = field.NewField(tableName, "IsError")
	_lcpterminaldevicelog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpterminaldevicelog.Brand = field.NewString(tableName, "Brand")
	_lcpterminaldevicelog.Model = field.NewString(tableName, "Model")
	_lcpterminaldevicelog.Version = field.NewString(tableName, "Version")
	_lcpterminaldevicelog.Remark = field.NewString(tableName, "Remark")
	_lcpterminaldevicelog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminaldevicelog.fillFieldMap()

	return _lcpterminaldevicelog
}

type lcpterminaldevicelog struct {
	lcpterminaldevicelogDo lcpterminaldevicelogDo

	ALL                field.Asterisk
	ID                 field.String
	CreationTime       field.Time
	CreatorUserID      field.Int64
	TerminalID         field.String
	TerminalCode       field.String
	TerminalName       field.String
	TerminalDeviceID   field.String
	TerminalDeviceType field.Int64
	IsError            field.Field
	ErrorMessage       field.String
	Brand              field.String
	Model              field.String
	Version            field.String
	Remark             field.String
	TenantID           field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminaldevicelog) Table(newTableName string) *lcpterminaldevicelog {
	l.lcpterminaldevicelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminaldevicelog) As(alias string) *lcpterminaldevicelog {
	l.lcpterminaldevicelogDo.DO = *(l.lcpterminaldevicelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminaldevicelog) updateTableName(table string) *lcpterminaldevicelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.TerminalDeviceID = field.NewString(table, "TerminalDeviceId")
	l.TerminalDeviceType = field.NewInt64(table, "TerminalDeviceType")
	l.IsError = field.NewField(table, "IsError")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.Brand = field.NewString(table, "Brand")
	l.Model = field.NewString(table, "Model")
	l.Version = field.NewString(table, "Version")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminaldevicelog) WithContext(ctx context.Context) ILcpterminaldevicelogDo {
	return l.lcpterminaldevicelogDo.WithContext(ctx)
}

func (l lcpterminaldevicelog) TableName() string { return l.lcpterminaldevicelogDo.TableName() }

func (l lcpterminaldevicelog) Alias() string { return l.lcpterminaldevicelogDo.Alias() }

func (l *lcpterminaldevicelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminaldevicelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["TerminalDeviceId"] = l.TerminalDeviceID
	l.fieldMap["TerminalDeviceType"] = l.TerminalDeviceType
	l.fieldMap["IsError"] = l.IsError
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["Brand"] = l.Brand
	l.fieldMap["Model"] = l.Model
	l.fieldMap["Version"] = l.Version
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminaldevicelog) clone(db *gorm.DB) lcpterminaldevicelog {
	l.lcpterminaldevicelogDo.ReplaceDB(db)
	return l
}

type lcpterminaldevicelogDo struct{ gen.DO }

type ILcpterminaldevicelogDo interface {
	gen.SubQuery
	Debug() ILcpterminaldevicelogDo
	WithContext(ctx context.Context) ILcpterminaldevicelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminaldevicelogDo
	Not(conds ...gen.Condition) ILcpterminaldevicelogDo
	Or(conds ...gen.Condition) ILcpterminaldevicelogDo
	Select(conds ...field.Expr) ILcpterminaldevicelogDo
	Where(conds ...gen.Condition) ILcpterminaldevicelogDo
	Order(conds ...field.Expr) ILcpterminaldevicelogDo
	Distinct(cols ...field.Expr) ILcpterminaldevicelogDo
	Omit(cols ...field.Expr) ILcpterminaldevicelogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminaldevicelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldevicelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldevicelogDo
	Group(cols ...field.Expr) ILcpterminaldevicelogDo
	Having(conds ...gen.Condition) ILcpterminaldevicelogDo
	Limit(limit int) ILcpterminaldevicelogDo
	Offset(offset int) ILcpterminaldevicelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminaldevicelogDo
	Unscoped() ILcpterminaldevicelogDo
	Create(values ...*model.Lcpterminaldevicelog) error
	CreateInBatches(values []*model.Lcpterminaldevicelog, batchSize int) error
	Save(values ...*model.Lcpterminaldevicelog) error
	First() (*model.Lcpterminaldevicelog, error)
	Take() (*model.Lcpterminaldevicelog, error)
	Last() (*model.Lcpterminaldevicelog, error)
	Find() ([]*model.Lcpterminaldevicelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminaldevicelog, err error)
	FindInBatches(result *[]*model.Lcpterminaldevicelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminaldevicelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminaldevicelogDo
	Assign(attrs ...field.AssignExpr) ILcpterminaldevicelogDo
	Joins(fields ...field.RelationField) ILcpterminaldevicelogDo
	Preload(fields ...field.RelationField) ILcpterminaldevicelogDo
	FirstOrInit() (*model.Lcpterminaldevicelog, error)
	FirstOrCreate() (*model.Lcpterminaldevicelog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminaldevicelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminaldevicelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminaldevicelogDo) Debug() ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminaldevicelogDo) WithContext(ctx context.Context) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminaldevicelogDo) ReadDB() ILcpterminaldevicelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminaldevicelogDo) WriteDB() ILcpterminaldevicelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminaldevicelogDo) Clauses(conds ...clause.Expression) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminaldevicelogDo) Returning(value interface{}, columns ...string) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminaldevicelogDo) Not(conds ...gen.Condition) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminaldevicelogDo) Or(conds ...gen.Condition) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminaldevicelogDo) Select(conds ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminaldevicelogDo) Where(conds ...gen.Condition) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminaldevicelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminaldevicelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminaldevicelogDo) Order(conds ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminaldevicelogDo) Distinct(cols ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminaldevicelogDo) Omit(cols ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminaldevicelogDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminaldevicelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminaldevicelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminaldevicelogDo) Group(cols ...field.Expr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminaldevicelogDo) Having(conds ...gen.Condition) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminaldevicelogDo) Limit(limit int) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminaldevicelogDo) Offset(offset int) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminaldevicelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminaldevicelogDo) Unscoped() ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminaldevicelogDo) Create(values ...*model.Lcpterminaldevicelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminaldevicelogDo) CreateInBatches(values []*model.Lcpterminaldevicelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminaldevicelogDo) Save(values ...*model.Lcpterminaldevicelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminaldevicelogDo) First() (*model.Lcpterminaldevicelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevicelog), nil
	}
}

func (l lcpterminaldevicelogDo) Take() (*model.Lcpterminaldevicelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevicelog), nil
	}
}

func (l lcpterminaldevicelogDo) Last() (*model.Lcpterminaldevicelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevicelog), nil
	}
}

func (l lcpterminaldevicelogDo) Find() ([]*model.Lcpterminaldevicelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminaldevicelog), err
}

func (l lcpterminaldevicelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminaldevicelog, err error) {
	buf := make([]*model.Lcpterminaldevicelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminaldevicelogDo) FindInBatches(result *[]*model.Lcpterminaldevicelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminaldevicelogDo) Attrs(attrs ...field.AssignExpr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminaldevicelogDo) Assign(attrs ...field.AssignExpr) ILcpterminaldevicelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminaldevicelogDo) Joins(fields ...field.RelationField) ILcpterminaldevicelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminaldevicelogDo) Preload(fields ...field.RelationField) ILcpterminaldevicelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminaldevicelogDo) FirstOrInit() (*model.Lcpterminaldevicelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevicelog), nil
	}
}

func (l lcpterminaldevicelogDo) FirstOrCreate() (*model.Lcpterminaldevicelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevicelog), nil
	}
}

func (l lcpterminaldevicelogDo) FindByPage(offset int, limit int) (result []*model.Lcpterminaldevicelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminaldevicelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminaldevicelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminaldevicelogDo) Delete(models ...*model.Lcpterminaldevicelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminaldevicelogDo) withDO(do gen.Dao) *lcpterminaldevicelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
