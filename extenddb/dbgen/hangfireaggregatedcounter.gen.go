// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfireaggregatedcounter(db *gorm.DB) hangfireaggregatedcounter {
	_hangfireaggregatedcounter := hangfireaggregatedcounter{}

	_hangfireaggregatedcounter.hangfireaggregatedcounterDo.UseDB(db)
	_hangfireaggregatedcounter.hangfireaggregatedcounterDo.UseModel(&model.Hangfireaggregatedcounter{})

	tableName := _hangfireaggregatedcounter.hangfireaggregatedcounterDo.TableName()
	_hangfireaggregatedcounter.ALL = field.NewAsterisk(tableName)
	_hangfireaggregatedcounter.ID = field.NewInt64(tableName, "Id")
	_hangfireaggregatedcounter.Key = field.NewString(tableName, "Key")
	_hangfireaggregatedcounter.Value = field.NewInt64(tableName, "Value")
	_hangfireaggregatedcounter.ExpireAt = field.NewTime(tableName, "ExpireAt")

	_hangfireaggregatedcounter.fillFieldMap()

	return _hangfireaggregatedcounter
}

type hangfireaggregatedcounter struct {
	hangfireaggregatedcounterDo hangfireaggregatedcounterDo

	ALL      field.Asterisk
	ID       field.Int64
	Key      field.String
	Value    field.Int64
	ExpireAt field.Time

	fieldMap map[string]field.Expr
}

func (h hangfireaggregatedcounter) Table(newTableName string) *hangfireaggregatedcounter {
	h.hangfireaggregatedcounterDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfireaggregatedcounter) As(alias string) *hangfireaggregatedcounter {
	h.hangfireaggregatedcounterDo.DO = *(h.hangfireaggregatedcounterDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfireaggregatedcounter) updateTableName(table string) *hangfireaggregatedcounter {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.Key = field.NewString(table, "Key")
	h.Value = field.NewInt64(table, "Value")
	h.ExpireAt = field.NewTime(table, "ExpireAt")

	h.fillFieldMap()

	return h
}

func (h *hangfireaggregatedcounter) WithContext(ctx context.Context) IHangfireaggregatedcounterDo {
	return h.hangfireaggregatedcounterDo.WithContext(ctx)
}

func (h hangfireaggregatedcounter) TableName() string {
	return h.hangfireaggregatedcounterDo.TableName()
}

func (h hangfireaggregatedcounter) Alias() string { return h.hangfireaggregatedcounterDo.Alias() }

func (h *hangfireaggregatedcounter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfireaggregatedcounter) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 4)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["Key"] = h.Key
	h.fieldMap["Value"] = h.Value
	h.fieldMap["ExpireAt"] = h.ExpireAt
}

func (h hangfireaggregatedcounter) clone(db *gorm.DB) hangfireaggregatedcounter {
	h.hangfireaggregatedcounterDo.ReplaceDB(db)
	return h
}

type hangfireaggregatedcounterDo struct{ gen.DO }

type IHangfireaggregatedcounterDo interface {
	gen.SubQuery
	Debug() IHangfireaggregatedcounterDo
	WithContext(ctx context.Context) IHangfireaggregatedcounterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfireaggregatedcounterDo
	Not(conds ...gen.Condition) IHangfireaggregatedcounterDo
	Or(conds ...gen.Condition) IHangfireaggregatedcounterDo
	Select(conds ...field.Expr) IHangfireaggregatedcounterDo
	Where(conds ...gen.Condition) IHangfireaggregatedcounterDo
	Order(conds ...field.Expr) IHangfireaggregatedcounterDo
	Distinct(cols ...field.Expr) IHangfireaggregatedcounterDo
	Omit(cols ...field.Expr) IHangfireaggregatedcounterDo
	Join(table schema.Tabler, on ...field.Expr) IHangfireaggregatedcounterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfireaggregatedcounterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfireaggregatedcounterDo
	Group(cols ...field.Expr) IHangfireaggregatedcounterDo
	Having(conds ...gen.Condition) IHangfireaggregatedcounterDo
	Limit(limit int) IHangfireaggregatedcounterDo
	Offset(offset int) IHangfireaggregatedcounterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfireaggregatedcounterDo
	Unscoped() IHangfireaggregatedcounterDo
	Create(values ...*model.Hangfireaggregatedcounter) error
	CreateInBatches(values []*model.Hangfireaggregatedcounter, batchSize int) error
	Save(values ...*model.Hangfireaggregatedcounter) error
	First() (*model.Hangfireaggregatedcounter, error)
	Take() (*model.Hangfireaggregatedcounter, error)
	Last() (*model.Hangfireaggregatedcounter, error)
	Find() ([]*model.Hangfireaggregatedcounter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfireaggregatedcounter, err error)
	FindInBatches(result *[]*model.Hangfireaggregatedcounter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfireaggregatedcounter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfireaggregatedcounterDo
	Assign(attrs ...field.AssignExpr) IHangfireaggregatedcounterDo
	Joins(fields ...field.RelationField) IHangfireaggregatedcounterDo
	Preload(fields ...field.RelationField) IHangfireaggregatedcounterDo
	FirstOrInit() (*model.Hangfireaggregatedcounter, error)
	FirstOrCreate() (*model.Hangfireaggregatedcounter, error)
	FindByPage(offset int, limit int) (result []*model.Hangfireaggregatedcounter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfireaggregatedcounterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfireaggregatedcounterDo) Debug() IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfireaggregatedcounterDo) WithContext(ctx context.Context) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfireaggregatedcounterDo) ReadDB() IHangfireaggregatedcounterDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfireaggregatedcounterDo) WriteDB() IHangfireaggregatedcounterDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfireaggregatedcounterDo) Clauses(conds ...clause.Expression) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfireaggregatedcounterDo) Returning(value interface{}, columns ...string) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfireaggregatedcounterDo) Not(conds ...gen.Condition) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfireaggregatedcounterDo) Or(conds ...gen.Condition) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfireaggregatedcounterDo) Select(conds ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfireaggregatedcounterDo) Where(conds ...gen.Condition) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfireaggregatedcounterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfireaggregatedcounterDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfireaggregatedcounterDo) Order(conds ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfireaggregatedcounterDo) Distinct(cols ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfireaggregatedcounterDo) Omit(cols ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfireaggregatedcounterDo) Join(table schema.Tabler, on ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfireaggregatedcounterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfireaggregatedcounterDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfireaggregatedcounterDo) Group(cols ...field.Expr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfireaggregatedcounterDo) Having(conds ...gen.Condition) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfireaggregatedcounterDo) Limit(limit int) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfireaggregatedcounterDo) Offset(offset int) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfireaggregatedcounterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfireaggregatedcounterDo) Unscoped() IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfireaggregatedcounterDo) Create(values ...*model.Hangfireaggregatedcounter) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfireaggregatedcounterDo) CreateInBatches(values []*model.Hangfireaggregatedcounter, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfireaggregatedcounterDo) Save(values ...*model.Hangfireaggregatedcounter) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfireaggregatedcounterDo) First() (*model.Hangfireaggregatedcounter, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireaggregatedcounter), nil
	}
}

func (h hangfireaggregatedcounterDo) Take() (*model.Hangfireaggregatedcounter, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireaggregatedcounter), nil
	}
}

func (h hangfireaggregatedcounterDo) Last() (*model.Hangfireaggregatedcounter, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireaggregatedcounter), nil
	}
}

func (h hangfireaggregatedcounterDo) Find() ([]*model.Hangfireaggregatedcounter, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfireaggregatedcounter), err
}

func (h hangfireaggregatedcounterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfireaggregatedcounter, err error) {
	buf := make([]*model.Hangfireaggregatedcounter, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfireaggregatedcounterDo) FindInBatches(result *[]*model.Hangfireaggregatedcounter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfireaggregatedcounterDo) Attrs(attrs ...field.AssignExpr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfireaggregatedcounterDo) Assign(attrs ...field.AssignExpr) IHangfireaggregatedcounterDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfireaggregatedcounterDo) Joins(fields ...field.RelationField) IHangfireaggregatedcounterDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfireaggregatedcounterDo) Preload(fields ...field.RelationField) IHangfireaggregatedcounterDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfireaggregatedcounterDo) FirstOrInit() (*model.Hangfireaggregatedcounter, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireaggregatedcounter), nil
	}
}

func (h hangfireaggregatedcounterDo) FirstOrCreate() (*model.Hangfireaggregatedcounter, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfireaggregatedcounter), nil
	}
}

func (h hangfireaggregatedcounterDo) FindByPage(offset int, limit int) (result []*model.Hangfireaggregatedcounter, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfireaggregatedcounterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfireaggregatedcounterDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfireaggregatedcounterDo) Delete(models ...*model.Hangfireaggregatedcounter) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfireaggregatedcounterDo) withDO(do gen.Dao) *hangfireaggregatedcounterDo {
	h.DO = *do.(*gen.DO)
	return h
}
