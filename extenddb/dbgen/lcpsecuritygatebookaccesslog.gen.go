// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcpsecuritygatebookaccesslog(db *gorm.DB) lcpsecuritygatebookaccesslog {
	_lcpsecuritygatebookaccesslog := lcpsecuritygatebookaccesslog{}

	_lcpsecuritygatebookaccesslog.lcpsecuritygatebookaccesslogDo.UseDB(db)
	_lcpsecuritygatebookaccesslog.lcpsecuritygatebookaccesslogDo.UseModel(&model.Lcpsecuritygatebookaccesslog{})

	tableName := _lcpsecuritygatebookaccesslog.lcpsecuritygatebookaccesslogDo.TableName()
	_lcpsecuritygatebookaccesslog.ALL = field.NewAsterisk(tableName)
	_lcpsecuritygatebookaccesslog.ID = field.NewString(tableName, "Id")
	_lcpsecuritygatebookaccesslog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpsecuritygatebookaccesslog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpsecuritygatebookaccesslog.AccessTime = field.NewTime(tableName, "AccessTime")
	_lcpsecuritygatebookaccesslog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpsecuritygatebookaccesslog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpsecuritygatebookaccesslog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpsecuritygatebookaccesslog.ItemTid = field.NewString(tableName, "ItemTid")
	_lcpsecuritygatebookaccesslog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_lcpsecuritygatebookaccesslog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_lcpsecuritygatebookaccesslog.BookStatus = field.NewInt64(tableName, "BookStatus")
	_lcpsecuritygatebookaccesslog.Remark = field.NewString(tableName, "Remark")
	_lcpsecuritygatebookaccesslog.TenantID = field.NewInt64(tableName, "TenantId")
	_lcpsecuritygatebookaccesslog.Direction = field.NewInt64(tableName, "Direction")

	_lcpsecuritygatebookaccesslog.fillFieldMap()

	return _lcpsecuritygatebookaccesslog
}

type lcpsecuritygatebookaccesslog struct {
	lcpsecuritygatebookaccesslogDo lcpsecuritygatebookaccesslogDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	AccessTime    field.Time
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	ItemTid       field.String
	ItemBarcode   field.String
	ItemTitle     field.String
	BookStatus    field.Int64
	Remark        field.String
	TenantID      field.Int64
	Direction     field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpsecuritygatebookaccesslog) Table(newTableName string) *lcpsecuritygatebookaccesslog {
	l.lcpsecuritygatebookaccesslogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpsecuritygatebookaccesslog) As(alias string) *lcpsecuritygatebookaccesslog {
	l.lcpsecuritygatebookaccesslogDo.DO = *(l.lcpsecuritygatebookaccesslogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpsecuritygatebookaccesslog) updateTableName(table string) *lcpsecuritygatebookaccesslog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.AccessTime = field.NewTime(table, "AccessTime")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.ItemTid = field.NewString(table, "ItemTid")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.BookStatus = field.NewInt64(table, "BookStatus")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.Direction = field.NewInt64(table, "Direction")

	l.fillFieldMap()

	return l
}

func (l *lcpsecuritygatebookaccesslog) WithContext(ctx context.Context) ILcpsecuritygatebookaccesslogDo {
	return l.lcpsecuritygatebookaccesslogDo.WithContext(ctx)
}

func (l lcpsecuritygatebookaccesslog) TableName() string {
	return l.lcpsecuritygatebookaccesslogDo.TableName()
}

func (l lcpsecuritygatebookaccesslog) Alias() string { return l.lcpsecuritygatebookaccesslogDo.Alias() }

func (l *lcpsecuritygatebookaccesslog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpsecuritygatebookaccesslog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["AccessTime"] = l.AccessTime
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["ItemTid"] = l.ItemTid
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["BookStatus"] = l.BookStatus
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["Direction"] = l.Direction
}

func (l lcpsecuritygatebookaccesslog) clone(db *gorm.DB) lcpsecuritygatebookaccesslog {
	l.lcpsecuritygatebookaccesslogDo.ReplaceDB(db)
	return l
}

type lcpsecuritygatebookaccesslogDo struct{ gen.DO }

type ILcpsecuritygatebookaccesslogDo interface {
	gen.SubQuery
	Debug() ILcpsecuritygatebookaccesslogDo
	WithContext(ctx context.Context) ILcpsecuritygatebookaccesslogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpsecuritygatebookaccesslogDo
	Not(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo
	Or(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo
	Select(conds ...field.Expr) ILcpsecuritygatebookaccesslogDo
	Where(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo
	Order(conds ...field.Expr) ILcpsecuritygatebookaccesslogDo
	Distinct(cols ...field.Expr) ILcpsecuritygatebookaccesslogDo
	Omit(cols ...field.Expr) ILcpsecuritygatebookaccesslogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookaccesslogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookaccesslogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookaccesslogDo
	Group(cols ...field.Expr) ILcpsecuritygatebookaccesslogDo
	Having(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo
	Limit(limit int) ILcpsecuritygatebookaccesslogDo
	Offset(offset int) ILcpsecuritygatebookaccesslogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygatebookaccesslogDo
	Unscoped() ILcpsecuritygatebookaccesslogDo
	Create(values ...*model.Lcpsecuritygatebookaccesslog) error
	CreateInBatches(values []*model.Lcpsecuritygatebookaccesslog, batchSize int) error
	Save(values ...*model.Lcpsecuritygatebookaccesslog) error
	First() (*model.Lcpsecuritygatebookaccesslog, error)
	Take() (*model.Lcpsecuritygatebookaccesslog, error)
	Last() (*model.Lcpsecuritygatebookaccesslog, error)
	Find() ([]*model.Lcpsecuritygatebookaccesslog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygatebookaccesslog, err error)
	FindInBatches(result *[]*model.Lcpsecuritygatebookaccesslog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpsecuritygatebookaccesslog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpsecuritygatebookaccesslogDo
	Assign(attrs ...field.AssignExpr) ILcpsecuritygatebookaccesslogDo
	Joins(fields ...field.RelationField) ILcpsecuritygatebookaccesslogDo
	Preload(fields ...field.RelationField) ILcpsecuritygatebookaccesslogDo
	FirstOrInit() (*model.Lcpsecuritygatebookaccesslog, error)
	FirstOrCreate() (*model.Lcpsecuritygatebookaccesslog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpsecuritygatebookaccesslog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpsecuritygatebookaccesslogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpsecuritygatebookaccesslogDo) Debug() ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpsecuritygatebookaccesslogDo) WithContext(ctx context.Context) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpsecuritygatebookaccesslogDo) ReadDB() ILcpsecuritygatebookaccesslogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpsecuritygatebookaccesslogDo) WriteDB() ILcpsecuritygatebookaccesslogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpsecuritygatebookaccesslogDo) Clauses(conds ...clause.Expression) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Returning(value interface{}, columns ...string) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpsecuritygatebookaccesslogDo) Not(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Or(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Select(conds ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Where(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpsecuritygatebookaccesslogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpsecuritygatebookaccesslogDo) Order(conds ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Distinct(cols ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpsecuritygatebookaccesslogDo) Omit(cols ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpsecuritygatebookaccesslogDo) Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpsecuritygatebookaccesslogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpsecuritygatebookaccesslogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpsecuritygatebookaccesslogDo) Group(cols ...field.Expr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpsecuritygatebookaccesslogDo) Having(conds ...gen.Condition) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpsecuritygatebookaccesslogDo) Limit(limit int) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpsecuritygatebookaccesslogDo) Offset(offset int) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpsecuritygatebookaccesslogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpsecuritygatebookaccesslogDo) Unscoped() ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpsecuritygatebookaccesslogDo) Create(values ...*model.Lcpsecuritygatebookaccesslog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpsecuritygatebookaccesslogDo) CreateInBatches(values []*model.Lcpsecuritygatebookaccesslog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpsecuritygatebookaccesslogDo) Save(values ...*model.Lcpsecuritygatebookaccesslog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpsecuritygatebookaccesslogDo) First() (*model.Lcpsecuritygatebookaccesslog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookaccesslog), nil
	}
}

func (l lcpsecuritygatebookaccesslogDo) Take() (*model.Lcpsecuritygatebookaccesslog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookaccesslog), nil
	}
}

func (l lcpsecuritygatebookaccesslogDo) Last() (*model.Lcpsecuritygatebookaccesslog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookaccesslog), nil
	}
}

func (l lcpsecuritygatebookaccesslogDo) Find() ([]*model.Lcpsecuritygatebookaccesslog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpsecuritygatebookaccesslog), err
}

func (l lcpsecuritygatebookaccesslogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygatebookaccesslog, err error) {
	buf := make([]*model.Lcpsecuritygatebookaccesslog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpsecuritygatebookaccesslogDo) FindInBatches(result *[]*model.Lcpsecuritygatebookaccesslog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpsecuritygatebookaccesslogDo) Attrs(attrs ...field.AssignExpr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpsecuritygatebookaccesslogDo) Assign(attrs ...field.AssignExpr) ILcpsecuritygatebookaccesslogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpsecuritygatebookaccesslogDo) Joins(fields ...field.RelationField) ILcpsecuritygatebookaccesslogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpsecuritygatebookaccesslogDo) Preload(fields ...field.RelationField) ILcpsecuritygatebookaccesslogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpsecuritygatebookaccesslogDo) FirstOrInit() (*model.Lcpsecuritygatebookaccesslog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookaccesslog), nil
	}
}

func (l lcpsecuritygatebookaccesslogDo) FirstOrCreate() (*model.Lcpsecuritygatebookaccesslog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatebookaccesslog), nil
	}
}

func (l lcpsecuritygatebookaccesslogDo) FindByPage(offset int, limit int) (result []*model.Lcpsecuritygatebookaccesslog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpsecuritygatebookaccesslogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpsecuritygatebookaccesslogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpsecuritygatebookaccesslogDo) Delete(models ...*model.Lcpsecuritygatebookaccesslog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpsecuritygatebookaccesslogDo) withDO(do gen.Dao) *lcpsecuritygatebookaccesslogDo {
	l.DO = *do.(*gen.DO)
	return l
}
