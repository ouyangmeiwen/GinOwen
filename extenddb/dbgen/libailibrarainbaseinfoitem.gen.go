// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibailibrarainbaseinfoitem(db *gorm.DB) libailibrarainbaseinfoitem {
	_libailibrarainbaseinfoitem := libailibrarainbaseinfoitem{}

	_libailibrarainbaseinfoitem.libailibrarainbaseinfoitemDo.UseDB(db)
	_libailibrarainbaseinfoitem.libailibrarainbaseinfoitemDo.UseModel(&model.Libailibrarainbaseinfoitem{})

	tableName := _libailibrarainbaseinfoitem.libailibrarainbaseinfoitemDo.TableName()
	_libailibrarainbaseinfoitem.ALL = field.NewAsterisk(tableName)
	_libailibrarainbaseinfoitem.ID = field.NewInt64(tableName, "Id")
	_libailibrarainbaseinfoitem.Name = field.NewString(tableName, "Name")
	_libailibrarainbaseinfoitem.Content = field.NewString(tableName, "Content")
	_libailibrarainbaseinfoitem.BaseInfoID = field.NewInt64(tableName, "BaseInfoId")

	_libailibrarainbaseinfoitem.fillFieldMap()

	return _libailibrarainbaseinfoitem
}

type libailibrarainbaseinfoitem struct {
	libailibrarainbaseinfoitemDo libailibrarainbaseinfoitemDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String
	Content    field.String
	BaseInfoID field.Int64

	fieldMap map[string]field.Expr
}

func (l libailibrarainbaseinfoitem) Table(newTableName string) *libailibrarainbaseinfoitem {
	l.libailibrarainbaseinfoitemDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libailibrarainbaseinfoitem) As(alias string) *libailibrarainbaseinfoitem {
	l.libailibrarainbaseinfoitemDo.DO = *(l.libailibrarainbaseinfoitemDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libailibrarainbaseinfoitem) updateTableName(table string) *libailibrarainbaseinfoitem {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "Id")
	l.Name = field.NewString(table, "Name")
	l.Content = field.NewString(table, "Content")
	l.BaseInfoID = field.NewInt64(table, "BaseInfoId")

	l.fillFieldMap()

	return l
}

func (l *libailibrarainbaseinfoitem) WithContext(ctx context.Context) ILibailibrarainbaseinfoitemDo {
	return l.libailibrarainbaseinfoitemDo.WithContext(ctx)
}

func (l libailibrarainbaseinfoitem) TableName() string {
	return l.libailibrarainbaseinfoitemDo.TableName()
}

func (l libailibrarainbaseinfoitem) Alias() string { return l.libailibrarainbaseinfoitemDo.Alias() }

func (l *libailibrarainbaseinfoitem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libailibrarainbaseinfoitem) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["Name"] = l.Name
	l.fieldMap["Content"] = l.Content
	l.fieldMap["BaseInfoId"] = l.BaseInfoID
}

func (l libailibrarainbaseinfoitem) clone(db *gorm.DB) libailibrarainbaseinfoitem {
	l.libailibrarainbaseinfoitemDo.ReplaceDB(db)
	return l
}

type libailibrarainbaseinfoitemDo struct{ gen.DO }

type ILibailibrarainbaseinfoitemDo interface {
	gen.SubQuery
	Debug() ILibailibrarainbaseinfoitemDo
	WithContext(ctx context.Context) ILibailibrarainbaseinfoitemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibailibrarainbaseinfoitemDo
	Not(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo
	Or(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo
	Select(conds ...field.Expr) ILibailibrarainbaseinfoitemDo
	Where(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo
	Order(conds ...field.Expr) ILibailibrarainbaseinfoitemDo
	Distinct(cols ...field.Expr) ILibailibrarainbaseinfoitemDo
	Omit(cols ...field.Expr) ILibailibrarainbaseinfoitemDo
	Join(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoitemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoitemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoitemDo
	Group(cols ...field.Expr) ILibailibrarainbaseinfoitemDo
	Having(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo
	Limit(limit int) ILibailibrarainbaseinfoitemDo
	Offset(offset int) ILibailibrarainbaseinfoitemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainbaseinfoitemDo
	Unscoped() ILibailibrarainbaseinfoitemDo
	Create(values ...*model.Libailibrarainbaseinfoitem) error
	CreateInBatches(values []*model.Libailibrarainbaseinfoitem, batchSize int) error
	Save(values ...*model.Libailibrarainbaseinfoitem) error
	First() (*model.Libailibrarainbaseinfoitem, error)
	Take() (*model.Libailibrarainbaseinfoitem, error)
	Last() (*model.Libailibrarainbaseinfoitem, error)
	Find() ([]*model.Libailibrarainbaseinfoitem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainbaseinfoitem, err error)
	FindInBatches(result *[]*model.Libailibrarainbaseinfoitem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libailibrarainbaseinfoitem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibailibrarainbaseinfoitemDo
	Assign(attrs ...field.AssignExpr) ILibailibrarainbaseinfoitemDo
	Joins(fields ...field.RelationField) ILibailibrarainbaseinfoitemDo
	Preload(fields ...field.RelationField) ILibailibrarainbaseinfoitemDo
	FirstOrInit() (*model.Libailibrarainbaseinfoitem, error)
	FirstOrCreate() (*model.Libailibrarainbaseinfoitem, error)
	FindByPage(offset int, limit int) (result []*model.Libailibrarainbaseinfoitem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibailibrarainbaseinfoitemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libailibrarainbaseinfoitemDo) Debug() ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Debug())
}

func (l libailibrarainbaseinfoitemDo) WithContext(ctx context.Context) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libailibrarainbaseinfoitemDo) ReadDB() ILibailibrarainbaseinfoitemDo {
	return l.Clauses(dbresolver.Read)
}

func (l libailibrarainbaseinfoitemDo) WriteDB() ILibailibrarainbaseinfoitemDo {
	return l.Clauses(dbresolver.Write)
}

func (l libailibrarainbaseinfoitemDo) Clauses(conds ...clause.Expression) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libailibrarainbaseinfoitemDo) Returning(value interface{}, columns ...string) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libailibrarainbaseinfoitemDo) Not(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libailibrarainbaseinfoitemDo) Or(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libailibrarainbaseinfoitemDo) Select(conds ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libailibrarainbaseinfoitemDo) Where(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libailibrarainbaseinfoitemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibailibrarainbaseinfoitemDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libailibrarainbaseinfoitemDo) Order(conds ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libailibrarainbaseinfoitemDo) Distinct(cols ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libailibrarainbaseinfoitemDo) Omit(cols ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libailibrarainbaseinfoitemDo) Join(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libailibrarainbaseinfoitemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libailibrarainbaseinfoitemDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libailibrarainbaseinfoitemDo) Group(cols ...field.Expr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libailibrarainbaseinfoitemDo) Having(conds ...gen.Condition) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libailibrarainbaseinfoitemDo) Limit(limit int) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libailibrarainbaseinfoitemDo) Offset(offset int) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libailibrarainbaseinfoitemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libailibrarainbaseinfoitemDo) Unscoped() ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libailibrarainbaseinfoitemDo) Create(values ...*model.Libailibrarainbaseinfoitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libailibrarainbaseinfoitemDo) CreateInBatches(values []*model.Libailibrarainbaseinfoitem, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libailibrarainbaseinfoitemDo) Save(values ...*model.Libailibrarainbaseinfoitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libailibrarainbaseinfoitemDo) First() (*model.Libailibrarainbaseinfoitem, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoitem), nil
	}
}

func (l libailibrarainbaseinfoitemDo) Take() (*model.Libailibrarainbaseinfoitem, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoitem), nil
	}
}

func (l libailibrarainbaseinfoitemDo) Last() (*model.Libailibrarainbaseinfoitem, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoitem), nil
	}
}

func (l libailibrarainbaseinfoitemDo) Find() ([]*model.Libailibrarainbaseinfoitem, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libailibrarainbaseinfoitem), err
}

func (l libailibrarainbaseinfoitemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainbaseinfoitem, err error) {
	buf := make([]*model.Libailibrarainbaseinfoitem, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libailibrarainbaseinfoitemDo) FindInBatches(result *[]*model.Libailibrarainbaseinfoitem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libailibrarainbaseinfoitemDo) Attrs(attrs ...field.AssignExpr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libailibrarainbaseinfoitemDo) Assign(attrs ...field.AssignExpr) ILibailibrarainbaseinfoitemDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libailibrarainbaseinfoitemDo) Joins(fields ...field.RelationField) ILibailibrarainbaseinfoitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libailibrarainbaseinfoitemDo) Preload(fields ...field.RelationField) ILibailibrarainbaseinfoitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libailibrarainbaseinfoitemDo) FirstOrInit() (*model.Libailibrarainbaseinfoitem, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoitem), nil
	}
}

func (l libailibrarainbaseinfoitemDo) FirstOrCreate() (*model.Libailibrarainbaseinfoitem, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoitem), nil
	}
}

func (l libailibrarainbaseinfoitemDo) FindByPage(offset int, limit int) (result []*model.Libailibrarainbaseinfoitem, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libailibrarainbaseinfoitemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libailibrarainbaseinfoitemDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libailibrarainbaseinfoitemDo) Delete(models ...*model.Libailibrarainbaseinfoitem) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libailibrarainbaseinfoitemDo) withDO(do gen.Dao) *libailibrarainbaseinfoitemDo {
	l.DO = *do.(*gen.DO)
	return l
}
