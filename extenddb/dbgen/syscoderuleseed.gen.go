// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSyscoderuleseed(db *gorm.DB) syscoderuleseed {
	_syscoderuleseed := syscoderuleseed{}

	_syscoderuleseed.syscoderuleseedDo.UseDB(db)
	_syscoderuleseed.syscoderuleseedDo.UseModel(&model.Syscoderuleseed{})

	tableName := _syscoderuleseed.syscoderuleseedDo.TableName()
	_syscoderuleseed.ALL = field.NewAsterisk(tableName)
	_syscoderuleseed.ID = field.NewString(tableName, "Id")
	_syscoderuleseed.CreationTime = field.NewTime(tableName, "CreationTime")
	_syscoderuleseed.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_syscoderuleseed.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_syscoderuleseed.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_syscoderuleseed.CodeRuleID = field.NewString(tableName, "CodeRuleId")
	_syscoderuleseed.SeedValue = field.NewInt64(tableName, "SeedValue")
	_syscoderuleseed.UserID = field.NewInt64(tableName, "UserId")
	_syscoderuleseed.TenantID = field.NewInt64(tableName, "TenantId")

	_syscoderuleseed.fillFieldMap()

	return _syscoderuleseed
}

type syscoderuleseed struct {
	syscoderuleseedDo syscoderuleseedDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	CodeRuleID           field.String
	SeedValue            field.Int64
	UserID               field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s syscoderuleseed) Table(newTableName string) *syscoderuleseed {
	s.syscoderuleseedDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syscoderuleseed) As(alias string) *syscoderuleseed {
	s.syscoderuleseedDo.DO = *(s.syscoderuleseedDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syscoderuleseed) updateTableName(table string) *syscoderuleseed {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.CodeRuleID = field.NewString(table, "CodeRuleId")
	s.SeedValue = field.NewInt64(table, "SeedValue")
	s.UserID = field.NewInt64(table, "UserId")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *syscoderuleseed) WithContext(ctx context.Context) ISyscoderuleseedDo {
	return s.syscoderuleseedDo.WithContext(ctx)
}

func (s syscoderuleseed) TableName() string { return s.syscoderuleseedDo.TableName() }

func (s syscoderuleseed) Alias() string { return s.syscoderuleseedDo.Alias() }

func (s *syscoderuleseed) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syscoderuleseed) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["CodeRuleId"] = s.CodeRuleID
	s.fieldMap["SeedValue"] = s.SeedValue
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["TenantId"] = s.TenantID
}

func (s syscoderuleseed) clone(db *gorm.DB) syscoderuleseed {
	s.syscoderuleseedDo.ReplaceDB(db)
	return s
}

type syscoderuleseedDo struct{ gen.DO }

type ISyscoderuleseedDo interface {
	gen.SubQuery
	Debug() ISyscoderuleseedDo
	WithContext(ctx context.Context) ISyscoderuleseedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyscoderuleseedDo
	Not(conds ...gen.Condition) ISyscoderuleseedDo
	Or(conds ...gen.Condition) ISyscoderuleseedDo
	Select(conds ...field.Expr) ISyscoderuleseedDo
	Where(conds ...gen.Condition) ISyscoderuleseedDo
	Order(conds ...field.Expr) ISyscoderuleseedDo
	Distinct(cols ...field.Expr) ISyscoderuleseedDo
	Omit(cols ...field.Expr) ISyscoderuleseedDo
	Join(table schema.Tabler, on ...field.Expr) ISyscoderuleseedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleseedDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleseedDo
	Group(cols ...field.Expr) ISyscoderuleseedDo
	Having(conds ...gen.Condition) ISyscoderuleseedDo
	Limit(limit int) ISyscoderuleseedDo
	Offset(offset int) ISyscoderuleseedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscoderuleseedDo
	Unscoped() ISyscoderuleseedDo
	Create(values ...*model.Syscoderuleseed) error
	CreateInBatches(values []*model.Syscoderuleseed, batchSize int) error
	Save(values ...*model.Syscoderuleseed) error
	First() (*model.Syscoderuleseed, error)
	Take() (*model.Syscoderuleseed, error)
	Last() (*model.Syscoderuleseed, error)
	Find() ([]*model.Syscoderuleseed, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscoderuleseed, err error)
	FindInBatches(result *[]*model.Syscoderuleseed, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syscoderuleseed) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyscoderuleseedDo
	Assign(attrs ...field.AssignExpr) ISyscoderuleseedDo
	Joins(fields ...field.RelationField) ISyscoderuleseedDo
	Preload(fields ...field.RelationField) ISyscoderuleseedDo
	FirstOrInit() (*model.Syscoderuleseed, error)
	FirstOrCreate() (*model.Syscoderuleseed, error)
	FindByPage(offset int, limit int) (result []*model.Syscoderuleseed, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyscoderuleseedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syscoderuleseedDo) Debug() ISyscoderuleseedDo {
	return s.withDO(s.DO.Debug())
}

func (s syscoderuleseedDo) WithContext(ctx context.Context) ISyscoderuleseedDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syscoderuleseedDo) ReadDB() ISyscoderuleseedDo {
	return s.Clauses(dbresolver.Read)
}

func (s syscoderuleseedDo) WriteDB() ISyscoderuleseedDo {
	return s.Clauses(dbresolver.Write)
}

func (s syscoderuleseedDo) Clauses(conds ...clause.Expression) ISyscoderuleseedDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syscoderuleseedDo) Returning(value interface{}, columns ...string) ISyscoderuleseedDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syscoderuleseedDo) Not(conds ...gen.Condition) ISyscoderuleseedDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syscoderuleseedDo) Or(conds ...gen.Condition) ISyscoderuleseedDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syscoderuleseedDo) Select(conds ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syscoderuleseedDo) Where(conds ...gen.Condition) ISyscoderuleseedDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syscoderuleseedDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyscoderuleseedDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syscoderuleseedDo) Order(conds ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syscoderuleseedDo) Distinct(cols ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syscoderuleseedDo) Omit(cols ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syscoderuleseedDo) Join(table schema.Tabler, on ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syscoderuleseedDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syscoderuleseedDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syscoderuleseedDo) Group(cols ...field.Expr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syscoderuleseedDo) Having(conds ...gen.Condition) ISyscoderuleseedDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syscoderuleseedDo) Limit(limit int) ISyscoderuleseedDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syscoderuleseedDo) Offset(offset int) ISyscoderuleseedDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syscoderuleseedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyscoderuleseedDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syscoderuleseedDo) Unscoped() ISyscoderuleseedDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syscoderuleseedDo) Create(values ...*model.Syscoderuleseed) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syscoderuleseedDo) CreateInBatches(values []*model.Syscoderuleseed, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syscoderuleseedDo) Save(values ...*model.Syscoderuleseed) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syscoderuleseedDo) First() (*model.Syscoderuleseed, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderuleseed), nil
	}
}

func (s syscoderuleseedDo) Take() (*model.Syscoderuleseed, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderuleseed), nil
	}
}

func (s syscoderuleseedDo) Last() (*model.Syscoderuleseed, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderuleseed), nil
	}
}

func (s syscoderuleseedDo) Find() ([]*model.Syscoderuleseed, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syscoderuleseed), err
}

func (s syscoderuleseedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syscoderuleseed, err error) {
	buf := make([]*model.Syscoderuleseed, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syscoderuleseedDo) FindInBatches(result *[]*model.Syscoderuleseed, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syscoderuleseedDo) Attrs(attrs ...field.AssignExpr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syscoderuleseedDo) Assign(attrs ...field.AssignExpr) ISyscoderuleseedDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syscoderuleseedDo) Joins(fields ...field.RelationField) ISyscoderuleseedDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syscoderuleseedDo) Preload(fields ...field.RelationField) ISyscoderuleseedDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syscoderuleseedDo) FirstOrInit() (*model.Syscoderuleseed, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderuleseed), nil
	}
}

func (s syscoderuleseedDo) FirstOrCreate() (*model.Syscoderuleseed, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syscoderuleseed), nil
	}
}

func (s syscoderuleseedDo) FindByPage(offset int, limit int) (result []*model.Syscoderuleseed, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syscoderuleseedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syscoderuleseedDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syscoderuleseedDo) Delete(models ...*model.Syscoderuleseed) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syscoderuleseedDo) withDO(do gen.Dao) *syscoderuleseedDo {
	s.DO = *do.(*gen.DO)
	return s
}
