// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newDascirculatecount(db *gorm.DB) dascirculatecount {
	_dascirculatecount := dascirculatecount{}

	_dascirculatecount.dascirculatecountDo.UseDB(db)
	_dascirculatecount.dascirculatecountDo.UseModel(&model.Dascirculatecount{})

	tableName := _dascirculatecount.dascirculatecountDo.TableName()
	_dascirculatecount.ALL = field.NewAsterisk(tableName)
	_dascirculatecount.ID = field.NewString(tableName, "Id")
	_dascirculatecount.CreationTime = field.NewTime(tableName, "CreationTime")
	_dascirculatecount.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dascirculatecount.TerminalID = field.NewString(tableName, "TerminalId")
	_dascirculatecount.TerminalCode = field.NewString(tableName, "TerminalCode")
	_dascirculatecount.TerminalName = field.NewString(tableName, "TerminalName")
	_dascirculatecount.StartTime = field.NewTime(tableName, "StartTime")
	_dascirculatecount.EndTime = field.NewTime(tableName, "EndTime")
	_dascirculatecount.Type = field.NewInt64(tableName, "Type")
	_dascirculatecount.Result = field.NewInt64(tableName, "Result")
	_dascirculatecount.Count = field.NewInt64(tableName, "Count")
	_dascirculatecount.TenantID = field.NewInt64(tableName, "TenantId")

	_dascirculatecount.fillFieldMap()

	return _dascirculatecount
}

type dascirculatecount struct {
	dascirculatecountDo dascirculatecountDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	StartTime     field.Time
	EndTime       field.Time
	Type          field.Int64
	Result        field.Int64
	Count         field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (d dascirculatecount) Table(newTableName string) *dascirculatecount {
	d.dascirculatecountDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dascirculatecount) As(alias string) *dascirculatecount {
	d.dascirculatecountDo.DO = *(d.dascirculatecountDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dascirculatecount) updateTableName(table string) *dascirculatecount {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.TerminalID = field.NewString(table, "TerminalId")
	d.TerminalCode = field.NewString(table, "TerminalCode")
	d.TerminalName = field.NewString(table, "TerminalName")
	d.StartTime = field.NewTime(table, "StartTime")
	d.EndTime = field.NewTime(table, "EndTime")
	d.Type = field.NewInt64(table, "Type")
	d.Result = field.NewInt64(table, "Result")
	d.Count = field.NewInt64(table, "Count")
	d.TenantID = field.NewInt64(table, "TenantId")

	d.fillFieldMap()

	return d
}

func (d *dascirculatecount) WithContext(ctx context.Context) IDascirculatecountDo {
	return d.dascirculatecountDo.WithContext(ctx)
}

func (d dascirculatecount) TableName() string { return d.dascirculatecountDo.TableName() }

func (d dascirculatecount) Alias() string { return d.dascirculatecountDo.Alias() }

func (d *dascirculatecount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dascirculatecount) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["TerminalId"] = d.TerminalID
	d.fieldMap["TerminalCode"] = d.TerminalCode
	d.fieldMap["TerminalName"] = d.TerminalName
	d.fieldMap["StartTime"] = d.StartTime
	d.fieldMap["EndTime"] = d.EndTime
	d.fieldMap["Type"] = d.Type
	d.fieldMap["Result"] = d.Result
	d.fieldMap["Count"] = d.Count
	d.fieldMap["TenantId"] = d.TenantID
}

func (d dascirculatecount) clone(db *gorm.DB) dascirculatecount {
	d.dascirculatecountDo.ReplaceDB(db)
	return d
}

type dascirculatecountDo struct{ gen.DO }

type IDascirculatecountDo interface {
	gen.SubQuery
	Debug() IDascirculatecountDo
	WithContext(ctx context.Context) IDascirculatecountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDascirculatecountDo
	Not(conds ...gen.Condition) IDascirculatecountDo
	Or(conds ...gen.Condition) IDascirculatecountDo
	Select(conds ...field.Expr) IDascirculatecountDo
	Where(conds ...gen.Condition) IDascirculatecountDo
	Order(conds ...field.Expr) IDascirculatecountDo
	Distinct(cols ...field.Expr) IDascirculatecountDo
	Omit(cols ...field.Expr) IDascirculatecountDo
	Join(table schema.Tabler, on ...field.Expr) IDascirculatecountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDascirculatecountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDascirculatecountDo
	Group(cols ...field.Expr) IDascirculatecountDo
	Having(conds ...gen.Condition) IDascirculatecountDo
	Limit(limit int) IDascirculatecountDo
	Offset(offset int) IDascirculatecountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDascirculatecountDo
	Unscoped() IDascirculatecountDo
	Create(values ...*model.Dascirculatecount) error
	CreateInBatches(values []*model.Dascirculatecount, batchSize int) error
	Save(values ...*model.Dascirculatecount) error
	First() (*model.Dascirculatecount, error)
	Take() (*model.Dascirculatecount, error)
	Last() (*model.Dascirculatecount, error)
	Find() ([]*model.Dascirculatecount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dascirculatecount, err error)
	FindInBatches(result *[]*model.Dascirculatecount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dascirculatecount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDascirculatecountDo
	Assign(attrs ...field.AssignExpr) IDascirculatecountDo
	Joins(fields ...field.RelationField) IDascirculatecountDo
	Preload(fields ...field.RelationField) IDascirculatecountDo
	FirstOrInit() (*model.Dascirculatecount, error)
	FirstOrCreate() (*model.Dascirculatecount, error)
	FindByPage(offset int, limit int) (result []*model.Dascirculatecount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDascirculatecountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dascirculatecountDo) Debug() IDascirculatecountDo {
	return d.withDO(d.DO.Debug())
}

func (d dascirculatecountDo) WithContext(ctx context.Context) IDascirculatecountDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dascirculatecountDo) ReadDB() IDascirculatecountDo {
	return d.Clauses(dbresolver.Read)
}

func (d dascirculatecountDo) WriteDB() IDascirculatecountDo {
	return d.Clauses(dbresolver.Write)
}

func (d dascirculatecountDo) Clauses(conds ...clause.Expression) IDascirculatecountDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dascirculatecountDo) Returning(value interface{}, columns ...string) IDascirculatecountDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dascirculatecountDo) Not(conds ...gen.Condition) IDascirculatecountDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dascirculatecountDo) Or(conds ...gen.Condition) IDascirculatecountDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dascirculatecountDo) Select(conds ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dascirculatecountDo) Where(conds ...gen.Condition) IDascirculatecountDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dascirculatecountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDascirculatecountDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dascirculatecountDo) Order(conds ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dascirculatecountDo) Distinct(cols ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dascirculatecountDo) Omit(cols ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dascirculatecountDo) Join(table schema.Tabler, on ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dascirculatecountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dascirculatecountDo) RightJoin(table schema.Tabler, on ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dascirculatecountDo) Group(cols ...field.Expr) IDascirculatecountDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dascirculatecountDo) Having(conds ...gen.Condition) IDascirculatecountDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dascirculatecountDo) Limit(limit int) IDascirculatecountDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dascirculatecountDo) Offset(offset int) IDascirculatecountDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dascirculatecountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDascirculatecountDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dascirculatecountDo) Unscoped() IDascirculatecountDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dascirculatecountDo) Create(values ...*model.Dascirculatecount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dascirculatecountDo) CreateInBatches(values []*model.Dascirculatecount, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dascirculatecountDo) Save(values ...*model.Dascirculatecount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dascirculatecountDo) First() (*model.Dascirculatecount, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dascirculatecount), nil
	}
}

func (d dascirculatecountDo) Take() (*model.Dascirculatecount, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dascirculatecount), nil
	}
}

func (d dascirculatecountDo) Last() (*model.Dascirculatecount, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dascirculatecount), nil
	}
}

func (d dascirculatecountDo) Find() ([]*model.Dascirculatecount, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dascirculatecount), err
}

func (d dascirculatecountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dascirculatecount, err error) {
	buf := make([]*model.Dascirculatecount, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dascirculatecountDo) FindInBatches(result *[]*model.Dascirculatecount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dascirculatecountDo) Attrs(attrs ...field.AssignExpr) IDascirculatecountDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dascirculatecountDo) Assign(attrs ...field.AssignExpr) IDascirculatecountDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dascirculatecountDo) Joins(fields ...field.RelationField) IDascirculatecountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dascirculatecountDo) Preload(fields ...field.RelationField) IDascirculatecountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dascirculatecountDo) FirstOrInit() (*model.Dascirculatecount, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dascirculatecount), nil
	}
}

func (d dascirculatecountDo) FirstOrCreate() (*model.Dascirculatecount, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dascirculatecount), nil
	}
}

func (d dascirculatecountDo) FindByPage(offset int, limit int) (result []*model.Dascirculatecount, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dascirculatecountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dascirculatecountDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dascirculatecountDo) Delete(models ...*model.Dascirculatecount) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dascirculatecountDo) withDO(do gen.Dao) *dascirculatecountDo {
	d.DO = *do.(*gen.DO)
	return d
}
