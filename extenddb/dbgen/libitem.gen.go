// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLibitem(db *gorm.DB) libitem {
	_libitem := libitem{}

	_libitem.libitemDo.UseDB(db)
	_libitem.libitemDo.UseModel(&model.Libitem{})

	tableName := _libitem.libitemDo.TableName()
	_libitem.ALL = field.NewAsterisk(tableName)
	_libitem.ID = field.NewString(tableName, "Id")
	_libitem.CreationTime = field.NewTime(tableName, "CreationTime")
	_libitem.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libitem.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libitem.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libitem.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libitem.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libitem.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libitem.InfoID = field.NewString(tableName, "InfoId")
	_libitem.Title = field.NewString(tableName, "Title")
	_libitem.Author = field.NewString(tableName, "Author")
	_libitem.Barcode = field.NewString(tableName, "Barcode")
	_libitem.IsEnable = field.NewField(tableName, "IsEnable")
	_libitem.CallNo = field.NewString(tableName, "CallNo")
	_libitem.PreCallNo = field.NewString(tableName, "PreCallNo")
	_libitem.CatalogCode = field.NewString(tableName, "CatalogCode")
	_libitem.ItemState = field.NewInt64(tableName, "ItemState")
	_libitem.PressmarkID = field.NewString(tableName, "PressmarkId")
	_libitem.PressmarkName = field.NewString(tableName, "PressmarkName")
	_libitem.LocationID = field.NewString(tableName, "LocationId")
	_libitem.LocationName = field.NewString(tableName, "LocationName")
	_libitem.BookBarcode = field.NewString(tableName, "BookBarcode")
	_libitem.ISBN = field.NewString(tableName, "ISBN")
	_libitem.PubNo = field.NewInt64(tableName, "PubNo")
	_libitem.Publisher = field.NewString(tableName, "Publisher")
	_libitem.PubDate = field.NewString(tableName, "PubDate")
	_libitem.Price = field.NewString(tableName, "Price")
	_libitem.Pages = field.NewString(tableName, "Pages")
	_libitem.Summary = field.NewString(tableName, "Summary")
	_libitem.ItemType = field.NewInt64(tableName, "ItemType")
	_libitem.Remark = field.NewString(tableName, "Remark")
	_libitem.OriginType = field.NewInt64(tableName, "OriginType")
	_libitem.CreateType = field.NewInt64(tableName, "CreateType")
	_libitem.TenantID = field.NewInt64(tableName, "TenantId")

	_libitem.fillFieldMap()

	return _libitem
}

type libitem struct {
	libitemDo libitemDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	InfoID               field.String
	Title                field.String
	Author               field.String
	Barcode              field.String
	IsEnable             field.Field
	CallNo               field.String
	PreCallNo            field.String
	CatalogCode          field.String
	ItemState            field.Int64
	PressmarkID          field.String
	PressmarkName        field.String
	LocationID           field.String
	LocationName         field.String
	BookBarcode          field.String
	ISBN                 field.String
	PubNo                field.Int64
	Publisher            field.String
	PubDate              field.String
	Price                field.String
	Pages                field.String
	Summary              field.String
	ItemType             field.Int64
	Remark               field.String
	OriginType           field.Int64
	CreateType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libitem) Table(newTableName string) *libitem {
	l.libitemDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libitem) As(alias string) *libitem {
	l.libitemDo.DO = *(l.libitemDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libitem) updateTableName(table string) *libitem {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.InfoID = field.NewString(table, "InfoId")
	l.Title = field.NewString(table, "Title")
	l.Author = field.NewString(table, "Author")
	l.Barcode = field.NewString(table, "Barcode")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.CallNo = field.NewString(table, "CallNo")
	l.PreCallNo = field.NewString(table, "PreCallNo")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.ItemState = field.NewInt64(table, "ItemState")
	l.PressmarkID = field.NewString(table, "PressmarkId")
	l.PressmarkName = field.NewString(table, "PressmarkName")
	l.LocationID = field.NewString(table, "LocationId")
	l.LocationName = field.NewString(table, "LocationName")
	l.BookBarcode = field.NewString(table, "BookBarcode")
	l.ISBN = field.NewString(table, "ISBN")
	l.PubNo = field.NewInt64(table, "PubNo")
	l.Publisher = field.NewString(table, "Publisher")
	l.PubDate = field.NewString(table, "PubDate")
	l.Price = field.NewString(table, "Price")
	l.Pages = field.NewString(table, "Pages")
	l.Summary = field.NewString(table, "Summary")
	l.ItemType = field.NewInt64(table, "ItemType")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.CreateType = field.NewInt64(table, "CreateType")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libitem) WithContext(ctx context.Context) ILibitemDo { return l.libitemDo.WithContext(ctx) }

func (l libitem) TableName() string { return l.libitemDo.TableName() }

func (l libitem) Alias() string { return l.libitemDo.Alias() }

func (l *libitem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libitem) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 34)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["InfoId"] = l.InfoID
	l.fieldMap["Title"] = l.Title
	l.fieldMap["Author"] = l.Author
	l.fieldMap["Barcode"] = l.Barcode
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["CallNo"] = l.CallNo
	l.fieldMap["PreCallNo"] = l.PreCallNo
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["ItemState"] = l.ItemState
	l.fieldMap["PressmarkId"] = l.PressmarkID
	l.fieldMap["PressmarkName"] = l.PressmarkName
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["LocationName"] = l.LocationName
	l.fieldMap["BookBarcode"] = l.BookBarcode
	l.fieldMap["ISBN"] = l.ISBN
	l.fieldMap["PubNo"] = l.PubNo
	l.fieldMap["Publisher"] = l.Publisher
	l.fieldMap["PubDate"] = l.PubDate
	l.fieldMap["Price"] = l.Price
	l.fieldMap["Pages"] = l.Pages
	l.fieldMap["Summary"] = l.Summary
	l.fieldMap["ItemType"] = l.ItemType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["CreateType"] = l.CreateType
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libitem) clone(db *gorm.DB) libitem {
	l.libitemDo.ReplaceDB(db)
	return l
}

type libitemDo struct{ gen.DO }

type ILibitemDo interface {
	gen.SubQuery
	Debug() ILibitemDo
	WithContext(ctx context.Context) ILibitemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibitemDo
	Not(conds ...gen.Condition) ILibitemDo
	Or(conds ...gen.Condition) ILibitemDo
	Select(conds ...field.Expr) ILibitemDo
	Where(conds ...gen.Condition) ILibitemDo
	Order(conds ...field.Expr) ILibitemDo
	Distinct(cols ...field.Expr) ILibitemDo
	Omit(cols ...field.Expr) ILibitemDo
	Join(table schema.Tabler, on ...field.Expr) ILibitemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibitemDo
	Group(cols ...field.Expr) ILibitemDo
	Having(conds ...gen.Condition) ILibitemDo
	Limit(limit int) ILibitemDo
	Offset(offset int) ILibitemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemDo
	Unscoped() ILibitemDo
	Create(values ...*model.Libitem) error
	CreateInBatches(values []*model.Libitem, batchSize int) error
	Save(values ...*model.Libitem) error
	First() (*model.Libitem, error)
	Take() (*model.Libitem, error)
	Last() (*model.Libitem, error)
	Find() ([]*model.Libitem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitem, err error)
	FindInBatches(result *[]*model.Libitem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libitem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibitemDo
	Assign(attrs ...field.AssignExpr) ILibitemDo
	Joins(fields ...field.RelationField) ILibitemDo
	Preload(fields ...field.RelationField) ILibitemDo
	FirstOrInit() (*model.Libitem, error)
	FirstOrCreate() (*model.Libitem, error)
	FindByPage(offset int, limit int) (result []*model.Libitem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibitemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libitemDo) Debug() ILibitemDo {
	return l.withDO(l.DO.Debug())
}

func (l libitemDo) WithContext(ctx context.Context) ILibitemDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libitemDo) ReadDB() ILibitemDo {
	return l.Clauses(dbresolver.Read)
}

func (l libitemDo) WriteDB() ILibitemDo {
	return l.Clauses(dbresolver.Write)
}

func (l libitemDo) Clauses(conds ...clause.Expression) ILibitemDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libitemDo) Returning(value interface{}, columns ...string) ILibitemDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libitemDo) Not(conds ...gen.Condition) ILibitemDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libitemDo) Or(conds ...gen.Condition) ILibitemDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libitemDo) Select(conds ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libitemDo) Where(conds ...gen.Condition) ILibitemDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libitemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibitemDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libitemDo) Order(conds ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libitemDo) Distinct(cols ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libitemDo) Omit(cols ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libitemDo) Join(table schema.Tabler, on ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libitemDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libitemDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libitemDo) Group(cols ...field.Expr) ILibitemDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libitemDo) Having(conds ...gen.Condition) ILibitemDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libitemDo) Limit(limit int) ILibitemDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libitemDo) Offset(offset int) ILibitemDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libitemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libitemDo) Unscoped() ILibitemDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libitemDo) Create(values ...*model.Libitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libitemDo) CreateInBatches(values []*model.Libitem, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libitemDo) Save(values ...*model.Libitem) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libitemDo) First() (*model.Libitem, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitem), nil
	}
}

func (l libitemDo) Take() (*model.Libitem, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitem), nil
	}
}

func (l libitemDo) Last() (*model.Libitem, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitem), nil
	}
}

func (l libitemDo) Find() ([]*model.Libitem, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libitem), err
}

func (l libitemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitem, err error) {
	buf := make([]*model.Libitem, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libitemDo) FindInBatches(result *[]*model.Libitem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libitemDo) Attrs(attrs ...field.AssignExpr) ILibitemDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libitemDo) Assign(attrs ...field.AssignExpr) ILibitemDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libitemDo) Joins(fields ...field.RelationField) ILibitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libitemDo) Preload(fields ...field.RelationField) ILibitemDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libitemDo) FirstOrInit() (*model.Libitem, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitem), nil
	}
}

func (l libitemDo) FirstOrCreate() (*model.Libitem, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitem), nil
	}
}

func (l libitemDo) FindByPage(offset int, limit int) (result []*model.Libitem, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libitemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libitemDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libitemDo) Delete(models ...*model.Libitem) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libitemDo) withDO(do gen.Dao) *libitemDo {
	l.DO = *do.(*gen.DO)
	return l
}
