// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newHangfiredistributedlock(db *gorm.DB) hangfiredistributedlock {
	_hangfiredistributedlock := hangfiredistributedlock{}

	_hangfiredistributedlock.hangfiredistributedlockDo.UseDB(db)
	_hangfiredistributedlock.hangfiredistributedlockDo.UseModel(&model.Hangfiredistributedlock{})

	tableName := _hangfiredistributedlock.hangfiredistributedlockDo.TableName()
	_hangfiredistributedlock.ALL = field.NewAsterisk(tableName)
	_hangfiredistributedlock.Resource = field.NewString(tableName, "Resource")
	_hangfiredistributedlock.CreatedAt = field.NewTime(tableName, "CreatedAt")

	_hangfiredistributedlock.fillFieldMap()

	return _hangfiredistributedlock
}

type hangfiredistributedlock struct {
	hangfiredistributedlockDo hangfiredistributedlockDo

	ALL       field.Asterisk
	Resource  field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (h hangfiredistributedlock) Table(newTableName string) *hangfiredistributedlock {
	h.hangfiredistributedlockDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfiredistributedlock) As(alias string) *hangfiredistributedlock {
	h.hangfiredistributedlockDo.DO = *(h.hangfiredistributedlockDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfiredistributedlock) updateTableName(table string) *hangfiredistributedlock {
	h.ALL = field.NewAsterisk(table)
	h.Resource = field.NewString(table, "Resource")
	h.CreatedAt = field.NewTime(table, "CreatedAt")

	h.fillFieldMap()

	return h
}

func (h *hangfiredistributedlock) WithContext(ctx context.Context) IHangfiredistributedlockDo {
	return h.hangfiredistributedlockDo.WithContext(ctx)
}

func (h hangfiredistributedlock) TableName() string { return h.hangfiredistributedlockDo.TableName() }

func (h hangfiredistributedlock) Alias() string { return h.hangfiredistributedlockDo.Alias() }

func (h *hangfiredistributedlock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfiredistributedlock) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 2)
	h.fieldMap["Resource"] = h.Resource
	h.fieldMap["CreatedAt"] = h.CreatedAt
}

func (h hangfiredistributedlock) clone(db *gorm.DB) hangfiredistributedlock {
	h.hangfiredistributedlockDo.ReplaceDB(db)
	return h
}

type hangfiredistributedlockDo struct{ gen.DO }

type IHangfiredistributedlockDo interface {
	gen.SubQuery
	Debug() IHangfiredistributedlockDo
	WithContext(ctx context.Context) IHangfiredistributedlockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfiredistributedlockDo
	Not(conds ...gen.Condition) IHangfiredistributedlockDo
	Or(conds ...gen.Condition) IHangfiredistributedlockDo
	Select(conds ...field.Expr) IHangfiredistributedlockDo
	Where(conds ...gen.Condition) IHangfiredistributedlockDo
	Order(conds ...field.Expr) IHangfiredistributedlockDo
	Distinct(cols ...field.Expr) IHangfiredistributedlockDo
	Omit(cols ...field.Expr) IHangfiredistributedlockDo
	Join(table schema.Tabler, on ...field.Expr) IHangfiredistributedlockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfiredistributedlockDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfiredistributedlockDo
	Group(cols ...field.Expr) IHangfiredistributedlockDo
	Having(conds ...gen.Condition) IHangfiredistributedlockDo
	Limit(limit int) IHangfiredistributedlockDo
	Offset(offset int) IHangfiredistributedlockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfiredistributedlockDo
	Unscoped() IHangfiredistributedlockDo
	Create(values ...*model.Hangfiredistributedlock) error
	CreateInBatches(values []*model.Hangfiredistributedlock, batchSize int) error
	Save(values ...*model.Hangfiredistributedlock) error
	First() (*model.Hangfiredistributedlock, error)
	Take() (*model.Hangfiredistributedlock, error)
	Last() (*model.Hangfiredistributedlock, error)
	Find() ([]*model.Hangfiredistributedlock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfiredistributedlock, err error)
	FindInBatches(result *[]*model.Hangfiredistributedlock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfiredistributedlock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfiredistributedlockDo
	Assign(attrs ...field.AssignExpr) IHangfiredistributedlockDo
	Joins(fields ...field.RelationField) IHangfiredistributedlockDo
	Preload(fields ...field.RelationField) IHangfiredistributedlockDo
	FirstOrInit() (*model.Hangfiredistributedlock, error)
	FirstOrCreate() (*model.Hangfiredistributedlock, error)
	FindByPage(offset int, limit int) (result []*model.Hangfiredistributedlock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfiredistributedlockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfiredistributedlockDo) Debug() IHangfiredistributedlockDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfiredistributedlockDo) WithContext(ctx context.Context) IHangfiredistributedlockDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfiredistributedlockDo) ReadDB() IHangfiredistributedlockDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfiredistributedlockDo) WriteDB() IHangfiredistributedlockDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfiredistributedlockDo) Clauses(conds ...clause.Expression) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfiredistributedlockDo) Returning(value interface{}, columns ...string) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfiredistributedlockDo) Not(conds ...gen.Condition) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfiredistributedlockDo) Or(conds ...gen.Condition) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfiredistributedlockDo) Select(conds ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfiredistributedlockDo) Where(conds ...gen.Condition) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfiredistributedlockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfiredistributedlockDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfiredistributedlockDo) Order(conds ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfiredistributedlockDo) Distinct(cols ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfiredistributedlockDo) Omit(cols ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfiredistributedlockDo) Join(table schema.Tabler, on ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfiredistributedlockDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfiredistributedlockDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfiredistributedlockDo) Group(cols ...field.Expr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfiredistributedlockDo) Having(conds ...gen.Condition) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfiredistributedlockDo) Limit(limit int) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfiredistributedlockDo) Offset(offset int) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfiredistributedlockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfiredistributedlockDo) Unscoped() IHangfiredistributedlockDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfiredistributedlockDo) Create(values ...*model.Hangfiredistributedlock) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfiredistributedlockDo) CreateInBatches(values []*model.Hangfiredistributedlock, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfiredistributedlockDo) Save(values ...*model.Hangfiredistributedlock) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfiredistributedlockDo) First() (*model.Hangfiredistributedlock, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfiredistributedlock), nil
	}
}

func (h hangfiredistributedlockDo) Take() (*model.Hangfiredistributedlock, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfiredistributedlock), nil
	}
}

func (h hangfiredistributedlockDo) Last() (*model.Hangfiredistributedlock, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfiredistributedlock), nil
	}
}

func (h hangfiredistributedlockDo) Find() ([]*model.Hangfiredistributedlock, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfiredistributedlock), err
}

func (h hangfiredistributedlockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfiredistributedlock, err error) {
	buf := make([]*model.Hangfiredistributedlock, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfiredistributedlockDo) FindInBatches(result *[]*model.Hangfiredistributedlock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfiredistributedlockDo) Attrs(attrs ...field.AssignExpr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfiredistributedlockDo) Assign(attrs ...field.AssignExpr) IHangfiredistributedlockDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfiredistributedlockDo) Joins(fields ...field.RelationField) IHangfiredistributedlockDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfiredistributedlockDo) Preload(fields ...field.RelationField) IHangfiredistributedlockDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfiredistributedlockDo) FirstOrInit() (*model.Hangfiredistributedlock, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfiredistributedlock), nil
	}
}

func (h hangfiredistributedlockDo) FirstOrCreate() (*model.Hangfiredistributedlock, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfiredistributedlock), nil
	}
}

func (h hangfiredistributedlockDo) FindByPage(offset int, limit int) (result []*model.Hangfiredistributedlock, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfiredistributedlockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfiredistributedlockDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfiredistributedlockDo) Delete(models ...*model.Hangfiredistributedlock) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfiredistributedlockDo) withDO(do gen.Dao) *hangfiredistributedlockDo {
	h.DO = *do.(*gen.DO)
	return h
}
