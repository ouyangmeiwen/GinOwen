// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newOwenScheduledtask(db *gorm.DB) owenScheduledtask {
	_owenScheduledtask := owenScheduledtask{}

	_owenScheduledtask.owenScheduledtaskDo.UseDB(db)
	_owenScheduledtask.owenScheduledtaskDo.UseModel(&model.OwenScheduledtask{})

	tableName := _owenScheduledtask.owenScheduledtaskDo.TableName()
	_owenScheduledtask.ALL = field.NewAsterisk(tableName)
	_owenScheduledtask.ID = field.NewInt64(tableName, "id")
	_owenScheduledtask.TaskName = field.NewString(tableName, "task_name")
	_owenScheduledtask.ScheduleTime = field.NewTime(tableName, "schedule_time")
	_owenScheduledtask.IntervalSeconds = field.NewInt64(tableName, "interval_seconds")
	_owenScheduledtask.LastRunTime = field.NewTime(tableName, "last_run_time")
	_owenScheduledtask.NextRunTime = field.NewTime(tableName, "next_run_time")
	_owenScheduledtask.Status = field.NewString(tableName, "status")

	_owenScheduledtask.fillFieldMap()

	return _owenScheduledtask
}

type owenScheduledtask struct {
	owenScheduledtaskDo owenScheduledtaskDo

	ALL             field.Asterisk
	ID              field.Int64
	TaskName        field.String
	ScheduleTime    field.Time
	IntervalSeconds field.Int64
	LastRunTime     field.Time
	NextRunTime     field.Time
	Status          field.String

	fieldMap map[string]field.Expr
}

func (o owenScheduledtask) Table(newTableName string) *owenScheduledtask {
	o.owenScheduledtaskDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o owenScheduledtask) As(alias string) *owenScheduledtask {
	o.owenScheduledtaskDo.DO = *(o.owenScheduledtaskDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *owenScheduledtask) updateTableName(table string) *owenScheduledtask {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.TaskName = field.NewString(table, "task_name")
	o.ScheduleTime = field.NewTime(table, "schedule_time")
	o.IntervalSeconds = field.NewInt64(table, "interval_seconds")
	o.LastRunTime = field.NewTime(table, "last_run_time")
	o.NextRunTime = field.NewTime(table, "next_run_time")
	o.Status = field.NewString(table, "status")

	o.fillFieldMap()

	return o
}

func (o *owenScheduledtask) WithContext(ctx context.Context) IOwenScheduledtaskDo {
	return o.owenScheduledtaskDo.WithContext(ctx)
}

func (o owenScheduledtask) TableName() string { return o.owenScheduledtaskDo.TableName() }

func (o owenScheduledtask) Alias() string { return o.owenScheduledtaskDo.Alias() }

func (o *owenScheduledtask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *owenScheduledtask) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["task_name"] = o.TaskName
	o.fieldMap["schedule_time"] = o.ScheduleTime
	o.fieldMap["interval_seconds"] = o.IntervalSeconds
	o.fieldMap["last_run_time"] = o.LastRunTime
	o.fieldMap["next_run_time"] = o.NextRunTime
	o.fieldMap["status"] = o.Status
}

func (o owenScheduledtask) clone(db *gorm.DB) owenScheduledtask {
	o.owenScheduledtaskDo.ReplaceDB(db)
	return o
}

type owenScheduledtaskDo struct{ gen.DO }

type IOwenScheduledtaskDo interface {
	gen.SubQuery
	Debug() IOwenScheduledtaskDo
	WithContext(ctx context.Context) IOwenScheduledtaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOwenScheduledtaskDo
	Not(conds ...gen.Condition) IOwenScheduledtaskDo
	Or(conds ...gen.Condition) IOwenScheduledtaskDo
	Select(conds ...field.Expr) IOwenScheduledtaskDo
	Where(conds ...gen.Condition) IOwenScheduledtaskDo
	Order(conds ...field.Expr) IOwenScheduledtaskDo
	Distinct(cols ...field.Expr) IOwenScheduledtaskDo
	Omit(cols ...field.Expr) IOwenScheduledtaskDo
	Join(table schema.Tabler, on ...field.Expr) IOwenScheduledtaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOwenScheduledtaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOwenScheduledtaskDo
	Group(cols ...field.Expr) IOwenScheduledtaskDo
	Having(conds ...gen.Condition) IOwenScheduledtaskDo
	Limit(limit int) IOwenScheduledtaskDo
	Offset(offset int) IOwenScheduledtaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenScheduledtaskDo
	Unscoped() IOwenScheduledtaskDo
	Create(values ...*model.OwenScheduledtask) error
	CreateInBatches(values []*model.OwenScheduledtask, batchSize int) error
	Save(values ...*model.OwenScheduledtask) error
	First() (*model.OwenScheduledtask, error)
	Take() (*model.OwenScheduledtask, error)
	Last() (*model.OwenScheduledtask, error)
	Find() ([]*model.OwenScheduledtask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenScheduledtask, err error)
	FindInBatches(result *[]*model.OwenScheduledtask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OwenScheduledtask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOwenScheduledtaskDo
	Assign(attrs ...field.AssignExpr) IOwenScheduledtaskDo
	Joins(fields ...field.RelationField) IOwenScheduledtaskDo
	Preload(fields ...field.RelationField) IOwenScheduledtaskDo
	FirstOrInit() (*model.OwenScheduledtask, error)
	FirstOrCreate() (*model.OwenScheduledtask, error)
	FindByPage(offset int, limit int) (result []*model.OwenScheduledtask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOwenScheduledtaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o owenScheduledtaskDo) Debug() IOwenScheduledtaskDo {
	return o.withDO(o.DO.Debug())
}

func (o owenScheduledtaskDo) WithContext(ctx context.Context) IOwenScheduledtaskDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o owenScheduledtaskDo) ReadDB() IOwenScheduledtaskDo {
	return o.Clauses(dbresolver.Read)
}

func (o owenScheduledtaskDo) WriteDB() IOwenScheduledtaskDo {
	return o.Clauses(dbresolver.Write)
}

func (o owenScheduledtaskDo) Clauses(conds ...clause.Expression) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o owenScheduledtaskDo) Returning(value interface{}, columns ...string) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o owenScheduledtaskDo) Not(conds ...gen.Condition) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o owenScheduledtaskDo) Or(conds ...gen.Condition) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o owenScheduledtaskDo) Select(conds ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o owenScheduledtaskDo) Where(conds ...gen.Condition) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o owenScheduledtaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOwenScheduledtaskDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o owenScheduledtaskDo) Order(conds ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o owenScheduledtaskDo) Distinct(cols ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o owenScheduledtaskDo) Omit(cols ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o owenScheduledtaskDo) Join(table schema.Tabler, on ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o owenScheduledtaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o owenScheduledtaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o owenScheduledtaskDo) Group(cols ...field.Expr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o owenScheduledtaskDo) Having(conds ...gen.Condition) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o owenScheduledtaskDo) Limit(limit int) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o owenScheduledtaskDo) Offset(offset int) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o owenScheduledtaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o owenScheduledtaskDo) Unscoped() IOwenScheduledtaskDo {
	return o.withDO(o.DO.Unscoped())
}

func (o owenScheduledtaskDo) Create(values ...*model.OwenScheduledtask) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o owenScheduledtaskDo) CreateInBatches(values []*model.OwenScheduledtask, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o owenScheduledtaskDo) Save(values ...*model.OwenScheduledtask) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o owenScheduledtaskDo) First() (*model.OwenScheduledtask, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenScheduledtask), nil
	}
}

func (o owenScheduledtaskDo) Take() (*model.OwenScheduledtask, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenScheduledtask), nil
	}
}

func (o owenScheduledtaskDo) Last() (*model.OwenScheduledtask, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenScheduledtask), nil
	}
}

func (o owenScheduledtaskDo) Find() ([]*model.OwenScheduledtask, error) {
	result, err := o.DO.Find()
	return result.([]*model.OwenScheduledtask), err
}

func (o owenScheduledtaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OwenScheduledtask, err error) {
	buf := make([]*model.OwenScheduledtask, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o owenScheduledtaskDo) FindInBatches(result *[]*model.OwenScheduledtask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o owenScheduledtaskDo) Attrs(attrs ...field.AssignExpr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o owenScheduledtaskDo) Assign(attrs ...field.AssignExpr) IOwenScheduledtaskDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o owenScheduledtaskDo) Joins(fields ...field.RelationField) IOwenScheduledtaskDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o owenScheduledtaskDo) Preload(fields ...field.RelationField) IOwenScheduledtaskDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o owenScheduledtaskDo) FirstOrInit() (*model.OwenScheduledtask, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenScheduledtask), nil
	}
}

func (o owenScheduledtaskDo) FirstOrCreate() (*model.OwenScheduledtask, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OwenScheduledtask), nil
	}
}

func (o owenScheduledtaskDo) FindByPage(offset int, limit int) (result []*model.OwenScheduledtask, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o owenScheduledtaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o owenScheduledtaskDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o owenScheduledtaskDo) Delete(models ...*model.OwenScheduledtask) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *owenScheduledtaskDo) withDO(do gen.Dao) *owenScheduledtaskDo {
	o.DO = *do.(*gen.DO)
	return o
}
