// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSysfaceofflineuser(db *gorm.DB) sysfaceofflineuser {
	_sysfaceofflineuser := sysfaceofflineuser{}

	_sysfaceofflineuser.sysfaceofflineuserDo.UseDB(db)
	_sysfaceofflineuser.sysfaceofflineuserDo.UseModel(&model.Sysfaceofflineuser{})

	tableName := _sysfaceofflineuser.sysfaceofflineuserDo.TableName()
	_sysfaceofflineuser.ALL = field.NewAsterisk(tableName)
	_sysfaceofflineuser.ID = field.NewString(tableName, "Id")
	_sysfaceofflineuser.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysfaceofflineuser.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysfaceofflineuser.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysfaceofflineuser.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysfaceofflineuser.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysfaceofflineuser.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysfaceofflineuser.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysfaceofflineuser.GroupID = field.NewString(tableName, "GroupId")
	_sysfaceofflineuser.UserID = field.NewString(tableName, "UserId")
	_sysfaceofflineuser.UserInfo = field.NewString(tableName, "UserInfo")
	_sysfaceofflineuser.Image = field.NewString(tableName, "Image")
	_sysfaceofflineuser.Remark = field.NewString(tableName, "Remark")

	_sysfaceofflineuser.fillFieldMap()

	return _sysfaceofflineuser
}

type sysfaceofflineuser struct {
	sysfaceofflineuserDo sysfaceofflineuserDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	GroupID              field.String
	UserID               field.String
	UserInfo             field.String
	Image                field.String
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (s sysfaceofflineuser) Table(newTableName string) *sysfaceofflineuser {
	s.sysfaceofflineuserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysfaceofflineuser) As(alias string) *sysfaceofflineuser {
	s.sysfaceofflineuserDo.DO = *(s.sysfaceofflineuserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysfaceofflineuser) updateTableName(table string) *sysfaceofflineuser {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.GroupID = field.NewString(table, "GroupId")
	s.UserID = field.NewString(table, "UserId")
	s.UserInfo = field.NewString(table, "UserInfo")
	s.Image = field.NewString(table, "Image")
	s.Remark = field.NewString(table, "Remark")

	s.fillFieldMap()

	return s
}

func (s *sysfaceofflineuser) WithContext(ctx context.Context) ISysfaceofflineuserDo {
	return s.sysfaceofflineuserDo.WithContext(ctx)
}

func (s sysfaceofflineuser) TableName() string { return s.sysfaceofflineuserDo.TableName() }

func (s sysfaceofflineuser) Alias() string { return s.sysfaceofflineuserDo.Alias() }

func (s *sysfaceofflineuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysfaceofflineuser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["GroupId"] = s.GroupID
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["UserInfo"] = s.UserInfo
	s.fieldMap["Image"] = s.Image
	s.fieldMap["Remark"] = s.Remark
}

func (s sysfaceofflineuser) clone(db *gorm.DB) sysfaceofflineuser {
	s.sysfaceofflineuserDo.ReplaceDB(db)
	return s
}

type sysfaceofflineuserDo struct{ gen.DO }

type ISysfaceofflineuserDo interface {
	gen.SubQuery
	Debug() ISysfaceofflineuserDo
	WithContext(ctx context.Context) ISysfaceofflineuserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysfaceofflineuserDo
	Not(conds ...gen.Condition) ISysfaceofflineuserDo
	Or(conds ...gen.Condition) ISysfaceofflineuserDo
	Select(conds ...field.Expr) ISysfaceofflineuserDo
	Where(conds ...gen.Condition) ISysfaceofflineuserDo
	Order(conds ...field.Expr) ISysfaceofflineuserDo
	Distinct(cols ...field.Expr) ISysfaceofflineuserDo
	Omit(cols ...field.Expr) ISysfaceofflineuserDo
	Join(table schema.Tabler, on ...field.Expr) ISysfaceofflineuserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflineuserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflineuserDo
	Group(cols ...field.Expr) ISysfaceofflineuserDo
	Having(conds ...gen.Condition) ISysfaceofflineuserDo
	Limit(limit int) ISysfaceofflineuserDo
	Offset(offset int) ISysfaceofflineuserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceofflineuserDo
	Unscoped() ISysfaceofflineuserDo
	Create(values ...*model.Sysfaceofflineuser) error
	CreateInBatches(values []*model.Sysfaceofflineuser, batchSize int) error
	Save(values ...*model.Sysfaceofflineuser) error
	First() (*model.Sysfaceofflineuser, error)
	Take() (*model.Sysfaceofflineuser, error)
	Last() (*model.Sysfaceofflineuser, error)
	Find() ([]*model.Sysfaceofflineuser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceofflineuser, err error)
	FindInBatches(result *[]*model.Sysfaceofflineuser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysfaceofflineuser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysfaceofflineuserDo
	Assign(attrs ...field.AssignExpr) ISysfaceofflineuserDo
	Joins(fields ...field.RelationField) ISysfaceofflineuserDo
	Preload(fields ...field.RelationField) ISysfaceofflineuserDo
	FirstOrInit() (*model.Sysfaceofflineuser, error)
	FirstOrCreate() (*model.Sysfaceofflineuser, error)
	FindByPage(offset int, limit int) (result []*model.Sysfaceofflineuser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysfaceofflineuserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysfaceofflineuserDo) Debug() ISysfaceofflineuserDo {
	return s.withDO(s.DO.Debug())
}

func (s sysfaceofflineuserDo) WithContext(ctx context.Context) ISysfaceofflineuserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysfaceofflineuserDo) ReadDB() ISysfaceofflineuserDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysfaceofflineuserDo) WriteDB() ISysfaceofflineuserDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysfaceofflineuserDo) Clauses(conds ...clause.Expression) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysfaceofflineuserDo) Returning(value interface{}, columns ...string) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysfaceofflineuserDo) Not(conds ...gen.Condition) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysfaceofflineuserDo) Or(conds ...gen.Condition) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysfaceofflineuserDo) Select(conds ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysfaceofflineuserDo) Where(conds ...gen.Condition) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysfaceofflineuserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysfaceofflineuserDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysfaceofflineuserDo) Order(conds ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysfaceofflineuserDo) Distinct(cols ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysfaceofflineuserDo) Omit(cols ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysfaceofflineuserDo) Join(table schema.Tabler, on ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysfaceofflineuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysfaceofflineuserDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysfaceofflineuserDo) Group(cols ...field.Expr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysfaceofflineuserDo) Having(conds ...gen.Condition) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysfaceofflineuserDo) Limit(limit int) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysfaceofflineuserDo) Offset(offset int) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysfaceofflineuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysfaceofflineuserDo) Unscoped() ISysfaceofflineuserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysfaceofflineuserDo) Create(values ...*model.Sysfaceofflineuser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysfaceofflineuserDo) CreateInBatches(values []*model.Sysfaceofflineuser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysfaceofflineuserDo) Save(values ...*model.Sysfaceofflineuser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysfaceofflineuserDo) First() (*model.Sysfaceofflineuser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflineuser), nil
	}
}

func (s sysfaceofflineuserDo) Take() (*model.Sysfaceofflineuser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflineuser), nil
	}
}

func (s sysfaceofflineuserDo) Last() (*model.Sysfaceofflineuser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflineuser), nil
	}
}

func (s sysfaceofflineuserDo) Find() ([]*model.Sysfaceofflineuser, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysfaceofflineuser), err
}

func (s sysfaceofflineuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceofflineuser, err error) {
	buf := make([]*model.Sysfaceofflineuser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysfaceofflineuserDo) FindInBatches(result *[]*model.Sysfaceofflineuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysfaceofflineuserDo) Attrs(attrs ...field.AssignExpr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysfaceofflineuserDo) Assign(attrs ...field.AssignExpr) ISysfaceofflineuserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysfaceofflineuserDo) Joins(fields ...field.RelationField) ISysfaceofflineuserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysfaceofflineuserDo) Preload(fields ...field.RelationField) ISysfaceofflineuserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysfaceofflineuserDo) FirstOrInit() (*model.Sysfaceofflineuser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflineuser), nil
	}
}

func (s sysfaceofflineuserDo) FirstOrCreate() (*model.Sysfaceofflineuser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflineuser), nil
	}
}

func (s sysfaceofflineuserDo) FindByPage(offset int, limit int) (result []*model.Sysfaceofflineuser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysfaceofflineuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysfaceofflineuserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysfaceofflineuserDo) Delete(models ...*model.Sysfaceofflineuser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysfaceofflineuserDo) withDO(do gen.Dao) *sysfaceofflineuserDo {
	s.DO = *do.(*gen.DO)
	return s
}
