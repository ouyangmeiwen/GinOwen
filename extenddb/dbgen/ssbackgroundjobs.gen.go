// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSsbackgroundjob(db *gorm.DB) ssbackgroundjob {
	_ssbackgroundjob := ssbackgroundjob{}

	_ssbackgroundjob.ssbackgroundjobDo.UseDB(db)
	_ssbackgroundjob.ssbackgroundjobDo.UseModel(&model.Ssbackgroundjob{})

	tableName := _ssbackgroundjob.ssbackgroundjobDo.TableName()
	_ssbackgroundjob.ALL = field.NewAsterisk(tableName)
	_ssbackgroundjob.ID = field.NewInt64(tableName, "Id")
	_ssbackgroundjob.CreationTime = field.NewTime(tableName, "CreationTime")
	_ssbackgroundjob.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_ssbackgroundjob.JobType = field.NewString(tableName, "JobType")
	_ssbackgroundjob.JobArgs = field.NewString(tableName, "JobArgs")
	_ssbackgroundjob.TryCount = field.NewInt64(tableName, "TryCount")
	_ssbackgroundjob.NextTryTime = field.NewTime(tableName, "NextTryTime")
	_ssbackgroundjob.LastTryTime = field.NewTime(tableName, "LastTryTime")
	_ssbackgroundjob.IsAbandoned = field.NewField(tableName, "IsAbandoned")
	_ssbackgroundjob.Priority = field.NewInt64(tableName, "Priority")

	_ssbackgroundjob.fillFieldMap()

	return _ssbackgroundjob
}

type ssbackgroundjob struct {
	ssbackgroundjobDo ssbackgroundjobDo

	ALL           field.Asterisk
	ID            field.Int64
	CreationTime  field.Time
	CreatorUserID field.Int64
	JobType       field.String
	JobArgs       field.String
	TryCount      field.Int64
	NextTryTime   field.Time
	LastTryTime   field.Time
	IsAbandoned   field.Field
	Priority      field.Int64

	fieldMap map[string]field.Expr
}

func (s ssbackgroundjob) Table(newTableName string) *ssbackgroundjob {
	s.ssbackgroundjobDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s ssbackgroundjob) As(alias string) *ssbackgroundjob {
	s.ssbackgroundjobDo.DO = *(s.ssbackgroundjobDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *ssbackgroundjob) updateTableName(table string) *ssbackgroundjob {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.JobType = field.NewString(table, "JobType")
	s.JobArgs = field.NewString(table, "JobArgs")
	s.TryCount = field.NewInt64(table, "TryCount")
	s.NextTryTime = field.NewTime(table, "NextTryTime")
	s.LastTryTime = field.NewTime(table, "LastTryTime")
	s.IsAbandoned = field.NewField(table, "IsAbandoned")
	s.Priority = field.NewInt64(table, "Priority")

	s.fillFieldMap()

	return s
}

func (s *ssbackgroundjob) WithContext(ctx context.Context) ISsbackgroundjobDo {
	return s.ssbackgroundjobDo.WithContext(ctx)
}

func (s ssbackgroundjob) TableName() string { return s.ssbackgroundjobDo.TableName() }

func (s ssbackgroundjob) Alias() string { return s.ssbackgroundjobDo.Alias() }

func (s *ssbackgroundjob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *ssbackgroundjob) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["JobType"] = s.JobType
	s.fieldMap["JobArgs"] = s.JobArgs
	s.fieldMap["TryCount"] = s.TryCount
	s.fieldMap["NextTryTime"] = s.NextTryTime
	s.fieldMap["LastTryTime"] = s.LastTryTime
	s.fieldMap["IsAbandoned"] = s.IsAbandoned
	s.fieldMap["Priority"] = s.Priority
}

func (s ssbackgroundjob) clone(db *gorm.DB) ssbackgroundjob {
	s.ssbackgroundjobDo.ReplaceDB(db)
	return s
}

type ssbackgroundjobDo struct{ gen.DO }

type ISsbackgroundjobDo interface {
	gen.SubQuery
	Debug() ISsbackgroundjobDo
	WithContext(ctx context.Context) ISsbackgroundjobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISsbackgroundjobDo
	Not(conds ...gen.Condition) ISsbackgroundjobDo
	Or(conds ...gen.Condition) ISsbackgroundjobDo
	Select(conds ...field.Expr) ISsbackgroundjobDo
	Where(conds ...gen.Condition) ISsbackgroundjobDo
	Order(conds ...field.Expr) ISsbackgroundjobDo
	Distinct(cols ...field.Expr) ISsbackgroundjobDo
	Omit(cols ...field.Expr) ISsbackgroundjobDo
	Join(table schema.Tabler, on ...field.Expr) ISsbackgroundjobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISsbackgroundjobDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISsbackgroundjobDo
	Group(cols ...field.Expr) ISsbackgroundjobDo
	Having(conds ...gen.Condition) ISsbackgroundjobDo
	Limit(limit int) ISsbackgroundjobDo
	Offset(offset int) ISsbackgroundjobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISsbackgroundjobDo
	Unscoped() ISsbackgroundjobDo
	Create(values ...*model.Ssbackgroundjob) error
	CreateInBatches(values []*model.Ssbackgroundjob, batchSize int) error
	Save(values ...*model.Ssbackgroundjob) error
	First() (*model.Ssbackgroundjob, error)
	Take() (*model.Ssbackgroundjob, error)
	Last() (*model.Ssbackgroundjob, error)
	Find() ([]*model.Ssbackgroundjob, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ssbackgroundjob, err error)
	FindInBatches(result *[]*model.Ssbackgroundjob, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Ssbackgroundjob) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISsbackgroundjobDo
	Assign(attrs ...field.AssignExpr) ISsbackgroundjobDo
	Joins(fields ...field.RelationField) ISsbackgroundjobDo
	Preload(fields ...field.RelationField) ISsbackgroundjobDo
	FirstOrInit() (*model.Ssbackgroundjob, error)
	FirstOrCreate() (*model.Ssbackgroundjob, error)
	FindByPage(offset int, limit int) (result []*model.Ssbackgroundjob, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISsbackgroundjobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s ssbackgroundjobDo) Debug() ISsbackgroundjobDo {
	return s.withDO(s.DO.Debug())
}

func (s ssbackgroundjobDo) WithContext(ctx context.Context) ISsbackgroundjobDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s ssbackgroundjobDo) ReadDB() ISsbackgroundjobDo {
	return s.Clauses(dbresolver.Read)
}

func (s ssbackgroundjobDo) WriteDB() ISsbackgroundjobDo {
	return s.Clauses(dbresolver.Write)
}

func (s ssbackgroundjobDo) Clauses(conds ...clause.Expression) ISsbackgroundjobDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s ssbackgroundjobDo) Returning(value interface{}, columns ...string) ISsbackgroundjobDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s ssbackgroundjobDo) Not(conds ...gen.Condition) ISsbackgroundjobDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s ssbackgroundjobDo) Or(conds ...gen.Condition) ISsbackgroundjobDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s ssbackgroundjobDo) Select(conds ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s ssbackgroundjobDo) Where(conds ...gen.Condition) ISsbackgroundjobDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s ssbackgroundjobDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISsbackgroundjobDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s ssbackgroundjobDo) Order(conds ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s ssbackgroundjobDo) Distinct(cols ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s ssbackgroundjobDo) Omit(cols ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s ssbackgroundjobDo) Join(table schema.Tabler, on ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s ssbackgroundjobDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s ssbackgroundjobDo) RightJoin(table schema.Tabler, on ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s ssbackgroundjobDo) Group(cols ...field.Expr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s ssbackgroundjobDo) Having(conds ...gen.Condition) ISsbackgroundjobDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s ssbackgroundjobDo) Limit(limit int) ISsbackgroundjobDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s ssbackgroundjobDo) Offset(offset int) ISsbackgroundjobDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s ssbackgroundjobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISsbackgroundjobDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s ssbackgroundjobDo) Unscoped() ISsbackgroundjobDo {
	return s.withDO(s.DO.Unscoped())
}

func (s ssbackgroundjobDo) Create(values ...*model.Ssbackgroundjob) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s ssbackgroundjobDo) CreateInBatches(values []*model.Ssbackgroundjob, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s ssbackgroundjobDo) Save(values ...*model.Ssbackgroundjob) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s ssbackgroundjobDo) First() (*model.Ssbackgroundjob, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ssbackgroundjob), nil
	}
}

func (s ssbackgroundjobDo) Take() (*model.Ssbackgroundjob, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ssbackgroundjob), nil
	}
}

func (s ssbackgroundjobDo) Last() (*model.Ssbackgroundjob, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ssbackgroundjob), nil
	}
}

func (s ssbackgroundjobDo) Find() ([]*model.Ssbackgroundjob, error) {
	result, err := s.DO.Find()
	return result.([]*model.Ssbackgroundjob), err
}

func (s ssbackgroundjobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ssbackgroundjob, err error) {
	buf := make([]*model.Ssbackgroundjob, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s ssbackgroundjobDo) FindInBatches(result *[]*model.Ssbackgroundjob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s ssbackgroundjobDo) Attrs(attrs ...field.AssignExpr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s ssbackgroundjobDo) Assign(attrs ...field.AssignExpr) ISsbackgroundjobDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s ssbackgroundjobDo) Joins(fields ...field.RelationField) ISsbackgroundjobDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s ssbackgroundjobDo) Preload(fields ...field.RelationField) ISsbackgroundjobDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s ssbackgroundjobDo) FirstOrInit() (*model.Ssbackgroundjob, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ssbackgroundjob), nil
	}
}

func (s ssbackgroundjobDo) FirstOrCreate() (*model.Ssbackgroundjob, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ssbackgroundjob), nil
	}
}

func (s ssbackgroundjobDo) FindByPage(offset int, limit int) (result []*model.Ssbackgroundjob, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s ssbackgroundjobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s ssbackgroundjobDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s ssbackgroundjobDo) Delete(models ...*model.Ssbackgroundjob) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *ssbackgroundjobDo) withDO(do gen.Dao) *ssbackgroundjobDo {
	s.DO = *do.(*gen.DO)
	return s
}
