// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newSystasklist(db *gorm.DB) systasklist {
	_systasklist := systasklist{}

	_systasklist.systasklistDo.UseDB(db)
	_systasklist.systasklistDo.UseModel(&model.Systasklist{})

	tableName := _systasklist.systasklistDo.TableName()
	_systasklist.ALL = field.NewAsterisk(tableName)
	_systasklist.ID = field.NewString(tableName, "Id")
	_systasklist.CreationTime = field.NewTime(tableName, "CreationTime")
	_systasklist.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_systasklist.TaskName = field.NewString(tableName, "TaskName")
	_systasklist.CronExpression = field.NewString(tableName, "CronExpression")
	_systasklist.AssemblyName = field.NewString(tableName, "AssemblyName")
	_systasklist.ClassName = field.NewString(tableName, "ClassName")
	_systasklist.TaskType = field.NewInt64(tableName, "TaskType")
	_systasklist.Order = field.NewInt64(tableName, "Order")
	_systasklist.FilePath = field.NewString(tableName, "FilePath")
	_systasklist.OrderBy = field.NewString(tableName, "OrderBy")
	_systasklist.LastExecTime = field.NewTime(tableName, "LastExecTime")
	_systasklist.NextExecTime = field.NewTime(tableName, "NextExecTime")
	_systasklist.PlanExecTime = field.NewTime(tableName, "PlanExecTime")
	_systasklist.TaskStatus = field.NewInt64(tableName, "TaskStatus")
	_systasklist.TaskParams = field.NewString(tableName, "TaskParams")
	_systasklist.Remark = field.NewString(tableName, "Remark")
	_systasklist.TenantID = field.NewInt64(tableName, "TenantId")

	_systasklist.fillFieldMap()

	return _systasklist
}

type systasklist struct {
	systasklistDo systasklistDo

	ALL            field.Asterisk
	ID             field.String
	CreationTime   field.Time
	CreatorUserID  field.Int64
	TaskName       field.String
	CronExpression field.String
	AssemblyName   field.String
	ClassName      field.String
	TaskType       field.Int64
	Order          field.Int64
	FilePath       field.String
	OrderBy        field.String
	LastExecTime   field.Time
	NextExecTime   field.Time
	PlanExecTime   field.Time
	TaskStatus     field.Int64
	TaskParams     field.String
	Remark         field.String
	TenantID       field.Int64

	fieldMap map[string]field.Expr
}

func (s systasklist) Table(newTableName string) *systasklist {
	s.systasklistDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systasklist) As(alias string) *systasklist {
	s.systasklistDo.DO = *(s.systasklistDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systasklist) updateTableName(table string) *systasklist {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.TaskName = field.NewString(table, "TaskName")
	s.CronExpression = field.NewString(table, "CronExpression")
	s.AssemblyName = field.NewString(table, "AssemblyName")
	s.ClassName = field.NewString(table, "ClassName")
	s.TaskType = field.NewInt64(table, "TaskType")
	s.Order = field.NewInt64(table, "Order")
	s.FilePath = field.NewString(table, "FilePath")
	s.OrderBy = field.NewString(table, "OrderBy")
	s.LastExecTime = field.NewTime(table, "LastExecTime")
	s.NextExecTime = field.NewTime(table, "NextExecTime")
	s.PlanExecTime = field.NewTime(table, "PlanExecTime")
	s.TaskStatus = field.NewInt64(table, "TaskStatus")
	s.TaskParams = field.NewString(table, "TaskParams")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *systasklist) WithContext(ctx context.Context) ISystasklistDo {
	return s.systasklistDo.WithContext(ctx)
}

func (s systasklist) TableName() string { return s.systasklistDo.TableName() }

func (s systasklist) Alias() string { return s.systasklistDo.Alias() }

func (s *systasklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systasklist) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 18)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["TaskName"] = s.TaskName
	s.fieldMap["CronExpression"] = s.CronExpression
	s.fieldMap["AssemblyName"] = s.AssemblyName
	s.fieldMap["ClassName"] = s.ClassName
	s.fieldMap["TaskType"] = s.TaskType
	s.fieldMap["Order"] = s.Order
	s.fieldMap["FilePath"] = s.FilePath
	s.fieldMap["OrderBy"] = s.OrderBy
	s.fieldMap["LastExecTime"] = s.LastExecTime
	s.fieldMap["NextExecTime"] = s.NextExecTime
	s.fieldMap["PlanExecTime"] = s.PlanExecTime
	s.fieldMap["TaskStatus"] = s.TaskStatus
	s.fieldMap["TaskParams"] = s.TaskParams
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s systasklist) clone(db *gorm.DB) systasklist {
	s.systasklistDo.ReplaceDB(db)
	return s
}

type systasklistDo struct{ gen.DO }

type ISystasklistDo interface {
	gen.SubQuery
	Debug() ISystasklistDo
	WithContext(ctx context.Context) ISystasklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystasklistDo
	Not(conds ...gen.Condition) ISystasklistDo
	Or(conds ...gen.Condition) ISystasklistDo
	Select(conds ...field.Expr) ISystasklistDo
	Where(conds ...gen.Condition) ISystasklistDo
	Order(conds ...field.Expr) ISystasklistDo
	Distinct(cols ...field.Expr) ISystasklistDo
	Omit(cols ...field.Expr) ISystasklistDo
	Join(table schema.Tabler, on ...field.Expr) ISystasklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystasklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystasklistDo
	Group(cols ...field.Expr) ISystasklistDo
	Having(conds ...gen.Condition) ISystasklistDo
	Limit(limit int) ISystasklistDo
	Offset(offset int) ISystasklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystasklistDo
	Unscoped() ISystasklistDo
	Create(values ...*model.Systasklist) error
	CreateInBatches(values []*model.Systasklist, batchSize int) error
	Save(values ...*model.Systasklist) error
	First() (*model.Systasklist, error)
	Take() (*model.Systasklist, error)
	Last() (*model.Systasklist, error)
	Find() ([]*model.Systasklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Systasklist, err error)
	FindInBatches(result *[]*model.Systasklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Systasklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystasklistDo
	Assign(attrs ...field.AssignExpr) ISystasklistDo
	Joins(fields ...field.RelationField) ISystasklistDo
	Preload(fields ...field.RelationField) ISystasklistDo
	FirstOrInit() (*model.Systasklist, error)
	FirstOrCreate() (*model.Systasklist, error)
	FindByPage(offset int, limit int) (result []*model.Systasklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystasklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systasklistDo) Debug() ISystasklistDo {
	return s.withDO(s.DO.Debug())
}

func (s systasklistDo) WithContext(ctx context.Context) ISystasklistDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systasklistDo) ReadDB() ISystasklistDo {
	return s.Clauses(dbresolver.Read)
}

func (s systasklistDo) WriteDB() ISystasklistDo {
	return s.Clauses(dbresolver.Write)
}

func (s systasklistDo) Clauses(conds ...clause.Expression) ISystasklistDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systasklistDo) Returning(value interface{}, columns ...string) ISystasklistDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systasklistDo) Not(conds ...gen.Condition) ISystasklistDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systasklistDo) Or(conds ...gen.Condition) ISystasklistDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systasklistDo) Select(conds ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systasklistDo) Where(conds ...gen.Condition) ISystasklistDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systasklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystasklistDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systasklistDo) Order(conds ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systasklistDo) Distinct(cols ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systasklistDo) Omit(cols ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systasklistDo) Join(table schema.Tabler, on ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systasklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systasklistDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systasklistDo) Group(cols ...field.Expr) ISystasklistDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systasklistDo) Having(conds ...gen.Condition) ISystasklistDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systasklistDo) Limit(limit int) ISystasklistDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systasklistDo) Offset(offset int) ISystasklistDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systasklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystasklistDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systasklistDo) Unscoped() ISystasklistDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systasklistDo) Create(values ...*model.Systasklist) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systasklistDo) CreateInBatches(values []*model.Systasklist, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systasklistDo) Save(values ...*model.Systasklist) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systasklistDo) First() (*model.Systasklist, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systasklist), nil
	}
}

func (s systasklistDo) Take() (*model.Systasklist, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systasklist), nil
	}
}

func (s systasklistDo) Last() (*model.Systasklist, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systasklist), nil
	}
}

func (s systasklistDo) Find() ([]*model.Systasklist, error) {
	result, err := s.DO.Find()
	return result.([]*model.Systasklist), err
}

func (s systasklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Systasklist, err error) {
	buf := make([]*model.Systasklist, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systasklistDo) FindInBatches(result *[]*model.Systasklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systasklistDo) Attrs(attrs ...field.AssignExpr) ISystasklistDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systasklistDo) Assign(attrs ...field.AssignExpr) ISystasklistDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systasklistDo) Joins(fields ...field.RelationField) ISystasklistDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systasklistDo) Preload(fields ...field.RelationField) ISystasklistDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systasklistDo) FirstOrInit() (*model.Systasklist, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systasklist), nil
	}
}

func (s systasklistDo) FirstOrCreate() (*model.Systasklist, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Systasklist), nil
	}
}

func (s systasklistDo) FindByPage(offset int, limit int) (result []*model.Systasklist, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systasklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systasklistDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systasklistDo) Delete(models ...*model.Systasklist) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systasklistDo) withDO(do gen.Dao) *systasklistDo {
	s.DO = *do.(*gen.DO)
	return s
}
