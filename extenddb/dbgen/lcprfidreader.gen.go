// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GINOWEN/extenddb/model"
)

func newLcprfidreader(db *gorm.DB) lcprfidreader {
	_lcprfidreader := lcprfidreader{}

	_lcprfidreader.lcprfidreaderDo.UseDB(db)
	_lcprfidreader.lcprfidreaderDo.UseModel(&model.Lcprfidreader{})

	tableName := _lcprfidreader.lcprfidreaderDo.TableName()
	_lcprfidreader.ALL = field.NewAsterisk(tableName)
	_lcprfidreader.ID = field.NewString(tableName, "Id")
	_lcprfidreader.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcprfidreader.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcprfidreader.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcprfidreader.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcprfidreader.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcprfidreader.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcprfidreader.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcprfidreader.TerminalID = field.NewString(tableName, "TerminalId")
	_lcprfidreader.Name = field.NewString(tableName, "Name")
	_lcprfidreader.IP = field.NewString(tableName, "IP")
	_lcprfidreader.ConnectionString = field.NewString(tableName, "ConnectionString")
	_lcprfidreader.PortType = field.NewInt64(tableName, "PortType")
	_lcprfidreader.MemoryBankType = field.NewInt64(tableName, "MemoryBankType")
	_lcprfidreader.Duration = field.NewInt64(tableName, "Duration")
	_lcprfidreader.Interval = field.NewInt64(tableName, "Interval")
	_lcprfidreader.LoopCount = field.NewInt64(tableName, "LoopCount")
	_lcprfidreader.AntennaInterval = field.NewInt64(tableName, "AntennaInterval")
	_lcprfidreader.IsEnable = field.NewField(tableName, "IsEnable")
	_lcprfidreader.Remark = field.NewString(tableName, "Remark")
	_lcprfidreader.TenantID = field.NewInt64(tableName, "TenantId")

	_lcprfidreader.fillFieldMap()

	return _lcprfidreader
}

type lcprfidreader struct {
	lcprfidreaderDo lcprfidreaderDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TerminalID           field.String
	Name                 field.String
	IP                   field.String
	ConnectionString     field.String
	PortType             field.Int64
	MemoryBankType       field.Int64
	Duration             field.Int64
	Interval             field.Int64
	LoopCount            field.Int64
	AntennaInterval      field.Int64
	IsEnable             field.Field
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcprfidreader) Table(newTableName string) *lcprfidreader {
	l.lcprfidreaderDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcprfidreader) As(alias string) *lcprfidreader {
	l.lcprfidreaderDo.DO = *(l.lcprfidreaderDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcprfidreader) updateTableName(table string) *lcprfidreader {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.Name = field.NewString(table, "Name")
	l.IP = field.NewString(table, "IP")
	l.ConnectionString = field.NewString(table, "ConnectionString")
	l.PortType = field.NewInt64(table, "PortType")
	l.MemoryBankType = field.NewInt64(table, "MemoryBankType")
	l.Duration = field.NewInt64(table, "Duration")
	l.Interval = field.NewInt64(table, "Interval")
	l.LoopCount = field.NewInt64(table, "LoopCount")
	l.AntennaInterval = field.NewInt64(table, "AntennaInterval")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcprfidreader) WithContext(ctx context.Context) ILcprfidreaderDo {
	return l.lcprfidreaderDo.WithContext(ctx)
}

func (l lcprfidreader) TableName() string { return l.lcprfidreaderDo.TableName() }

func (l lcprfidreader) Alias() string { return l.lcprfidreaderDo.Alias() }

func (l *lcprfidreader) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcprfidreader) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 21)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["Name"] = l.Name
	l.fieldMap["IP"] = l.IP
	l.fieldMap["ConnectionString"] = l.ConnectionString
	l.fieldMap["PortType"] = l.PortType
	l.fieldMap["MemoryBankType"] = l.MemoryBankType
	l.fieldMap["Duration"] = l.Duration
	l.fieldMap["Interval"] = l.Interval
	l.fieldMap["LoopCount"] = l.LoopCount
	l.fieldMap["AntennaInterval"] = l.AntennaInterval
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcprfidreader) clone(db *gorm.DB) lcprfidreader {
	l.lcprfidreaderDo.ReplaceDB(db)
	return l
}

type lcprfidreaderDo struct{ gen.DO }

type ILcprfidreaderDo interface {
	gen.SubQuery
	Debug() ILcprfidreaderDo
	WithContext(ctx context.Context) ILcprfidreaderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcprfidreaderDo
	Not(conds ...gen.Condition) ILcprfidreaderDo
	Or(conds ...gen.Condition) ILcprfidreaderDo
	Select(conds ...field.Expr) ILcprfidreaderDo
	Where(conds ...gen.Condition) ILcprfidreaderDo
	Order(conds ...field.Expr) ILcprfidreaderDo
	Distinct(cols ...field.Expr) ILcprfidreaderDo
	Omit(cols ...field.Expr) ILcprfidreaderDo
	Join(table schema.Tabler, on ...field.Expr) ILcprfidreaderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcprfidreaderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcprfidreaderDo
	Group(cols ...field.Expr) ILcprfidreaderDo
	Having(conds ...gen.Condition) ILcprfidreaderDo
	Limit(limit int) ILcprfidreaderDo
	Offset(offset int) ILcprfidreaderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcprfidreaderDo
	Unscoped() ILcprfidreaderDo
	Create(values ...*model.Lcprfidreader) error
	CreateInBatches(values []*model.Lcprfidreader, batchSize int) error
	Save(values ...*model.Lcprfidreader) error
	First() (*model.Lcprfidreader, error)
	Take() (*model.Lcprfidreader, error)
	Last() (*model.Lcprfidreader, error)
	Find() ([]*model.Lcprfidreader, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcprfidreader, err error)
	FindInBatches(result *[]*model.Lcprfidreader, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcprfidreader) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcprfidreaderDo
	Assign(attrs ...field.AssignExpr) ILcprfidreaderDo
	Joins(fields ...field.RelationField) ILcprfidreaderDo
	Preload(fields ...field.RelationField) ILcprfidreaderDo
	FirstOrInit() (*model.Lcprfidreader, error)
	FirstOrCreate() (*model.Lcprfidreader, error)
	FindByPage(offset int, limit int) (result []*model.Lcprfidreader, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcprfidreaderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcprfidreaderDo) Debug() ILcprfidreaderDo {
	return l.withDO(l.DO.Debug())
}

func (l lcprfidreaderDo) WithContext(ctx context.Context) ILcprfidreaderDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcprfidreaderDo) ReadDB() ILcprfidreaderDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcprfidreaderDo) WriteDB() ILcprfidreaderDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcprfidreaderDo) Clauses(conds ...clause.Expression) ILcprfidreaderDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcprfidreaderDo) Returning(value interface{}, columns ...string) ILcprfidreaderDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcprfidreaderDo) Not(conds ...gen.Condition) ILcprfidreaderDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcprfidreaderDo) Or(conds ...gen.Condition) ILcprfidreaderDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcprfidreaderDo) Select(conds ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcprfidreaderDo) Where(conds ...gen.Condition) ILcprfidreaderDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcprfidreaderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcprfidreaderDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcprfidreaderDo) Order(conds ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcprfidreaderDo) Distinct(cols ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcprfidreaderDo) Omit(cols ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcprfidreaderDo) Join(table schema.Tabler, on ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcprfidreaderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcprfidreaderDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcprfidreaderDo) Group(cols ...field.Expr) ILcprfidreaderDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcprfidreaderDo) Having(conds ...gen.Condition) ILcprfidreaderDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcprfidreaderDo) Limit(limit int) ILcprfidreaderDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcprfidreaderDo) Offset(offset int) ILcprfidreaderDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcprfidreaderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcprfidreaderDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcprfidreaderDo) Unscoped() ILcprfidreaderDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcprfidreaderDo) Create(values ...*model.Lcprfidreader) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcprfidreaderDo) CreateInBatches(values []*model.Lcprfidreader, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcprfidreaderDo) Save(values ...*model.Lcprfidreader) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcprfidreaderDo) First() (*model.Lcprfidreader, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcprfidreader), nil
	}
}

func (l lcprfidreaderDo) Take() (*model.Lcprfidreader, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcprfidreader), nil
	}
}

func (l lcprfidreaderDo) Last() (*model.Lcprfidreader, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcprfidreader), nil
	}
}

func (l lcprfidreaderDo) Find() ([]*model.Lcprfidreader, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcprfidreader), err
}

func (l lcprfidreaderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcprfidreader, err error) {
	buf := make([]*model.Lcprfidreader, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcprfidreaderDo) FindInBatches(result *[]*model.Lcprfidreader, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcprfidreaderDo) Attrs(attrs ...field.AssignExpr) ILcprfidreaderDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcprfidreaderDo) Assign(attrs ...field.AssignExpr) ILcprfidreaderDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcprfidreaderDo) Joins(fields ...field.RelationField) ILcprfidreaderDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcprfidreaderDo) Preload(fields ...field.RelationField) ILcprfidreaderDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcprfidreaderDo) FirstOrInit() (*model.Lcprfidreader, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcprfidreader), nil
	}
}

func (l lcprfidreaderDo) FirstOrCreate() (*model.Lcprfidreader, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcprfidreader), nil
	}
}

func (l lcprfidreaderDo) FindByPage(offset int, limit int) (result []*model.Lcprfidreader, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcprfidreaderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcprfidreaderDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcprfidreaderDo) Delete(models ...*model.Lcprfidreader) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcprfidreaderDo) withDO(do gen.Dao) *lcprfidreaderDo {
	l.DO = *do.(*gen.DO)
	return l
}
