// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLcpsecuritygateitemlog(db *gorm.DB) lcpsecuritygateitemlog {
	_lcpsecuritygateitemlog := lcpsecuritygateitemlog{}

	_lcpsecuritygateitemlog.lcpsecuritygateitemlogDo.UseDB(db)
	_lcpsecuritygateitemlog.lcpsecuritygateitemlogDo.UseModel(&model.Lcpsecuritygateitemlog{})

	tableName := _lcpsecuritygateitemlog.lcpsecuritygateitemlogDo.TableName()
	_lcpsecuritygateitemlog.ALL = field.NewAsterisk(tableName)
	_lcpsecuritygateitemlog.ID = field.NewString(tableName, "Id")
	_lcpsecuritygateitemlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpsecuritygateitemlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpsecuritygateitemlog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpsecuritygateitemlog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpsecuritygateitemlog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpsecuritygateitemlog.ItemTid = field.NewString(tableName, "ItemTid")
	_lcpsecuritygateitemlog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_lcpsecuritygateitemlog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_lcpsecuritygateitemlog.Result = field.NewInt64(tableName, "Result")
	_lcpsecuritygateitemlog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpsecuritygateitemlog.Remark = field.NewString(tableName, "Remark")
	_lcpsecuritygateitemlog.OriginType = field.NewInt64(tableName, "OriginType")
	_lcpsecuritygateitemlog.TenantID = field.NewInt64(tableName, "TenantId")
	_lcpsecuritygateitemlog.AttachmentIds = field.NewString(tableName, "AttachmentIds")

	_lcpsecuritygateitemlog.fillFieldMap()

	return _lcpsecuritygateitemlog
}

type lcpsecuritygateitemlog struct {
	lcpsecuritygateitemlogDo lcpsecuritygateitemlogDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	ItemTid       field.String
	ItemBarcode   field.String
	ItemTitle     field.String
	Result        field.Int64
	ErrorMessage  field.String
	Remark        field.String
	OriginType    field.Int64
	TenantID      field.Int64
	AttachmentIds field.String

	fieldMap map[string]field.Expr
}

func (l lcpsecuritygateitemlog) Table(newTableName string) *lcpsecuritygateitemlog {
	l.lcpsecuritygateitemlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpsecuritygateitemlog) As(alias string) *lcpsecuritygateitemlog {
	l.lcpsecuritygateitemlogDo.DO = *(l.lcpsecuritygateitemlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpsecuritygateitemlog) updateTableName(table string) *lcpsecuritygateitemlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.ItemTid = field.NewString(table, "ItemTid")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.Result = field.NewInt64(table, "Result")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.AttachmentIds = field.NewString(table, "AttachmentIds")

	l.fillFieldMap()

	return l
}

func (l *lcpsecuritygateitemlog) WithContext(ctx context.Context) ILcpsecuritygateitemlogDo {
	return l.lcpsecuritygateitemlogDo.WithContext(ctx)
}

func (l lcpsecuritygateitemlog) TableName() string { return l.lcpsecuritygateitemlogDo.TableName() }

func (l lcpsecuritygateitemlog) Alias() string { return l.lcpsecuritygateitemlogDo.Alias() }

func (l *lcpsecuritygateitemlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpsecuritygateitemlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["ItemTid"] = l.ItemTid
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["Result"] = l.Result
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["AttachmentIds"] = l.AttachmentIds
}

func (l lcpsecuritygateitemlog) clone(db *gorm.DB) lcpsecuritygateitemlog {
	l.lcpsecuritygateitemlogDo.ReplaceDB(db)
	return l
}

type lcpsecuritygateitemlogDo struct{ gen.DO }

type ILcpsecuritygateitemlogDo interface {
	gen.SubQuery
	Debug() ILcpsecuritygateitemlogDo
	WithContext(ctx context.Context) ILcpsecuritygateitemlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpsecuritygateitemlogDo
	Not(conds ...gen.Condition) ILcpsecuritygateitemlogDo
	Or(conds ...gen.Condition) ILcpsecuritygateitemlogDo
	Select(conds ...field.Expr) ILcpsecuritygateitemlogDo
	Where(conds ...gen.Condition) ILcpsecuritygateitemlogDo
	Order(conds ...field.Expr) ILcpsecuritygateitemlogDo
	Distinct(cols ...field.Expr) ILcpsecuritygateitemlogDo
	Omit(cols ...field.Expr) ILcpsecuritygateitemlogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygateitemlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygateitemlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygateitemlogDo
	Group(cols ...field.Expr) ILcpsecuritygateitemlogDo
	Having(conds ...gen.Condition) ILcpsecuritygateitemlogDo
	Limit(limit int) ILcpsecuritygateitemlogDo
	Offset(offset int) ILcpsecuritygateitemlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygateitemlogDo
	Unscoped() ILcpsecuritygateitemlogDo
	Create(values ...*model.Lcpsecuritygateitemlog) error
	CreateInBatches(values []*model.Lcpsecuritygateitemlog, batchSize int) error
	Save(values ...*model.Lcpsecuritygateitemlog) error
	First() (*model.Lcpsecuritygateitemlog, error)
	Take() (*model.Lcpsecuritygateitemlog, error)
	Last() (*model.Lcpsecuritygateitemlog, error)
	Find() ([]*model.Lcpsecuritygateitemlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygateitemlog, err error)
	FindInBatches(result *[]*model.Lcpsecuritygateitemlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpsecuritygateitemlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpsecuritygateitemlogDo
	Assign(attrs ...field.AssignExpr) ILcpsecuritygateitemlogDo
	Joins(fields ...field.RelationField) ILcpsecuritygateitemlogDo
	Preload(fields ...field.RelationField) ILcpsecuritygateitemlogDo
	FirstOrInit() (*model.Lcpsecuritygateitemlog, error)
	FirstOrCreate() (*model.Lcpsecuritygateitemlog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpsecuritygateitemlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpsecuritygateitemlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpsecuritygateitemlogDo) Debug() ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpsecuritygateitemlogDo) WithContext(ctx context.Context) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpsecuritygateitemlogDo) ReadDB() ILcpsecuritygateitemlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpsecuritygateitemlogDo) WriteDB() ILcpsecuritygateitemlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpsecuritygateitemlogDo) Clauses(conds ...clause.Expression) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpsecuritygateitemlogDo) Returning(value interface{}, columns ...string) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpsecuritygateitemlogDo) Not(conds ...gen.Condition) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpsecuritygateitemlogDo) Or(conds ...gen.Condition) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpsecuritygateitemlogDo) Select(conds ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpsecuritygateitemlogDo) Where(conds ...gen.Condition) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpsecuritygateitemlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpsecuritygateitemlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpsecuritygateitemlogDo) Order(conds ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpsecuritygateitemlogDo) Distinct(cols ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpsecuritygateitemlogDo) Omit(cols ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpsecuritygateitemlogDo) Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpsecuritygateitemlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpsecuritygateitemlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpsecuritygateitemlogDo) Group(cols ...field.Expr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpsecuritygateitemlogDo) Having(conds ...gen.Condition) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpsecuritygateitemlogDo) Limit(limit int) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpsecuritygateitemlogDo) Offset(offset int) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpsecuritygateitemlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpsecuritygateitemlogDo) Unscoped() ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpsecuritygateitemlogDo) Create(values ...*model.Lcpsecuritygateitemlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpsecuritygateitemlogDo) CreateInBatches(values []*model.Lcpsecuritygateitemlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpsecuritygateitemlogDo) Save(values ...*model.Lcpsecuritygateitemlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpsecuritygateitemlogDo) First() (*model.Lcpsecuritygateitemlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygateitemlog), nil
	}
}

func (l lcpsecuritygateitemlogDo) Take() (*model.Lcpsecuritygateitemlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygateitemlog), nil
	}
}

func (l lcpsecuritygateitemlogDo) Last() (*model.Lcpsecuritygateitemlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygateitemlog), nil
	}
}

func (l lcpsecuritygateitemlogDo) Find() ([]*model.Lcpsecuritygateitemlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpsecuritygateitemlog), err
}

func (l lcpsecuritygateitemlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygateitemlog, err error) {
	buf := make([]*model.Lcpsecuritygateitemlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpsecuritygateitemlogDo) FindInBatches(result *[]*model.Lcpsecuritygateitemlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpsecuritygateitemlogDo) Attrs(attrs ...field.AssignExpr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpsecuritygateitemlogDo) Assign(attrs ...field.AssignExpr) ILcpsecuritygateitemlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpsecuritygateitemlogDo) Joins(fields ...field.RelationField) ILcpsecuritygateitemlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpsecuritygateitemlogDo) Preload(fields ...field.RelationField) ILcpsecuritygateitemlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpsecuritygateitemlogDo) FirstOrInit() (*model.Lcpsecuritygateitemlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygateitemlog), nil
	}
}

func (l lcpsecuritygateitemlogDo) FirstOrCreate() (*model.Lcpsecuritygateitemlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygateitemlog), nil
	}
}

func (l lcpsecuritygateitemlogDo) FindByPage(offset int, limit int) (result []*model.Lcpsecuritygateitemlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpsecuritygateitemlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpsecuritygateitemlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpsecuritygateitemlogDo) Delete(models ...*model.Lcpsecuritygateitemlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpsecuritygateitemlogDo) withDO(do gen.Dao) *lcpsecuritygateitemlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
