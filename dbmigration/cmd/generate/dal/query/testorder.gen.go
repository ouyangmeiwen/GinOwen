// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newTestorder(db *gorm.DB) testorder {
	_testorder := testorder{}

	_testorder.testorderDo.UseDB(db)
	_testorder.testorderDo.UseModel(&model.Testorder{})

	tableName := _testorder.testorderDo.TableName()
	_testorder.ALL = field.NewAsterisk(tableName)
	_testorder.ID = field.NewInt64(tableName, "id")
	_testorder.Amount = field.NewFloat64(tableName, "amount")
	_testorder.Customer = field.NewString(tableName, "customer")

	_testorder.fillFieldMap()

	return _testorder
}

type testorder struct {
	testorderDo testorderDo

	ALL      field.Asterisk
	ID       field.Int64
	Amount   field.Float64
	Customer field.String

	fieldMap map[string]field.Expr
}

func (t testorder) Table(newTableName string) *testorder {
	t.testorderDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t testorder) As(alias string) *testorder {
	t.testorderDo.DO = *(t.testorderDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *testorder) updateTableName(table string) *testorder {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Amount = field.NewFloat64(table, "amount")
	t.Customer = field.NewString(table, "customer")

	t.fillFieldMap()

	return t
}

func (t *testorder) WithContext(ctx context.Context) ITestorderDo {
	return t.testorderDo.WithContext(ctx)
}

func (t testorder) TableName() string { return t.testorderDo.TableName() }

func (t testorder) Alias() string { return t.testorderDo.Alias() }

func (t *testorder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *testorder) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["customer"] = t.Customer
}

func (t testorder) clone(db *gorm.DB) testorder {
	t.testorderDo.ReplaceDB(db)
	return t
}

type testorderDo struct{ gen.DO }

type ITestorderDo interface {
	gen.SubQuery
	Debug() ITestorderDo
	WithContext(ctx context.Context) ITestorderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITestorderDo
	Not(conds ...gen.Condition) ITestorderDo
	Or(conds ...gen.Condition) ITestorderDo
	Select(conds ...field.Expr) ITestorderDo
	Where(conds ...gen.Condition) ITestorderDo
	Order(conds ...field.Expr) ITestorderDo
	Distinct(cols ...field.Expr) ITestorderDo
	Omit(cols ...field.Expr) ITestorderDo
	Join(table schema.Tabler, on ...field.Expr) ITestorderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITestorderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITestorderDo
	Group(cols ...field.Expr) ITestorderDo
	Having(conds ...gen.Condition) ITestorderDo
	Limit(limit int) ITestorderDo
	Offset(offset int) ITestorderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITestorderDo
	Unscoped() ITestorderDo
	Create(values ...*model.Testorder) error
	CreateInBatches(values []*model.Testorder, batchSize int) error
	Save(values ...*model.Testorder) error
	First() (*model.Testorder, error)
	Take() (*model.Testorder, error)
	Last() (*model.Testorder, error)
	Find() ([]*model.Testorder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Testorder, err error)
	FindInBatches(result *[]*model.Testorder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Testorder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITestorderDo
	Assign(attrs ...field.AssignExpr) ITestorderDo
	Joins(fields ...field.RelationField) ITestorderDo
	Preload(fields ...field.RelationField) ITestorderDo
	FirstOrInit() (*model.Testorder, error)
	FirstOrCreate() (*model.Testorder, error)
	FindByPage(offset int, limit int) (result []*model.Testorder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITestorderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t testorderDo) Debug() ITestorderDo {
	return t.withDO(t.DO.Debug())
}

func (t testorderDo) WithContext(ctx context.Context) ITestorderDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t testorderDo) ReadDB() ITestorderDo {
	return t.Clauses(dbresolver.Read)
}

func (t testorderDo) WriteDB() ITestorderDo {
	return t.Clauses(dbresolver.Write)
}

func (t testorderDo) Clauses(conds ...clause.Expression) ITestorderDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t testorderDo) Returning(value interface{}, columns ...string) ITestorderDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t testorderDo) Not(conds ...gen.Condition) ITestorderDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t testorderDo) Or(conds ...gen.Condition) ITestorderDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t testorderDo) Select(conds ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t testorderDo) Where(conds ...gen.Condition) ITestorderDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t testorderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITestorderDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t testorderDo) Order(conds ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t testorderDo) Distinct(cols ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t testorderDo) Omit(cols ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t testorderDo) Join(table schema.Tabler, on ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t testorderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t testorderDo) RightJoin(table schema.Tabler, on ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t testorderDo) Group(cols ...field.Expr) ITestorderDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t testorderDo) Having(conds ...gen.Condition) ITestorderDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t testorderDo) Limit(limit int) ITestorderDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t testorderDo) Offset(offset int) ITestorderDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t testorderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITestorderDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t testorderDo) Unscoped() ITestorderDo {
	return t.withDO(t.DO.Unscoped())
}

func (t testorderDo) Create(values ...*model.Testorder) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t testorderDo) CreateInBatches(values []*model.Testorder, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t testorderDo) Save(values ...*model.Testorder) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t testorderDo) First() (*model.Testorder, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testorder), nil
	}
}

func (t testorderDo) Take() (*model.Testorder, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testorder), nil
	}
}

func (t testorderDo) Last() (*model.Testorder, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testorder), nil
	}
}

func (t testorderDo) Find() ([]*model.Testorder, error) {
	result, err := t.DO.Find()
	return result.([]*model.Testorder), err
}

func (t testorderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Testorder, err error) {
	buf := make([]*model.Testorder, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t testorderDo) FindInBatches(result *[]*model.Testorder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t testorderDo) Attrs(attrs ...field.AssignExpr) ITestorderDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t testorderDo) Assign(attrs ...field.AssignExpr) ITestorderDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t testorderDo) Joins(fields ...field.RelationField) ITestorderDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t testorderDo) Preload(fields ...field.RelationField) ITestorderDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t testorderDo) FirstOrInit() (*model.Testorder, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testorder), nil
	}
}

func (t testorderDo) FirstOrCreate() (*model.Testorder, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testorder), nil
	}
}

func (t testorderDo) FindByPage(offset int, limit int) (result []*model.Testorder, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t testorderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t testorderDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t testorderDo) Delete(models ...*model.Testorder) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *testorderDo) withDO(do gen.Dao) *testorderDo {
	t.DO = *do.(*gen.DO)
	return t
}
