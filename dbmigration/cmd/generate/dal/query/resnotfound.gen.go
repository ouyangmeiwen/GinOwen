// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newResnotfound(db *gorm.DB) resnotfound {
	_resnotfound := resnotfound{}

	_resnotfound.resnotfoundDo.UseDB(db)
	_resnotfound.resnotfoundDo.UseModel(&model.Resnotfound{})

	tableName := _resnotfound.resnotfoundDo.TableName()
	_resnotfound.ALL = field.NewAsterisk(tableName)
	_resnotfound.ID = field.NewInt64(tableName, "Id")
	_resnotfound.ISBN = field.NewString(tableName, "ISBN")
	_resnotfound.IsFind = field.NewInt64(tableName, "IsFind")
	_resnotfound.Remark = field.NewString(tableName, "Remark")
	_resnotfound.CreateTime = field.NewTime(tableName, "CreateTime")

	_resnotfound.fillFieldMap()

	return _resnotfound
}

type resnotfound struct {
	resnotfoundDo resnotfoundDo

	ALL        field.Asterisk
	ID         field.Int64
	ISBN       field.String
	IsFind     field.Int64
	Remark     field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (r resnotfound) Table(newTableName string) *resnotfound {
	r.resnotfoundDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resnotfound) As(alias string) *resnotfound {
	r.resnotfoundDo.DO = *(r.resnotfoundDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resnotfound) updateTableName(table string) *resnotfound {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "Id")
	r.ISBN = field.NewString(table, "ISBN")
	r.IsFind = field.NewInt64(table, "IsFind")
	r.Remark = field.NewString(table, "Remark")
	r.CreateTime = field.NewTime(table, "CreateTime")

	r.fillFieldMap()

	return r
}

func (r *resnotfound) WithContext(ctx context.Context) IResnotfoundDo {
	return r.resnotfoundDo.WithContext(ctx)
}

func (r resnotfound) TableName() string { return r.resnotfoundDo.TableName() }

func (r resnotfound) Alias() string { return r.resnotfoundDo.Alias() }

func (r *resnotfound) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resnotfound) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["Id"] = r.ID
	r.fieldMap["ISBN"] = r.ISBN
	r.fieldMap["IsFind"] = r.IsFind
	r.fieldMap["Remark"] = r.Remark
	r.fieldMap["CreateTime"] = r.CreateTime
}

func (r resnotfound) clone(db *gorm.DB) resnotfound {
	r.resnotfoundDo.ReplaceDB(db)
	return r
}

type resnotfoundDo struct{ gen.DO }

type IResnotfoundDo interface {
	gen.SubQuery
	Debug() IResnotfoundDo
	WithContext(ctx context.Context) IResnotfoundDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResnotfoundDo
	Not(conds ...gen.Condition) IResnotfoundDo
	Or(conds ...gen.Condition) IResnotfoundDo
	Select(conds ...field.Expr) IResnotfoundDo
	Where(conds ...gen.Condition) IResnotfoundDo
	Order(conds ...field.Expr) IResnotfoundDo
	Distinct(cols ...field.Expr) IResnotfoundDo
	Omit(cols ...field.Expr) IResnotfoundDo
	Join(table schema.Tabler, on ...field.Expr) IResnotfoundDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResnotfoundDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResnotfoundDo
	Group(cols ...field.Expr) IResnotfoundDo
	Having(conds ...gen.Condition) IResnotfoundDo
	Limit(limit int) IResnotfoundDo
	Offset(offset int) IResnotfoundDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResnotfoundDo
	Unscoped() IResnotfoundDo
	Create(values ...*model.Resnotfound) error
	CreateInBatches(values []*model.Resnotfound, batchSize int) error
	Save(values ...*model.Resnotfound) error
	First() (*model.Resnotfound, error)
	Take() (*model.Resnotfound, error)
	Last() (*model.Resnotfound, error)
	Find() ([]*model.Resnotfound, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resnotfound, err error)
	FindInBatches(result *[]*model.Resnotfound, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Resnotfound) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResnotfoundDo
	Assign(attrs ...field.AssignExpr) IResnotfoundDo
	Joins(fields ...field.RelationField) IResnotfoundDo
	Preload(fields ...field.RelationField) IResnotfoundDo
	FirstOrInit() (*model.Resnotfound, error)
	FirstOrCreate() (*model.Resnotfound, error)
	FindByPage(offset int, limit int) (result []*model.Resnotfound, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResnotfoundDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resnotfoundDo) Debug() IResnotfoundDo {
	return r.withDO(r.DO.Debug())
}

func (r resnotfoundDo) WithContext(ctx context.Context) IResnotfoundDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resnotfoundDo) ReadDB() IResnotfoundDo {
	return r.Clauses(dbresolver.Read)
}

func (r resnotfoundDo) WriteDB() IResnotfoundDo {
	return r.Clauses(dbresolver.Write)
}

func (r resnotfoundDo) Clauses(conds ...clause.Expression) IResnotfoundDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resnotfoundDo) Returning(value interface{}, columns ...string) IResnotfoundDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resnotfoundDo) Not(conds ...gen.Condition) IResnotfoundDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resnotfoundDo) Or(conds ...gen.Condition) IResnotfoundDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resnotfoundDo) Select(conds ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resnotfoundDo) Where(conds ...gen.Condition) IResnotfoundDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resnotfoundDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IResnotfoundDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resnotfoundDo) Order(conds ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resnotfoundDo) Distinct(cols ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resnotfoundDo) Omit(cols ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resnotfoundDo) Join(table schema.Tabler, on ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resnotfoundDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resnotfoundDo) RightJoin(table schema.Tabler, on ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resnotfoundDo) Group(cols ...field.Expr) IResnotfoundDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resnotfoundDo) Having(conds ...gen.Condition) IResnotfoundDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resnotfoundDo) Limit(limit int) IResnotfoundDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resnotfoundDo) Offset(offset int) IResnotfoundDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resnotfoundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResnotfoundDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resnotfoundDo) Unscoped() IResnotfoundDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resnotfoundDo) Create(values ...*model.Resnotfound) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resnotfoundDo) CreateInBatches(values []*model.Resnotfound, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resnotfoundDo) Save(values ...*model.Resnotfound) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resnotfoundDo) First() (*model.Resnotfound, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resnotfound), nil
	}
}

func (r resnotfoundDo) Take() (*model.Resnotfound, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resnotfound), nil
	}
}

func (r resnotfoundDo) Last() (*model.Resnotfound, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resnotfound), nil
	}
}

func (r resnotfoundDo) Find() ([]*model.Resnotfound, error) {
	result, err := r.DO.Find()
	return result.([]*model.Resnotfound), err
}

func (r resnotfoundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resnotfound, err error) {
	buf := make([]*model.Resnotfound, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resnotfoundDo) FindInBatches(result *[]*model.Resnotfound, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resnotfoundDo) Attrs(attrs ...field.AssignExpr) IResnotfoundDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resnotfoundDo) Assign(attrs ...field.AssignExpr) IResnotfoundDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resnotfoundDo) Joins(fields ...field.RelationField) IResnotfoundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resnotfoundDo) Preload(fields ...field.RelationField) IResnotfoundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resnotfoundDo) FirstOrInit() (*model.Resnotfound, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resnotfound), nil
	}
}

func (r resnotfoundDo) FirstOrCreate() (*model.Resnotfound, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resnotfound), nil
	}
}

func (r resnotfoundDo) FindByPage(offset int, limit int) (result []*model.Resnotfound, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resnotfoundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resnotfoundDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resnotfoundDo) Delete(models ...*model.Resnotfound) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resnotfoundDo) withDO(do gen.Dao) *resnotfoundDo {
	r.DO = *do.(*gen.DO)
	return r
}
