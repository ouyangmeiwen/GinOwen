// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemFile(db *gorm.DB) systemFile {
	_systemFile := systemFile{}

	_systemFile.systemFileDo.UseDB(db)
	_systemFile.systemFileDo.UseModel(&model.SystemFile{})

	tableName := _systemFile.systemFileDo.TableName()
	_systemFile.ALL = field.NewAsterisk(tableName)
	_systemFile.ID = field.NewInt64(tableName, "id")
	_systemFile.CreateTime = field.NewTime(tableName, "create_time")
	_systemFile.UpdateTime = field.NewTime(tableName, "update_time")
	_systemFile.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemFile.Name = field.NewString(tableName, "name")
	_systemFile.Size = field.NewInt64(tableName, "size")
	_systemFile.File = field.NewString(tableName, "file")
	_systemFile.Mime = field.NewString(tableName, "mime")
	_systemFile.Type = field.NewString(tableName, "type")
	_systemFile.Path = field.NewString(tableName, "path")
	_systemFile.CreateByID = field.NewInt64(tableName, "create_by_id")
	_systemFile.UpdateByID = field.NewInt64(tableName, "update_by_id")

	_systemFile.fillFieldMap()

	return _systemFile
}

type systemFile struct {
	systemFileDo systemFileDo

	ALL        field.Asterisk
	ID         field.Int64
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Int64
	Name       field.String
	Size       field.Int64
	File       field.String
	Mime       field.String
	Type       field.String
	Path       field.String
	CreateByID field.Int64
	UpdateByID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemFile) Table(newTableName string) *systemFile {
	s.systemFileDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemFile) As(alias string) *systemFile {
	s.systemFileDo.DO = *(s.systemFileDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemFile) updateTableName(table string) *systemFile {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Size = field.NewInt64(table, "size")
	s.File = field.NewString(table, "file")
	s.Mime = field.NewString(table, "mime")
	s.Type = field.NewString(table, "type")
	s.Path = field.NewString(table, "path")
	s.CreateByID = field.NewInt64(table, "create_by_id")
	s.UpdateByID = field.NewInt64(table, "update_by_id")

	s.fillFieldMap()

	return s
}

func (s *systemFile) WithContext(ctx context.Context) ISystemFileDo {
	return s.systemFileDo.WithContext(ctx)
}

func (s systemFile) TableName() string { return s.systemFileDo.TableName() }

func (s systemFile) Alias() string { return s.systemFileDo.Alias() }

func (s *systemFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemFile) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["size"] = s.Size
	s.fieldMap["file"] = s.File
	s.fieldMap["mime"] = s.Mime
	s.fieldMap["type"] = s.Type
	s.fieldMap["path"] = s.Path
	s.fieldMap["create_by_id"] = s.CreateByID
	s.fieldMap["update_by_id"] = s.UpdateByID
}

func (s systemFile) clone(db *gorm.DB) systemFile {
	s.systemFileDo.ReplaceDB(db)
	return s
}

type systemFileDo struct{ gen.DO }

type ISystemFileDo interface {
	gen.SubQuery
	Debug() ISystemFileDo
	WithContext(ctx context.Context) ISystemFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemFileDo
	Not(conds ...gen.Condition) ISystemFileDo
	Or(conds ...gen.Condition) ISystemFileDo
	Select(conds ...field.Expr) ISystemFileDo
	Where(conds ...gen.Condition) ISystemFileDo
	Order(conds ...field.Expr) ISystemFileDo
	Distinct(cols ...field.Expr) ISystemFileDo
	Omit(cols ...field.Expr) ISystemFileDo
	Join(table schema.Tabler, on ...field.Expr) ISystemFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemFileDo
	Group(cols ...field.Expr) ISystemFileDo
	Having(conds ...gen.Condition) ISystemFileDo
	Limit(limit int) ISystemFileDo
	Offset(offset int) ISystemFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemFileDo
	Unscoped() ISystemFileDo
	Create(values ...*model.SystemFile) error
	CreateInBatches(values []*model.SystemFile, batchSize int) error
	Save(values ...*model.SystemFile) error
	First() (*model.SystemFile, error)
	Take() (*model.SystemFile, error)
	Last() (*model.SystemFile, error)
	Find() ([]*model.SystemFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemFile, err error)
	FindInBatches(result *[]*model.SystemFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemFileDo
	Assign(attrs ...field.AssignExpr) ISystemFileDo
	Joins(fields ...field.RelationField) ISystemFileDo
	Preload(fields ...field.RelationField) ISystemFileDo
	FirstOrInit() (*model.SystemFile, error)
	FirstOrCreate() (*model.SystemFile, error)
	FindByPage(offset int, limit int) (result []*model.SystemFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemFileDo) Debug() ISystemFileDo {
	return s.withDO(s.DO.Debug())
}

func (s systemFileDo) WithContext(ctx context.Context) ISystemFileDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemFileDo) ReadDB() ISystemFileDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemFileDo) WriteDB() ISystemFileDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemFileDo) Clauses(conds ...clause.Expression) ISystemFileDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemFileDo) Returning(value interface{}, columns ...string) ISystemFileDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemFileDo) Not(conds ...gen.Condition) ISystemFileDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemFileDo) Or(conds ...gen.Condition) ISystemFileDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemFileDo) Select(conds ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemFileDo) Where(conds ...gen.Condition) ISystemFileDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemFileDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemFileDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemFileDo) Order(conds ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemFileDo) Distinct(cols ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemFileDo) Omit(cols ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemFileDo) Join(table schema.Tabler, on ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemFileDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemFileDo) Group(cols ...field.Expr) ISystemFileDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemFileDo) Having(conds ...gen.Condition) ISystemFileDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemFileDo) Limit(limit int) ISystemFileDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemFileDo) Offset(offset int) ISystemFileDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemFileDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemFileDo) Unscoped() ISystemFileDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemFileDo) Create(values ...*model.SystemFile) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemFileDo) CreateInBatches(values []*model.SystemFile, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemFileDo) Save(values ...*model.SystemFile) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemFileDo) First() (*model.SystemFile, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemFile), nil
	}
}

func (s systemFileDo) Take() (*model.SystemFile, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemFile), nil
	}
}

func (s systemFileDo) Last() (*model.SystemFile, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemFile), nil
	}
}

func (s systemFileDo) Find() ([]*model.SystemFile, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemFile), err
}

func (s systemFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemFile, err error) {
	buf := make([]*model.SystemFile, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemFileDo) FindInBatches(result *[]*model.SystemFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemFileDo) Attrs(attrs ...field.AssignExpr) ISystemFileDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemFileDo) Assign(attrs ...field.AssignExpr) ISystemFileDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemFileDo) Joins(fields ...field.RelationField) ISystemFileDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemFileDo) Preload(fields ...field.RelationField) ISystemFileDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemFileDo) FirstOrInit() (*model.SystemFile, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemFile), nil
	}
}

func (s systemFileDo) FirstOrCreate() (*model.SystemFile, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemFile), nil
	}
}

func (s systemFileDo) FindByPage(offset int, limit int) (result []*model.SystemFile, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemFileDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemFileDo) Delete(models ...*model.SystemFile) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemFileDo) withDO(do gen.Dao) *systemFileDo {
	s.DO = *do.(*gen.DO)
	return s
}
