// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemUser(db *gorm.DB) systemUser {
	_systemUser := systemUser{}

	_systemUser.systemUserDo.UseDB(db)
	_systemUser.systemUserDo.UseModel(&model.SystemUser{})

	tableName := _systemUser.systemUserDo.TableName()
	_systemUser.ALL = field.NewAsterisk(tableName)
	_systemUser.ID = field.NewInt64(tableName, "id")
	_systemUser.Password = field.NewString(tableName, "password")
	_systemUser.LastLogin = field.NewTime(tableName, "last_login")
	_systemUser.IsSuperuser = field.NewInt64(tableName, "is_superuser")
	_systemUser.Username = field.NewString(tableName, "username")
	_systemUser.FirstName = field.NewString(tableName, "first_name")
	_systemUser.LastName = field.NewString(tableName, "last_name")
	_systemUser.Email = field.NewString(tableName, "email")
	_systemUser.IsStaff = field.NewInt64(tableName, "is_staff")
	_systemUser.IsActive = field.NewInt64(tableName, "is_active")
	_systemUser.DateJoined = field.NewTime(tableName, "date_joined")
	_systemUser.Name = field.NewString(tableName, "name")
	_systemUser.Phone = field.NewString(tableName, "phone")
	_systemUser.Avatar = field.NewString(tableName, "avatar")
	_systemUser.DeptID = field.NewInt64(tableName, "dept_id")
	_systemUser.SuperiorID = field.NewInt64(tableName, "superior_id")

	_systemUser.fillFieldMap()

	return _systemUser
}

type systemUser struct {
	systemUserDo systemUserDo

	ALL         field.Asterisk
	ID          field.Int64
	Password    field.String
	LastLogin   field.Time
	IsSuperuser field.Int64
	Username    field.String
	FirstName   field.String
	LastName    field.String
	Email       field.String
	IsStaff     field.Int64
	IsActive    field.Int64
	DateJoined  field.Time
	Name        field.String
	Phone       field.String
	Avatar      field.String
	DeptID      field.Int64
	SuperiorID  field.Int64

	fieldMap map[string]field.Expr
}

func (s systemUser) Table(newTableName string) *systemUser {
	s.systemUserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUser) As(alias string) *systemUser {
	s.systemUserDo.DO = *(s.systemUserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUser) updateTableName(table string) *systemUser {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Password = field.NewString(table, "password")
	s.LastLogin = field.NewTime(table, "last_login")
	s.IsSuperuser = field.NewInt64(table, "is_superuser")
	s.Username = field.NewString(table, "username")
	s.FirstName = field.NewString(table, "first_name")
	s.LastName = field.NewString(table, "last_name")
	s.Email = field.NewString(table, "email")
	s.IsStaff = field.NewInt64(table, "is_staff")
	s.IsActive = field.NewInt64(table, "is_active")
	s.DateJoined = field.NewTime(table, "date_joined")
	s.Name = field.NewString(table, "name")
	s.Phone = field.NewString(table, "phone")
	s.Avatar = field.NewString(table, "avatar")
	s.DeptID = field.NewInt64(table, "dept_id")
	s.SuperiorID = field.NewInt64(table, "superior_id")

	s.fillFieldMap()

	return s
}

func (s *systemUser) WithContext(ctx context.Context) ISystemUserDo {
	return s.systemUserDo.WithContext(ctx)
}

func (s systemUser) TableName() string { return s.systemUserDo.TableName() }

func (s systemUser) Alias() string { return s.systemUserDo.Alias() }

func (s *systemUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["password"] = s.Password
	s.fieldMap["last_login"] = s.LastLogin
	s.fieldMap["is_superuser"] = s.IsSuperuser
	s.fieldMap["username"] = s.Username
	s.fieldMap["first_name"] = s.FirstName
	s.fieldMap["last_name"] = s.LastName
	s.fieldMap["email"] = s.Email
	s.fieldMap["is_staff"] = s.IsStaff
	s.fieldMap["is_active"] = s.IsActive
	s.fieldMap["date_joined"] = s.DateJoined
	s.fieldMap["name"] = s.Name
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["avatar"] = s.Avatar
	s.fieldMap["dept_id"] = s.DeptID
	s.fieldMap["superior_id"] = s.SuperiorID
}

func (s systemUser) clone(db *gorm.DB) systemUser {
	s.systemUserDo.ReplaceDB(db)
	return s
}

type systemUserDo struct{ gen.DO }

type ISystemUserDo interface {
	gen.SubQuery
	Debug() ISystemUserDo
	WithContext(ctx context.Context) ISystemUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserDo
	Not(conds ...gen.Condition) ISystemUserDo
	Or(conds ...gen.Condition) ISystemUserDo
	Select(conds ...field.Expr) ISystemUserDo
	Where(conds ...gen.Condition) ISystemUserDo
	Order(conds ...field.Expr) ISystemUserDo
	Distinct(cols ...field.Expr) ISystemUserDo
	Omit(cols ...field.Expr) ISystemUserDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserDo
	Group(cols ...field.Expr) ISystemUserDo
	Having(conds ...gen.Condition) ISystemUserDo
	Limit(limit int) ISystemUserDo
	Offset(offset int) ISystemUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserDo
	Unscoped() ISystemUserDo
	Create(values ...*model.SystemUser) error
	CreateInBatches(values []*model.SystemUser, batchSize int) error
	Save(values ...*model.SystemUser) error
	First() (*model.SystemUser, error)
	Take() (*model.SystemUser, error)
	Last() (*model.SystemUser, error)
	Find() ([]*model.SystemUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUser, err error)
	FindInBatches(result *[]*model.SystemUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserDo
	Assign(attrs ...field.AssignExpr) ISystemUserDo
	Joins(fields ...field.RelationField) ISystemUserDo
	Preload(fields ...field.RelationField) ISystemUserDo
	FirstOrInit() (*model.SystemUser, error)
	FirstOrCreate() (*model.SystemUser, error)
	FindByPage(offset int, limit int) (result []*model.SystemUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserDo) Debug() ISystemUserDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserDo) WithContext(ctx context.Context) ISystemUserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserDo) ReadDB() ISystemUserDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserDo) WriteDB() ISystemUserDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserDo) Clauses(conds ...clause.Expression) ISystemUserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserDo) Returning(value interface{}, columns ...string) ISystemUserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserDo) Not(conds ...gen.Condition) ISystemUserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserDo) Or(conds ...gen.Condition) ISystemUserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserDo) Select(conds ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserDo) Where(conds ...gen.Condition) ISystemUserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemUserDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemUserDo) Order(conds ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserDo) Distinct(cols ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserDo) Omit(cols ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserDo) Group(cols ...field.Expr) ISystemUserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserDo) Having(conds ...gen.Condition) ISystemUserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserDo) Limit(limit int) ISystemUserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserDo) Offset(offset int) ISystemUserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserDo) Unscoped() ISystemUserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserDo) Create(values ...*model.SystemUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserDo) CreateInBatches(values []*model.SystemUser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserDo) Save(values ...*model.SystemUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserDo) First() (*model.SystemUser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUser), nil
	}
}

func (s systemUserDo) Take() (*model.SystemUser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUser), nil
	}
}

func (s systemUserDo) Last() (*model.SystemUser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUser), nil
	}
}

func (s systemUserDo) Find() ([]*model.SystemUser, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUser), err
}

func (s systemUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUser, err error) {
	buf := make([]*model.SystemUser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserDo) FindInBatches(result *[]*model.SystemUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserDo) Attrs(attrs ...field.AssignExpr) ISystemUserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserDo) Assign(attrs ...field.AssignExpr) ISystemUserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserDo) Joins(fields ...field.RelationField) ISystemUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserDo) Preload(fields ...field.RelationField) ISystemUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserDo) FirstOrInit() (*model.SystemUser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUser), nil
	}
}

func (s systemUserDo) FirstOrCreate() (*model.SystemUser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUser), nil
	}
}

func (s systemUserDo) FindByPage(offset int, limit int) (result []*model.SystemUser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserDo) Delete(models ...*model.SystemUser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserDo) withDO(do gen.Dao) *systemUserDo {
	s.DO = *do.(*gen.DO)
	return s
}
