// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemDicttype(db *gorm.DB) systemDicttype {
	_systemDicttype := systemDicttype{}

	_systemDicttype.systemDicttypeDo.UseDB(db)
	_systemDicttype.systemDicttypeDo.UseModel(&model.SystemDicttype{})

	tableName := _systemDicttype.systemDicttypeDo.TableName()
	_systemDicttype.ALL = field.NewAsterisk(tableName)
	_systemDicttype.ID = field.NewInt64(tableName, "id")
	_systemDicttype.CreateTime = field.NewTime(tableName, "create_time")
	_systemDicttype.UpdateTime = field.NewTime(tableName, "update_time")
	_systemDicttype.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemDicttype.Name = field.NewString(tableName, "name")
	_systemDicttype.Code = field.NewString(tableName, "code")
	_systemDicttype.ParentID = field.NewInt64(tableName, "parent_id")

	_systemDicttype.fillFieldMap()

	return _systemDicttype
}

type systemDicttype struct {
	systemDicttypeDo systemDicttypeDo

	ALL        field.Asterisk
	ID         field.Int64
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Int64
	Name       field.String
	Code       field.String
	ParentID   field.Int64

	fieldMap map[string]field.Expr
}

func (s systemDicttype) Table(newTableName string) *systemDicttype {
	s.systemDicttypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemDicttype) As(alias string) *systemDicttype {
	s.systemDicttypeDo.DO = *(s.systemDicttypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemDicttype) updateTableName(table string) *systemDicttype {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.ParentID = field.NewInt64(table, "parent_id")

	s.fillFieldMap()

	return s
}

func (s *systemDicttype) WithContext(ctx context.Context) ISystemDicttypeDo {
	return s.systemDicttypeDo.WithContext(ctx)
}

func (s systemDicttype) TableName() string { return s.systemDicttypeDo.TableName() }

func (s systemDicttype) Alias() string { return s.systemDicttypeDo.Alias() }

func (s *systemDicttype) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemDicttype) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["parent_id"] = s.ParentID
}

func (s systemDicttype) clone(db *gorm.DB) systemDicttype {
	s.systemDicttypeDo.ReplaceDB(db)
	return s
}

type systemDicttypeDo struct{ gen.DO }

type ISystemDicttypeDo interface {
	gen.SubQuery
	Debug() ISystemDicttypeDo
	WithContext(ctx context.Context) ISystemDicttypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemDicttypeDo
	Not(conds ...gen.Condition) ISystemDicttypeDo
	Or(conds ...gen.Condition) ISystemDicttypeDo
	Select(conds ...field.Expr) ISystemDicttypeDo
	Where(conds ...gen.Condition) ISystemDicttypeDo
	Order(conds ...field.Expr) ISystemDicttypeDo
	Distinct(cols ...field.Expr) ISystemDicttypeDo
	Omit(cols ...field.Expr) ISystemDicttypeDo
	Join(table schema.Tabler, on ...field.Expr) ISystemDicttypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemDicttypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemDicttypeDo
	Group(cols ...field.Expr) ISystemDicttypeDo
	Having(conds ...gen.Condition) ISystemDicttypeDo
	Limit(limit int) ISystemDicttypeDo
	Offset(offset int) ISystemDicttypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemDicttypeDo
	Unscoped() ISystemDicttypeDo
	Create(values ...*model.SystemDicttype) error
	CreateInBatches(values []*model.SystemDicttype, batchSize int) error
	Save(values ...*model.SystemDicttype) error
	First() (*model.SystemDicttype, error)
	Take() (*model.SystemDicttype, error)
	Last() (*model.SystemDicttype, error)
	Find() ([]*model.SystemDicttype, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemDicttype, err error)
	FindInBatches(result *[]*model.SystemDicttype, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemDicttype) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemDicttypeDo
	Assign(attrs ...field.AssignExpr) ISystemDicttypeDo
	Joins(fields ...field.RelationField) ISystemDicttypeDo
	Preload(fields ...field.RelationField) ISystemDicttypeDo
	FirstOrInit() (*model.SystemDicttype, error)
	FirstOrCreate() (*model.SystemDicttype, error)
	FindByPage(offset int, limit int) (result []*model.SystemDicttype, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemDicttypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemDicttypeDo) Debug() ISystemDicttypeDo {
	return s.withDO(s.DO.Debug())
}

func (s systemDicttypeDo) WithContext(ctx context.Context) ISystemDicttypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemDicttypeDo) ReadDB() ISystemDicttypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemDicttypeDo) WriteDB() ISystemDicttypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemDicttypeDo) Clauses(conds ...clause.Expression) ISystemDicttypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemDicttypeDo) Returning(value interface{}, columns ...string) ISystemDicttypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemDicttypeDo) Not(conds ...gen.Condition) ISystemDicttypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemDicttypeDo) Or(conds ...gen.Condition) ISystemDicttypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemDicttypeDo) Select(conds ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemDicttypeDo) Where(conds ...gen.Condition) ISystemDicttypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemDicttypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemDicttypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemDicttypeDo) Order(conds ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemDicttypeDo) Distinct(cols ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemDicttypeDo) Omit(cols ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemDicttypeDo) Join(table schema.Tabler, on ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemDicttypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemDicttypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemDicttypeDo) Group(cols ...field.Expr) ISystemDicttypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemDicttypeDo) Having(conds ...gen.Condition) ISystemDicttypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemDicttypeDo) Limit(limit int) ISystemDicttypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemDicttypeDo) Offset(offset int) ISystemDicttypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemDicttypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemDicttypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemDicttypeDo) Unscoped() ISystemDicttypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemDicttypeDo) Create(values ...*model.SystemDicttype) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemDicttypeDo) CreateInBatches(values []*model.SystemDicttype, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemDicttypeDo) Save(values ...*model.SystemDicttype) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemDicttypeDo) First() (*model.SystemDicttype, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDicttype), nil
	}
}

func (s systemDicttypeDo) Take() (*model.SystemDicttype, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDicttype), nil
	}
}

func (s systemDicttypeDo) Last() (*model.SystemDicttype, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDicttype), nil
	}
}

func (s systemDicttypeDo) Find() ([]*model.SystemDicttype, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemDicttype), err
}

func (s systemDicttypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemDicttype, err error) {
	buf := make([]*model.SystemDicttype, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemDicttypeDo) FindInBatches(result *[]*model.SystemDicttype, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemDicttypeDo) Attrs(attrs ...field.AssignExpr) ISystemDicttypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemDicttypeDo) Assign(attrs ...field.AssignExpr) ISystemDicttypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemDicttypeDo) Joins(fields ...field.RelationField) ISystemDicttypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemDicttypeDo) Preload(fields ...field.RelationField) ISystemDicttypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemDicttypeDo) FirstOrInit() (*model.SystemDicttype, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDicttype), nil
	}
}

func (s systemDicttypeDo) FirstOrCreate() (*model.SystemDicttype, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDicttype), nil
	}
}

func (s systemDicttypeDo) FindByPage(offset int, limit int) (result []*model.SystemDicttype, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemDicttypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemDicttypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemDicttypeDo) Delete(models ...*model.SystemDicttype) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemDicttypeDo) withDO(do gen.Dao) *systemDicttypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
