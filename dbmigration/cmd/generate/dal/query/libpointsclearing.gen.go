// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibpointsclearing(db *gorm.DB) libpointsclearing {
	_libpointsclearing := libpointsclearing{}

	_libpointsclearing.libpointsclearingDo.UseDB(db)
	_libpointsclearing.libpointsclearingDo.UseModel(&model.Libpointsclearing{})

	tableName := _libpointsclearing.libpointsclearingDo.TableName()
	_libpointsclearing.ALL = field.NewAsterisk(tableName)
	_libpointsclearing.ID = field.NewString(tableName, "Id")
	_libpointsclearing.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpointsclearing.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpointsclearing.PointsRuleType = field.NewInt64(tableName, "PointsRuleType")
	_libpointsclearing.PatronID = field.NewString(tableName, "PatronId")
	_libpointsclearing.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libpointsclearing.PatronName = field.NewString(tableName, "PatronName")
	_libpointsclearing.ItemID = field.NewString(tableName, "ItemId")
	_libpointsclearing.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libpointsclearing.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libpointsclearing.TaskPackageID = field.NewString(tableName, "TaskPackageId")
	_libpointsclearing.TaskPackageName = field.NewString(tableName, "TaskPackageName")
	_libpointsclearing.Remark = field.NewString(tableName, "Remark")
	_libpointsclearing.TenantID = field.NewInt64(tableName, "TenantId")

	_libpointsclearing.fillFieldMap()

	return _libpointsclearing
}

type libpointsclearing struct {
	libpointsclearingDo libpointsclearingDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	PointsRuleType  field.Int64
	PatronID        field.String
	PatronBarcode   field.String
	PatronName      field.String
	ItemID          field.String
	ItemBarcode     field.String
	ItemTitle       field.String
	TaskPackageID   field.String
	TaskPackageName field.String
	Remark          field.String
	TenantID        field.Int64

	fieldMap map[string]field.Expr
}

func (l libpointsclearing) Table(newTableName string) *libpointsclearing {
	l.libpointsclearingDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpointsclearing) As(alias string) *libpointsclearing {
	l.libpointsclearingDo.DO = *(l.libpointsclearingDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpointsclearing) updateTableName(table string) *libpointsclearing {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.PointsRuleType = field.NewInt64(table, "PointsRuleType")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.PatronName = field.NewString(table, "PatronName")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.TaskPackageID = field.NewString(table, "TaskPackageId")
	l.TaskPackageName = field.NewString(table, "TaskPackageName")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpointsclearing) WithContext(ctx context.Context) ILibpointsclearingDo {
	return l.libpointsclearingDo.WithContext(ctx)
}

func (l libpointsclearing) TableName() string { return l.libpointsclearingDo.TableName() }

func (l libpointsclearing) Alias() string { return l.libpointsclearingDo.Alias() }

func (l *libpointsclearing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpointsclearing) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["PointsRuleType"] = l.PointsRuleType
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["TaskPackageId"] = l.TaskPackageID
	l.fieldMap["TaskPackageName"] = l.TaskPackageName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpointsclearing) clone(db *gorm.DB) libpointsclearing {
	l.libpointsclearingDo.ReplaceDB(db)
	return l
}

type libpointsclearingDo struct{ gen.DO }

type ILibpointsclearingDo interface {
	gen.SubQuery
	Debug() ILibpointsclearingDo
	WithContext(ctx context.Context) ILibpointsclearingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpointsclearingDo
	Not(conds ...gen.Condition) ILibpointsclearingDo
	Or(conds ...gen.Condition) ILibpointsclearingDo
	Select(conds ...field.Expr) ILibpointsclearingDo
	Where(conds ...gen.Condition) ILibpointsclearingDo
	Order(conds ...field.Expr) ILibpointsclearingDo
	Distinct(cols ...field.Expr) ILibpointsclearingDo
	Omit(cols ...field.Expr) ILibpointsclearingDo
	Join(table schema.Tabler, on ...field.Expr) ILibpointsclearingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpointsclearingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpointsclearingDo
	Group(cols ...field.Expr) ILibpointsclearingDo
	Having(conds ...gen.Condition) ILibpointsclearingDo
	Limit(limit int) ILibpointsclearingDo
	Offset(offset int) ILibpointsclearingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpointsclearingDo
	Unscoped() ILibpointsclearingDo
	Create(values ...*model.Libpointsclearing) error
	CreateInBatches(values []*model.Libpointsclearing, batchSize int) error
	Save(values ...*model.Libpointsclearing) error
	First() (*model.Libpointsclearing, error)
	Take() (*model.Libpointsclearing, error)
	Last() (*model.Libpointsclearing, error)
	Find() ([]*model.Libpointsclearing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpointsclearing, err error)
	FindInBatches(result *[]*model.Libpointsclearing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpointsclearing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpointsclearingDo
	Assign(attrs ...field.AssignExpr) ILibpointsclearingDo
	Joins(fields ...field.RelationField) ILibpointsclearingDo
	Preload(fields ...field.RelationField) ILibpointsclearingDo
	FirstOrInit() (*model.Libpointsclearing, error)
	FirstOrCreate() (*model.Libpointsclearing, error)
	FindByPage(offset int, limit int) (result []*model.Libpointsclearing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpointsclearingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpointsclearingDo) Debug() ILibpointsclearingDo {
	return l.withDO(l.DO.Debug())
}

func (l libpointsclearingDo) WithContext(ctx context.Context) ILibpointsclearingDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpointsclearingDo) ReadDB() ILibpointsclearingDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpointsclearingDo) WriteDB() ILibpointsclearingDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpointsclearingDo) Clauses(conds ...clause.Expression) ILibpointsclearingDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpointsclearingDo) Returning(value interface{}, columns ...string) ILibpointsclearingDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpointsclearingDo) Not(conds ...gen.Condition) ILibpointsclearingDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpointsclearingDo) Or(conds ...gen.Condition) ILibpointsclearingDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpointsclearingDo) Select(conds ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpointsclearingDo) Where(conds ...gen.Condition) ILibpointsclearingDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpointsclearingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpointsclearingDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpointsclearingDo) Order(conds ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpointsclearingDo) Distinct(cols ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpointsclearingDo) Omit(cols ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpointsclearingDo) Join(table schema.Tabler, on ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpointsclearingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpointsclearingDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpointsclearingDo) Group(cols ...field.Expr) ILibpointsclearingDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpointsclearingDo) Having(conds ...gen.Condition) ILibpointsclearingDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpointsclearingDo) Limit(limit int) ILibpointsclearingDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpointsclearingDo) Offset(offset int) ILibpointsclearingDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpointsclearingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpointsclearingDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpointsclearingDo) Unscoped() ILibpointsclearingDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpointsclearingDo) Create(values ...*model.Libpointsclearing) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpointsclearingDo) CreateInBatches(values []*model.Libpointsclearing, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpointsclearingDo) Save(values ...*model.Libpointsclearing) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpointsclearingDo) First() (*model.Libpointsclearing, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointsclearing), nil
	}
}

func (l libpointsclearingDo) Take() (*model.Libpointsclearing, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointsclearing), nil
	}
}

func (l libpointsclearingDo) Last() (*model.Libpointsclearing, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointsclearing), nil
	}
}

func (l libpointsclearingDo) Find() ([]*model.Libpointsclearing, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpointsclearing), err
}

func (l libpointsclearingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpointsclearing, err error) {
	buf := make([]*model.Libpointsclearing, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpointsclearingDo) FindInBatches(result *[]*model.Libpointsclearing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpointsclearingDo) Attrs(attrs ...field.AssignExpr) ILibpointsclearingDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpointsclearingDo) Assign(attrs ...field.AssignExpr) ILibpointsclearingDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpointsclearingDo) Joins(fields ...field.RelationField) ILibpointsclearingDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpointsclearingDo) Preload(fields ...field.RelationField) ILibpointsclearingDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpointsclearingDo) FirstOrInit() (*model.Libpointsclearing, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointsclearing), nil
	}
}

func (l libpointsclearingDo) FirstOrCreate() (*model.Libpointsclearing, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointsclearing), nil
	}
}

func (l libpointsclearingDo) FindByPage(offset int, limit int) (result []*model.Libpointsclearing, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpointsclearingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpointsclearingDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpointsclearingDo) Delete(models ...*model.Libpointsclearing) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpointsclearingDo) withDO(do gen.Dao) *libpointsclearingDo {
	l.DO = *do.(*gen.DO)
	return l
}
