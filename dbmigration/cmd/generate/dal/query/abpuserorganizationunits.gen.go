// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpuserorganizationunit(db *gorm.DB) abpuserorganizationunit {
	_abpuserorganizationunit := abpuserorganizationunit{}

	_abpuserorganizationunit.abpuserorganizationunitDo.UseDB(db)
	_abpuserorganizationunit.abpuserorganizationunitDo.UseModel(&model.Abpuserorganizationunit{})

	tableName := _abpuserorganizationunit.abpuserorganizationunitDo.TableName()
	_abpuserorganizationunit.ALL = field.NewAsterisk(tableName)
	_abpuserorganizationunit.ID = field.NewInt64(tableName, "Id")
	_abpuserorganizationunit.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpuserorganizationunit.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpuserorganizationunit.TenantID = field.NewInt64(tableName, "TenantId")
	_abpuserorganizationunit.UserID = field.NewInt64(tableName, "UserId")
	_abpuserorganizationunit.OrganizationUnitID = field.NewInt64(tableName, "OrganizationUnitId")
	_abpuserorganizationunit.IsDeleted = field.NewField(tableName, "IsDeleted")

	_abpuserorganizationunit.fillFieldMap()

	return _abpuserorganizationunit
}

type abpuserorganizationunit struct {
	abpuserorganizationunitDo abpuserorganizationunitDo

	ALL                field.Asterisk
	ID                 field.Int64
	CreationTime       field.Time
	CreatorUserID      field.Int64
	TenantID           field.Int64
	UserID             field.Int64
	OrganizationUnitID field.Int64
	IsDeleted          field.Field

	fieldMap map[string]field.Expr
}

func (a abpuserorganizationunit) Table(newTableName string) *abpuserorganizationunit {
	a.abpuserorganizationunitDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpuserorganizationunit) As(alias string) *abpuserorganizationunit {
	a.abpuserorganizationunitDo.DO = *(a.abpuserorganizationunitDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpuserorganizationunit) updateTableName(table string) *abpuserorganizationunit {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.OrganizationUnitID = field.NewInt64(table, "OrganizationUnitId")
	a.IsDeleted = field.NewField(table, "IsDeleted")

	a.fillFieldMap()

	return a
}

func (a *abpuserorganizationunit) WithContext(ctx context.Context) IAbpuserorganizationunitDo {
	return a.abpuserorganizationunitDo.WithContext(ctx)
}

func (a abpuserorganizationunit) TableName() string { return a.abpuserorganizationunitDo.TableName() }

func (a abpuserorganizationunit) Alias() string { return a.abpuserorganizationunitDo.Alias() }

func (a *abpuserorganizationunit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpuserorganizationunit) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["OrganizationUnitId"] = a.OrganizationUnitID
	a.fieldMap["IsDeleted"] = a.IsDeleted
}

func (a abpuserorganizationunit) clone(db *gorm.DB) abpuserorganizationunit {
	a.abpuserorganizationunitDo.ReplaceDB(db)
	return a
}

type abpuserorganizationunitDo struct{ gen.DO }

type IAbpuserorganizationunitDo interface {
	gen.SubQuery
	Debug() IAbpuserorganizationunitDo
	WithContext(ctx context.Context) IAbpuserorganizationunitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpuserorganizationunitDo
	Not(conds ...gen.Condition) IAbpuserorganizationunitDo
	Or(conds ...gen.Condition) IAbpuserorganizationunitDo
	Select(conds ...field.Expr) IAbpuserorganizationunitDo
	Where(conds ...gen.Condition) IAbpuserorganizationunitDo
	Order(conds ...field.Expr) IAbpuserorganizationunitDo
	Distinct(cols ...field.Expr) IAbpuserorganizationunitDo
	Omit(cols ...field.Expr) IAbpuserorganizationunitDo
	Join(table schema.Tabler, on ...field.Expr) IAbpuserorganizationunitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserorganizationunitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserorganizationunitDo
	Group(cols ...field.Expr) IAbpuserorganizationunitDo
	Having(conds ...gen.Condition) IAbpuserorganizationunitDo
	Limit(limit int) IAbpuserorganizationunitDo
	Offset(offset int) IAbpuserorganizationunitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserorganizationunitDo
	Unscoped() IAbpuserorganizationunitDo
	Create(values ...*model.Abpuserorganizationunit) error
	CreateInBatches(values []*model.Abpuserorganizationunit, batchSize int) error
	Save(values ...*model.Abpuserorganizationunit) error
	First() (*model.Abpuserorganizationunit, error)
	Take() (*model.Abpuserorganizationunit, error)
	Last() (*model.Abpuserorganizationunit, error)
	Find() ([]*model.Abpuserorganizationunit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserorganizationunit, err error)
	FindInBatches(result *[]*model.Abpuserorganizationunit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpuserorganizationunit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpuserorganizationunitDo
	Assign(attrs ...field.AssignExpr) IAbpuserorganizationunitDo
	Joins(fields ...field.RelationField) IAbpuserorganizationunitDo
	Preload(fields ...field.RelationField) IAbpuserorganizationunitDo
	FirstOrInit() (*model.Abpuserorganizationunit, error)
	FirstOrCreate() (*model.Abpuserorganizationunit, error)
	FindByPage(offset int, limit int) (result []*model.Abpuserorganizationunit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpuserorganizationunitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpuserorganizationunitDo) Debug() IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Debug())
}

func (a abpuserorganizationunitDo) WithContext(ctx context.Context) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpuserorganizationunitDo) ReadDB() IAbpuserorganizationunitDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpuserorganizationunitDo) WriteDB() IAbpuserorganizationunitDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpuserorganizationunitDo) Clauses(conds ...clause.Expression) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpuserorganizationunitDo) Returning(value interface{}, columns ...string) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpuserorganizationunitDo) Not(conds ...gen.Condition) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpuserorganizationunitDo) Or(conds ...gen.Condition) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpuserorganizationunitDo) Select(conds ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpuserorganizationunitDo) Where(conds ...gen.Condition) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpuserorganizationunitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpuserorganizationunitDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpuserorganizationunitDo) Order(conds ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpuserorganizationunitDo) Distinct(cols ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpuserorganizationunitDo) Omit(cols ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpuserorganizationunitDo) Join(table schema.Tabler, on ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpuserorganizationunitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpuserorganizationunitDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpuserorganizationunitDo) Group(cols ...field.Expr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpuserorganizationunitDo) Having(conds ...gen.Condition) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpuserorganizationunitDo) Limit(limit int) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpuserorganizationunitDo) Offset(offset int) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpuserorganizationunitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpuserorganizationunitDo) Unscoped() IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpuserorganizationunitDo) Create(values ...*model.Abpuserorganizationunit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpuserorganizationunitDo) CreateInBatches(values []*model.Abpuserorganizationunit, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpuserorganizationunitDo) Save(values ...*model.Abpuserorganizationunit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpuserorganizationunitDo) First() (*model.Abpuserorganizationunit, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserorganizationunit), nil
	}
}

func (a abpuserorganizationunitDo) Take() (*model.Abpuserorganizationunit, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserorganizationunit), nil
	}
}

func (a abpuserorganizationunitDo) Last() (*model.Abpuserorganizationunit, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserorganizationunit), nil
	}
}

func (a abpuserorganizationunitDo) Find() ([]*model.Abpuserorganizationunit, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpuserorganizationunit), err
}

func (a abpuserorganizationunitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserorganizationunit, err error) {
	buf := make([]*model.Abpuserorganizationunit, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpuserorganizationunitDo) FindInBatches(result *[]*model.Abpuserorganizationunit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpuserorganizationunitDo) Attrs(attrs ...field.AssignExpr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpuserorganizationunitDo) Assign(attrs ...field.AssignExpr) IAbpuserorganizationunitDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpuserorganizationunitDo) Joins(fields ...field.RelationField) IAbpuserorganizationunitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpuserorganizationunitDo) Preload(fields ...field.RelationField) IAbpuserorganizationunitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpuserorganizationunitDo) FirstOrInit() (*model.Abpuserorganizationunit, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserorganizationunit), nil
	}
}

func (a abpuserorganizationunitDo) FirstOrCreate() (*model.Abpuserorganizationunit, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserorganizationunit), nil
	}
}

func (a abpuserorganizationunitDo) FindByPage(offset int, limit int) (result []*model.Abpuserorganizationunit, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpuserorganizationunitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpuserorganizationunitDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpuserorganizationunitDo) Delete(models ...*model.Abpuserorganizationunit) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpuserorganizationunitDo) withDO(do gen.Dao) *abpuserorganizationunitDo {
	a.DO = *do.(*gen.DO)
	return a
}
