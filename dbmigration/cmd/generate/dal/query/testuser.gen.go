// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newTestuser(db *gorm.DB) testuser {
	_testuser := testuser{}

	_testuser.testuserDo.UseDB(db)
	_testuser.testuserDo.UseModel(&model.Testuser{})

	tableName := _testuser.testuserDo.TableName()
	_testuser.ALL = field.NewAsterisk(tableName)
	_testuser.ID = field.NewInt64(tableName, "id")
	_testuser.Name = field.NewString(tableName, "name")

	_testuser.fillFieldMap()

	return _testuser
}

type testuser struct {
	testuserDo testuserDo

	ALL  field.Asterisk
	ID   field.Int64
	Name field.String

	fieldMap map[string]field.Expr
}

func (t testuser) Table(newTableName string) *testuser {
	t.testuserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t testuser) As(alias string) *testuser {
	t.testuserDo.DO = *(t.testuserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *testuser) updateTableName(table string) *testuser {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")

	t.fillFieldMap()

	return t
}

func (t *testuser) WithContext(ctx context.Context) ITestuserDo { return t.testuserDo.WithContext(ctx) }

func (t testuser) TableName() string { return t.testuserDo.TableName() }

func (t testuser) Alias() string { return t.testuserDo.Alias() }

func (t *testuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *testuser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
}

func (t testuser) clone(db *gorm.DB) testuser {
	t.testuserDo.ReplaceDB(db)
	return t
}

type testuserDo struct{ gen.DO }

type ITestuserDo interface {
	gen.SubQuery
	Debug() ITestuserDo
	WithContext(ctx context.Context) ITestuserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITestuserDo
	Not(conds ...gen.Condition) ITestuserDo
	Or(conds ...gen.Condition) ITestuserDo
	Select(conds ...field.Expr) ITestuserDo
	Where(conds ...gen.Condition) ITestuserDo
	Order(conds ...field.Expr) ITestuserDo
	Distinct(cols ...field.Expr) ITestuserDo
	Omit(cols ...field.Expr) ITestuserDo
	Join(table schema.Tabler, on ...field.Expr) ITestuserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITestuserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITestuserDo
	Group(cols ...field.Expr) ITestuserDo
	Having(conds ...gen.Condition) ITestuserDo
	Limit(limit int) ITestuserDo
	Offset(offset int) ITestuserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITestuserDo
	Unscoped() ITestuserDo
	Create(values ...*model.Testuser) error
	CreateInBatches(values []*model.Testuser, batchSize int) error
	Save(values ...*model.Testuser) error
	First() (*model.Testuser, error)
	Take() (*model.Testuser, error)
	Last() (*model.Testuser, error)
	Find() ([]*model.Testuser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Testuser, err error)
	FindInBatches(result *[]*model.Testuser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Testuser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITestuserDo
	Assign(attrs ...field.AssignExpr) ITestuserDo
	Joins(fields ...field.RelationField) ITestuserDo
	Preload(fields ...field.RelationField) ITestuserDo
	FirstOrInit() (*model.Testuser, error)
	FirstOrCreate() (*model.Testuser, error)
	FindByPage(offset int, limit int) (result []*model.Testuser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITestuserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t testuserDo) Debug() ITestuserDo {
	return t.withDO(t.DO.Debug())
}

func (t testuserDo) WithContext(ctx context.Context) ITestuserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t testuserDo) ReadDB() ITestuserDo {
	return t.Clauses(dbresolver.Read)
}

func (t testuserDo) WriteDB() ITestuserDo {
	return t.Clauses(dbresolver.Write)
}

func (t testuserDo) Clauses(conds ...clause.Expression) ITestuserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t testuserDo) Returning(value interface{}, columns ...string) ITestuserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t testuserDo) Not(conds ...gen.Condition) ITestuserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t testuserDo) Or(conds ...gen.Condition) ITestuserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t testuserDo) Select(conds ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t testuserDo) Where(conds ...gen.Condition) ITestuserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t testuserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITestuserDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t testuserDo) Order(conds ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t testuserDo) Distinct(cols ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t testuserDo) Omit(cols ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t testuserDo) Join(table schema.Tabler, on ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t testuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t testuserDo) RightJoin(table schema.Tabler, on ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t testuserDo) Group(cols ...field.Expr) ITestuserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t testuserDo) Having(conds ...gen.Condition) ITestuserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t testuserDo) Limit(limit int) ITestuserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t testuserDo) Offset(offset int) ITestuserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t testuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITestuserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t testuserDo) Unscoped() ITestuserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t testuserDo) Create(values ...*model.Testuser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t testuserDo) CreateInBatches(values []*model.Testuser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t testuserDo) Save(values ...*model.Testuser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t testuserDo) First() (*model.Testuser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testuser), nil
	}
}

func (t testuserDo) Take() (*model.Testuser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testuser), nil
	}
}

func (t testuserDo) Last() (*model.Testuser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testuser), nil
	}
}

func (t testuserDo) Find() ([]*model.Testuser, error) {
	result, err := t.DO.Find()
	return result.([]*model.Testuser), err
}

func (t testuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Testuser, err error) {
	buf := make([]*model.Testuser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t testuserDo) FindInBatches(result *[]*model.Testuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t testuserDo) Attrs(attrs ...field.AssignExpr) ITestuserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t testuserDo) Assign(attrs ...field.AssignExpr) ITestuserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t testuserDo) Joins(fields ...field.RelationField) ITestuserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t testuserDo) Preload(fields ...field.RelationField) ITestuserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t testuserDo) FirstOrInit() (*model.Testuser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testuser), nil
	}
}

func (t testuserDo) FirstOrCreate() (*model.Testuser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Testuser), nil
	}
}

func (t testuserDo) FindByPage(offset int, limit int) (result []*model.Testuser, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t testuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t testuserDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t testuserDo) Delete(models ...*model.Testuser) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *testuserDo) withDO(do gen.Dao) *testuserDo {
	t.DO = *do.(*gen.DO)
	return t
}
