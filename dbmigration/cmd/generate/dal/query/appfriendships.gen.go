// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAppfriendship(db *gorm.DB) appfriendship {
	_appfriendship := appfriendship{}

	_appfriendship.appfriendshipDo.UseDB(db)
	_appfriendship.appfriendshipDo.UseModel(&model.Appfriendship{})

	tableName := _appfriendship.appfriendshipDo.TableName()
	_appfriendship.ALL = field.NewAsterisk(tableName)
	_appfriendship.ID = field.NewInt64(tableName, "Id")
	_appfriendship.UserID = field.NewInt64(tableName, "UserId")
	_appfriendship.TenantID = field.NewInt64(tableName, "TenantId")
	_appfriendship.FriendUserID = field.NewInt64(tableName, "FriendUserId")
	_appfriendship.FriendTenantID = field.NewInt64(tableName, "FriendTenantId")
	_appfriendship.FriendUserName = field.NewString(tableName, "FriendUserName")
	_appfriendship.FriendTenancyName = field.NewString(tableName, "FriendTenancyName")
	_appfriendship.FriendProfilePictureID = field.NewString(tableName, "FriendProfilePictureId")
	_appfriendship.State = field.NewInt64(tableName, "State")
	_appfriendship.CreationTime = field.NewTime(tableName, "CreationTime")

	_appfriendship.fillFieldMap()

	return _appfriendship
}

type appfriendship struct {
	appfriendshipDo appfriendshipDo

	ALL                    field.Asterisk
	ID                     field.Int64
	UserID                 field.Int64
	TenantID               field.Int64
	FriendUserID           field.Int64
	FriendTenantID         field.Int64
	FriendUserName         field.String
	FriendTenancyName      field.String
	FriendProfilePictureID field.String
	State                  field.Int64
	CreationTime           field.Time

	fieldMap map[string]field.Expr
}

func (a appfriendship) Table(newTableName string) *appfriendship {
	a.appfriendshipDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appfriendship) As(alias string) *appfriendship {
	a.appfriendshipDo.DO = *(a.appfriendshipDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appfriendship) updateTableName(table string) *appfriendship {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.UserID = field.NewInt64(table, "UserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.FriendUserID = field.NewInt64(table, "FriendUserId")
	a.FriendTenantID = field.NewInt64(table, "FriendTenantId")
	a.FriendUserName = field.NewString(table, "FriendUserName")
	a.FriendTenancyName = field.NewString(table, "FriendTenancyName")
	a.FriendProfilePictureID = field.NewString(table, "FriendProfilePictureId")
	a.State = field.NewInt64(table, "State")
	a.CreationTime = field.NewTime(table, "CreationTime")

	a.fillFieldMap()

	return a
}

func (a *appfriendship) WithContext(ctx context.Context) IAppfriendshipDo {
	return a.appfriendshipDo.WithContext(ctx)
}

func (a appfriendship) TableName() string { return a.appfriendshipDo.TableName() }

func (a appfriendship) Alias() string { return a.appfriendshipDo.Alias() }

func (a *appfriendship) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appfriendship) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["FriendUserId"] = a.FriendUserID
	a.fieldMap["FriendTenantId"] = a.FriendTenantID
	a.fieldMap["FriendUserName"] = a.FriendUserName
	a.fieldMap["FriendTenancyName"] = a.FriendTenancyName
	a.fieldMap["FriendProfilePictureId"] = a.FriendProfilePictureID
	a.fieldMap["State"] = a.State
	a.fieldMap["CreationTime"] = a.CreationTime
}

func (a appfriendship) clone(db *gorm.DB) appfriendship {
	a.appfriendshipDo.ReplaceDB(db)
	return a
}

type appfriendshipDo struct{ gen.DO }

type IAppfriendshipDo interface {
	gen.SubQuery
	Debug() IAppfriendshipDo
	WithContext(ctx context.Context) IAppfriendshipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppfriendshipDo
	Not(conds ...gen.Condition) IAppfriendshipDo
	Or(conds ...gen.Condition) IAppfriendshipDo
	Select(conds ...field.Expr) IAppfriendshipDo
	Where(conds ...gen.Condition) IAppfriendshipDo
	Order(conds ...field.Expr) IAppfriendshipDo
	Distinct(cols ...field.Expr) IAppfriendshipDo
	Omit(cols ...field.Expr) IAppfriendshipDo
	Join(table schema.Tabler, on ...field.Expr) IAppfriendshipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppfriendshipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppfriendshipDo
	Group(cols ...field.Expr) IAppfriendshipDo
	Having(conds ...gen.Condition) IAppfriendshipDo
	Limit(limit int) IAppfriendshipDo
	Offset(offset int) IAppfriendshipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppfriendshipDo
	Unscoped() IAppfriendshipDo
	Create(values ...*model.Appfriendship) error
	CreateInBatches(values []*model.Appfriendship, batchSize int) error
	Save(values ...*model.Appfriendship) error
	First() (*model.Appfriendship, error)
	Take() (*model.Appfriendship, error)
	Last() (*model.Appfriendship, error)
	Find() ([]*model.Appfriendship, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appfriendship, err error)
	FindInBatches(result *[]*model.Appfriendship, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appfriendship) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppfriendshipDo
	Assign(attrs ...field.AssignExpr) IAppfriendshipDo
	Joins(fields ...field.RelationField) IAppfriendshipDo
	Preload(fields ...field.RelationField) IAppfriendshipDo
	FirstOrInit() (*model.Appfriendship, error)
	FirstOrCreate() (*model.Appfriendship, error)
	FindByPage(offset int, limit int) (result []*model.Appfriendship, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppfriendshipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appfriendshipDo) Debug() IAppfriendshipDo {
	return a.withDO(a.DO.Debug())
}

func (a appfriendshipDo) WithContext(ctx context.Context) IAppfriendshipDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appfriendshipDo) ReadDB() IAppfriendshipDo {
	return a.Clauses(dbresolver.Read)
}

func (a appfriendshipDo) WriteDB() IAppfriendshipDo {
	return a.Clauses(dbresolver.Write)
}

func (a appfriendshipDo) Clauses(conds ...clause.Expression) IAppfriendshipDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appfriendshipDo) Returning(value interface{}, columns ...string) IAppfriendshipDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appfriendshipDo) Not(conds ...gen.Condition) IAppfriendshipDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appfriendshipDo) Or(conds ...gen.Condition) IAppfriendshipDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appfriendshipDo) Select(conds ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appfriendshipDo) Where(conds ...gen.Condition) IAppfriendshipDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appfriendshipDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppfriendshipDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appfriendshipDo) Order(conds ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appfriendshipDo) Distinct(cols ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appfriendshipDo) Omit(cols ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appfriendshipDo) Join(table schema.Tabler, on ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appfriendshipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appfriendshipDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appfriendshipDo) Group(cols ...field.Expr) IAppfriendshipDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appfriendshipDo) Having(conds ...gen.Condition) IAppfriendshipDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appfriendshipDo) Limit(limit int) IAppfriendshipDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appfriendshipDo) Offset(offset int) IAppfriendshipDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appfriendshipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppfriendshipDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appfriendshipDo) Unscoped() IAppfriendshipDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appfriendshipDo) Create(values ...*model.Appfriendship) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appfriendshipDo) CreateInBatches(values []*model.Appfriendship, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appfriendshipDo) Save(values ...*model.Appfriendship) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appfriendshipDo) First() (*model.Appfriendship, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appfriendship), nil
	}
}

func (a appfriendshipDo) Take() (*model.Appfriendship, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appfriendship), nil
	}
}

func (a appfriendshipDo) Last() (*model.Appfriendship, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appfriendship), nil
	}
}

func (a appfriendshipDo) Find() ([]*model.Appfriendship, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appfriendship), err
}

func (a appfriendshipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appfriendship, err error) {
	buf := make([]*model.Appfriendship, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appfriendshipDo) FindInBatches(result *[]*model.Appfriendship, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appfriendshipDo) Attrs(attrs ...field.AssignExpr) IAppfriendshipDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appfriendshipDo) Assign(attrs ...field.AssignExpr) IAppfriendshipDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appfriendshipDo) Joins(fields ...field.RelationField) IAppfriendshipDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appfriendshipDo) Preload(fields ...field.RelationField) IAppfriendshipDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appfriendshipDo) FirstOrInit() (*model.Appfriendship, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appfriendship), nil
	}
}

func (a appfriendshipDo) FirstOrCreate() (*model.Appfriendship, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appfriendship), nil
	}
}

func (a appfriendshipDo) FindByPage(offset int, limit int) (result []*model.Appfriendship, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appfriendshipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appfriendshipDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appfriendshipDo) Delete(models ...*model.Appfriendship) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appfriendshipDo) withDO(do gen.Dao) *appfriendshipDo {
	a.DO = *do.(*gen.DO)
	return a
}
