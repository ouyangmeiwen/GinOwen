// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAppchatmessage(db *gorm.DB) appchatmessage {
	_appchatmessage := appchatmessage{}

	_appchatmessage.appchatmessageDo.UseDB(db)
	_appchatmessage.appchatmessageDo.UseModel(&model.Appchatmessage{})

	tableName := _appchatmessage.appchatmessageDo.TableName()
	_appchatmessage.ALL = field.NewAsterisk(tableName)
	_appchatmessage.ID = field.NewInt64(tableName, "Id")
	_appchatmessage.UserID = field.NewInt64(tableName, "UserId")
	_appchatmessage.TenantID = field.NewInt64(tableName, "TenantId")
	_appchatmessage.TargetUserID = field.NewInt64(tableName, "TargetUserId")
	_appchatmessage.TargetTenantID = field.NewInt64(tableName, "TargetTenantId")
	_appchatmessage.Message = field.NewString(tableName, "Message")
	_appchatmessage.CreationTime = field.NewTime(tableName, "CreationTime")
	_appchatmessage.Side = field.NewInt64(tableName, "Side")
	_appchatmessage.ReadState = field.NewInt64(tableName, "ReadState")
	_appchatmessage.ReceiverReadState = field.NewInt64(tableName, "ReceiverReadState")
	_appchatmessage.SharedMessageID = field.NewString(tableName, "SharedMessageId")

	_appchatmessage.fillFieldMap()

	return _appchatmessage
}

type appchatmessage struct {
	appchatmessageDo appchatmessageDo

	ALL               field.Asterisk
	ID                field.Int64
	UserID            field.Int64
	TenantID          field.Int64
	TargetUserID      field.Int64
	TargetTenantID    field.Int64
	Message           field.String
	CreationTime      field.Time
	Side              field.Int64
	ReadState         field.Int64
	ReceiverReadState field.Int64
	SharedMessageID   field.String

	fieldMap map[string]field.Expr
}

func (a appchatmessage) Table(newTableName string) *appchatmessage {
	a.appchatmessageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appchatmessage) As(alias string) *appchatmessage {
	a.appchatmessageDo.DO = *(a.appchatmessageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appchatmessage) updateTableName(table string) *appchatmessage {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.UserID = field.NewInt64(table, "UserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.TargetUserID = field.NewInt64(table, "TargetUserId")
	a.TargetTenantID = field.NewInt64(table, "TargetTenantId")
	a.Message = field.NewString(table, "Message")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.Side = field.NewInt64(table, "Side")
	a.ReadState = field.NewInt64(table, "ReadState")
	a.ReceiverReadState = field.NewInt64(table, "ReceiverReadState")
	a.SharedMessageID = field.NewString(table, "SharedMessageId")

	a.fillFieldMap()

	return a
}

func (a *appchatmessage) WithContext(ctx context.Context) IAppchatmessageDo {
	return a.appchatmessageDo.WithContext(ctx)
}

func (a appchatmessage) TableName() string { return a.appchatmessageDo.TableName() }

func (a appchatmessage) Alias() string { return a.appchatmessageDo.Alias() }

func (a *appchatmessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appchatmessage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["TargetUserId"] = a.TargetUserID
	a.fieldMap["TargetTenantId"] = a.TargetTenantID
	a.fieldMap["Message"] = a.Message
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["Side"] = a.Side
	a.fieldMap["ReadState"] = a.ReadState
	a.fieldMap["ReceiverReadState"] = a.ReceiverReadState
	a.fieldMap["SharedMessageId"] = a.SharedMessageID
}

func (a appchatmessage) clone(db *gorm.DB) appchatmessage {
	a.appchatmessageDo.ReplaceDB(db)
	return a
}

type appchatmessageDo struct{ gen.DO }

type IAppchatmessageDo interface {
	gen.SubQuery
	Debug() IAppchatmessageDo
	WithContext(ctx context.Context) IAppchatmessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppchatmessageDo
	Not(conds ...gen.Condition) IAppchatmessageDo
	Or(conds ...gen.Condition) IAppchatmessageDo
	Select(conds ...field.Expr) IAppchatmessageDo
	Where(conds ...gen.Condition) IAppchatmessageDo
	Order(conds ...field.Expr) IAppchatmessageDo
	Distinct(cols ...field.Expr) IAppchatmessageDo
	Omit(cols ...field.Expr) IAppchatmessageDo
	Join(table schema.Tabler, on ...field.Expr) IAppchatmessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppchatmessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppchatmessageDo
	Group(cols ...field.Expr) IAppchatmessageDo
	Having(conds ...gen.Condition) IAppchatmessageDo
	Limit(limit int) IAppchatmessageDo
	Offset(offset int) IAppchatmessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppchatmessageDo
	Unscoped() IAppchatmessageDo
	Create(values ...*model.Appchatmessage) error
	CreateInBatches(values []*model.Appchatmessage, batchSize int) error
	Save(values ...*model.Appchatmessage) error
	First() (*model.Appchatmessage, error)
	Take() (*model.Appchatmessage, error)
	Last() (*model.Appchatmessage, error)
	Find() ([]*model.Appchatmessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appchatmessage, err error)
	FindInBatches(result *[]*model.Appchatmessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appchatmessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppchatmessageDo
	Assign(attrs ...field.AssignExpr) IAppchatmessageDo
	Joins(fields ...field.RelationField) IAppchatmessageDo
	Preload(fields ...field.RelationField) IAppchatmessageDo
	FirstOrInit() (*model.Appchatmessage, error)
	FirstOrCreate() (*model.Appchatmessage, error)
	FindByPage(offset int, limit int) (result []*model.Appchatmessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppchatmessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appchatmessageDo) Debug() IAppchatmessageDo {
	return a.withDO(a.DO.Debug())
}

func (a appchatmessageDo) WithContext(ctx context.Context) IAppchatmessageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appchatmessageDo) ReadDB() IAppchatmessageDo {
	return a.Clauses(dbresolver.Read)
}

func (a appchatmessageDo) WriteDB() IAppchatmessageDo {
	return a.Clauses(dbresolver.Write)
}

func (a appchatmessageDo) Clauses(conds ...clause.Expression) IAppchatmessageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appchatmessageDo) Returning(value interface{}, columns ...string) IAppchatmessageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appchatmessageDo) Not(conds ...gen.Condition) IAppchatmessageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appchatmessageDo) Or(conds ...gen.Condition) IAppchatmessageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appchatmessageDo) Select(conds ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appchatmessageDo) Where(conds ...gen.Condition) IAppchatmessageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appchatmessageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppchatmessageDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appchatmessageDo) Order(conds ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appchatmessageDo) Distinct(cols ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appchatmessageDo) Omit(cols ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appchatmessageDo) Join(table schema.Tabler, on ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appchatmessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appchatmessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appchatmessageDo) Group(cols ...field.Expr) IAppchatmessageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appchatmessageDo) Having(conds ...gen.Condition) IAppchatmessageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appchatmessageDo) Limit(limit int) IAppchatmessageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appchatmessageDo) Offset(offset int) IAppchatmessageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appchatmessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppchatmessageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appchatmessageDo) Unscoped() IAppchatmessageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appchatmessageDo) Create(values ...*model.Appchatmessage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appchatmessageDo) CreateInBatches(values []*model.Appchatmessage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appchatmessageDo) Save(values ...*model.Appchatmessage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appchatmessageDo) First() (*model.Appchatmessage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appchatmessage), nil
	}
}

func (a appchatmessageDo) Take() (*model.Appchatmessage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appchatmessage), nil
	}
}

func (a appchatmessageDo) Last() (*model.Appchatmessage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appchatmessage), nil
	}
}

func (a appchatmessageDo) Find() ([]*model.Appchatmessage, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appchatmessage), err
}

func (a appchatmessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appchatmessage, err error) {
	buf := make([]*model.Appchatmessage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appchatmessageDo) FindInBatches(result *[]*model.Appchatmessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appchatmessageDo) Attrs(attrs ...field.AssignExpr) IAppchatmessageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appchatmessageDo) Assign(attrs ...field.AssignExpr) IAppchatmessageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appchatmessageDo) Joins(fields ...field.RelationField) IAppchatmessageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appchatmessageDo) Preload(fields ...field.RelationField) IAppchatmessageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appchatmessageDo) FirstOrInit() (*model.Appchatmessage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appchatmessage), nil
	}
}

func (a appchatmessageDo) FirstOrCreate() (*model.Appchatmessage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appchatmessage), nil
	}
}

func (a appchatmessageDo) FindByPage(offset int, limit int) (result []*model.Appchatmessage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appchatmessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appchatmessageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appchatmessageDo) Delete(models ...*model.Appchatmessage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appchatmessageDo) withDO(do gen.Dao) *appchatmessageDo {
	a.DO = *do.(*gen.DO)
	return a
}
