// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newHangfirejobqueue(db *gorm.DB) hangfirejobqueue {
	_hangfirejobqueue := hangfirejobqueue{}

	_hangfirejobqueue.hangfirejobqueueDo.UseDB(db)
	_hangfirejobqueue.hangfirejobqueueDo.UseModel(&model.Hangfirejobqueue{})

	tableName := _hangfirejobqueue.hangfirejobqueueDo.TableName()
	_hangfirejobqueue.ALL = field.NewAsterisk(tableName)
	_hangfirejobqueue.ID = field.NewInt64(tableName, "Id")
	_hangfirejobqueue.JobID = field.NewInt64(tableName, "JobId")
	_hangfirejobqueue.FetchedAt = field.NewTime(tableName, "FetchedAt")
	_hangfirejobqueue.Queue = field.NewString(tableName, "Queue")
	_hangfirejobqueue.FetchToken = field.NewString(tableName, "FetchToken")

	_hangfirejobqueue.fillFieldMap()

	return _hangfirejobqueue
}

type hangfirejobqueue struct {
	hangfirejobqueueDo hangfirejobqueueDo

	ALL        field.Asterisk
	ID         field.Int64
	JobID      field.Int64
	FetchedAt  field.Time
	Queue      field.String
	FetchToken field.String

	fieldMap map[string]field.Expr
}

func (h hangfirejobqueue) Table(newTableName string) *hangfirejobqueue {
	h.hangfirejobqueueDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirejobqueue) As(alias string) *hangfirejobqueue {
	h.hangfirejobqueueDo.DO = *(h.hangfirejobqueueDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirejobqueue) updateTableName(table string) *hangfirejobqueue {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.JobID = field.NewInt64(table, "JobId")
	h.FetchedAt = field.NewTime(table, "FetchedAt")
	h.Queue = field.NewString(table, "Queue")
	h.FetchToken = field.NewString(table, "FetchToken")

	h.fillFieldMap()

	return h
}

func (h *hangfirejobqueue) WithContext(ctx context.Context) IHangfirejobqueueDo {
	return h.hangfirejobqueueDo.WithContext(ctx)
}

func (h hangfirejobqueue) TableName() string { return h.hangfirejobqueueDo.TableName() }

func (h hangfirejobqueue) Alias() string { return h.hangfirejobqueueDo.Alias() }

func (h *hangfirejobqueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirejobqueue) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 5)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["JobId"] = h.JobID
	h.fieldMap["FetchedAt"] = h.FetchedAt
	h.fieldMap["Queue"] = h.Queue
	h.fieldMap["FetchToken"] = h.FetchToken
}

func (h hangfirejobqueue) clone(db *gorm.DB) hangfirejobqueue {
	h.hangfirejobqueueDo.ReplaceDB(db)
	return h
}

type hangfirejobqueueDo struct{ gen.DO }

type IHangfirejobqueueDo interface {
	gen.SubQuery
	Debug() IHangfirejobqueueDo
	WithContext(ctx context.Context) IHangfirejobqueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirejobqueueDo
	Not(conds ...gen.Condition) IHangfirejobqueueDo
	Or(conds ...gen.Condition) IHangfirejobqueueDo
	Select(conds ...field.Expr) IHangfirejobqueueDo
	Where(conds ...gen.Condition) IHangfirejobqueueDo
	Order(conds ...field.Expr) IHangfirejobqueueDo
	Distinct(cols ...field.Expr) IHangfirejobqueueDo
	Omit(cols ...field.Expr) IHangfirejobqueueDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirejobqueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobqueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobqueueDo
	Group(cols ...field.Expr) IHangfirejobqueueDo
	Having(conds ...gen.Condition) IHangfirejobqueueDo
	Limit(limit int) IHangfirejobqueueDo
	Offset(offset int) IHangfirejobqueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobqueueDo
	Unscoped() IHangfirejobqueueDo
	Create(values ...*model.Hangfirejobqueue) error
	CreateInBatches(values []*model.Hangfirejobqueue, batchSize int) error
	Save(values ...*model.Hangfirejobqueue) error
	First() (*model.Hangfirejobqueue, error)
	Take() (*model.Hangfirejobqueue, error)
	Last() (*model.Hangfirejobqueue, error)
	Find() ([]*model.Hangfirejobqueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejobqueue, err error)
	FindInBatches(result *[]*model.Hangfirejobqueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirejobqueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirejobqueueDo
	Assign(attrs ...field.AssignExpr) IHangfirejobqueueDo
	Joins(fields ...field.RelationField) IHangfirejobqueueDo
	Preload(fields ...field.RelationField) IHangfirejobqueueDo
	FirstOrInit() (*model.Hangfirejobqueue, error)
	FirstOrCreate() (*model.Hangfirejobqueue, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirejobqueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirejobqueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirejobqueueDo) Debug() IHangfirejobqueueDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirejobqueueDo) WithContext(ctx context.Context) IHangfirejobqueueDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirejobqueueDo) ReadDB() IHangfirejobqueueDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirejobqueueDo) WriteDB() IHangfirejobqueueDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirejobqueueDo) Clauses(conds ...clause.Expression) IHangfirejobqueueDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirejobqueueDo) Returning(value interface{}, columns ...string) IHangfirejobqueueDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirejobqueueDo) Not(conds ...gen.Condition) IHangfirejobqueueDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirejobqueueDo) Or(conds ...gen.Condition) IHangfirejobqueueDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirejobqueueDo) Select(conds ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirejobqueueDo) Where(conds ...gen.Condition) IHangfirejobqueueDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirejobqueueDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirejobqueueDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirejobqueueDo) Order(conds ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirejobqueueDo) Distinct(cols ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirejobqueueDo) Omit(cols ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirejobqueueDo) Join(table schema.Tabler, on ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirejobqueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirejobqueueDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirejobqueueDo) Group(cols ...field.Expr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirejobqueueDo) Having(conds ...gen.Condition) IHangfirejobqueueDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirejobqueueDo) Limit(limit int) IHangfirejobqueueDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirejobqueueDo) Offset(offset int) IHangfirejobqueueDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirejobqueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirejobqueueDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirejobqueueDo) Unscoped() IHangfirejobqueueDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirejobqueueDo) Create(values ...*model.Hangfirejobqueue) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirejobqueueDo) CreateInBatches(values []*model.Hangfirejobqueue, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirejobqueueDo) Save(values ...*model.Hangfirejobqueue) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirejobqueueDo) First() (*model.Hangfirejobqueue, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobqueue), nil
	}
}

func (h hangfirejobqueueDo) Take() (*model.Hangfirejobqueue, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobqueue), nil
	}
}

func (h hangfirejobqueueDo) Last() (*model.Hangfirejobqueue, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobqueue), nil
	}
}

func (h hangfirejobqueueDo) Find() ([]*model.Hangfirejobqueue, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirejobqueue), err
}

func (h hangfirejobqueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirejobqueue, err error) {
	buf := make([]*model.Hangfirejobqueue, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirejobqueueDo) FindInBatches(result *[]*model.Hangfirejobqueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirejobqueueDo) Attrs(attrs ...field.AssignExpr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirejobqueueDo) Assign(attrs ...field.AssignExpr) IHangfirejobqueueDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirejobqueueDo) Joins(fields ...field.RelationField) IHangfirejobqueueDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirejobqueueDo) Preload(fields ...field.RelationField) IHangfirejobqueueDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirejobqueueDo) FirstOrInit() (*model.Hangfirejobqueue, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobqueue), nil
	}
}

func (h hangfirejobqueueDo) FirstOrCreate() (*model.Hangfirejobqueue, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirejobqueue), nil
	}
}

func (h hangfirejobqueueDo) FindByPage(offset int, limit int) (result []*model.Hangfirejobqueue, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirejobqueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirejobqueueDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirejobqueueDo) Delete(models ...*model.Hangfirejobqueue) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirejobqueueDo) withDO(do gen.Dao) *hangfirejobqueueDo {
	h.DO = *do.(*gen.DO)
	return h
}
