// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDjangoCeleryBeatIntervalschedule(db *gorm.DB) djangoCeleryBeatIntervalschedule {
	_djangoCeleryBeatIntervalschedule := djangoCeleryBeatIntervalschedule{}

	_djangoCeleryBeatIntervalschedule.djangoCeleryBeatIntervalscheduleDo.UseDB(db)
	_djangoCeleryBeatIntervalschedule.djangoCeleryBeatIntervalscheduleDo.UseModel(&model.DjangoCeleryBeatIntervalschedule{})

	tableName := _djangoCeleryBeatIntervalschedule.djangoCeleryBeatIntervalscheduleDo.TableName()
	_djangoCeleryBeatIntervalschedule.ALL = field.NewAsterisk(tableName)
	_djangoCeleryBeatIntervalschedule.ID = field.NewInt64(tableName, "id")
	_djangoCeleryBeatIntervalschedule.Every = field.NewInt64(tableName, "every")
	_djangoCeleryBeatIntervalschedule.Period = field.NewString(tableName, "period")

	_djangoCeleryBeatIntervalschedule.fillFieldMap()

	return _djangoCeleryBeatIntervalschedule
}

type djangoCeleryBeatIntervalschedule struct {
	djangoCeleryBeatIntervalscheduleDo djangoCeleryBeatIntervalscheduleDo

	ALL    field.Asterisk
	ID     field.Int64
	Every  field.Int64
	Period field.String

	fieldMap map[string]field.Expr
}

func (d djangoCeleryBeatIntervalschedule) Table(newTableName string) *djangoCeleryBeatIntervalschedule {
	d.djangoCeleryBeatIntervalscheduleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoCeleryBeatIntervalschedule) As(alias string) *djangoCeleryBeatIntervalschedule {
	d.djangoCeleryBeatIntervalscheduleDo.DO = *(d.djangoCeleryBeatIntervalscheduleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoCeleryBeatIntervalschedule) updateTableName(table string) *djangoCeleryBeatIntervalschedule {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Every = field.NewInt64(table, "every")
	d.Period = field.NewString(table, "period")

	d.fillFieldMap()

	return d
}

func (d *djangoCeleryBeatIntervalschedule) WithContext(ctx context.Context) IDjangoCeleryBeatIntervalscheduleDo {
	return d.djangoCeleryBeatIntervalscheduleDo.WithContext(ctx)
}

func (d djangoCeleryBeatIntervalschedule) TableName() string {
	return d.djangoCeleryBeatIntervalscheduleDo.TableName()
}

func (d djangoCeleryBeatIntervalschedule) Alias() string {
	return d.djangoCeleryBeatIntervalscheduleDo.Alias()
}

func (d *djangoCeleryBeatIntervalschedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoCeleryBeatIntervalschedule) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["every"] = d.Every
	d.fieldMap["period"] = d.Period
}

func (d djangoCeleryBeatIntervalschedule) clone(db *gorm.DB) djangoCeleryBeatIntervalschedule {
	d.djangoCeleryBeatIntervalscheduleDo.ReplaceDB(db)
	return d
}

type djangoCeleryBeatIntervalscheduleDo struct{ gen.DO }

type IDjangoCeleryBeatIntervalscheduleDo interface {
	gen.SubQuery
	Debug() IDjangoCeleryBeatIntervalscheduleDo
	WithContext(ctx context.Context) IDjangoCeleryBeatIntervalscheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoCeleryBeatIntervalscheduleDo
	Not(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo
	Or(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo
	Select(conds ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	Where(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo
	Order(conds ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	Distinct(cols ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	Omit(cols ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	Group(cols ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo
	Having(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo
	Limit(limit int) IDjangoCeleryBeatIntervalscheduleDo
	Offset(offset int) IDjangoCeleryBeatIntervalscheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatIntervalscheduleDo
	Unscoped() IDjangoCeleryBeatIntervalscheduleDo
	Create(values ...*model.DjangoCeleryBeatIntervalschedule) error
	CreateInBatches(values []*model.DjangoCeleryBeatIntervalschedule, batchSize int) error
	Save(values ...*model.DjangoCeleryBeatIntervalschedule) error
	First() (*model.DjangoCeleryBeatIntervalschedule, error)
	Take() (*model.DjangoCeleryBeatIntervalschedule, error)
	Last() (*model.DjangoCeleryBeatIntervalschedule, error)
	Find() ([]*model.DjangoCeleryBeatIntervalschedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatIntervalschedule, err error)
	FindInBatches(result *[]*model.DjangoCeleryBeatIntervalschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoCeleryBeatIntervalschedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatIntervalscheduleDo
	Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatIntervalscheduleDo
	Joins(fields ...field.RelationField) IDjangoCeleryBeatIntervalscheduleDo
	Preload(fields ...field.RelationField) IDjangoCeleryBeatIntervalscheduleDo
	FirstOrInit() (*model.DjangoCeleryBeatIntervalschedule, error)
	FirstOrCreate() (*model.DjangoCeleryBeatIntervalschedule, error)
	FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatIntervalschedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoCeleryBeatIntervalscheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoCeleryBeatIntervalscheduleDo) Debug() IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoCeleryBeatIntervalscheduleDo) WithContext(ctx context.Context) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoCeleryBeatIntervalscheduleDo) ReadDB() IDjangoCeleryBeatIntervalscheduleDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoCeleryBeatIntervalscheduleDo) WriteDB() IDjangoCeleryBeatIntervalscheduleDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoCeleryBeatIntervalscheduleDo) Clauses(conds ...clause.Expression) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Returning(value interface{}, columns ...string) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Not(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Or(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Select(conds ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Where(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoCeleryBeatIntervalscheduleDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoCeleryBeatIntervalscheduleDo) Order(conds ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Distinct(cols ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Omit(cols ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoCeleryBeatIntervalscheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoCeleryBeatIntervalscheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Group(cols ...field.Expr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Having(conds ...gen.Condition) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Limit(limit int) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoCeleryBeatIntervalscheduleDo) Offset(offset int) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoCeleryBeatIntervalscheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Unscoped() IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoCeleryBeatIntervalscheduleDo) Create(values ...*model.DjangoCeleryBeatIntervalschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoCeleryBeatIntervalscheduleDo) CreateInBatches(values []*model.DjangoCeleryBeatIntervalschedule, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoCeleryBeatIntervalscheduleDo) Save(values ...*model.DjangoCeleryBeatIntervalschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoCeleryBeatIntervalscheduleDo) First() (*model.DjangoCeleryBeatIntervalschedule, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatIntervalschedule), nil
	}
}

func (d djangoCeleryBeatIntervalscheduleDo) Take() (*model.DjangoCeleryBeatIntervalschedule, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatIntervalschedule), nil
	}
}

func (d djangoCeleryBeatIntervalscheduleDo) Last() (*model.DjangoCeleryBeatIntervalschedule, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatIntervalschedule), nil
	}
}

func (d djangoCeleryBeatIntervalscheduleDo) Find() ([]*model.DjangoCeleryBeatIntervalschedule, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoCeleryBeatIntervalschedule), err
}

func (d djangoCeleryBeatIntervalscheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatIntervalschedule, err error) {
	buf := make([]*model.DjangoCeleryBeatIntervalschedule, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoCeleryBeatIntervalscheduleDo) FindInBatches(result *[]*model.DjangoCeleryBeatIntervalschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoCeleryBeatIntervalscheduleDo) Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatIntervalscheduleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoCeleryBeatIntervalscheduleDo) Joins(fields ...field.RelationField) IDjangoCeleryBeatIntervalscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoCeleryBeatIntervalscheduleDo) Preload(fields ...field.RelationField) IDjangoCeleryBeatIntervalscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoCeleryBeatIntervalscheduleDo) FirstOrInit() (*model.DjangoCeleryBeatIntervalschedule, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatIntervalschedule), nil
	}
}

func (d djangoCeleryBeatIntervalscheduleDo) FirstOrCreate() (*model.DjangoCeleryBeatIntervalschedule, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatIntervalschedule), nil
	}
}

func (d djangoCeleryBeatIntervalscheduleDo) FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatIntervalschedule, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoCeleryBeatIntervalscheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoCeleryBeatIntervalscheduleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoCeleryBeatIntervalscheduleDo) Delete(models ...*model.DjangoCeleryBeatIntervalschedule) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoCeleryBeatIntervalscheduleDo) withDO(do gen.Dao) *djangoCeleryBeatIntervalscheduleDo {
	d.DO = *do.(*gen.DO)
	return d
}
