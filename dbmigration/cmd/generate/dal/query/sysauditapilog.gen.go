// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysauditapilog(db *gorm.DB) sysauditapilog {
	_sysauditapilog := sysauditapilog{}

	_sysauditapilog.sysauditapilogDo.UseDB(db)
	_sysauditapilog.sysauditapilogDo.UseModel(&model.Sysauditapilog{})

	tableName := _sysauditapilog.sysauditapilogDo.TableName()
	_sysauditapilog.ALL = field.NewAsterisk(tableName)
	_sysauditapilog.ID = field.NewInt64(tableName, "Id")
	_sysauditapilog.BrowserInfo = field.NewString(tableName, "BrowserInfo")
	_sysauditapilog.ClientIPAddress = field.NewString(tableName, "ClientIpAddress")
	_sysauditapilog.ClientName = field.NewString(tableName, "ClientName")
	_sysauditapilog.CustomData = field.NewString(tableName, "CustomData")
	_sysauditapilog.Exception = field.NewString(tableName, "Exception")
	_sysauditapilog.ExecutionDuration = field.NewInt64(tableName, "ExecutionDuration")
	_sysauditapilog.ExecutionTime = field.NewTime(tableName, "ExecutionTime")
	_sysauditapilog.ImpersonatorTenantID = field.NewInt64(tableName, "ImpersonatorTenantId")
	_sysauditapilog.ImpersonatorUserID = field.NewInt64(tableName, "ImpersonatorUserId")
	_sysauditapilog.MethodName = field.NewString(tableName, "MethodName")
	_sysauditapilog.Parameters = field.NewString(tableName, "Parameters")
	_sysauditapilog.ServiceName = field.NewString(tableName, "ServiceName")
	_sysauditapilog.TenantID = field.NewInt64(tableName, "TenantId")
	_sysauditapilog.UserID = field.NewInt64(tableName, "UserId")
	_sysauditapilog.ReturnValue = field.NewString(tableName, "ReturnValue")

	_sysauditapilog.fillFieldMap()

	return _sysauditapilog
}

type sysauditapilog struct {
	sysauditapilogDo sysauditapilogDo

	ALL                  field.Asterisk
	ID                   field.Int64
	BrowserInfo          field.String
	ClientIPAddress      field.String
	ClientName           field.String
	CustomData           field.String
	Exception            field.String
	ExecutionDuration    field.Int64
	ExecutionTime        field.Time
	ImpersonatorTenantID field.Int64
	ImpersonatorUserID   field.Int64
	MethodName           field.String
	Parameters           field.String
	ServiceName          field.String
	TenantID             field.Int64
	UserID               field.Int64
	ReturnValue          field.String

	fieldMap map[string]field.Expr
}

func (s sysauditapilog) Table(newTableName string) *sysauditapilog {
	s.sysauditapilogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysauditapilog) As(alias string) *sysauditapilog {
	s.sysauditapilogDo.DO = *(s.sysauditapilogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysauditapilog) updateTableName(table string) *sysauditapilog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "Id")
	s.BrowserInfo = field.NewString(table, "BrowserInfo")
	s.ClientIPAddress = field.NewString(table, "ClientIpAddress")
	s.ClientName = field.NewString(table, "ClientName")
	s.CustomData = field.NewString(table, "CustomData")
	s.Exception = field.NewString(table, "Exception")
	s.ExecutionDuration = field.NewInt64(table, "ExecutionDuration")
	s.ExecutionTime = field.NewTime(table, "ExecutionTime")
	s.ImpersonatorTenantID = field.NewInt64(table, "ImpersonatorTenantId")
	s.ImpersonatorUserID = field.NewInt64(table, "ImpersonatorUserId")
	s.MethodName = field.NewString(table, "MethodName")
	s.Parameters = field.NewString(table, "Parameters")
	s.ServiceName = field.NewString(table, "ServiceName")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.UserID = field.NewInt64(table, "UserId")
	s.ReturnValue = field.NewString(table, "ReturnValue")

	s.fillFieldMap()

	return s
}

func (s *sysauditapilog) WithContext(ctx context.Context) ISysauditapilogDo {
	return s.sysauditapilogDo.WithContext(ctx)
}

func (s sysauditapilog) TableName() string { return s.sysauditapilogDo.TableName() }

func (s sysauditapilog) Alias() string { return s.sysauditapilogDo.Alias() }

func (s *sysauditapilog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysauditapilog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["BrowserInfo"] = s.BrowserInfo
	s.fieldMap["ClientIpAddress"] = s.ClientIPAddress
	s.fieldMap["ClientName"] = s.ClientName
	s.fieldMap["CustomData"] = s.CustomData
	s.fieldMap["Exception"] = s.Exception
	s.fieldMap["ExecutionDuration"] = s.ExecutionDuration
	s.fieldMap["ExecutionTime"] = s.ExecutionTime
	s.fieldMap["ImpersonatorTenantId"] = s.ImpersonatorTenantID
	s.fieldMap["ImpersonatorUserId"] = s.ImpersonatorUserID
	s.fieldMap["MethodName"] = s.MethodName
	s.fieldMap["Parameters"] = s.Parameters
	s.fieldMap["ServiceName"] = s.ServiceName
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["ReturnValue"] = s.ReturnValue
}

func (s sysauditapilog) clone(db *gorm.DB) sysauditapilog {
	s.sysauditapilogDo.ReplaceDB(db)
	return s
}

type sysauditapilogDo struct{ gen.DO }

type ISysauditapilogDo interface {
	gen.SubQuery
	Debug() ISysauditapilogDo
	WithContext(ctx context.Context) ISysauditapilogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysauditapilogDo
	Not(conds ...gen.Condition) ISysauditapilogDo
	Or(conds ...gen.Condition) ISysauditapilogDo
	Select(conds ...field.Expr) ISysauditapilogDo
	Where(conds ...gen.Condition) ISysauditapilogDo
	Order(conds ...field.Expr) ISysauditapilogDo
	Distinct(cols ...field.Expr) ISysauditapilogDo
	Omit(cols ...field.Expr) ISysauditapilogDo
	Join(table schema.Tabler, on ...field.Expr) ISysauditapilogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditapilogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysauditapilogDo
	Group(cols ...field.Expr) ISysauditapilogDo
	Having(conds ...gen.Condition) ISysauditapilogDo
	Limit(limit int) ISysauditapilogDo
	Offset(offset int) ISysauditapilogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditapilogDo
	Unscoped() ISysauditapilogDo
	Create(values ...*model.Sysauditapilog) error
	CreateInBatches(values []*model.Sysauditapilog, batchSize int) error
	Save(values ...*model.Sysauditapilog) error
	First() (*model.Sysauditapilog, error)
	Take() (*model.Sysauditapilog, error)
	Last() (*model.Sysauditapilog, error)
	Find() ([]*model.Sysauditapilog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditapilog, err error)
	FindInBatches(result *[]*model.Sysauditapilog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysauditapilog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysauditapilogDo
	Assign(attrs ...field.AssignExpr) ISysauditapilogDo
	Joins(fields ...field.RelationField) ISysauditapilogDo
	Preload(fields ...field.RelationField) ISysauditapilogDo
	FirstOrInit() (*model.Sysauditapilog, error)
	FirstOrCreate() (*model.Sysauditapilog, error)
	FindByPage(offset int, limit int) (result []*model.Sysauditapilog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysauditapilogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysauditapilogDo) Debug() ISysauditapilogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysauditapilogDo) WithContext(ctx context.Context) ISysauditapilogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysauditapilogDo) ReadDB() ISysauditapilogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysauditapilogDo) WriteDB() ISysauditapilogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysauditapilogDo) Clauses(conds ...clause.Expression) ISysauditapilogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysauditapilogDo) Returning(value interface{}, columns ...string) ISysauditapilogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysauditapilogDo) Not(conds ...gen.Condition) ISysauditapilogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysauditapilogDo) Or(conds ...gen.Condition) ISysauditapilogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysauditapilogDo) Select(conds ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysauditapilogDo) Where(conds ...gen.Condition) ISysauditapilogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysauditapilogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysauditapilogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysauditapilogDo) Order(conds ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysauditapilogDo) Distinct(cols ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysauditapilogDo) Omit(cols ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysauditapilogDo) Join(table schema.Tabler, on ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysauditapilogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysauditapilogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysauditapilogDo) Group(cols ...field.Expr) ISysauditapilogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysauditapilogDo) Having(conds ...gen.Condition) ISysauditapilogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysauditapilogDo) Limit(limit int) ISysauditapilogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysauditapilogDo) Offset(offset int) ISysauditapilogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysauditapilogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysauditapilogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysauditapilogDo) Unscoped() ISysauditapilogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysauditapilogDo) Create(values ...*model.Sysauditapilog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysauditapilogDo) CreateInBatches(values []*model.Sysauditapilog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysauditapilogDo) Save(values ...*model.Sysauditapilog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysauditapilogDo) First() (*model.Sysauditapilog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditapilog), nil
	}
}

func (s sysauditapilogDo) Take() (*model.Sysauditapilog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditapilog), nil
	}
}

func (s sysauditapilogDo) Last() (*model.Sysauditapilog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditapilog), nil
	}
}

func (s sysauditapilogDo) Find() ([]*model.Sysauditapilog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysauditapilog), err
}

func (s sysauditapilogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysauditapilog, err error) {
	buf := make([]*model.Sysauditapilog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysauditapilogDo) FindInBatches(result *[]*model.Sysauditapilog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysauditapilogDo) Attrs(attrs ...field.AssignExpr) ISysauditapilogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysauditapilogDo) Assign(attrs ...field.AssignExpr) ISysauditapilogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysauditapilogDo) Joins(fields ...field.RelationField) ISysauditapilogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysauditapilogDo) Preload(fields ...field.RelationField) ISysauditapilogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysauditapilogDo) FirstOrInit() (*model.Sysauditapilog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditapilog), nil
	}
}

func (s sysauditapilogDo) FirstOrCreate() (*model.Sysauditapilog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysauditapilog), nil
	}
}

func (s sysauditapilogDo) FindByPage(offset int, limit int) (result []*model.Sysauditapilog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysauditapilogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysauditapilogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysauditapilogDo) Delete(models ...*model.Sysauditapilog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysauditapilogDo) withDO(do gen.Dao) *sysauditapilogDo {
	s.DO = *do.(*gen.DO)
	return s
}
