// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLiteratureType(db *gorm.DB) literatureType {
	_literatureType := literatureType{}

	_literatureType.literatureTypeDo.UseDB(db)
	_literatureType.literatureTypeDo.UseModel(&model.LiteratureType{})

	tableName := _literatureType.literatureTypeDo.TableName()
	_literatureType.ALL = field.NewAsterisk(tableName)
	_literatureType.LITCODE = field.NewInt64(tableName, "LIT_CODE")
	_literatureType.LITNAME = field.NewString(tableName, "LIT_NAME")
	_literatureType.DOCCODE = field.NewInt64(tableName, "DOC_CODE")
	_literatureType.USEFLAG = field.NewString(tableName, "USE_FLAG")
	_literatureType.GROUPCODE = field.NewString(tableName, "GROUP_CODE")
	_literatureType.CREATEBY = field.NewInt64(tableName, "CREATE_BY")
	_literatureType.CREATEDATE = field.NewTime(tableName, "CREATE_DATE")
	_literatureType.UPDATEBY = field.NewInt64(tableName, "UPDATE_BY")
	_literatureType.UPDATEDATE = field.NewTime(tableName, "UPDATE_DATE")
	_literatureType.EDITFLAG = field.NewString(tableName, "EDIT_FLAG")

	_literatureType.fillFieldMap()

	return _literatureType
}

type literatureType struct {
	literatureTypeDo literatureTypeDo

	ALL        field.Asterisk
	LITCODE    field.Int64
	LITNAME    field.String
	DOCCODE    field.Int64
	USEFLAG    field.String
	GROUPCODE  field.String
	CREATEBY   field.Int64
	CREATEDATE field.Time
	UPDATEBY   field.Int64
	UPDATEDATE field.Time
	EDITFLAG   field.String

	fieldMap map[string]field.Expr
}

func (l literatureType) Table(newTableName string) *literatureType {
	l.literatureTypeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l literatureType) As(alias string) *literatureType {
	l.literatureTypeDo.DO = *(l.literatureTypeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *literatureType) updateTableName(table string) *literatureType {
	l.ALL = field.NewAsterisk(table)
	l.LITCODE = field.NewInt64(table, "LIT_CODE")
	l.LITNAME = field.NewString(table, "LIT_NAME")
	l.DOCCODE = field.NewInt64(table, "DOC_CODE")
	l.USEFLAG = field.NewString(table, "USE_FLAG")
	l.GROUPCODE = field.NewString(table, "GROUP_CODE")
	l.CREATEBY = field.NewInt64(table, "CREATE_BY")
	l.CREATEDATE = field.NewTime(table, "CREATE_DATE")
	l.UPDATEBY = field.NewInt64(table, "UPDATE_BY")
	l.UPDATEDATE = field.NewTime(table, "UPDATE_DATE")
	l.EDITFLAG = field.NewString(table, "EDIT_FLAG")

	l.fillFieldMap()

	return l
}

func (l *literatureType) WithContext(ctx context.Context) ILiteratureTypeDo {
	return l.literatureTypeDo.WithContext(ctx)
}

func (l literatureType) TableName() string { return l.literatureTypeDo.TableName() }

func (l literatureType) Alias() string { return l.literatureTypeDo.Alias() }

func (l *literatureType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *literatureType) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["LIT_CODE"] = l.LITCODE
	l.fieldMap["LIT_NAME"] = l.LITNAME
	l.fieldMap["DOC_CODE"] = l.DOCCODE
	l.fieldMap["USE_FLAG"] = l.USEFLAG
	l.fieldMap["GROUP_CODE"] = l.GROUPCODE
	l.fieldMap["CREATE_BY"] = l.CREATEBY
	l.fieldMap["CREATE_DATE"] = l.CREATEDATE
	l.fieldMap["UPDATE_BY"] = l.UPDATEBY
	l.fieldMap["UPDATE_DATE"] = l.UPDATEDATE
	l.fieldMap["EDIT_FLAG"] = l.EDITFLAG
}

func (l literatureType) clone(db *gorm.DB) literatureType {
	l.literatureTypeDo.ReplaceDB(db)
	return l
}

type literatureTypeDo struct{ gen.DO }

type ILiteratureTypeDo interface {
	gen.SubQuery
	Debug() ILiteratureTypeDo
	WithContext(ctx context.Context) ILiteratureTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiteratureTypeDo
	Not(conds ...gen.Condition) ILiteratureTypeDo
	Or(conds ...gen.Condition) ILiteratureTypeDo
	Select(conds ...field.Expr) ILiteratureTypeDo
	Where(conds ...gen.Condition) ILiteratureTypeDo
	Order(conds ...field.Expr) ILiteratureTypeDo
	Distinct(cols ...field.Expr) ILiteratureTypeDo
	Omit(cols ...field.Expr) ILiteratureTypeDo
	Join(table schema.Tabler, on ...field.Expr) ILiteratureTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiteratureTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiteratureTypeDo
	Group(cols ...field.Expr) ILiteratureTypeDo
	Having(conds ...gen.Condition) ILiteratureTypeDo
	Limit(limit int) ILiteratureTypeDo
	Offset(offset int) ILiteratureTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiteratureTypeDo
	Unscoped() ILiteratureTypeDo
	Create(values ...*model.LiteratureType) error
	CreateInBatches(values []*model.LiteratureType, batchSize int) error
	Save(values ...*model.LiteratureType) error
	First() (*model.LiteratureType, error)
	Take() (*model.LiteratureType, error)
	Last() (*model.LiteratureType, error)
	Find() ([]*model.LiteratureType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiteratureType, err error)
	FindInBatches(result *[]*model.LiteratureType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiteratureType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiteratureTypeDo
	Assign(attrs ...field.AssignExpr) ILiteratureTypeDo
	Joins(fields ...field.RelationField) ILiteratureTypeDo
	Preload(fields ...field.RelationField) ILiteratureTypeDo
	FirstOrInit() (*model.LiteratureType, error)
	FirstOrCreate() (*model.LiteratureType, error)
	FindByPage(offset int, limit int) (result []*model.LiteratureType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiteratureTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l literatureTypeDo) Debug() ILiteratureTypeDo {
	return l.withDO(l.DO.Debug())
}

func (l literatureTypeDo) WithContext(ctx context.Context) ILiteratureTypeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l literatureTypeDo) ReadDB() ILiteratureTypeDo {
	return l.Clauses(dbresolver.Read)
}

func (l literatureTypeDo) WriteDB() ILiteratureTypeDo {
	return l.Clauses(dbresolver.Write)
}

func (l literatureTypeDo) Clauses(conds ...clause.Expression) ILiteratureTypeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l literatureTypeDo) Returning(value interface{}, columns ...string) ILiteratureTypeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l literatureTypeDo) Not(conds ...gen.Condition) ILiteratureTypeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l literatureTypeDo) Or(conds ...gen.Condition) ILiteratureTypeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l literatureTypeDo) Select(conds ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l literatureTypeDo) Where(conds ...gen.Condition) ILiteratureTypeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l literatureTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILiteratureTypeDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l literatureTypeDo) Order(conds ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l literatureTypeDo) Distinct(cols ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l literatureTypeDo) Omit(cols ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l literatureTypeDo) Join(table schema.Tabler, on ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l literatureTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l literatureTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l literatureTypeDo) Group(cols ...field.Expr) ILiteratureTypeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l literatureTypeDo) Having(conds ...gen.Condition) ILiteratureTypeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l literatureTypeDo) Limit(limit int) ILiteratureTypeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l literatureTypeDo) Offset(offset int) ILiteratureTypeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l literatureTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiteratureTypeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l literatureTypeDo) Unscoped() ILiteratureTypeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l literatureTypeDo) Create(values ...*model.LiteratureType) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l literatureTypeDo) CreateInBatches(values []*model.LiteratureType, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l literatureTypeDo) Save(values ...*model.LiteratureType) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l literatureTypeDo) First() (*model.LiteratureType, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiteratureType), nil
	}
}

func (l literatureTypeDo) Take() (*model.LiteratureType, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiteratureType), nil
	}
}

func (l literatureTypeDo) Last() (*model.LiteratureType, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiteratureType), nil
	}
}

func (l literatureTypeDo) Find() ([]*model.LiteratureType, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiteratureType), err
}

func (l literatureTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiteratureType, err error) {
	buf := make([]*model.LiteratureType, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l literatureTypeDo) FindInBatches(result *[]*model.LiteratureType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l literatureTypeDo) Attrs(attrs ...field.AssignExpr) ILiteratureTypeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l literatureTypeDo) Assign(attrs ...field.AssignExpr) ILiteratureTypeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l literatureTypeDo) Joins(fields ...field.RelationField) ILiteratureTypeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l literatureTypeDo) Preload(fields ...field.RelationField) ILiteratureTypeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l literatureTypeDo) FirstOrInit() (*model.LiteratureType, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiteratureType), nil
	}
}

func (l literatureTypeDo) FirstOrCreate() (*model.LiteratureType, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiteratureType), nil
	}
}

func (l literatureTypeDo) FindByPage(offset int, limit int) (result []*model.LiteratureType, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l literatureTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l literatureTypeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l literatureTypeDo) Delete(models ...*model.LiteratureType) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *literatureTypeDo) withDO(do gen.Dao) *literatureTypeDo {
	l.DO = *do.(*gen.DO)
	return l
}
