// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysconfigbase(db *gorm.DB) sysconfigbase {
	_sysconfigbase := sysconfigbase{}

	_sysconfigbase.sysconfigbaseDo.UseDB(db)
	_sysconfigbase.sysconfigbaseDo.UseModel(&model.Sysconfigbase{})

	tableName := _sysconfigbase.sysconfigbaseDo.TableName()
	_sysconfigbase.ALL = field.NewAsterisk(tableName)
	_sysconfigbase.ID = field.NewString(tableName, "Id")
	_sysconfigbase.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysconfigbase.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysconfigbase.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysconfigbase.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysconfigbase.TerminalID = field.NewString(tableName, "TerminalId")
	_sysconfigbase.ConfigType = field.NewString(tableName, "ConfigType")
	_sysconfigbase.Content = field.NewString(tableName, "Content")
	_sysconfigbase.Remark = field.NewString(tableName, "Remark")
	_sysconfigbase.TenantID = field.NewInt64(tableName, "TenantId")

	_sysconfigbase.fillFieldMap()

	return _sysconfigbase
}

type sysconfigbase struct {
	sysconfigbaseDo sysconfigbaseDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	TerminalID           field.String
	ConfigType           field.String
	Content              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s sysconfigbase) Table(newTableName string) *sysconfigbase {
	s.sysconfigbaseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfigbase) As(alias string) *sysconfigbase {
	s.sysconfigbaseDo.DO = *(s.sysconfigbaseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfigbase) updateTableName(table string) *sysconfigbase {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.TerminalID = field.NewString(table, "TerminalId")
	s.ConfigType = field.NewString(table, "ConfigType")
	s.Content = field.NewString(table, "Content")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysconfigbase) WithContext(ctx context.Context) ISysconfigbaseDo {
	return s.sysconfigbaseDo.WithContext(ctx)
}

func (s sysconfigbase) TableName() string { return s.sysconfigbaseDo.TableName() }

func (s sysconfigbase) Alias() string { return s.sysconfigbaseDo.Alias() }

func (s *sysconfigbase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfigbase) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["TerminalId"] = s.TerminalID
	s.fieldMap["ConfigType"] = s.ConfigType
	s.fieldMap["Content"] = s.Content
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysconfigbase) clone(db *gorm.DB) sysconfigbase {
	s.sysconfigbaseDo.ReplaceDB(db)
	return s
}

type sysconfigbaseDo struct{ gen.DO }

type ISysconfigbaseDo interface {
	gen.SubQuery
	Debug() ISysconfigbaseDo
	WithContext(ctx context.Context) ISysconfigbaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfigbaseDo
	Not(conds ...gen.Condition) ISysconfigbaseDo
	Or(conds ...gen.Condition) ISysconfigbaseDo
	Select(conds ...field.Expr) ISysconfigbaseDo
	Where(conds ...gen.Condition) ISysconfigbaseDo
	Order(conds ...field.Expr) ISysconfigbaseDo
	Distinct(cols ...field.Expr) ISysconfigbaseDo
	Omit(cols ...field.Expr) ISysconfigbaseDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfigbaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigbaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigbaseDo
	Group(cols ...field.Expr) ISysconfigbaseDo
	Having(conds ...gen.Condition) ISysconfigbaseDo
	Limit(limit int) ISysconfigbaseDo
	Offset(offset int) ISysconfigbaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigbaseDo
	Unscoped() ISysconfigbaseDo
	Create(values ...*model.Sysconfigbase) error
	CreateInBatches(values []*model.Sysconfigbase, batchSize int) error
	Save(values ...*model.Sysconfigbase) error
	First() (*model.Sysconfigbase, error)
	Take() (*model.Sysconfigbase, error)
	Last() (*model.Sysconfigbase, error)
	Find() ([]*model.Sysconfigbase, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysconfigbase, err error)
	FindInBatches(result *[]*model.Sysconfigbase, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysconfigbase) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfigbaseDo
	Assign(attrs ...field.AssignExpr) ISysconfigbaseDo
	Joins(fields ...field.RelationField) ISysconfigbaseDo
	Preload(fields ...field.RelationField) ISysconfigbaseDo
	FirstOrInit() (*model.Sysconfigbase, error)
	FirstOrCreate() (*model.Sysconfigbase, error)
	FindByPage(offset int, limit int) (result []*model.Sysconfigbase, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfigbaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfigbaseDo) Debug() ISysconfigbaseDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfigbaseDo) WithContext(ctx context.Context) ISysconfigbaseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfigbaseDo) ReadDB() ISysconfigbaseDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfigbaseDo) WriteDB() ISysconfigbaseDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfigbaseDo) Clauses(conds ...clause.Expression) ISysconfigbaseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfigbaseDo) Returning(value interface{}, columns ...string) ISysconfigbaseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfigbaseDo) Not(conds ...gen.Condition) ISysconfigbaseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfigbaseDo) Or(conds ...gen.Condition) ISysconfigbaseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfigbaseDo) Select(conds ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfigbaseDo) Where(conds ...gen.Condition) ISysconfigbaseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfigbaseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysconfigbaseDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysconfigbaseDo) Order(conds ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfigbaseDo) Distinct(cols ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfigbaseDo) Omit(cols ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfigbaseDo) Join(table schema.Tabler, on ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfigbaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfigbaseDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfigbaseDo) Group(cols ...field.Expr) ISysconfigbaseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfigbaseDo) Having(conds ...gen.Condition) ISysconfigbaseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfigbaseDo) Limit(limit int) ISysconfigbaseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfigbaseDo) Offset(offset int) ISysconfigbaseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfigbaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfigbaseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfigbaseDo) Unscoped() ISysconfigbaseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfigbaseDo) Create(values ...*model.Sysconfigbase) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfigbaseDo) CreateInBatches(values []*model.Sysconfigbase, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfigbaseDo) Save(values ...*model.Sysconfigbase) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfigbaseDo) First() (*model.Sysconfigbase, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfigbase), nil
	}
}

func (s sysconfigbaseDo) Take() (*model.Sysconfigbase, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfigbase), nil
	}
}

func (s sysconfigbaseDo) Last() (*model.Sysconfigbase, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfigbase), nil
	}
}

func (s sysconfigbaseDo) Find() ([]*model.Sysconfigbase, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysconfigbase), err
}

func (s sysconfigbaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysconfigbase, err error) {
	buf := make([]*model.Sysconfigbase, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfigbaseDo) FindInBatches(result *[]*model.Sysconfigbase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfigbaseDo) Attrs(attrs ...field.AssignExpr) ISysconfigbaseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfigbaseDo) Assign(attrs ...field.AssignExpr) ISysconfigbaseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfigbaseDo) Joins(fields ...field.RelationField) ISysconfigbaseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfigbaseDo) Preload(fields ...field.RelationField) ISysconfigbaseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfigbaseDo) FirstOrInit() (*model.Sysconfigbase, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfigbase), nil
	}
}

func (s sysconfigbaseDo) FirstOrCreate() (*model.Sysconfigbase, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfigbase), nil
	}
}

func (s sysconfigbaseDo) FindByPage(offset int, limit int) (result []*model.Sysconfigbase, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfigbaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfigbaseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfigbaseDo) Delete(models ...*model.Sysconfigbase) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfigbaseDo) withDO(do gen.Dao) *sysconfigbaseDo {
	s.DO = *do.(*gen.DO)
	return s
}
