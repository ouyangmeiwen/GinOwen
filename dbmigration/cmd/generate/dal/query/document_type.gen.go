// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDocumentType(db *gorm.DB) documentType {
	_documentType := documentType{}

	_documentType.documentTypeDo.UseDB(db)
	_documentType.documentTypeDo.UseModel(&model.DocumentType{})

	tableName := _documentType.documentTypeDo.TableName()
	_documentType.ALL = field.NewAsterisk(tableName)
	_documentType.DOCCODE = field.NewInt64(tableName, "DOC_CODE")
	_documentType.DOCNAME = field.NewString(tableName, "DOC_NAME")
	_documentType.USEFLAG = field.NewString(tableName, "USE_FLAG")
	_documentType.SERIALFLAG = field.NewString(tableName, "SERIAL_FLAG")
	_documentType.GROUPCODE = field.NewString(tableName, "GROUP_CODE")
	_documentType.CENTERDOCCODE = field.NewString(tableName, "CENTER_DOC_CODE")
	_documentType.CREATEBY = field.NewInt64(tableName, "CREATE_BY")
	_documentType.CREATEDATE = field.NewTime(tableName, "CREATE_DATE")
	_documentType.UPDATEBY = field.NewInt64(tableName, "UPDATE_BY")
	_documentType.UPDATEDATE = field.NewTime(tableName, "UPDATE_DATE")
	_documentType.EDITFLAG = field.NewString(tableName, "EDIT_FLAG")
	_documentType.DEFAULTCOVERURL = field.NewString(tableName, "DEFAULT_COVER_URL")

	_documentType.fillFieldMap()

	return _documentType
}

type documentType struct {
	documentTypeDo documentTypeDo

	ALL             field.Asterisk
	DOCCODE         field.Int64
	DOCNAME         field.String
	USEFLAG         field.String
	SERIALFLAG      field.String
	GROUPCODE       field.String
	CENTERDOCCODE   field.String
	CREATEBY        field.Int64
	CREATEDATE      field.Time
	UPDATEBY        field.Int64
	UPDATEDATE      field.Time
	EDITFLAG        field.String
	DEFAULTCOVERURL field.String

	fieldMap map[string]field.Expr
}

func (d documentType) Table(newTableName string) *documentType {
	d.documentTypeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentType) As(alias string) *documentType {
	d.documentTypeDo.DO = *(d.documentTypeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentType) updateTableName(table string) *documentType {
	d.ALL = field.NewAsterisk(table)
	d.DOCCODE = field.NewInt64(table, "DOC_CODE")
	d.DOCNAME = field.NewString(table, "DOC_NAME")
	d.USEFLAG = field.NewString(table, "USE_FLAG")
	d.SERIALFLAG = field.NewString(table, "SERIAL_FLAG")
	d.GROUPCODE = field.NewString(table, "GROUP_CODE")
	d.CENTERDOCCODE = field.NewString(table, "CENTER_DOC_CODE")
	d.CREATEBY = field.NewInt64(table, "CREATE_BY")
	d.CREATEDATE = field.NewTime(table, "CREATE_DATE")
	d.UPDATEBY = field.NewInt64(table, "UPDATE_BY")
	d.UPDATEDATE = field.NewTime(table, "UPDATE_DATE")
	d.EDITFLAG = field.NewString(table, "EDIT_FLAG")
	d.DEFAULTCOVERURL = field.NewString(table, "DEFAULT_COVER_URL")

	d.fillFieldMap()

	return d
}

func (d *documentType) WithContext(ctx context.Context) IDocumentTypeDo {
	return d.documentTypeDo.WithContext(ctx)
}

func (d documentType) TableName() string { return d.documentTypeDo.TableName() }

func (d documentType) Alias() string { return d.documentTypeDo.Alias() }

func (d *documentType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentType) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["DOC_CODE"] = d.DOCCODE
	d.fieldMap["DOC_NAME"] = d.DOCNAME
	d.fieldMap["USE_FLAG"] = d.USEFLAG
	d.fieldMap["SERIAL_FLAG"] = d.SERIALFLAG
	d.fieldMap["GROUP_CODE"] = d.GROUPCODE
	d.fieldMap["CENTER_DOC_CODE"] = d.CENTERDOCCODE
	d.fieldMap["CREATE_BY"] = d.CREATEBY
	d.fieldMap["CREATE_DATE"] = d.CREATEDATE
	d.fieldMap["UPDATE_BY"] = d.UPDATEBY
	d.fieldMap["UPDATE_DATE"] = d.UPDATEDATE
	d.fieldMap["EDIT_FLAG"] = d.EDITFLAG
	d.fieldMap["DEFAULT_COVER_URL"] = d.DEFAULTCOVERURL
}

func (d documentType) clone(db *gorm.DB) documentType {
	d.documentTypeDo.ReplaceDB(db)
	return d
}

type documentTypeDo struct{ gen.DO }

type IDocumentTypeDo interface {
	gen.SubQuery
	Debug() IDocumentTypeDo
	WithContext(ctx context.Context) IDocumentTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentTypeDo
	Not(conds ...gen.Condition) IDocumentTypeDo
	Or(conds ...gen.Condition) IDocumentTypeDo
	Select(conds ...field.Expr) IDocumentTypeDo
	Where(conds ...gen.Condition) IDocumentTypeDo
	Order(conds ...field.Expr) IDocumentTypeDo
	Distinct(cols ...field.Expr) IDocumentTypeDo
	Omit(cols ...field.Expr) IDocumentTypeDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentTypeDo
	Group(cols ...field.Expr) IDocumentTypeDo
	Having(conds ...gen.Condition) IDocumentTypeDo
	Limit(limit int) IDocumentTypeDo
	Offset(offset int) IDocumentTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentTypeDo
	Unscoped() IDocumentTypeDo
	Create(values ...*model.DocumentType) error
	CreateInBatches(values []*model.DocumentType, batchSize int) error
	Save(values ...*model.DocumentType) error
	First() (*model.DocumentType, error)
	Take() (*model.DocumentType, error)
	Last() (*model.DocumentType, error)
	Find() ([]*model.DocumentType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocumentType, err error)
	FindInBatches(result *[]*model.DocumentType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DocumentType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentTypeDo
	Assign(attrs ...field.AssignExpr) IDocumentTypeDo
	Joins(fields ...field.RelationField) IDocumentTypeDo
	Preload(fields ...field.RelationField) IDocumentTypeDo
	FirstOrInit() (*model.DocumentType, error)
	FirstOrCreate() (*model.DocumentType, error)
	FindByPage(offset int, limit int) (result []*model.DocumentType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d documentTypeDo) Debug() IDocumentTypeDo {
	return d.withDO(d.DO.Debug())
}

func (d documentTypeDo) WithContext(ctx context.Context) IDocumentTypeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentTypeDo) ReadDB() IDocumentTypeDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentTypeDo) WriteDB() IDocumentTypeDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentTypeDo) Clauses(conds ...clause.Expression) IDocumentTypeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentTypeDo) Returning(value interface{}, columns ...string) IDocumentTypeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentTypeDo) Not(conds ...gen.Condition) IDocumentTypeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentTypeDo) Or(conds ...gen.Condition) IDocumentTypeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentTypeDo) Select(conds ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentTypeDo) Where(conds ...gen.Condition) IDocumentTypeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDocumentTypeDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d documentTypeDo) Order(conds ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentTypeDo) Distinct(cols ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentTypeDo) Omit(cols ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentTypeDo) Join(table schema.Tabler, on ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentTypeDo) Group(cols ...field.Expr) IDocumentTypeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentTypeDo) Having(conds ...gen.Condition) IDocumentTypeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentTypeDo) Limit(limit int) IDocumentTypeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentTypeDo) Offset(offset int) IDocumentTypeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentTypeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentTypeDo) Unscoped() IDocumentTypeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentTypeDo) Create(values ...*model.DocumentType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentTypeDo) CreateInBatches(values []*model.DocumentType, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentTypeDo) Save(values ...*model.DocumentType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentTypeDo) First() (*model.DocumentType, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentType), nil
	}
}

func (d documentTypeDo) Take() (*model.DocumentType, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentType), nil
	}
}

func (d documentTypeDo) Last() (*model.DocumentType, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentType), nil
	}
}

func (d documentTypeDo) Find() ([]*model.DocumentType, error) {
	result, err := d.DO.Find()
	return result.([]*model.DocumentType), err
}

func (d documentTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocumentType, err error) {
	buf := make([]*model.DocumentType, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentTypeDo) FindInBatches(result *[]*model.DocumentType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentTypeDo) Attrs(attrs ...field.AssignExpr) IDocumentTypeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentTypeDo) Assign(attrs ...field.AssignExpr) IDocumentTypeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentTypeDo) Joins(fields ...field.RelationField) IDocumentTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentTypeDo) Preload(fields ...field.RelationField) IDocumentTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentTypeDo) FirstOrInit() (*model.DocumentType, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentType), nil
	}
}

func (d documentTypeDo) FirstOrCreate() (*model.DocumentType, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocumentType), nil
	}
}

func (d documentTypeDo) FindByPage(offset int, limit int) (result []*model.DocumentType, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentTypeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentTypeDo) Delete(models ...*model.DocumentType) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentTypeDo) withDO(do gen.Dao) *documentTypeDo {
	d.DO = *do.(*gen.DO)
	return d
}
