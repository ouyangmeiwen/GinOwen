// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemHistoricaldict(db *gorm.DB) systemHistoricaldict {
	_systemHistoricaldict := systemHistoricaldict{}

	_systemHistoricaldict.systemHistoricaldictDo.UseDB(db)
	_systemHistoricaldict.systemHistoricaldictDo.UseModel(&model.SystemHistoricaldict{})

	tableName := _systemHistoricaldict.systemHistoricaldictDo.TableName()
	_systemHistoricaldict.ALL = field.NewAsterisk(tableName)
	_systemHistoricaldict.ID = field.NewInt64(tableName, "id")
	_systemHistoricaldict.CreateTime = field.NewTime(tableName, "create_time")
	_systemHistoricaldict.UpdateTime = field.NewTime(tableName, "update_time")
	_systemHistoricaldict.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemHistoricaldict.Name = field.NewString(tableName, "name")
	_systemHistoricaldict.Code = field.NewString(tableName, "code")
	_systemHistoricaldict.Description = field.NewString(tableName, "description")
	_systemHistoricaldict.Sort = field.NewInt64(tableName, "sort")
	_systemHistoricaldict.IsUsed = field.NewInt64(tableName, "is_used")
	_systemHistoricaldict.HistoryID = field.NewInt64(tableName, "history_id")
	_systemHistoricaldict.HistoryDate = field.NewTime(tableName, "history_date")
	_systemHistoricaldict.HistoryChangeReason = field.NewString(tableName, "history_change_reason")
	_systemHistoricaldict.HistoryType = field.NewString(tableName, "history_type")
	_systemHistoricaldict.HistoryUserID = field.NewInt64(tableName, "history_user_id")
	_systemHistoricaldict.ParentID = field.NewInt64(tableName, "parent_id")
	_systemHistoricaldict.TypeID = field.NewInt64(tableName, "type_id")

	_systemHistoricaldict.fillFieldMap()

	return _systemHistoricaldict
}

type systemHistoricaldict struct {
	systemHistoricaldictDo systemHistoricaldictDo

	ALL                 field.Asterisk
	ID                  field.Int64
	CreateTime          field.Time
	UpdateTime          field.Time
	IsDeleted           field.Int64
	Name                field.String
	Code                field.String
	Description         field.String
	Sort                field.Int64
	IsUsed              field.Int64
	HistoryID           field.Int64
	HistoryDate         field.Time
	HistoryChangeReason field.String
	HistoryType         field.String
	HistoryUserID       field.Int64
	ParentID            field.Int64
	TypeID              field.Int64

	fieldMap map[string]field.Expr
}

func (s systemHistoricaldict) Table(newTableName string) *systemHistoricaldict {
	s.systemHistoricaldictDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemHistoricaldict) As(alias string) *systemHistoricaldict {
	s.systemHistoricaldictDo.DO = *(s.systemHistoricaldictDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemHistoricaldict) updateTableName(table string) *systemHistoricaldict {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Description = field.NewString(table, "description")
	s.Sort = field.NewInt64(table, "sort")
	s.IsUsed = field.NewInt64(table, "is_used")
	s.HistoryID = field.NewInt64(table, "history_id")
	s.HistoryDate = field.NewTime(table, "history_date")
	s.HistoryChangeReason = field.NewString(table, "history_change_reason")
	s.HistoryType = field.NewString(table, "history_type")
	s.HistoryUserID = field.NewInt64(table, "history_user_id")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.TypeID = field.NewInt64(table, "type_id")

	s.fillFieldMap()

	return s
}

func (s *systemHistoricaldict) WithContext(ctx context.Context) ISystemHistoricaldictDo {
	return s.systemHistoricaldictDo.WithContext(ctx)
}

func (s systemHistoricaldict) TableName() string { return s.systemHistoricaldictDo.TableName() }

func (s systemHistoricaldict) Alias() string { return s.systemHistoricaldictDo.Alias() }

func (s *systemHistoricaldict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemHistoricaldict) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["description"] = s.Description
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["is_used"] = s.IsUsed
	s.fieldMap["history_id"] = s.HistoryID
	s.fieldMap["history_date"] = s.HistoryDate
	s.fieldMap["history_change_reason"] = s.HistoryChangeReason
	s.fieldMap["history_type"] = s.HistoryType
	s.fieldMap["history_user_id"] = s.HistoryUserID
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["type_id"] = s.TypeID
}

func (s systemHistoricaldict) clone(db *gorm.DB) systemHistoricaldict {
	s.systemHistoricaldictDo.ReplaceDB(db)
	return s
}

type systemHistoricaldictDo struct{ gen.DO }

type ISystemHistoricaldictDo interface {
	gen.SubQuery
	Debug() ISystemHistoricaldictDo
	WithContext(ctx context.Context) ISystemHistoricaldictDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemHistoricaldictDo
	Not(conds ...gen.Condition) ISystemHistoricaldictDo
	Or(conds ...gen.Condition) ISystemHistoricaldictDo
	Select(conds ...field.Expr) ISystemHistoricaldictDo
	Where(conds ...gen.Condition) ISystemHistoricaldictDo
	Order(conds ...field.Expr) ISystemHistoricaldictDo
	Distinct(cols ...field.Expr) ISystemHistoricaldictDo
	Omit(cols ...field.Expr) ISystemHistoricaldictDo
	Join(table schema.Tabler, on ...field.Expr) ISystemHistoricaldictDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemHistoricaldictDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemHistoricaldictDo
	Group(cols ...field.Expr) ISystemHistoricaldictDo
	Having(conds ...gen.Condition) ISystemHistoricaldictDo
	Limit(limit int) ISystemHistoricaldictDo
	Offset(offset int) ISystemHistoricaldictDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemHistoricaldictDo
	Unscoped() ISystemHistoricaldictDo
	Create(values ...*model.SystemHistoricaldict) error
	CreateInBatches(values []*model.SystemHistoricaldict, batchSize int) error
	Save(values ...*model.SystemHistoricaldict) error
	First() (*model.SystemHistoricaldict, error)
	Take() (*model.SystemHistoricaldict, error)
	Last() (*model.SystemHistoricaldict, error)
	Find() ([]*model.SystemHistoricaldict, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemHistoricaldict, err error)
	FindInBatches(result *[]*model.SystemHistoricaldict, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemHistoricaldict) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemHistoricaldictDo
	Assign(attrs ...field.AssignExpr) ISystemHistoricaldictDo
	Joins(fields ...field.RelationField) ISystemHistoricaldictDo
	Preload(fields ...field.RelationField) ISystemHistoricaldictDo
	FirstOrInit() (*model.SystemHistoricaldict, error)
	FirstOrCreate() (*model.SystemHistoricaldict, error)
	FindByPage(offset int, limit int) (result []*model.SystemHistoricaldict, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemHistoricaldictDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemHistoricaldictDo) Debug() ISystemHistoricaldictDo {
	return s.withDO(s.DO.Debug())
}

func (s systemHistoricaldictDo) WithContext(ctx context.Context) ISystemHistoricaldictDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemHistoricaldictDo) ReadDB() ISystemHistoricaldictDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemHistoricaldictDo) WriteDB() ISystemHistoricaldictDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemHistoricaldictDo) Clauses(conds ...clause.Expression) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemHistoricaldictDo) Returning(value interface{}, columns ...string) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemHistoricaldictDo) Not(conds ...gen.Condition) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemHistoricaldictDo) Or(conds ...gen.Condition) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemHistoricaldictDo) Select(conds ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemHistoricaldictDo) Where(conds ...gen.Condition) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemHistoricaldictDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemHistoricaldictDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemHistoricaldictDo) Order(conds ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemHistoricaldictDo) Distinct(cols ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemHistoricaldictDo) Omit(cols ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemHistoricaldictDo) Join(table schema.Tabler, on ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemHistoricaldictDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemHistoricaldictDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemHistoricaldictDo) Group(cols ...field.Expr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemHistoricaldictDo) Having(conds ...gen.Condition) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemHistoricaldictDo) Limit(limit int) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemHistoricaldictDo) Offset(offset int) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemHistoricaldictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemHistoricaldictDo) Unscoped() ISystemHistoricaldictDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemHistoricaldictDo) Create(values ...*model.SystemHistoricaldict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemHistoricaldictDo) CreateInBatches(values []*model.SystemHistoricaldict, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemHistoricaldictDo) Save(values ...*model.SystemHistoricaldict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemHistoricaldictDo) First() (*model.SystemHistoricaldict, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemHistoricaldict), nil
	}
}

func (s systemHistoricaldictDo) Take() (*model.SystemHistoricaldict, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemHistoricaldict), nil
	}
}

func (s systemHistoricaldictDo) Last() (*model.SystemHistoricaldict, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemHistoricaldict), nil
	}
}

func (s systemHistoricaldictDo) Find() ([]*model.SystemHistoricaldict, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemHistoricaldict), err
}

func (s systemHistoricaldictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemHistoricaldict, err error) {
	buf := make([]*model.SystemHistoricaldict, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemHistoricaldictDo) FindInBatches(result *[]*model.SystemHistoricaldict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemHistoricaldictDo) Attrs(attrs ...field.AssignExpr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemHistoricaldictDo) Assign(attrs ...field.AssignExpr) ISystemHistoricaldictDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemHistoricaldictDo) Joins(fields ...field.RelationField) ISystemHistoricaldictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemHistoricaldictDo) Preload(fields ...field.RelationField) ISystemHistoricaldictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemHistoricaldictDo) FirstOrInit() (*model.SystemHistoricaldict, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemHistoricaldict), nil
	}
}

func (s systemHistoricaldictDo) FirstOrCreate() (*model.SystemHistoricaldict, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemHistoricaldict), nil
	}
}

func (s systemHistoricaldictDo) FindByPage(offset int, limit int) (result []*model.SystemHistoricaldict, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemHistoricaldictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemHistoricaldictDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemHistoricaldictDo) Delete(models ...*model.SystemHistoricaldict) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemHistoricaldictDo) withDO(do gen.Dao) *systemHistoricaldictDo {
	s.DO = *do.(*gen.DO)
	return s
}
