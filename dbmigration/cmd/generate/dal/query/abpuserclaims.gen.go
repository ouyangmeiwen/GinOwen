// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpuserclaim(db *gorm.DB) abpuserclaim {
	_abpuserclaim := abpuserclaim{}

	_abpuserclaim.abpuserclaimDo.UseDB(db)
	_abpuserclaim.abpuserclaimDo.UseModel(&model.Abpuserclaim{})

	tableName := _abpuserclaim.abpuserclaimDo.TableName()
	_abpuserclaim.ALL = field.NewAsterisk(tableName)
	_abpuserclaim.ID = field.NewInt64(tableName, "Id")
	_abpuserclaim.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpuserclaim.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpuserclaim.TenantID = field.NewInt64(tableName, "TenantId")
	_abpuserclaim.UserID = field.NewInt64(tableName, "UserId")
	_abpuserclaim.ClaimType = field.NewString(tableName, "ClaimType")
	_abpuserclaim.ClaimValue = field.NewString(tableName, "ClaimValue")

	_abpuserclaim.fillFieldMap()

	return _abpuserclaim
}

type abpuserclaim struct {
	abpuserclaimDo abpuserclaimDo

	ALL           field.Asterisk
	ID            field.Int64
	CreationTime  field.Time
	CreatorUserID field.Int64
	TenantID      field.Int64
	UserID        field.Int64
	ClaimType     field.String
	ClaimValue    field.String

	fieldMap map[string]field.Expr
}

func (a abpuserclaim) Table(newTableName string) *abpuserclaim {
	a.abpuserclaimDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpuserclaim) As(alias string) *abpuserclaim {
	a.abpuserclaimDo.DO = *(a.abpuserclaimDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpuserclaim) updateTableName(table string) *abpuserclaim {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.ClaimType = field.NewString(table, "ClaimType")
	a.ClaimValue = field.NewString(table, "ClaimValue")

	a.fillFieldMap()

	return a
}

func (a *abpuserclaim) WithContext(ctx context.Context) IAbpuserclaimDo {
	return a.abpuserclaimDo.WithContext(ctx)
}

func (a abpuserclaim) TableName() string { return a.abpuserclaimDo.TableName() }

func (a abpuserclaim) Alias() string { return a.abpuserclaimDo.Alias() }

func (a *abpuserclaim) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpuserclaim) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["ClaimType"] = a.ClaimType
	a.fieldMap["ClaimValue"] = a.ClaimValue
}

func (a abpuserclaim) clone(db *gorm.DB) abpuserclaim {
	a.abpuserclaimDo.ReplaceDB(db)
	return a
}

type abpuserclaimDo struct{ gen.DO }

type IAbpuserclaimDo interface {
	gen.SubQuery
	Debug() IAbpuserclaimDo
	WithContext(ctx context.Context) IAbpuserclaimDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpuserclaimDo
	Not(conds ...gen.Condition) IAbpuserclaimDo
	Or(conds ...gen.Condition) IAbpuserclaimDo
	Select(conds ...field.Expr) IAbpuserclaimDo
	Where(conds ...gen.Condition) IAbpuserclaimDo
	Order(conds ...field.Expr) IAbpuserclaimDo
	Distinct(cols ...field.Expr) IAbpuserclaimDo
	Omit(cols ...field.Expr) IAbpuserclaimDo
	Join(table schema.Tabler, on ...field.Expr) IAbpuserclaimDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserclaimDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserclaimDo
	Group(cols ...field.Expr) IAbpuserclaimDo
	Having(conds ...gen.Condition) IAbpuserclaimDo
	Limit(limit int) IAbpuserclaimDo
	Offset(offset int) IAbpuserclaimDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserclaimDo
	Unscoped() IAbpuserclaimDo
	Create(values ...*model.Abpuserclaim) error
	CreateInBatches(values []*model.Abpuserclaim, batchSize int) error
	Save(values ...*model.Abpuserclaim) error
	First() (*model.Abpuserclaim, error)
	Take() (*model.Abpuserclaim, error)
	Last() (*model.Abpuserclaim, error)
	Find() ([]*model.Abpuserclaim, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserclaim, err error)
	FindInBatches(result *[]*model.Abpuserclaim, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpuserclaim) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpuserclaimDo
	Assign(attrs ...field.AssignExpr) IAbpuserclaimDo
	Joins(fields ...field.RelationField) IAbpuserclaimDo
	Preload(fields ...field.RelationField) IAbpuserclaimDo
	FirstOrInit() (*model.Abpuserclaim, error)
	FirstOrCreate() (*model.Abpuserclaim, error)
	FindByPage(offset int, limit int) (result []*model.Abpuserclaim, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpuserclaimDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpuserclaimDo) Debug() IAbpuserclaimDo {
	return a.withDO(a.DO.Debug())
}

func (a abpuserclaimDo) WithContext(ctx context.Context) IAbpuserclaimDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpuserclaimDo) ReadDB() IAbpuserclaimDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpuserclaimDo) WriteDB() IAbpuserclaimDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpuserclaimDo) Clauses(conds ...clause.Expression) IAbpuserclaimDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpuserclaimDo) Returning(value interface{}, columns ...string) IAbpuserclaimDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpuserclaimDo) Not(conds ...gen.Condition) IAbpuserclaimDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpuserclaimDo) Or(conds ...gen.Condition) IAbpuserclaimDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpuserclaimDo) Select(conds ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpuserclaimDo) Where(conds ...gen.Condition) IAbpuserclaimDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpuserclaimDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpuserclaimDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpuserclaimDo) Order(conds ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpuserclaimDo) Distinct(cols ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpuserclaimDo) Omit(cols ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpuserclaimDo) Join(table schema.Tabler, on ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpuserclaimDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpuserclaimDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpuserclaimDo) Group(cols ...field.Expr) IAbpuserclaimDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpuserclaimDo) Having(conds ...gen.Condition) IAbpuserclaimDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpuserclaimDo) Limit(limit int) IAbpuserclaimDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpuserclaimDo) Offset(offset int) IAbpuserclaimDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpuserclaimDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuserclaimDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpuserclaimDo) Unscoped() IAbpuserclaimDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpuserclaimDo) Create(values ...*model.Abpuserclaim) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpuserclaimDo) CreateInBatches(values []*model.Abpuserclaim, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpuserclaimDo) Save(values ...*model.Abpuserclaim) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpuserclaimDo) First() (*model.Abpuserclaim, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserclaim), nil
	}
}

func (a abpuserclaimDo) Take() (*model.Abpuserclaim, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserclaim), nil
	}
}

func (a abpuserclaimDo) Last() (*model.Abpuserclaim, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserclaim), nil
	}
}

func (a abpuserclaimDo) Find() ([]*model.Abpuserclaim, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpuserclaim), err
}

func (a abpuserclaimDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuserclaim, err error) {
	buf := make([]*model.Abpuserclaim, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpuserclaimDo) FindInBatches(result *[]*model.Abpuserclaim, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpuserclaimDo) Attrs(attrs ...field.AssignExpr) IAbpuserclaimDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpuserclaimDo) Assign(attrs ...field.AssignExpr) IAbpuserclaimDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpuserclaimDo) Joins(fields ...field.RelationField) IAbpuserclaimDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpuserclaimDo) Preload(fields ...field.RelationField) IAbpuserclaimDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpuserclaimDo) FirstOrInit() (*model.Abpuserclaim, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserclaim), nil
	}
}

func (a abpuserclaimDo) FirstOrCreate() (*model.Abpuserclaim, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuserclaim), nil
	}
}

func (a abpuserclaimDo) FindByPage(offset int, limit int) (result []*model.Abpuserclaim, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpuserclaimDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpuserclaimDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpuserclaimDo) Delete(models ...*model.Abpuserclaim) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpuserclaimDo) withDO(do gen.Dao) *abpuserclaimDo {
	a.DO = *do.(*gen.DO)
	return a
}
