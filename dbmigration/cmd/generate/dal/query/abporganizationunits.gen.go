// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbporganizationunit(db *gorm.DB) abporganizationunit {
	_abporganizationunit := abporganizationunit{}

	_abporganizationunit.abporganizationunitDo.UseDB(db)
	_abporganizationunit.abporganizationunitDo.UseModel(&model.Abporganizationunit{})

	tableName := _abporganizationunit.abporganizationunitDo.TableName()
	_abporganizationunit.ALL = field.NewAsterisk(tableName)
	_abporganizationunit.ID = field.NewInt64(tableName, "Id")
	_abporganizationunit.CreationTime = field.NewTime(tableName, "CreationTime")
	_abporganizationunit.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abporganizationunit.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abporganizationunit.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abporganizationunit.IsDeleted = field.NewField(tableName, "IsDeleted")
	_abporganizationunit.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_abporganizationunit.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_abporganizationunit.TenantID = field.NewInt64(tableName, "TenantId")
	_abporganizationunit.ParentID = field.NewInt64(tableName, "ParentId")
	_abporganizationunit.Code = field.NewString(tableName, "Code")
	_abporganizationunit.DisplayName = field.NewString(tableName, "DisplayName")

	_abporganizationunit.fillFieldMap()

	return _abporganizationunit
}

type abporganizationunit struct {
	abporganizationunitDo abporganizationunitDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TenantID             field.Int64
	ParentID             field.Int64
	Code                 field.String
	DisplayName          field.String

	fieldMap map[string]field.Expr
}

func (a abporganizationunit) Table(newTableName string) *abporganizationunit {
	a.abporganizationunitDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abporganizationunit) As(alias string) *abporganizationunit {
	a.abporganizationunitDo.DO = *(a.abporganizationunitDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abporganizationunit) updateTableName(table string) *abporganizationunit {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.ParentID = field.NewInt64(table, "ParentId")
	a.Code = field.NewString(table, "Code")
	a.DisplayName = field.NewString(table, "DisplayName")

	a.fillFieldMap()

	return a
}

func (a *abporganizationunit) WithContext(ctx context.Context) IAbporganizationunitDo {
	return a.abporganizationunitDo.WithContext(ctx)
}

func (a abporganizationunit) TableName() string { return a.abporganizationunitDo.TableName() }

func (a abporganizationunit) Alias() string { return a.abporganizationunitDo.Alias() }

func (a *abporganizationunit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abporganizationunit) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["ParentId"] = a.ParentID
	a.fieldMap["Code"] = a.Code
	a.fieldMap["DisplayName"] = a.DisplayName
}

func (a abporganizationunit) clone(db *gorm.DB) abporganizationunit {
	a.abporganizationunitDo.ReplaceDB(db)
	return a
}

type abporganizationunitDo struct{ gen.DO }

type IAbporganizationunitDo interface {
	gen.SubQuery
	Debug() IAbporganizationunitDo
	WithContext(ctx context.Context) IAbporganizationunitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbporganizationunitDo
	Not(conds ...gen.Condition) IAbporganizationunitDo
	Or(conds ...gen.Condition) IAbporganizationunitDo
	Select(conds ...field.Expr) IAbporganizationunitDo
	Where(conds ...gen.Condition) IAbporganizationunitDo
	Order(conds ...field.Expr) IAbporganizationunitDo
	Distinct(cols ...field.Expr) IAbporganizationunitDo
	Omit(cols ...field.Expr) IAbporganizationunitDo
	Join(table schema.Tabler, on ...field.Expr) IAbporganizationunitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbporganizationunitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbporganizationunitDo
	Group(cols ...field.Expr) IAbporganizationunitDo
	Having(conds ...gen.Condition) IAbporganizationunitDo
	Limit(limit int) IAbporganizationunitDo
	Offset(offset int) IAbporganizationunitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbporganizationunitDo
	Unscoped() IAbporganizationunitDo
	Create(values ...*model.Abporganizationunit) error
	CreateInBatches(values []*model.Abporganizationunit, batchSize int) error
	Save(values ...*model.Abporganizationunit) error
	First() (*model.Abporganizationunit, error)
	Take() (*model.Abporganizationunit, error)
	Last() (*model.Abporganizationunit, error)
	Find() ([]*model.Abporganizationunit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abporganizationunit, err error)
	FindInBatches(result *[]*model.Abporganizationunit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abporganizationunit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbporganizationunitDo
	Assign(attrs ...field.AssignExpr) IAbporganizationunitDo
	Joins(fields ...field.RelationField) IAbporganizationunitDo
	Preload(fields ...field.RelationField) IAbporganizationunitDo
	FirstOrInit() (*model.Abporganizationunit, error)
	FirstOrCreate() (*model.Abporganizationunit, error)
	FindByPage(offset int, limit int) (result []*model.Abporganizationunit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbporganizationunitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abporganizationunitDo) Debug() IAbporganizationunitDo {
	return a.withDO(a.DO.Debug())
}

func (a abporganizationunitDo) WithContext(ctx context.Context) IAbporganizationunitDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abporganizationunitDo) ReadDB() IAbporganizationunitDo {
	return a.Clauses(dbresolver.Read)
}

func (a abporganizationunitDo) WriteDB() IAbporganizationunitDo {
	return a.Clauses(dbresolver.Write)
}

func (a abporganizationunitDo) Clauses(conds ...clause.Expression) IAbporganizationunitDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abporganizationunitDo) Returning(value interface{}, columns ...string) IAbporganizationunitDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abporganizationunitDo) Not(conds ...gen.Condition) IAbporganizationunitDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abporganizationunitDo) Or(conds ...gen.Condition) IAbporganizationunitDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abporganizationunitDo) Select(conds ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abporganizationunitDo) Where(conds ...gen.Condition) IAbporganizationunitDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abporganizationunitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbporganizationunitDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abporganizationunitDo) Order(conds ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abporganizationunitDo) Distinct(cols ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abporganizationunitDo) Omit(cols ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abporganizationunitDo) Join(table schema.Tabler, on ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abporganizationunitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abporganizationunitDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abporganizationunitDo) Group(cols ...field.Expr) IAbporganizationunitDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abporganizationunitDo) Having(conds ...gen.Condition) IAbporganizationunitDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abporganizationunitDo) Limit(limit int) IAbporganizationunitDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abporganizationunitDo) Offset(offset int) IAbporganizationunitDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abporganizationunitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbporganizationunitDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abporganizationunitDo) Unscoped() IAbporganizationunitDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abporganizationunitDo) Create(values ...*model.Abporganizationunit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abporganizationunitDo) CreateInBatches(values []*model.Abporganizationunit, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abporganizationunitDo) Save(values ...*model.Abporganizationunit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abporganizationunitDo) First() (*model.Abporganizationunit, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abporganizationunit), nil
	}
}

func (a abporganizationunitDo) Take() (*model.Abporganizationunit, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abporganizationunit), nil
	}
}

func (a abporganizationunitDo) Last() (*model.Abporganizationunit, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abporganizationunit), nil
	}
}

func (a abporganizationunitDo) Find() ([]*model.Abporganizationunit, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abporganizationunit), err
}

func (a abporganizationunitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abporganizationunit, err error) {
	buf := make([]*model.Abporganizationunit, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abporganizationunitDo) FindInBatches(result *[]*model.Abporganizationunit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abporganizationunitDo) Attrs(attrs ...field.AssignExpr) IAbporganizationunitDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abporganizationunitDo) Assign(attrs ...field.AssignExpr) IAbporganizationunitDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abporganizationunitDo) Joins(fields ...field.RelationField) IAbporganizationunitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abporganizationunitDo) Preload(fields ...field.RelationField) IAbporganizationunitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abporganizationunitDo) FirstOrInit() (*model.Abporganizationunit, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abporganizationunit), nil
	}
}

func (a abporganizationunitDo) FirstOrCreate() (*model.Abporganizationunit, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abporganizationunit), nil
	}
}

func (a abporganizationunitDo) FindByPage(offset int, limit int) (result []*model.Abporganizationunit, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abporganizationunitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abporganizationunitDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abporganizationunitDo) Delete(models ...*model.Abporganizationunit) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abporganizationunitDo) withDO(do gen.Dao) *abporganizationunitDo {
	a.DO = *do.(*gen.DO)
	return a
}
