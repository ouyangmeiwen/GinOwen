// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysbookblocklist(db *gorm.DB) sysbookblocklist {
	_sysbookblocklist := sysbookblocklist{}

	_sysbookblocklist.sysbookblocklistDo.UseDB(db)
	_sysbookblocklist.sysbookblocklistDo.UseModel(&model.Sysbookblocklist{})

	tableName := _sysbookblocklist.sysbookblocklistDo.TableName()
	_sysbookblocklist.ALL = field.NewAsterisk(tableName)
	_sysbookblocklist.ID = field.NewString(tableName, "Id")
	_sysbookblocklist.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysbookblocklist.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysbookblocklist.Barcode = field.NewString(tableName, "Barcode")
	_sysbookblocklist.TenantID = field.NewInt64(tableName, "TenantId")

	_sysbookblocklist.fillFieldMap()

	return _sysbookblocklist
}

type sysbookblocklist struct {
	sysbookblocklistDo sysbookblocklistDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	Barcode       field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (s sysbookblocklist) Table(newTableName string) *sysbookblocklist {
	s.sysbookblocklistDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysbookblocklist) As(alias string) *sysbookblocklist {
	s.sysbookblocklistDo.DO = *(s.sysbookblocklistDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysbookblocklist) updateTableName(table string) *sysbookblocklist {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.Barcode = field.NewString(table, "Barcode")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysbookblocklist) WithContext(ctx context.Context) ISysbookblocklistDo {
	return s.sysbookblocklistDo.WithContext(ctx)
}

func (s sysbookblocklist) TableName() string { return s.sysbookblocklistDo.TableName() }

func (s sysbookblocklist) Alias() string { return s.sysbookblocklistDo.Alias() }

func (s *sysbookblocklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysbookblocklist) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["Barcode"] = s.Barcode
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysbookblocklist) clone(db *gorm.DB) sysbookblocklist {
	s.sysbookblocklistDo.ReplaceDB(db)
	return s
}

type sysbookblocklistDo struct{ gen.DO }

type ISysbookblocklistDo interface {
	gen.SubQuery
	Debug() ISysbookblocklistDo
	WithContext(ctx context.Context) ISysbookblocklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysbookblocklistDo
	Not(conds ...gen.Condition) ISysbookblocklistDo
	Or(conds ...gen.Condition) ISysbookblocklistDo
	Select(conds ...field.Expr) ISysbookblocklistDo
	Where(conds ...gen.Condition) ISysbookblocklistDo
	Order(conds ...field.Expr) ISysbookblocklistDo
	Distinct(cols ...field.Expr) ISysbookblocklistDo
	Omit(cols ...field.Expr) ISysbookblocklistDo
	Join(table schema.Tabler, on ...field.Expr) ISysbookblocklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysbookblocklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysbookblocklistDo
	Group(cols ...field.Expr) ISysbookblocklistDo
	Having(conds ...gen.Condition) ISysbookblocklistDo
	Limit(limit int) ISysbookblocklistDo
	Offset(offset int) ISysbookblocklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysbookblocklistDo
	Unscoped() ISysbookblocklistDo
	Create(values ...*model.Sysbookblocklist) error
	CreateInBatches(values []*model.Sysbookblocklist, batchSize int) error
	Save(values ...*model.Sysbookblocklist) error
	First() (*model.Sysbookblocklist, error)
	Take() (*model.Sysbookblocklist, error)
	Last() (*model.Sysbookblocklist, error)
	Find() ([]*model.Sysbookblocklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysbookblocklist, err error)
	FindInBatches(result *[]*model.Sysbookblocklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysbookblocklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysbookblocklistDo
	Assign(attrs ...field.AssignExpr) ISysbookblocklistDo
	Joins(fields ...field.RelationField) ISysbookblocklistDo
	Preload(fields ...field.RelationField) ISysbookblocklistDo
	FirstOrInit() (*model.Sysbookblocklist, error)
	FirstOrCreate() (*model.Sysbookblocklist, error)
	FindByPage(offset int, limit int) (result []*model.Sysbookblocklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysbookblocklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysbookblocklistDo) Debug() ISysbookblocklistDo {
	return s.withDO(s.DO.Debug())
}

func (s sysbookblocklistDo) WithContext(ctx context.Context) ISysbookblocklistDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysbookblocklistDo) ReadDB() ISysbookblocklistDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysbookblocklistDo) WriteDB() ISysbookblocklistDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysbookblocklistDo) Clauses(conds ...clause.Expression) ISysbookblocklistDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysbookblocklistDo) Returning(value interface{}, columns ...string) ISysbookblocklistDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysbookblocklistDo) Not(conds ...gen.Condition) ISysbookblocklistDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysbookblocklistDo) Or(conds ...gen.Condition) ISysbookblocklistDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysbookblocklistDo) Select(conds ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysbookblocklistDo) Where(conds ...gen.Condition) ISysbookblocklistDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysbookblocklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysbookblocklistDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysbookblocklistDo) Order(conds ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysbookblocklistDo) Distinct(cols ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysbookblocklistDo) Omit(cols ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysbookblocklistDo) Join(table schema.Tabler, on ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysbookblocklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysbookblocklistDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysbookblocklistDo) Group(cols ...field.Expr) ISysbookblocklistDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysbookblocklistDo) Having(conds ...gen.Condition) ISysbookblocklistDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysbookblocklistDo) Limit(limit int) ISysbookblocklistDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysbookblocklistDo) Offset(offset int) ISysbookblocklistDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysbookblocklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysbookblocklistDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysbookblocklistDo) Unscoped() ISysbookblocklistDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysbookblocklistDo) Create(values ...*model.Sysbookblocklist) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysbookblocklistDo) CreateInBatches(values []*model.Sysbookblocklist, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysbookblocklistDo) Save(values ...*model.Sysbookblocklist) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysbookblocklistDo) First() (*model.Sysbookblocklist, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbookblocklist), nil
	}
}

func (s sysbookblocklistDo) Take() (*model.Sysbookblocklist, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbookblocklist), nil
	}
}

func (s sysbookblocklistDo) Last() (*model.Sysbookblocklist, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbookblocklist), nil
	}
}

func (s sysbookblocklistDo) Find() ([]*model.Sysbookblocklist, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysbookblocklist), err
}

func (s sysbookblocklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysbookblocklist, err error) {
	buf := make([]*model.Sysbookblocklist, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysbookblocklistDo) FindInBatches(result *[]*model.Sysbookblocklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysbookblocklistDo) Attrs(attrs ...field.AssignExpr) ISysbookblocklistDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysbookblocklistDo) Assign(attrs ...field.AssignExpr) ISysbookblocklistDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysbookblocklistDo) Joins(fields ...field.RelationField) ISysbookblocklistDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysbookblocklistDo) Preload(fields ...field.RelationField) ISysbookblocklistDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysbookblocklistDo) FirstOrInit() (*model.Sysbookblocklist, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbookblocklist), nil
	}
}

func (s sysbookblocklistDo) FirstOrCreate() (*model.Sysbookblocklist, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbookblocklist), nil
	}
}

func (s sysbookblocklistDo) FindByPage(offset int, limit int) (result []*model.Sysbookblocklist, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysbookblocklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysbookblocklistDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysbookblocklistDo) Delete(models ...*model.Sysbookblocklist) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysbookblocklistDo) withDO(do gen.Dao) *sysbookblocklistDo {
	s.DO = *do.(*gen.DO)
	return s
}
