// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAuthGroupPermission(db *gorm.DB) authGroupPermission {
	_authGroupPermission := authGroupPermission{}

	_authGroupPermission.authGroupPermissionDo.UseDB(db)
	_authGroupPermission.authGroupPermissionDo.UseModel(&model.AuthGroupPermission{})

	tableName := _authGroupPermission.authGroupPermissionDo.TableName()
	_authGroupPermission.ALL = field.NewAsterisk(tableName)
	_authGroupPermission.ID = field.NewInt64(tableName, "id")
	_authGroupPermission.GroupID = field.NewInt64(tableName, "group_id")
	_authGroupPermission.PermissionID = field.NewInt64(tableName, "permission_id")

	_authGroupPermission.fillFieldMap()

	return _authGroupPermission
}

type authGroupPermission struct {
	authGroupPermissionDo authGroupPermissionDo

	ALL          field.Asterisk
	ID           field.Int64
	GroupID      field.Int64
	PermissionID field.Int64

	fieldMap map[string]field.Expr
}

func (a authGroupPermission) Table(newTableName string) *authGroupPermission {
	a.authGroupPermissionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authGroupPermission) As(alias string) *authGroupPermission {
	a.authGroupPermissionDo.DO = *(a.authGroupPermissionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authGroupPermission) updateTableName(table string) *authGroupPermission {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.GroupID = field.NewInt64(table, "group_id")
	a.PermissionID = field.NewInt64(table, "permission_id")

	a.fillFieldMap()

	return a
}

func (a *authGroupPermission) WithContext(ctx context.Context) IAuthGroupPermissionDo {
	return a.authGroupPermissionDo.WithContext(ctx)
}

func (a authGroupPermission) TableName() string { return a.authGroupPermissionDo.TableName() }

func (a authGroupPermission) Alias() string { return a.authGroupPermissionDo.Alias() }

func (a *authGroupPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authGroupPermission) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["permission_id"] = a.PermissionID
}

func (a authGroupPermission) clone(db *gorm.DB) authGroupPermission {
	a.authGroupPermissionDo.ReplaceDB(db)
	return a
}

type authGroupPermissionDo struct{ gen.DO }

type IAuthGroupPermissionDo interface {
	gen.SubQuery
	Debug() IAuthGroupPermissionDo
	WithContext(ctx context.Context) IAuthGroupPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthGroupPermissionDo
	Not(conds ...gen.Condition) IAuthGroupPermissionDo
	Or(conds ...gen.Condition) IAuthGroupPermissionDo
	Select(conds ...field.Expr) IAuthGroupPermissionDo
	Where(conds ...gen.Condition) IAuthGroupPermissionDo
	Order(conds ...field.Expr) IAuthGroupPermissionDo
	Distinct(cols ...field.Expr) IAuthGroupPermissionDo
	Omit(cols ...field.Expr) IAuthGroupPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionDo
	Group(cols ...field.Expr) IAuthGroupPermissionDo
	Having(conds ...gen.Condition) IAuthGroupPermissionDo
	Limit(limit int) IAuthGroupPermissionDo
	Offset(offset int) IAuthGroupPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthGroupPermissionDo
	Unscoped() IAuthGroupPermissionDo
	Create(values ...*model.AuthGroupPermission) error
	CreateInBatches(values []*model.AuthGroupPermission, batchSize int) error
	Save(values ...*model.AuthGroupPermission) error
	First() (*model.AuthGroupPermission, error)
	Take() (*model.AuthGroupPermission, error)
	Last() (*model.AuthGroupPermission, error)
	Find() ([]*model.AuthGroupPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthGroupPermission, err error)
	FindInBatches(result *[]*model.AuthGroupPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthGroupPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthGroupPermissionDo
	Assign(attrs ...field.AssignExpr) IAuthGroupPermissionDo
	Joins(fields ...field.RelationField) IAuthGroupPermissionDo
	Preload(fields ...field.RelationField) IAuthGroupPermissionDo
	FirstOrInit() (*model.AuthGroupPermission, error)
	FirstOrCreate() (*model.AuthGroupPermission, error)
	FindByPage(offset int, limit int) (result []*model.AuthGroupPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthGroupPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authGroupPermissionDo) Debug() IAuthGroupPermissionDo {
	return a.withDO(a.DO.Debug())
}

func (a authGroupPermissionDo) WithContext(ctx context.Context) IAuthGroupPermissionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authGroupPermissionDo) ReadDB() IAuthGroupPermissionDo {
	return a.Clauses(dbresolver.Read)
}

func (a authGroupPermissionDo) WriteDB() IAuthGroupPermissionDo {
	return a.Clauses(dbresolver.Write)
}

func (a authGroupPermissionDo) Clauses(conds ...clause.Expression) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authGroupPermissionDo) Returning(value interface{}, columns ...string) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authGroupPermissionDo) Not(conds ...gen.Condition) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authGroupPermissionDo) Or(conds ...gen.Condition) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authGroupPermissionDo) Select(conds ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authGroupPermissionDo) Where(conds ...gen.Condition) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authGroupPermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthGroupPermissionDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authGroupPermissionDo) Order(conds ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authGroupPermissionDo) Distinct(cols ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authGroupPermissionDo) Omit(cols ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authGroupPermissionDo) Join(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authGroupPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authGroupPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authGroupPermissionDo) Group(cols ...field.Expr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authGroupPermissionDo) Having(conds ...gen.Condition) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authGroupPermissionDo) Limit(limit int) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authGroupPermissionDo) Offset(offset int) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authGroupPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authGroupPermissionDo) Unscoped() IAuthGroupPermissionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authGroupPermissionDo) Create(values ...*model.AuthGroupPermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authGroupPermissionDo) CreateInBatches(values []*model.AuthGroupPermission, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authGroupPermissionDo) Save(values ...*model.AuthGroupPermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authGroupPermissionDo) First() (*model.AuthGroupPermission, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermission), nil
	}
}

func (a authGroupPermissionDo) Take() (*model.AuthGroupPermission, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermission), nil
	}
}

func (a authGroupPermissionDo) Last() (*model.AuthGroupPermission, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermission), nil
	}
}

func (a authGroupPermissionDo) Find() ([]*model.AuthGroupPermission, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthGroupPermission), err
}

func (a authGroupPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthGroupPermission, err error) {
	buf := make([]*model.AuthGroupPermission, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authGroupPermissionDo) FindInBatches(result *[]*model.AuthGroupPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authGroupPermissionDo) Attrs(attrs ...field.AssignExpr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authGroupPermissionDo) Assign(attrs ...field.AssignExpr) IAuthGroupPermissionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authGroupPermissionDo) Joins(fields ...field.RelationField) IAuthGroupPermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authGroupPermissionDo) Preload(fields ...field.RelationField) IAuthGroupPermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authGroupPermissionDo) FirstOrInit() (*model.AuthGroupPermission, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermission), nil
	}
}

func (a authGroupPermissionDo) FirstOrCreate() (*model.AuthGroupPermission, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermission), nil
	}
}

func (a authGroupPermissionDo) FindByPage(offset int, limit int) (result []*model.AuthGroupPermission, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authGroupPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authGroupPermissionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authGroupPermissionDo) Delete(models ...*model.AuthGroupPermission) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authGroupPermissionDo) withDO(do gen.Dao) *authGroupPermissionDo {
	a.DO = *do.(*gen.DO)
	return a
}
