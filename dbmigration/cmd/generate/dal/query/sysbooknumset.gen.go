// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysbooknumset(db *gorm.DB) sysbooknumset {
	_sysbooknumset := sysbooknumset{}

	_sysbooknumset.sysbooknumsetDo.UseDB(db)
	_sysbooknumset.sysbooknumsetDo.UseModel(&model.Sysbooknumset{})

	tableName := _sysbooknumset.sysbooknumsetDo.TableName()
	_sysbooknumset.ALL = field.NewAsterisk(tableName)
	_sysbooknumset.ID = field.NewString(tableName, "Id")
	_sysbooknumset.LocationName = field.NewString(tableName, "LocationName")
	_sysbooknumset.BookType = field.NewString(tableName, "BookType")
	_sysbooknumset.FontWord = field.NewString(tableName, "FontWord")
	_sysbooknumset.NumLength = field.NewInt64(tableName, "NumLength")
	_sysbooknumset.IsCRC = field.NewField(tableName, "IsCRC")
	_sysbooknumset.TenantID = field.NewInt64(tableName, "TenantId")

	_sysbooknumset.fillFieldMap()

	return _sysbooknumset
}

type sysbooknumset struct {
	sysbooknumsetDo sysbooknumsetDo

	ALL          field.Asterisk
	ID           field.String
	LocationName field.String
	BookType     field.String
	FontWord     field.String
	NumLength    field.Int64
	IsCRC        field.Field
	TenantID     field.Int64

	fieldMap map[string]field.Expr
}

func (s sysbooknumset) Table(newTableName string) *sysbooknumset {
	s.sysbooknumsetDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysbooknumset) As(alias string) *sysbooknumset {
	s.sysbooknumsetDo.DO = *(s.sysbooknumsetDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysbooknumset) updateTableName(table string) *sysbooknumset {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.LocationName = field.NewString(table, "LocationName")
	s.BookType = field.NewString(table, "BookType")
	s.FontWord = field.NewString(table, "FontWord")
	s.NumLength = field.NewInt64(table, "NumLength")
	s.IsCRC = field.NewField(table, "IsCRC")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysbooknumset) WithContext(ctx context.Context) ISysbooknumsetDo {
	return s.sysbooknumsetDo.WithContext(ctx)
}

func (s sysbooknumset) TableName() string { return s.sysbooknumsetDo.TableName() }

func (s sysbooknumset) Alias() string { return s.sysbooknumsetDo.Alias() }

func (s *sysbooknumset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysbooknumset) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["LocationName"] = s.LocationName
	s.fieldMap["BookType"] = s.BookType
	s.fieldMap["FontWord"] = s.FontWord
	s.fieldMap["NumLength"] = s.NumLength
	s.fieldMap["IsCRC"] = s.IsCRC
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysbooknumset) clone(db *gorm.DB) sysbooknumset {
	s.sysbooknumsetDo.ReplaceDB(db)
	return s
}

type sysbooknumsetDo struct{ gen.DO }

type ISysbooknumsetDo interface {
	gen.SubQuery
	Debug() ISysbooknumsetDo
	WithContext(ctx context.Context) ISysbooknumsetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysbooknumsetDo
	Not(conds ...gen.Condition) ISysbooknumsetDo
	Or(conds ...gen.Condition) ISysbooknumsetDo
	Select(conds ...field.Expr) ISysbooknumsetDo
	Where(conds ...gen.Condition) ISysbooknumsetDo
	Order(conds ...field.Expr) ISysbooknumsetDo
	Distinct(cols ...field.Expr) ISysbooknumsetDo
	Omit(cols ...field.Expr) ISysbooknumsetDo
	Join(table schema.Tabler, on ...field.Expr) ISysbooknumsetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysbooknumsetDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysbooknumsetDo
	Group(cols ...field.Expr) ISysbooknumsetDo
	Having(conds ...gen.Condition) ISysbooknumsetDo
	Limit(limit int) ISysbooknumsetDo
	Offset(offset int) ISysbooknumsetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysbooknumsetDo
	Unscoped() ISysbooknumsetDo
	Create(values ...*model.Sysbooknumset) error
	CreateInBatches(values []*model.Sysbooknumset, batchSize int) error
	Save(values ...*model.Sysbooknumset) error
	First() (*model.Sysbooknumset, error)
	Take() (*model.Sysbooknumset, error)
	Last() (*model.Sysbooknumset, error)
	Find() ([]*model.Sysbooknumset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysbooknumset, err error)
	FindInBatches(result *[]*model.Sysbooknumset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysbooknumset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysbooknumsetDo
	Assign(attrs ...field.AssignExpr) ISysbooknumsetDo
	Joins(fields ...field.RelationField) ISysbooknumsetDo
	Preload(fields ...field.RelationField) ISysbooknumsetDo
	FirstOrInit() (*model.Sysbooknumset, error)
	FirstOrCreate() (*model.Sysbooknumset, error)
	FindByPage(offset int, limit int) (result []*model.Sysbooknumset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysbooknumsetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysbooknumsetDo) Debug() ISysbooknumsetDo {
	return s.withDO(s.DO.Debug())
}

func (s sysbooknumsetDo) WithContext(ctx context.Context) ISysbooknumsetDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysbooknumsetDo) ReadDB() ISysbooknumsetDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysbooknumsetDo) WriteDB() ISysbooknumsetDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysbooknumsetDo) Clauses(conds ...clause.Expression) ISysbooknumsetDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysbooknumsetDo) Returning(value interface{}, columns ...string) ISysbooknumsetDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysbooknumsetDo) Not(conds ...gen.Condition) ISysbooknumsetDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysbooknumsetDo) Or(conds ...gen.Condition) ISysbooknumsetDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysbooknumsetDo) Select(conds ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysbooknumsetDo) Where(conds ...gen.Condition) ISysbooknumsetDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysbooknumsetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysbooknumsetDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysbooknumsetDo) Order(conds ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysbooknumsetDo) Distinct(cols ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysbooknumsetDo) Omit(cols ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysbooknumsetDo) Join(table schema.Tabler, on ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysbooknumsetDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysbooknumsetDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysbooknumsetDo) Group(cols ...field.Expr) ISysbooknumsetDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysbooknumsetDo) Having(conds ...gen.Condition) ISysbooknumsetDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysbooknumsetDo) Limit(limit int) ISysbooknumsetDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysbooknumsetDo) Offset(offset int) ISysbooknumsetDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysbooknumsetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysbooknumsetDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysbooknumsetDo) Unscoped() ISysbooknumsetDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysbooknumsetDo) Create(values ...*model.Sysbooknumset) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysbooknumsetDo) CreateInBatches(values []*model.Sysbooknumset, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysbooknumsetDo) Save(values ...*model.Sysbooknumset) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysbooknumsetDo) First() (*model.Sysbooknumset, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumset), nil
	}
}

func (s sysbooknumsetDo) Take() (*model.Sysbooknumset, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumset), nil
	}
}

func (s sysbooknumsetDo) Last() (*model.Sysbooknumset, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumset), nil
	}
}

func (s sysbooknumsetDo) Find() ([]*model.Sysbooknumset, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysbooknumset), err
}

func (s sysbooknumsetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysbooknumset, err error) {
	buf := make([]*model.Sysbooknumset, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysbooknumsetDo) FindInBatches(result *[]*model.Sysbooknumset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysbooknumsetDo) Attrs(attrs ...field.AssignExpr) ISysbooknumsetDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysbooknumsetDo) Assign(attrs ...field.AssignExpr) ISysbooknumsetDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysbooknumsetDo) Joins(fields ...field.RelationField) ISysbooknumsetDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysbooknumsetDo) Preload(fields ...field.RelationField) ISysbooknumsetDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysbooknumsetDo) FirstOrInit() (*model.Sysbooknumset, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumset), nil
	}
}

func (s sysbooknumsetDo) FirstOrCreate() (*model.Sysbooknumset, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumset), nil
	}
}

func (s sysbooknumsetDo) FindByPage(offset int, limit int) (result []*model.Sysbooknumset, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysbooknumsetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysbooknumsetDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysbooknumsetDo) Delete(models ...*model.Sysbooknumset) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysbooknumsetDo) withDO(do gen.Dao) *sysbooknumsetDo {
	s.DO = *do.(*gen.DO)
	return s
}
