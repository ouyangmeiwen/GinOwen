// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemUserGroup(db *gorm.DB) systemUserGroup {
	_systemUserGroup := systemUserGroup{}

	_systemUserGroup.systemUserGroupDo.UseDB(db)
	_systemUserGroup.systemUserGroupDo.UseModel(&model.SystemUserGroup{})

	tableName := _systemUserGroup.systemUserGroupDo.TableName()
	_systemUserGroup.ALL = field.NewAsterisk(tableName)
	_systemUserGroup.ID = field.NewInt64(tableName, "id")
	_systemUserGroup.UserID = field.NewInt64(tableName, "user_id")
	_systemUserGroup.GroupID = field.NewInt64(tableName, "group_id")

	_systemUserGroup.fillFieldMap()

	return _systemUserGroup
}

type systemUserGroup struct {
	systemUserGroupDo systemUserGroupDo

	ALL     field.Asterisk
	ID      field.Int64
	UserID  field.Int64
	GroupID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemUserGroup) Table(newTableName string) *systemUserGroup {
	s.systemUserGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserGroup) As(alias string) *systemUserGroup {
	s.systemUserGroupDo.DO = *(s.systemUserGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserGroup) updateTableName(table string) *systemUserGroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.GroupID = field.NewInt64(table, "group_id")

	s.fillFieldMap()

	return s
}

func (s *systemUserGroup) WithContext(ctx context.Context) ISystemUserGroupDo {
	return s.systemUserGroupDo.WithContext(ctx)
}

func (s systemUserGroup) TableName() string { return s.systemUserGroupDo.TableName() }

func (s systemUserGroup) Alias() string { return s.systemUserGroupDo.Alias() }

func (s *systemUserGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["group_id"] = s.GroupID
}

func (s systemUserGroup) clone(db *gorm.DB) systemUserGroup {
	s.systemUserGroupDo.ReplaceDB(db)
	return s
}

type systemUserGroupDo struct{ gen.DO }

type ISystemUserGroupDo interface {
	gen.SubQuery
	Debug() ISystemUserGroupDo
	WithContext(ctx context.Context) ISystemUserGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserGroupDo
	Not(conds ...gen.Condition) ISystemUserGroupDo
	Or(conds ...gen.Condition) ISystemUserGroupDo
	Select(conds ...field.Expr) ISystemUserGroupDo
	Where(conds ...gen.Condition) ISystemUserGroupDo
	Order(conds ...field.Expr) ISystemUserGroupDo
	Distinct(cols ...field.Expr) ISystemUserGroupDo
	Omit(cols ...field.Expr) ISystemUserGroupDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserGroupDo
	Group(cols ...field.Expr) ISystemUserGroupDo
	Having(conds ...gen.Condition) ISystemUserGroupDo
	Limit(limit int) ISystemUserGroupDo
	Offset(offset int) ISystemUserGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserGroupDo
	Unscoped() ISystemUserGroupDo
	Create(values ...*model.SystemUserGroup) error
	CreateInBatches(values []*model.SystemUserGroup, batchSize int) error
	Save(values ...*model.SystemUserGroup) error
	First() (*model.SystemUserGroup, error)
	Take() (*model.SystemUserGroup, error)
	Last() (*model.SystemUserGroup, error)
	Find() ([]*model.SystemUserGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserGroup, err error)
	FindInBatches(result *[]*model.SystemUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserGroupDo
	Assign(attrs ...field.AssignExpr) ISystemUserGroupDo
	Joins(fields ...field.RelationField) ISystemUserGroupDo
	Preload(fields ...field.RelationField) ISystemUserGroupDo
	FirstOrInit() (*model.SystemUserGroup, error)
	FirstOrCreate() (*model.SystemUserGroup, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserGroupDo) Debug() ISystemUserGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserGroupDo) WithContext(ctx context.Context) ISystemUserGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserGroupDo) ReadDB() ISystemUserGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserGroupDo) WriteDB() ISystemUserGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserGroupDo) Clauses(conds ...clause.Expression) ISystemUserGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserGroupDo) Returning(value interface{}, columns ...string) ISystemUserGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserGroupDo) Not(conds ...gen.Condition) ISystemUserGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserGroupDo) Or(conds ...gen.Condition) ISystemUserGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserGroupDo) Select(conds ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserGroupDo) Where(conds ...gen.Condition) ISystemUserGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemUserGroupDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemUserGroupDo) Order(conds ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserGroupDo) Distinct(cols ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserGroupDo) Omit(cols ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserGroupDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserGroupDo) Group(cols ...field.Expr) ISystemUserGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserGroupDo) Having(conds ...gen.Condition) ISystemUserGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserGroupDo) Limit(limit int) ISystemUserGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserGroupDo) Offset(offset int) ISystemUserGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserGroupDo) Unscoped() ISystemUserGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserGroupDo) Create(values ...*model.SystemUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserGroupDo) CreateInBatches(values []*model.SystemUserGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserGroupDo) Save(values ...*model.SystemUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserGroupDo) First() (*model.SystemUserGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserGroup), nil
	}
}

func (s systemUserGroupDo) Take() (*model.SystemUserGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserGroup), nil
	}
}

func (s systemUserGroupDo) Last() (*model.SystemUserGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserGroup), nil
	}
}

func (s systemUserGroupDo) Find() ([]*model.SystemUserGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserGroup), err
}

func (s systemUserGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserGroup, err error) {
	buf := make([]*model.SystemUserGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserGroupDo) FindInBatches(result *[]*model.SystemUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserGroupDo) Attrs(attrs ...field.AssignExpr) ISystemUserGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserGroupDo) Assign(attrs ...field.AssignExpr) ISystemUserGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserGroupDo) Joins(fields ...field.RelationField) ISystemUserGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserGroupDo) Preload(fields ...field.RelationField) ISystemUserGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserGroupDo) FirstOrInit() (*model.SystemUserGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserGroup), nil
	}
}

func (s systemUserGroupDo) FirstOrCreate() (*model.SystemUserGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserGroup), nil
	}
}

func (s systemUserGroupDo) FindByPage(offset int, limit int) (result []*model.SystemUserGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserGroupDo) Delete(models ...*model.SystemUserGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserGroupDo) withDO(do gen.Dao) *systemUserGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
