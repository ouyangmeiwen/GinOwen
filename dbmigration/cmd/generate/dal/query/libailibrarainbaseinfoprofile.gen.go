// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibailibrarainbaseinfoprofile(db *gorm.DB) libailibrarainbaseinfoprofile {
	_libailibrarainbaseinfoprofile := libailibrarainbaseinfoprofile{}

	_libailibrarainbaseinfoprofile.libailibrarainbaseinfoprofileDo.UseDB(db)
	_libailibrarainbaseinfoprofile.libailibrarainbaseinfoprofileDo.UseModel(&model.Libailibrarainbaseinfoprofile{})

	tableName := _libailibrarainbaseinfoprofile.libailibrarainbaseinfoprofileDo.TableName()
	_libailibrarainbaseinfoprofile.ALL = field.NewAsterisk(tableName)
	_libailibrarainbaseinfoprofile.ID = field.NewInt64(tableName, "Id")
	_libailibrarainbaseinfoprofile.CreationTime = field.NewTime(tableName, "CreationTime")
	_libailibrarainbaseinfoprofile.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libailibrarainbaseinfoprofile.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libailibrarainbaseinfoprofile.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libailibrarainbaseinfoprofile.Status = field.NewInt64(tableName, "Status")
	_libailibrarainbaseinfoprofile.LastAppliedTime = field.NewTime(tableName, "LastAppliedTime")
	_libailibrarainbaseinfoprofile.TenantID = field.NewInt64(tableName, "TenantId")
	_libailibrarainbaseinfoprofile.AppID = field.NewString(tableName, "AppId")
	_libailibrarainbaseinfoprofile.AppKey = field.NewString(tableName, "AppKey")

	_libailibrarainbaseinfoprofile.fillFieldMap()

	return _libailibrarainbaseinfoprofile
}

type libailibrarainbaseinfoprofile struct {
	libailibrarainbaseinfoprofileDo libailibrarainbaseinfoprofileDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	Status               field.Int64
	LastAppliedTime      field.Time
	TenantID             field.Int64
	AppID                field.String
	AppKey               field.String

	fieldMap map[string]field.Expr
}

func (l libailibrarainbaseinfoprofile) Table(newTableName string) *libailibrarainbaseinfoprofile {
	l.libailibrarainbaseinfoprofileDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libailibrarainbaseinfoprofile) As(alias string) *libailibrarainbaseinfoprofile {
	l.libailibrarainbaseinfoprofileDo.DO = *(l.libailibrarainbaseinfoprofileDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libailibrarainbaseinfoprofile) updateTableName(table string) *libailibrarainbaseinfoprofile {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.Status = field.NewInt64(table, "Status")
	l.LastAppliedTime = field.NewTime(table, "LastAppliedTime")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.AppID = field.NewString(table, "AppId")
	l.AppKey = field.NewString(table, "AppKey")

	l.fillFieldMap()

	return l
}

func (l *libailibrarainbaseinfoprofile) WithContext(ctx context.Context) ILibailibrarainbaseinfoprofileDo {
	return l.libailibrarainbaseinfoprofileDo.WithContext(ctx)
}

func (l libailibrarainbaseinfoprofile) TableName() string {
	return l.libailibrarainbaseinfoprofileDo.TableName()
}

func (l libailibrarainbaseinfoprofile) Alias() string {
	return l.libailibrarainbaseinfoprofileDo.Alias()
}

func (l *libailibrarainbaseinfoprofile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libailibrarainbaseinfoprofile) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["Status"] = l.Status
	l.fieldMap["LastAppliedTime"] = l.LastAppliedTime
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["AppId"] = l.AppID
	l.fieldMap["AppKey"] = l.AppKey
}

func (l libailibrarainbaseinfoprofile) clone(db *gorm.DB) libailibrarainbaseinfoprofile {
	l.libailibrarainbaseinfoprofileDo.ReplaceDB(db)
	return l
}

type libailibrarainbaseinfoprofileDo struct{ gen.DO }

type ILibailibrarainbaseinfoprofileDo interface {
	gen.SubQuery
	Debug() ILibailibrarainbaseinfoprofileDo
	WithContext(ctx context.Context) ILibailibrarainbaseinfoprofileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibailibrarainbaseinfoprofileDo
	Not(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo
	Or(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo
	Select(conds ...field.Expr) ILibailibrarainbaseinfoprofileDo
	Where(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo
	Order(conds ...field.Expr) ILibailibrarainbaseinfoprofileDo
	Distinct(cols ...field.Expr) ILibailibrarainbaseinfoprofileDo
	Omit(cols ...field.Expr) ILibailibrarainbaseinfoprofileDo
	Join(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoprofileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoprofileDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoprofileDo
	Group(cols ...field.Expr) ILibailibrarainbaseinfoprofileDo
	Having(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo
	Limit(limit int) ILibailibrarainbaseinfoprofileDo
	Offset(offset int) ILibailibrarainbaseinfoprofileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainbaseinfoprofileDo
	Unscoped() ILibailibrarainbaseinfoprofileDo
	Create(values ...*model.Libailibrarainbaseinfoprofile) error
	CreateInBatches(values []*model.Libailibrarainbaseinfoprofile, batchSize int) error
	Save(values ...*model.Libailibrarainbaseinfoprofile) error
	First() (*model.Libailibrarainbaseinfoprofile, error)
	Take() (*model.Libailibrarainbaseinfoprofile, error)
	Last() (*model.Libailibrarainbaseinfoprofile, error)
	Find() ([]*model.Libailibrarainbaseinfoprofile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainbaseinfoprofile, err error)
	FindInBatches(result *[]*model.Libailibrarainbaseinfoprofile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libailibrarainbaseinfoprofile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibailibrarainbaseinfoprofileDo
	Assign(attrs ...field.AssignExpr) ILibailibrarainbaseinfoprofileDo
	Joins(fields ...field.RelationField) ILibailibrarainbaseinfoprofileDo
	Preload(fields ...field.RelationField) ILibailibrarainbaseinfoprofileDo
	FirstOrInit() (*model.Libailibrarainbaseinfoprofile, error)
	FirstOrCreate() (*model.Libailibrarainbaseinfoprofile, error)
	FindByPage(offset int, limit int) (result []*model.Libailibrarainbaseinfoprofile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibailibrarainbaseinfoprofileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libailibrarainbaseinfoprofileDo) Debug() ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Debug())
}

func (l libailibrarainbaseinfoprofileDo) WithContext(ctx context.Context) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libailibrarainbaseinfoprofileDo) ReadDB() ILibailibrarainbaseinfoprofileDo {
	return l.Clauses(dbresolver.Read)
}

func (l libailibrarainbaseinfoprofileDo) WriteDB() ILibailibrarainbaseinfoprofileDo {
	return l.Clauses(dbresolver.Write)
}

func (l libailibrarainbaseinfoprofileDo) Clauses(conds ...clause.Expression) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Returning(value interface{}, columns ...string) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libailibrarainbaseinfoprofileDo) Not(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Or(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Select(conds ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Where(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibailibrarainbaseinfoprofileDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libailibrarainbaseinfoprofileDo) Order(conds ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Distinct(cols ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libailibrarainbaseinfoprofileDo) Omit(cols ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libailibrarainbaseinfoprofileDo) Join(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libailibrarainbaseinfoprofileDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libailibrarainbaseinfoprofileDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libailibrarainbaseinfoprofileDo) Group(cols ...field.Expr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libailibrarainbaseinfoprofileDo) Having(conds ...gen.Condition) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libailibrarainbaseinfoprofileDo) Limit(limit int) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libailibrarainbaseinfoprofileDo) Offset(offset int) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libailibrarainbaseinfoprofileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libailibrarainbaseinfoprofileDo) Unscoped() ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libailibrarainbaseinfoprofileDo) Create(values ...*model.Libailibrarainbaseinfoprofile) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libailibrarainbaseinfoprofileDo) CreateInBatches(values []*model.Libailibrarainbaseinfoprofile, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libailibrarainbaseinfoprofileDo) Save(values ...*model.Libailibrarainbaseinfoprofile) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libailibrarainbaseinfoprofileDo) First() (*model.Libailibrarainbaseinfoprofile, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoprofile), nil
	}
}

func (l libailibrarainbaseinfoprofileDo) Take() (*model.Libailibrarainbaseinfoprofile, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoprofile), nil
	}
}

func (l libailibrarainbaseinfoprofileDo) Last() (*model.Libailibrarainbaseinfoprofile, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoprofile), nil
	}
}

func (l libailibrarainbaseinfoprofileDo) Find() ([]*model.Libailibrarainbaseinfoprofile, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libailibrarainbaseinfoprofile), err
}

func (l libailibrarainbaseinfoprofileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainbaseinfoprofile, err error) {
	buf := make([]*model.Libailibrarainbaseinfoprofile, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libailibrarainbaseinfoprofileDo) FindInBatches(result *[]*model.Libailibrarainbaseinfoprofile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libailibrarainbaseinfoprofileDo) Attrs(attrs ...field.AssignExpr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libailibrarainbaseinfoprofileDo) Assign(attrs ...field.AssignExpr) ILibailibrarainbaseinfoprofileDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libailibrarainbaseinfoprofileDo) Joins(fields ...field.RelationField) ILibailibrarainbaseinfoprofileDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libailibrarainbaseinfoprofileDo) Preload(fields ...field.RelationField) ILibailibrarainbaseinfoprofileDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libailibrarainbaseinfoprofileDo) FirstOrInit() (*model.Libailibrarainbaseinfoprofile, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoprofile), nil
	}
}

func (l libailibrarainbaseinfoprofileDo) FirstOrCreate() (*model.Libailibrarainbaseinfoprofile, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfoprofile), nil
	}
}

func (l libailibrarainbaseinfoprofileDo) FindByPage(offset int, limit int) (result []*model.Libailibrarainbaseinfoprofile, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libailibrarainbaseinfoprofileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libailibrarainbaseinfoprofileDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libailibrarainbaseinfoprofileDo) Delete(models ...*model.Libailibrarainbaseinfoprofile) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libailibrarainbaseinfoprofileDo) withDO(do gen.Dao) *libailibrarainbaseinfoprofileDo {
	l.DO = *do.(*gen.DO)
	return l
}
