// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newHangfirelist(db *gorm.DB) hangfirelist {
	_hangfirelist := hangfirelist{}

	_hangfirelist.hangfirelistDo.UseDB(db)
	_hangfirelist.hangfirelistDo.UseModel(&model.Hangfirelist{})

	tableName := _hangfirelist.hangfirelistDo.TableName()
	_hangfirelist.ALL = field.NewAsterisk(tableName)
	_hangfirelist.ID = field.NewInt64(tableName, "Id")
	_hangfirelist.Key = field.NewString(tableName, "Key")
	_hangfirelist.Value = field.NewString(tableName, "Value")
	_hangfirelist.ExpireAt = field.NewTime(tableName, "ExpireAt")

	_hangfirelist.fillFieldMap()

	return _hangfirelist
}

type hangfirelist struct {
	hangfirelistDo hangfirelistDo

	ALL      field.Asterisk
	ID       field.Int64
	Key      field.String
	Value    field.String
	ExpireAt field.Time

	fieldMap map[string]field.Expr
}

func (h hangfirelist) Table(newTableName string) *hangfirelist {
	h.hangfirelistDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hangfirelist) As(alias string) *hangfirelist {
	h.hangfirelistDo.DO = *(h.hangfirelistDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hangfirelist) updateTableName(table string) *hangfirelist {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "Id")
	h.Key = field.NewString(table, "Key")
	h.Value = field.NewString(table, "Value")
	h.ExpireAt = field.NewTime(table, "ExpireAt")

	h.fillFieldMap()

	return h
}

func (h *hangfirelist) WithContext(ctx context.Context) IHangfirelistDo {
	return h.hangfirelistDo.WithContext(ctx)
}

func (h hangfirelist) TableName() string { return h.hangfirelistDo.TableName() }

func (h hangfirelist) Alias() string { return h.hangfirelistDo.Alias() }

func (h *hangfirelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hangfirelist) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 4)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["Key"] = h.Key
	h.fieldMap["Value"] = h.Value
	h.fieldMap["ExpireAt"] = h.ExpireAt
}

func (h hangfirelist) clone(db *gorm.DB) hangfirelist {
	h.hangfirelistDo.ReplaceDB(db)
	return h
}

type hangfirelistDo struct{ gen.DO }

type IHangfirelistDo interface {
	gen.SubQuery
	Debug() IHangfirelistDo
	WithContext(ctx context.Context) IHangfirelistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHangfirelistDo
	Not(conds ...gen.Condition) IHangfirelistDo
	Or(conds ...gen.Condition) IHangfirelistDo
	Select(conds ...field.Expr) IHangfirelistDo
	Where(conds ...gen.Condition) IHangfirelistDo
	Order(conds ...field.Expr) IHangfirelistDo
	Distinct(cols ...field.Expr) IHangfirelistDo
	Omit(cols ...field.Expr) IHangfirelistDo
	Join(table schema.Tabler, on ...field.Expr) IHangfirelistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirelistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHangfirelistDo
	Group(cols ...field.Expr) IHangfirelistDo
	Having(conds ...gen.Condition) IHangfirelistDo
	Limit(limit int) IHangfirelistDo
	Offset(offset int) IHangfirelistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirelistDo
	Unscoped() IHangfirelistDo
	Create(values ...*model.Hangfirelist) error
	CreateInBatches(values []*model.Hangfirelist, batchSize int) error
	Save(values ...*model.Hangfirelist) error
	First() (*model.Hangfirelist, error)
	Take() (*model.Hangfirelist, error)
	Last() (*model.Hangfirelist, error)
	Find() ([]*model.Hangfirelist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirelist, err error)
	FindInBatches(result *[]*model.Hangfirelist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Hangfirelist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHangfirelistDo
	Assign(attrs ...field.AssignExpr) IHangfirelistDo
	Joins(fields ...field.RelationField) IHangfirelistDo
	Preload(fields ...field.RelationField) IHangfirelistDo
	FirstOrInit() (*model.Hangfirelist, error)
	FirstOrCreate() (*model.Hangfirelist, error)
	FindByPage(offset int, limit int) (result []*model.Hangfirelist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHangfirelistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hangfirelistDo) Debug() IHangfirelistDo {
	return h.withDO(h.DO.Debug())
}

func (h hangfirelistDo) WithContext(ctx context.Context) IHangfirelistDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hangfirelistDo) ReadDB() IHangfirelistDo {
	return h.Clauses(dbresolver.Read)
}

func (h hangfirelistDo) WriteDB() IHangfirelistDo {
	return h.Clauses(dbresolver.Write)
}

func (h hangfirelistDo) Clauses(conds ...clause.Expression) IHangfirelistDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hangfirelistDo) Returning(value interface{}, columns ...string) IHangfirelistDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hangfirelistDo) Not(conds ...gen.Condition) IHangfirelistDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hangfirelistDo) Or(conds ...gen.Condition) IHangfirelistDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hangfirelistDo) Select(conds ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hangfirelistDo) Where(conds ...gen.Condition) IHangfirelistDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hangfirelistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHangfirelistDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hangfirelistDo) Order(conds ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hangfirelistDo) Distinct(cols ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hangfirelistDo) Omit(cols ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hangfirelistDo) Join(table schema.Tabler, on ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hangfirelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hangfirelistDo) RightJoin(table schema.Tabler, on ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hangfirelistDo) Group(cols ...field.Expr) IHangfirelistDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hangfirelistDo) Having(conds ...gen.Condition) IHangfirelistDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hangfirelistDo) Limit(limit int) IHangfirelistDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hangfirelistDo) Offset(offset int) IHangfirelistDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hangfirelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHangfirelistDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hangfirelistDo) Unscoped() IHangfirelistDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hangfirelistDo) Create(values ...*model.Hangfirelist) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hangfirelistDo) CreateInBatches(values []*model.Hangfirelist, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hangfirelistDo) Save(values ...*model.Hangfirelist) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hangfirelistDo) First() (*model.Hangfirelist, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirelist), nil
	}
}

func (h hangfirelistDo) Take() (*model.Hangfirelist, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirelist), nil
	}
}

func (h hangfirelistDo) Last() (*model.Hangfirelist, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirelist), nil
	}
}

func (h hangfirelistDo) Find() ([]*model.Hangfirelist, error) {
	result, err := h.DO.Find()
	return result.([]*model.Hangfirelist), err
}

func (h hangfirelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Hangfirelist, err error) {
	buf := make([]*model.Hangfirelist, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hangfirelistDo) FindInBatches(result *[]*model.Hangfirelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hangfirelistDo) Attrs(attrs ...field.AssignExpr) IHangfirelistDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hangfirelistDo) Assign(attrs ...field.AssignExpr) IHangfirelistDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hangfirelistDo) Joins(fields ...field.RelationField) IHangfirelistDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hangfirelistDo) Preload(fields ...field.RelationField) IHangfirelistDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hangfirelistDo) FirstOrInit() (*model.Hangfirelist, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirelist), nil
	}
}

func (h hangfirelistDo) FirstOrCreate() (*model.Hangfirelist, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Hangfirelist), nil
	}
}

func (h hangfirelistDo) FindByPage(offset int, limit int) (result []*model.Hangfirelist, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hangfirelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hangfirelistDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hangfirelistDo) Delete(models ...*model.Hangfirelist) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hangfirelistDo) withDO(do gen.Dao) *hangfirelistDo {
	h.DO = *do.(*gen.DO)
	return h
}
