// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLcpsecuritygatepatronlog(db *gorm.DB) lcpsecuritygatepatronlog {
	_lcpsecuritygatepatronlog := lcpsecuritygatepatronlog{}

	_lcpsecuritygatepatronlog.lcpsecuritygatepatronlogDo.UseDB(db)
	_lcpsecuritygatepatronlog.lcpsecuritygatepatronlogDo.UseModel(&model.Lcpsecuritygatepatronlog{})

	tableName := _lcpsecuritygatepatronlog.lcpsecuritygatepatronlogDo.TableName()
	_lcpsecuritygatepatronlog.ALL = field.NewAsterisk(tableName)
	_lcpsecuritygatepatronlog.ID = field.NewString(tableName, "Id")
	_lcpsecuritygatepatronlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpsecuritygatepatronlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpsecuritygatepatronlog.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpsecuritygatepatronlog.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpsecuritygatepatronlog.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpsecuritygatepatronlog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_lcpsecuritygatepatronlog.TerminalName = field.NewString(tableName, "TerminalName")
	_lcpsecuritygatepatronlog.StartTime = field.NewTime(tableName, "StartTime")
	_lcpsecuritygatepatronlog.EndTime = field.NewTime(tableName, "EndTime")
	_lcpsecuritygatepatronlog.TotalInCount = field.NewInt64(tableName, "TotalInCount")
	_lcpsecuritygatepatronlog.TotalOutCount = field.NewInt64(tableName, "TotalOutCount")
	_lcpsecuritygatepatronlog.OriginType = field.NewInt64(tableName, "OriginType")
	_lcpsecuritygatepatronlog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpsecuritygatepatronlog.fillFieldMap()

	return _lcpsecuritygatepatronlog
}

type lcpsecuritygatepatronlog struct {
	lcpsecuritygatepatronlogDo lcpsecuritygatepatronlogDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	TerminalID           field.String
	TerminalCode         field.String
	TerminalName         field.String
	StartTime            field.Time
	EndTime              field.Time
	TotalInCount         field.Int64
	TotalOutCount        field.Int64
	OriginType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpsecuritygatepatronlog) Table(newTableName string) *lcpsecuritygatepatronlog {
	l.lcpsecuritygatepatronlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpsecuritygatepatronlog) As(alias string) *lcpsecuritygatepatronlog {
	l.lcpsecuritygatepatronlogDo.DO = *(l.lcpsecuritygatepatronlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpsecuritygatepatronlog) updateTableName(table string) *lcpsecuritygatepatronlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.StartTime = field.NewTime(table, "StartTime")
	l.EndTime = field.NewTime(table, "EndTime")
	l.TotalInCount = field.NewInt64(table, "TotalInCount")
	l.TotalOutCount = field.NewInt64(table, "TotalOutCount")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpsecuritygatepatronlog) WithContext(ctx context.Context) ILcpsecuritygatepatronlogDo {
	return l.lcpsecuritygatepatronlogDo.WithContext(ctx)
}

func (l lcpsecuritygatepatronlog) TableName() string { return l.lcpsecuritygatepatronlogDo.TableName() }

func (l lcpsecuritygatepatronlog) Alias() string { return l.lcpsecuritygatepatronlogDo.Alias() }

func (l *lcpsecuritygatepatronlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpsecuritygatepatronlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["StartTime"] = l.StartTime
	l.fieldMap["EndTime"] = l.EndTime
	l.fieldMap["TotalInCount"] = l.TotalInCount
	l.fieldMap["TotalOutCount"] = l.TotalOutCount
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpsecuritygatepatronlog) clone(db *gorm.DB) lcpsecuritygatepatronlog {
	l.lcpsecuritygatepatronlogDo.ReplaceDB(db)
	return l
}

type lcpsecuritygatepatronlogDo struct{ gen.DO }

type ILcpsecuritygatepatronlogDo interface {
	gen.SubQuery
	Debug() ILcpsecuritygatepatronlogDo
	WithContext(ctx context.Context) ILcpsecuritygatepatronlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpsecuritygatepatronlogDo
	Not(conds ...gen.Condition) ILcpsecuritygatepatronlogDo
	Or(conds ...gen.Condition) ILcpsecuritygatepatronlogDo
	Select(conds ...field.Expr) ILcpsecuritygatepatronlogDo
	Where(conds ...gen.Condition) ILcpsecuritygatepatronlogDo
	Order(conds ...field.Expr) ILcpsecuritygatepatronlogDo
	Distinct(cols ...field.Expr) ILcpsecuritygatepatronlogDo
	Omit(cols ...field.Expr) ILcpsecuritygatepatronlogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygatepatronlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatepatronlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatepatronlogDo
	Group(cols ...field.Expr) ILcpsecuritygatepatronlogDo
	Having(conds ...gen.Condition) ILcpsecuritygatepatronlogDo
	Limit(limit int) ILcpsecuritygatepatronlogDo
	Offset(offset int) ILcpsecuritygatepatronlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygatepatronlogDo
	Unscoped() ILcpsecuritygatepatronlogDo
	Create(values ...*model.Lcpsecuritygatepatronlog) error
	CreateInBatches(values []*model.Lcpsecuritygatepatronlog, batchSize int) error
	Save(values ...*model.Lcpsecuritygatepatronlog) error
	First() (*model.Lcpsecuritygatepatronlog, error)
	Take() (*model.Lcpsecuritygatepatronlog, error)
	Last() (*model.Lcpsecuritygatepatronlog, error)
	Find() ([]*model.Lcpsecuritygatepatronlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygatepatronlog, err error)
	FindInBatches(result *[]*model.Lcpsecuritygatepatronlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpsecuritygatepatronlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpsecuritygatepatronlogDo
	Assign(attrs ...field.AssignExpr) ILcpsecuritygatepatronlogDo
	Joins(fields ...field.RelationField) ILcpsecuritygatepatronlogDo
	Preload(fields ...field.RelationField) ILcpsecuritygatepatronlogDo
	FirstOrInit() (*model.Lcpsecuritygatepatronlog, error)
	FirstOrCreate() (*model.Lcpsecuritygatepatronlog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpsecuritygatepatronlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpsecuritygatepatronlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpsecuritygatepatronlogDo) Debug() ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpsecuritygatepatronlogDo) WithContext(ctx context.Context) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpsecuritygatepatronlogDo) ReadDB() ILcpsecuritygatepatronlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpsecuritygatepatronlogDo) WriteDB() ILcpsecuritygatepatronlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpsecuritygatepatronlogDo) Clauses(conds ...clause.Expression) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpsecuritygatepatronlogDo) Returning(value interface{}, columns ...string) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpsecuritygatepatronlogDo) Not(conds ...gen.Condition) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpsecuritygatepatronlogDo) Or(conds ...gen.Condition) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpsecuritygatepatronlogDo) Select(conds ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpsecuritygatepatronlogDo) Where(conds ...gen.Condition) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpsecuritygatepatronlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpsecuritygatepatronlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpsecuritygatepatronlogDo) Order(conds ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpsecuritygatepatronlogDo) Distinct(cols ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpsecuritygatepatronlogDo) Omit(cols ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpsecuritygatepatronlogDo) Join(table schema.Tabler, on ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpsecuritygatepatronlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpsecuritygatepatronlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpsecuritygatepatronlogDo) Group(cols ...field.Expr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpsecuritygatepatronlogDo) Having(conds ...gen.Condition) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpsecuritygatepatronlogDo) Limit(limit int) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpsecuritygatepatronlogDo) Offset(offset int) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpsecuritygatepatronlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpsecuritygatepatronlogDo) Unscoped() ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpsecuritygatepatronlogDo) Create(values ...*model.Lcpsecuritygatepatronlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpsecuritygatepatronlogDo) CreateInBatches(values []*model.Lcpsecuritygatepatronlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpsecuritygatepatronlogDo) Save(values ...*model.Lcpsecuritygatepatronlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpsecuritygatepatronlogDo) First() (*model.Lcpsecuritygatepatronlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatepatronlog), nil
	}
}

func (l lcpsecuritygatepatronlogDo) Take() (*model.Lcpsecuritygatepatronlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatepatronlog), nil
	}
}

func (l lcpsecuritygatepatronlogDo) Last() (*model.Lcpsecuritygatepatronlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatepatronlog), nil
	}
}

func (l lcpsecuritygatepatronlogDo) Find() ([]*model.Lcpsecuritygatepatronlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpsecuritygatepatronlog), err
}

func (l lcpsecuritygatepatronlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpsecuritygatepatronlog, err error) {
	buf := make([]*model.Lcpsecuritygatepatronlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpsecuritygatepatronlogDo) FindInBatches(result *[]*model.Lcpsecuritygatepatronlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpsecuritygatepatronlogDo) Attrs(attrs ...field.AssignExpr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpsecuritygatepatronlogDo) Assign(attrs ...field.AssignExpr) ILcpsecuritygatepatronlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpsecuritygatepatronlogDo) Joins(fields ...field.RelationField) ILcpsecuritygatepatronlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpsecuritygatepatronlogDo) Preload(fields ...field.RelationField) ILcpsecuritygatepatronlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpsecuritygatepatronlogDo) FirstOrInit() (*model.Lcpsecuritygatepatronlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatepatronlog), nil
	}
}

func (l lcpsecuritygatepatronlogDo) FirstOrCreate() (*model.Lcpsecuritygatepatronlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpsecuritygatepatronlog), nil
	}
}

func (l lcpsecuritygatepatronlogDo) FindByPage(offset int, limit int) (result []*model.Lcpsecuritygatepatronlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpsecuritygatepatronlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpsecuritygatepatronlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpsecuritygatepatronlogDo) Delete(models ...*model.Lcpsecuritygatepatronlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpsecuritygatepatronlogDo) withDO(do gen.Dao) *lcpsecuritygatepatronlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
