// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newBibliography(db *gorm.DB) bibliography {
	_bibliography := bibliography{}

	_bibliography.bibliographyDo.UseDB(db)
	_bibliography.bibliographyDo.UseModel(&model.Bibliography{})

	tableName := _bibliography.bibliographyDo.TableName()
	_bibliography.ALL = field.NewAsterisk(tableName)
	_bibliography.RECORDID = field.NewInt64(tableName, "RECORD_ID")
	_bibliography.RESOURCECODE = field.NewString(tableName, "RESOURCE_CODE")
	_bibliography.LITCODE = field.NewInt64(tableName, "LIT_CODE")
	_bibliography.DOCCODE = field.NewInt64(tableName, "DOC_CODE")
	_bibliography.MDTYPE = field.NewString(tableName, "MD_TYPE")
	_bibliography.MDLEVEL = field.NewInt64(tableName, "MD_LEVEL")
	_bibliography.COUNTRYCODE = field.NewString(tableName, "COUNTRY_CODE")
	_bibliography.LANGCODE = field.NewString(tableName, "LANG_CODE")
	_bibliography.CIP = field.NewString(tableName, "CIP")
	_bibliography.LIBCODE = field.NewString(tableName, "LIB_CODE")
	_bibliography.GROUPCODE = field.NewString(tableName, "GROUP_CODE")
	_bibliography.CZRECID = field.NewInt64(tableName, "CZ_REC_ID")
	_bibliography.NZRECID = field.NewInt64(tableName, "NZ_REC_ID")
	_bibliography.CTRLRECID = field.NewInt64(tableName, "CTRL_REC_ID")
	_bibliography.DSFLAG = field.NewString(tableName, "DS_FLAG")
	_bibliography.CATALOGLEVEL = field.NewInt64(tableName, "CATALOG_LEVEL")
	_bibliography.CATALOGEDITOR = field.NewInt64(tableName, "CATALOG_EDITOR")
	_bibliography.CREATEBY = field.NewInt64(tableName, "CREATE_BY")
	_bibliography.CREATEDATE = field.NewTime(tableName, "CREATE_DATE")
	_bibliography.UPDATEBY = field.NewInt64(tableName, "UPDATE_BY")
	_bibliography.UPDATEDATE = field.NewTime(tableName, "UPDATE_DATE")
	_bibliography.TITLE = field.NewString(tableName, "TITLE")
	_bibliography.ISBN13 = field.NewString(tableName, "ISBN13")
	_bibliography.ISBN10 = field.NewString(tableName, "ISBN10")
	_bibliography.ISSN = field.NewString(tableName, "ISSN")
	_bibliography.AUTHOR = field.NewString(tableName, "AUTHOR")
	_bibliography.PUBLISHER = field.NewString(tableName, "PUBLISHER")
	_bibliography.PUBDATE = field.NewString(tableName, "PUB_DATE")
	_bibliography.COVERURL = field.NewString(tableName, "COVER_URL")
	_bibliography.EDTYPE = field.NewInt64(tableName, "E_D_TYPE")
	_bibliography.GROUPRECORDID = field.NewInt64(tableName, "GROUP_RECORD_ID")
	_bibliography.ITEMCOUNT = field.NewInt64(tableName, "ITEM_COUNT")
	_bibliography.FOUNDINGYEAR = field.NewString(tableName, "FOUNDING_YEAR")
	_bibliography.ENDYEAR = field.NewString(tableName, "END_YEAR")
	_bibliography.DOI = field.NewString(tableName, "DOI")
	_bibliography.OA = field.NewInt64(tableName, "OA")
	_bibliography.OLDID = field.NewString(tableName, "OLD_ID")
	_bibliography.DXID = field.NewString(tableName, "DX_ID")
	_bibliography.CATALOGSAVEEDITOR = field.NewInt64(tableName, "CATALOG_SAVE_EDITOR")
	_bibliography.FIRSTYBEDITOR = field.NewInt64(tableName, "FIRST_YB_EDITOR")
	_bibliography.FIRSTYBDATE = field.NewTime(tableName, "FIRST_YB_DATE")
	_bibliography.CHAOXINGECOLLECTIONFLAG = field.NewInt64(tableName, "CHAOXING_E_COLLECTION_FLAG")
	_bibliography.ORIGINALEDITOR = field.NewInt64(tableName, "ORIGINAL_EDITOR")
	_bibliography.ORIGINALDATE = field.NewTime(tableName, "ORIGINAL_DATE")

	_bibliography.fillFieldMap()

	return _bibliography
}

type bibliography struct {
	bibliographyDo bibliographyDo

	ALL                     field.Asterisk
	RECORDID                field.Int64
	RESOURCECODE            field.String
	LITCODE                 field.Int64
	DOCCODE                 field.Int64
	MDTYPE                  field.String
	MDLEVEL                 field.Int64
	COUNTRYCODE             field.String
	LANGCODE                field.String
	CIP                     field.String
	LIBCODE                 field.String
	GROUPCODE               field.String
	CZRECID                 field.Int64
	NZRECID                 field.Int64
	CTRLRECID               field.Int64
	DSFLAG                  field.String
	CATALOGLEVEL            field.Int64
	CATALOGEDITOR           field.Int64
	CREATEBY                field.Int64
	CREATEDATE              field.Time
	UPDATEBY                field.Int64
	UPDATEDATE              field.Time
	TITLE                   field.String
	ISBN13                  field.String
	ISBN10                  field.String
	ISSN                    field.String
	AUTHOR                  field.String
	PUBLISHER               field.String
	PUBDATE                 field.String
	COVERURL                field.String
	EDTYPE                  field.Int64
	GROUPRECORDID           field.Int64
	ITEMCOUNT               field.Int64
	FOUNDINGYEAR            field.String
	ENDYEAR                 field.String
	DOI                     field.String
	OA                      field.Int64
	OLDID                   field.String
	DXID                    field.String
	CATALOGSAVEEDITOR       field.Int64
	FIRSTYBEDITOR           field.Int64
	FIRSTYBDATE             field.Time
	CHAOXINGECOLLECTIONFLAG field.Int64
	ORIGINALEDITOR          field.Int64
	ORIGINALDATE            field.Time

	fieldMap map[string]field.Expr
}

func (b bibliography) Table(newTableName string) *bibliography {
	b.bibliographyDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bibliography) As(alias string) *bibliography {
	b.bibliographyDo.DO = *(b.bibliographyDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bibliography) updateTableName(table string) *bibliography {
	b.ALL = field.NewAsterisk(table)
	b.RECORDID = field.NewInt64(table, "RECORD_ID")
	b.RESOURCECODE = field.NewString(table, "RESOURCE_CODE")
	b.LITCODE = field.NewInt64(table, "LIT_CODE")
	b.DOCCODE = field.NewInt64(table, "DOC_CODE")
	b.MDTYPE = field.NewString(table, "MD_TYPE")
	b.MDLEVEL = field.NewInt64(table, "MD_LEVEL")
	b.COUNTRYCODE = field.NewString(table, "COUNTRY_CODE")
	b.LANGCODE = field.NewString(table, "LANG_CODE")
	b.CIP = field.NewString(table, "CIP")
	b.LIBCODE = field.NewString(table, "LIB_CODE")
	b.GROUPCODE = field.NewString(table, "GROUP_CODE")
	b.CZRECID = field.NewInt64(table, "CZ_REC_ID")
	b.NZRECID = field.NewInt64(table, "NZ_REC_ID")
	b.CTRLRECID = field.NewInt64(table, "CTRL_REC_ID")
	b.DSFLAG = field.NewString(table, "DS_FLAG")
	b.CATALOGLEVEL = field.NewInt64(table, "CATALOG_LEVEL")
	b.CATALOGEDITOR = field.NewInt64(table, "CATALOG_EDITOR")
	b.CREATEBY = field.NewInt64(table, "CREATE_BY")
	b.CREATEDATE = field.NewTime(table, "CREATE_DATE")
	b.UPDATEBY = field.NewInt64(table, "UPDATE_BY")
	b.UPDATEDATE = field.NewTime(table, "UPDATE_DATE")
	b.TITLE = field.NewString(table, "TITLE")
	b.ISBN13 = field.NewString(table, "ISBN13")
	b.ISBN10 = field.NewString(table, "ISBN10")
	b.ISSN = field.NewString(table, "ISSN")
	b.AUTHOR = field.NewString(table, "AUTHOR")
	b.PUBLISHER = field.NewString(table, "PUBLISHER")
	b.PUBDATE = field.NewString(table, "PUB_DATE")
	b.COVERURL = field.NewString(table, "COVER_URL")
	b.EDTYPE = field.NewInt64(table, "E_D_TYPE")
	b.GROUPRECORDID = field.NewInt64(table, "GROUP_RECORD_ID")
	b.ITEMCOUNT = field.NewInt64(table, "ITEM_COUNT")
	b.FOUNDINGYEAR = field.NewString(table, "FOUNDING_YEAR")
	b.ENDYEAR = field.NewString(table, "END_YEAR")
	b.DOI = field.NewString(table, "DOI")
	b.OA = field.NewInt64(table, "OA")
	b.OLDID = field.NewString(table, "OLD_ID")
	b.DXID = field.NewString(table, "DX_ID")
	b.CATALOGSAVEEDITOR = field.NewInt64(table, "CATALOG_SAVE_EDITOR")
	b.FIRSTYBEDITOR = field.NewInt64(table, "FIRST_YB_EDITOR")
	b.FIRSTYBDATE = field.NewTime(table, "FIRST_YB_DATE")
	b.CHAOXINGECOLLECTIONFLAG = field.NewInt64(table, "CHAOXING_E_COLLECTION_FLAG")
	b.ORIGINALEDITOR = field.NewInt64(table, "ORIGINAL_EDITOR")
	b.ORIGINALDATE = field.NewTime(table, "ORIGINAL_DATE")

	b.fillFieldMap()

	return b
}

func (b *bibliography) WithContext(ctx context.Context) IBibliographyDo {
	return b.bibliographyDo.WithContext(ctx)
}

func (b bibliography) TableName() string { return b.bibliographyDo.TableName() }

func (b bibliography) Alias() string { return b.bibliographyDo.Alias() }

func (b *bibliography) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bibliography) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 44)
	b.fieldMap["RECORD_ID"] = b.RECORDID
	b.fieldMap["RESOURCE_CODE"] = b.RESOURCECODE
	b.fieldMap["LIT_CODE"] = b.LITCODE
	b.fieldMap["DOC_CODE"] = b.DOCCODE
	b.fieldMap["MD_TYPE"] = b.MDTYPE
	b.fieldMap["MD_LEVEL"] = b.MDLEVEL
	b.fieldMap["COUNTRY_CODE"] = b.COUNTRYCODE
	b.fieldMap["LANG_CODE"] = b.LANGCODE
	b.fieldMap["CIP"] = b.CIP
	b.fieldMap["LIB_CODE"] = b.LIBCODE
	b.fieldMap["GROUP_CODE"] = b.GROUPCODE
	b.fieldMap["CZ_REC_ID"] = b.CZRECID
	b.fieldMap["NZ_REC_ID"] = b.NZRECID
	b.fieldMap["CTRL_REC_ID"] = b.CTRLRECID
	b.fieldMap["DS_FLAG"] = b.DSFLAG
	b.fieldMap["CATALOG_LEVEL"] = b.CATALOGLEVEL
	b.fieldMap["CATALOG_EDITOR"] = b.CATALOGEDITOR
	b.fieldMap["CREATE_BY"] = b.CREATEBY
	b.fieldMap["CREATE_DATE"] = b.CREATEDATE
	b.fieldMap["UPDATE_BY"] = b.UPDATEBY
	b.fieldMap["UPDATE_DATE"] = b.UPDATEDATE
	b.fieldMap["TITLE"] = b.TITLE
	b.fieldMap["ISBN13"] = b.ISBN13
	b.fieldMap["ISBN10"] = b.ISBN10
	b.fieldMap["ISSN"] = b.ISSN
	b.fieldMap["AUTHOR"] = b.AUTHOR
	b.fieldMap["PUBLISHER"] = b.PUBLISHER
	b.fieldMap["PUB_DATE"] = b.PUBDATE
	b.fieldMap["COVER_URL"] = b.COVERURL
	b.fieldMap["E_D_TYPE"] = b.EDTYPE
	b.fieldMap["GROUP_RECORD_ID"] = b.GROUPRECORDID
	b.fieldMap["ITEM_COUNT"] = b.ITEMCOUNT
	b.fieldMap["FOUNDING_YEAR"] = b.FOUNDINGYEAR
	b.fieldMap["END_YEAR"] = b.ENDYEAR
	b.fieldMap["DOI"] = b.DOI
	b.fieldMap["OA"] = b.OA
	b.fieldMap["OLD_ID"] = b.OLDID
	b.fieldMap["DX_ID"] = b.DXID
	b.fieldMap["CATALOG_SAVE_EDITOR"] = b.CATALOGSAVEEDITOR
	b.fieldMap["FIRST_YB_EDITOR"] = b.FIRSTYBEDITOR
	b.fieldMap["FIRST_YB_DATE"] = b.FIRSTYBDATE
	b.fieldMap["CHAOXING_E_COLLECTION_FLAG"] = b.CHAOXINGECOLLECTIONFLAG
	b.fieldMap["ORIGINAL_EDITOR"] = b.ORIGINALEDITOR
	b.fieldMap["ORIGINAL_DATE"] = b.ORIGINALDATE
}

func (b bibliography) clone(db *gorm.DB) bibliography {
	b.bibliographyDo.ReplaceDB(db)
	return b
}

type bibliographyDo struct{ gen.DO }

type IBibliographyDo interface {
	gen.SubQuery
	Debug() IBibliographyDo
	WithContext(ctx context.Context) IBibliographyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBibliographyDo
	Not(conds ...gen.Condition) IBibliographyDo
	Or(conds ...gen.Condition) IBibliographyDo
	Select(conds ...field.Expr) IBibliographyDo
	Where(conds ...gen.Condition) IBibliographyDo
	Order(conds ...field.Expr) IBibliographyDo
	Distinct(cols ...field.Expr) IBibliographyDo
	Omit(cols ...field.Expr) IBibliographyDo
	Join(table schema.Tabler, on ...field.Expr) IBibliographyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBibliographyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBibliographyDo
	Group(cols ...field.Expr) IBibliographyDo
	Having(conds ...gen.Condition) IBibliographyDo
	Limit(limit int) IBibliographyDo
	Offset(offset int) IBibliographyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBibliographyDo
	Unscoped() IBibliographyDo
	Create(values ...*model.Bibliography) error
	CreateInBatches(values []*model.Bibliography, batchSize int) error
	Save(values ...*model.Bibliography) error
	First() (*model.Bibliography, error)
	Take() (*model.Bibliography, error)
	Last() (*model.Bibliography, error)
	Find() ([]*model.Bibliography, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bibliography, err error)
	FindInBatches(result *[]*model.Bibliography, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Bibliography) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBibliographyDo
	Assign(attrs ...field.AssignExpr) IBibliographyDo
	Joins(fields ...field.RelationField) IBibliographyDo
	Preload(fields ...field.RelationField) IBibliographyDo
	FirstOrInit() (*model.Bibliography, error)
	FirstOrCreate() (*model.Bibliography, error)
	FindByPage(offset int, limit int) (result []*model.Bibliography, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBibliographyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bibliographyDo) Debug() IBibliographyDo {
	return b.withDO(b.DO.Debug())
}

func (b bibliographyDo) WithContext(ctx context.Context) IBibliographyDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bibliographyDo) ReadDB() IBibliographyDo {
	return b.Clauses(dbresolver.Read)
}

func (b bibliographyDo) WriteDB() IBibliographyDo {
	return b.Clauses(dbresolver.Write)
}

func (b bibliographyDo) Clauses(conds ...clause.Expression) IBibliographyDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bibliographyDo) Returning(value interface{}, columns ...string) IBibliographyDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bibliographyDo) Not(conds ...gen.Condition) IBibliographyDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bibliographyDo) Or(conds ...gen.Condition) IBibliographyDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bibliographyDo) Select(conds ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bibliographyDo) Where(conds ...gen.Condition) IBibliographyDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bibliographyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBibliographyDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b bibliographyDo) Order(conds ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bibliographyDo) Distinct(cols ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bibliographyDo) Omit(cols ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bibliographyDo) Join(table schema.Tabler, on ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bibliographyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bibliographyDo) RightJoin(table schema.Tabler, on ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bibliographyDo) Group(cols ...field.Expr) IBibliographyDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bibliographyDo) Having(conds ...gen.Condition) IBibliographyDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bibliographyDo) Limit(limit int) IBibliographyDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bibliographyDo) Offset(offset int) IBibliographyDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bibliographyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBibliographyDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bibliographyDo) Unscoped() IBibliographyDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bibliographyDo) Create(values ...*model.Bibliography) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bibliographyDo) CreateInBatches(values []*model.Bibliography, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bibliographyDo) Save(values ...*model.Bibliography) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bibliographyDo) First() (*model.Bibliography, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bibliography), nil
	}
}

func (b bibliographyDo) Take() (*model.Bibliography, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bibliography), nil
	}
}

func (b bibliographyDo) Last() (*model.Bibliography, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bibliography), nil
	}
}

func (b bibliographyDo) Find() ([]*model.Bibliography, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bibliography), err
}

func (b bibliographyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bibliography, err error) {
	buf := make([]*model.Bibliography, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bibliographyDo) FindInBatches(result *[]*model.Bibliography, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bibliographyDo) Attrs(attrs ...field.AssignExpr) IBibliographyDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bibliographyDo) Assign(attrs ...field.AssignExpr) IBibliographyDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bibliographyDo) Joins(fields ...field.RelationField) IBibliographyDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bibliographyDo) Preload(fields ...field.RelationField) IBibliographyDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bibliographyDo) FirstOrInit() (*model.Bibliography, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bibliography), nil
	}
}

func (b bibliographyDo) FirstOrCreate() (*model.Bibliography, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bibliography), nil
	}
}

func (b bibliographyDo) FindByPage(offset int, limit int) (result []*model.Bibliography, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bibliographyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bibliographyDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bibliographyDo) Delete(models ...*model.Bibliography) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bibliographyDo) withDO(do gen.Dao) *bibliographyDo {
	b.DO = *do.(*gen.DO)
	return b
}
