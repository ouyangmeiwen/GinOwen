// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newWfWorkflow(db *gorm.DB) wfWorkflow {
	_wfWorkflow := wfWorkflow{}

	_wfWorkflow.wfWorkflowDo.UseDB(db)
	_wfWorkflow.wfWorkflowDo.UseModel(&model.WfWorkflow{})

	tableName := _wfWorkflow.wfWorkflowDo.TableName()
	_wfWorkflow.ALL = field.NewAsterisk(tableName)
	_wfWorkflow.ID = field.NewInt64(tableName, "id")
	_wfWorkflow.CreateTime = field.NewTime(tableName, "create_time")
	_wfWorkflow.UpdateTime = field.NewTime(tableName, "update_time")
	_wfWorkflow.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_wfWorkflow.Name = field.NewString(tableName, "name")
	_wfWorkflow.Key = field.NewString(tableName, "key")
	_wfWorkflow.SnPrefix = field.NewString(tableName, "sn_prefix")
	_wfWorkflow.Description = field.NewString(tableName, "description")
	_wfWorkflow.ViewPermissionCheck = field.NewInt64(tableName, "view_permission_check")
	_wfWorkflow.LimitExpression = field.NewString(tableName, "limit_expression")
	_wfWorkflow.DisplayFormStr = field.NewString(tableName, "display_form_str")
	_wfWorkflow.TitleTemplate = field.NewString(tableName, "title_template")
	_wfWorkflow.ContentTemplate = field.NewString(tableName, "content_template")
	_wfWorkflow.CreateByID = field.NewInt64(tableName, "create_by_id")
	_wfWorkflow.UpdateByID = field.NewInt64(tableName, "update_by_id")

	_wfWorkflow.fillFieldMap()

	return _wfWorkflow
}

type wfWorkflow struct {
	wfWorkflowDo wfWorkflowDo

	ALL                 field.Asterisk
	ID                  field.Int64
	CreateTime          field.Time
	UpdateTime          field.Time
	IsDeleted           field.Int64
	Name                field.String
	Key                 field.String
	SnPrefix            field.String
	Description         field.String
	ViewPermissionCheck field.Int64
	LimitExpression     field.String
	DisplayFormStr      field.String
	TitleTemplate       field.String
	ContentTemplate     field.String
	CreateByID          field.Int64
	UpdateByID          field.Int64

	fieldMap map[string]field.Expr
}

func (w wfWorkflow) Table(newTableName string) *wfWorkflow {
	w.wfWorkflowDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wfWorkflow) As(alias string) *wfWorkflow {
	w.wfWorkflowDo.DO = *(w.wfWorkflowDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wfWorkflow) updateTableName(table string) *wfWorkflow {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.IsDeleted = field.NewInt64(table, "is_deleted")
	w.Name = field.NewString(table, "name")
	w.Key = field.NewString(table, "key")
	w.SnPrefix = field.NewString(table, "sn_prefix")
	w.Description = field.NewString(table, "description")
	w.ViewPermissionCheck = field.NewInt64(table, "view_permission_check")
	w.LimitExpression = field.NewString(table, "limit_expression")
	w.DisplayFormStr = field.NewString(table, "display_form_str")
	w.TitleTemplate = field.NewString(table, "title_template")
	w.ContentTemplate = field.NewString(table, "content_template")
	w.CreateByID = field.NewInt64(table, "create_by_id")
	w.UpdateByID = field.NewInt64(table, "update_by_id")

	w.fillFieldMap()

	return w
}

func (w *wfWorkflow) WithContext(ctx context.Context) IWfWorkflowDo {
	return w.wfWorkflowDo.WithContext(ctx)
}

func (w wfWorkflow) TableName() string { return w.wfWorkflowDo.TableName() }

func (w wfWorkflow) Alias() string { return w.wfWorkflowDo.Alias() }

func (w *wfWorkflow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wfWorkflow) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 15)
	w.fieldMap["id"] = w.ID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["is_deleted"] = w.IsDeleted
	w.fieldMap["name"] = w.Name
	w.fieldMap["key"] = w.Key
	w.fieldMap["sn_prefix"] = w.SnPrefix
	w.fieldMap["description"] = w.Description
	w.fieldMap["view_permission_check"] = w.ViewPermissionCheck
	w.fieldMap["limit_expression"] = w.LimitExpression
	w.fieldMap["display_form_str"] = w.DisplayFormStr
	w.fieldMap["title_template"] = w.TitleTemplate
	w.fieldMap["content_template"] = w.ContentTemplate
	w.fieldMap["create_by_id"] = w.CreateByID
	w.fieldMap["update_by_id"] = w.UpdateByID
}

func (w wfWorkflow) clone(db *gorm.DB) wfWorkflow {
	w.wfWorkflowDo.ReplaceDB(db)
	return w
}

type wfWorkflowDo struct{ gen.DO }

type IWfWorkflowDo interface {
	gen.SubQuery
	Debug() IWfWorkflowDo
	WithContext(ctx context.Context) IWfWorkflowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWfWorkflowDo
	Not(conds ...gen.Condition) IWfWorkflowDo
	Or(conds ...gen.Condition) IWfWorkflowDo
	Select(conds ...field.Expr) IWfWorkflowDo
	Where(conds ...gen.Condition) IWfWorkflowDo
	Order(conds ...field.Expr) IWfWorkflowDo
	Distinct(cols ...field.Expr) IWfWorkflowDo
	Omit(cols ...field.Expr) IWfWorkflowDo
	Join(table schema.Tabler, on ...field.Expr) IWfWorkflowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWfWorkflowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWfWorkflowDo
	Group(cols ...field.Expr) IWfWorkflowDo
	Having(conds ...gen.Condition) IWfWorkflowDo
	Limit(limit int) IWfWorkflowDo
	Offset(offset int) IWfWorkflowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWfWorkflowDo
	Unscoped() IWfWorkflowDo
	Create(values ...*model.WfWorkflow) error
	CreateInBatches(values []*model.WfWorkflow, batchSize int) error
	Save(values ...*model.WfWorkflow) error
	First() (*model.WfWorkflow, error)
	Take() (*model.WfWorkflow, error)
	Last() (*model.WfWorkflow, error)
	Find() ([]*model.WfWorkflow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfWorkflow, err error)
	FindInBatches(result *[]*model.WfWorkflow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WfWorkflow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWfWorkflowDo
	Assign(attrs ...field.AssignExpr) IWfWorkflowDo
	Joins(fields ...field.RelationField) IWfWorkflowDo
	Preload(fields ...field.RelationField) IWfWorkflowDo
	FirstOrInit() (*model.WfWorkflow, error)
	FirstOrCreate() (*model.WfWorkflow, error)
	FindByPage(offset int, limit int) (result []*model.WfWorkflow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWfWorkflowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wfWorkflowDo) Debug() IWfWorkflowDo {
	return w.withDO(w.DO.Debug())
}

func (w wfWorkflowDo) WithContext(ctx context.Context) IWfWorkflowDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wfWorkflowDo) ReadDB() IWfWorkflowDo {
	return w.Clauses(dbresolver.Read)
}

func (w wfWorkflowDo) WriteDB() IWfWorkflowDo {
	return w.Clauses(dbresolver.Write)
}

func (w wfWorkflowDo) Clauses(conds ...clause.Expression) IWfWorkflowDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wfWorkflowDo) Returning(value interface{}, columns ...string) IWfWorkflowDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wfWorkflowDo) Not(conds ...gen.Condition) IWfWorkflowDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wfWorkflowDo) Or(conds ...gen.Condition) IWfWorkflowDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wfWorkflowDo) Select(conds ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wfWorkflowDo) Where(conds ...gen.Condition) IWfWorkflowDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wfWorkflowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWfWorkflowDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wfWorkflowDo) Order(conds ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wfWorkflowDo) Distinct(cols ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wfWorkflowDo) Omit(cols ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wfWorkflowDo) Join(table schema.Tabler, on ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wfWorkflowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wfWorkflowDo) RightJoin(table schema.Tabler, on ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wfWorkflowDo) Group(cols ...field.Expr) IWfWorkflowDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wfWorkflowDo) Having(conds ...gen.Condition) IWfWorkflowDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wfWorkflowDo) Limit(limit int) IWfWorkflowDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wfWorkflowDo) Offset(offset int) IWfWorkflowDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wfWorkflowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWfWorkflowDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wfWorkflowDo) Unscoped() IWfWorkflowDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wfWorkflowDo) Create(values ...*model.WfWorkflow) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wfWorkflowDo) CreateInBatches(values []*model.WfWorkflow, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wfWorkflowDo) Save(values ...*model.WfWorkflow) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wfWorkflowDo) First() (*model.WfWorkflow, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfWorkflow), nil
	}
}

func (w wfWorkflowDo) Take() (*model.WfWorkflow, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfWorkflow), nil
	}
}

func (w wfWorkflowDo) Last() (*model.WfWorkflow, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfWorkflow), nil
	}
}

func (w wfWorkflowDo) Find() ([]*model.WfWorkflow, error) {
	result, err := w.DO.Find()
	return result.([]*model.WfWorkflow), err
}

func (w wfWorkflowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfWorkflow, err error) {
	buf := make([]*model.WfWorkflow, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wfWorkflowDo) FindInBatches(result *[]*model.WfWorkflow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wfWorkflowDo) Attrs(attrs ...field.AssignExpr) IWfWorkflowDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wfWorkflowDo) Assign(attrs ...field.AssignExpr) IWfWorkflowDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wfWorkflowDo) Joins(fields ...field.RelationField) IWfWorkflowDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wfWorkflowDo) Preload(fields ...field.RelationField) IWfWorkflowDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wfWorkflowDo) FirstOrInit() (*model.WfWorkflow, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfWorkflow), nil
	}
}

func (w wfWorkflowDo) FirstOrCreate() (*model.WfWorkflow, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfWorkflow), nil
	}
}

func (w wfWorkflowDo) FindByPage(offset int, limit int) (result []*model.WfWorkflow, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wfWorkflowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wfWorkflowDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wfWorkflowDo) Delete(models ...*model.WfWorkflow) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wfWorkflowDo) withDO(do gen.Dao) *wfWorkflowDo {
	w.DO = *do.(*gen.DO)
	return w
}
