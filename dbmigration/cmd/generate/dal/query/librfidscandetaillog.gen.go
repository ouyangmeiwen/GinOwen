// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibrfidscandetaillog(db *gorm.DB) librfidscandetaillog {
	_librfidscandetaillog := librfidscandetaillog{}

	_librfidscandetaillog.librfidscandetaillogDo.UseDB(db)
	_librfidscandetaillog.librfidscandetaillogDo.UseModel(&model.Librfidscandetaillog{})

	tableName := _librfidscandetaillog.librfidscandetaillogDo.TableName()
	_librfidscandetaillog.ALL = field.NewAsterisk(tableName)
	_librfidscandetaillog.ID = field.NewString(tableName, "Id")
	_librfidscandetaillog.CreationTime = field.NewTime(tableName, "CreationTime")
	_librfidscandetaillog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_librfidscandetaillog.ItemTid = field.NewString(tableName, "ItemTid")
	_librfidscandetaillog.ItemEpc = field.NewString(tableName, "ItemEpc")
	_librfidscandetaillog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_librfidscandetaillog.Title = field.NewString(tableName, "Title")
	_librfidscandetaillog.RfidReaderID = field.NewString(tableName, "RfidReaderId")
	_librfidscandetaillog.Antenna = field.NewString(tableName, "Antenna")
	_librfidscandetaillog.Remark = field.NewString(tableName, "Remark")
	_librfidscandetaillog.TenantID = field.NewInt64(tableName, "TenantId")
	_librfidscandetaillog.RecordTime = field.NewTime(tableName, "RecordTime")

	_librfidscandetaillog.fillFieldMap()

	return _librfidscandetaillog
}

type librfidscandetaillog struct {
	librfidscandetaillogDo librfidscandetaillogDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	ItemTid       field.String
	ItemEpc       field.String
	ItemBarcode   field.String
	Title         field.String
	RfidReaderID  field.String
	Antenna       field.String
	Remark        field.String
	TenantID      field.Int64
	RecordTime    field.Time

	fieldMap map[string]field.Expr
}

func (l librfidscandetaillog) Table(newTableName string) *librfidscandetaillog {
	l.librfidscandetaillogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l librfidscandetaillog) As(alias string) *librfidscandetaillog {
	l.librfidscandetaillogDo.DO = *(l.librfidscandetaillogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *librfidscandetaillog) updateTableName(table string) *librfidscandetaillog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.ItemTid = field.NewString(table, "ItemTid")
	l.ItemEpc = field.NewString(table, "ItemEpc")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.Title = field.NewString(table, "Title")
	l.RfidReaderID = field.NewString(table, "RfidReaderId")
	l.Antenna = field.NewString(table, "Antenna")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.RecordTime = field.NewTime(table, "RecordTime")

	l.fillFieldMap()

	return l
}

func (l *librfidscandetaillog) WithContext(ctx context.Context) ILibrfidscandetaillogDo {
	return l.librfidscandetaillogDo.WithContext(ctx)
}

func (l librfidscandetaillog) TableName() string { return l.librfidscandetaillogDo.TableName() }

func (l librfidscandetaillog) Alias() string { return l.librfidscandetaillogDo.Alias() }

func (l *librfidscandetaillog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *librfidscandetaillog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["ItemTid"] = l.ItemTid
	l.fieldMap["ItemEpc"] = l.ItemEpc
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["Title"] = l.Title
	l.fieldMap["RfidReaderId"] = l.RfidReaderID
	l.fieldMap["Antenna"] = l.Antenna
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["RecordTime"] = l.RecordTime
}

func (l librfidscandetaillog) clone(db *gorm.DB) librfidscandetaillog {
	l.librfidscandetaillogDo.ReplaceDB(db)
	return l
}

type librfidscandetaillogDo struct{ gen.DO }

type ILibrfidscandetaillogDo interface {
	gen.SubQuery
	Debug() ILibrfidscandetaillogDo
	WithContext(ctx context.Context) ILibrfidscandetaillogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibrfidscandetaillogDo
	Not(conds ...gen.Condition) ILibrfidscandetaillogDo
	Or(conds ...gen.Condition) ILibrfidscandetaillogDo
	Select(conds ...field.Expr) ILibrfidscandetaillogDo
	Where(conds ...gen.Condition) ILibrfidscandetaillogDo
	Order(conds ...field.Expr) ILibrfidscandetaillogDo
	Distinct(cols ...field.Expr) ILibrfidscandetaillogDo
	Omit(cols ...field.Expr) ILibrfidscandetaillogDo
	Join(table schema.Tabler, on ...field.Expr) ILibrfidscandetaillogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibrfidscandetaillogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibrfidscandetaillogDo
	Group(cols ...field.Expr) ILibrfidscandetaillogDo
	Having(conds ...gen.Condition) ILibrfidscandetaillogDo
	Limit(limit int) ILibrfidscandetaillogDo
	Offset(offset int) ILibrfidscandetaillogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrfidscandetaillogDo
	Unscoped() ILibrfidscandetaillogDo
	Create(values ...*model.Librfidscandetaillog) error
	CreateInBatches(values []*model.Librfidscandetaillog, batchSize int) error
	Save(values ...*model.Librfidscandetaillog) error
	First() (*model.Librfidscandetaillog, error)
	Take() (*model.Librfidscandetaillog, error)
	Last() (*model.Librfidscandetaillog, error)
	Find() ([]*model.Librfidscandetaillog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librfidscandetaillog, err error)
	FindInBatches(result *[]*model.Librfidscandetaillog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Librfidscandetaillog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibrfidscandetaillogDo
	Assign(attrs ...field.AssignExpr) ILibrfidscandetaillogDo
	Joins(fields ...field.RelationField) ILibrfidscandetaillogDo
	Preload(fields ...field.RelationField) ILibrfidscandetaillogDo
	FirstOrInit() (*model.Librfidscandetaillog, error)
	FirstOrCreate() (*model.Librfidscandetaillog, error)
	FindByPage(offset int, limit int) (result []*model.Librfidscandetaillog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibrfidscandetaillogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l librfidscandetaillogDo) Debug() ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Debug())
}

func (l librfidscandetaillogDo) WithContext(ctx context.Context) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l librfidscandetaillogDo) ReadDB() ILibrfidscandetaillogDo {
	return l.Clauses(dbresolver.Read)
}

func (l librfidscandetaillogDo) WriteDB() ILibrfidscandetaillogDo {
	return l.Clauses(dbresolver.Write)
}

func (l librfidscandetaillogDo) Clauses(conds ...clause.Expression) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l librfidscandetaillogDo) Returning(value interface{}, columns ...string) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l librfidscandetaillogDo) Not(conds ...gen.Condition) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l librfidscandetaillogDo) Or(conds ...gen.Condition) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l librfidscandetaillogDo) Select(conds ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l librfidscandetaillogDo) Where(conds ...gen.Condition) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l librfidscandetaillogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibrfidscandetaillogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l librfidscandetaillogDo) Order(conds ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l librfidscandetaillogDo) Distinct(cols ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l librfidscandetaillogDo) Omit(cols ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l librfidscandetaillogDo) Join(table schema.Tabler, on ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l librfidscandetaillogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l librfidscandetaillogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l librfidscandetaillogDo) Group(cols ...field.Expr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l librfidscandetaillogDo) Having(conds ...gen.Condition) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l librfidscandetaillogDo) Limit(limit int) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l librfidscandetaillogDo) Offset(offset int) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l librfidscandetaillogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l librfidscandetaillogDo) Unscoped() ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l librfidscandetaillogDo) Create(values ...*model.Librfidscandetaillog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l librfidscandetaillogDo) CreateInBatches(values []*model.Librfidscandetaillog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l librfidscandetaillogDo) Save(values ...*model.Librfidscandetaillog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l librfidscandetaillogDo) First() (*model.Librfidscandetaillog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscandetaillog), nil
	}
}

func (l librfidscandetaillogDo) Take() (*model.Librfidscandetaillog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscandetaillog), nil
	}
}

func (l librfidscandetaillogDo) Last() (*model.Librfidscandetaillog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscandetaillog), nil
	}
}

func (l librfidscandetaillogDo) Find() ([]*model.Librfidscandetaillog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Librfidscandetaillog), err
}

func (l librfidscandetaillogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librfidscandetaillog, err error) {
	buf := make([]*model.Librfidscandetaillog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l librfidscandetaillogDo) FindInBatches(result *[]*model.Librfidscandetaillog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l librfidscandetaillogDo) Attrs(attrs ...field.AssignExpr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l librfidscandetaillogDo) Assign(attrs ...field.AssignExpr) ILibrfidscandetaillogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l librfidscandetaillogDo) Joins(fields ...field.RelationField) ILibrfidscandetaillogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l librfidscandetaillogDo) Preload(fields ...field.RelationField) ILibrfidscandetaillogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l librfidscandetaillogDo) FirstOrInit() (*model.Librfidscandetaillog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscandetaillog), nil
	}
}

func (l librfidscandetaillogDo) FirstOrCreate() (*model.Librfidscandetaillog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscandetaillog), nil
	}
}

func (l librfidscandetaillogDo) FindByPage(offset int, limit int) (result []*model.Librfidscandetaillog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l librfidscandetaillogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l librfidscandetaillogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l librfidscandetaillogDo) Delete(models ...*model.Librfidscandetaillog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *librfidscandetaillogDo) withDO(do gen.Dao) *librfidscandetaillogDo {
	l.DO = *do.(*gen.DO)
	return l
}
