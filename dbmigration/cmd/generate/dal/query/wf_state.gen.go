// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newWfState(db *gorm.DB) wfState {
	_wfState := wfState{}

	_wfState.wfStateDo.UseDB(db)
	_wfState.wfStateDo.UseModel(&model.WfState{})

	tableName := _wfState.wfStateDo.TableName()
	_wfState.ALL = field.NewAsterisk(tableName)
	_wfState.ID = field.NewInt64(tableName, "id")
	_wfState.CreateTime = field.NewTime(tableName, "create_time")
	_wfState.UpdateTime = field.NewTime(tableName, "update_time")
	_wfState.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_wfState.Name = field.NewString(tableName, "name")
	_wfState.IsHidden = field.NewInt64(tableName, "is_hidden")
	_wfState.Sort = field.NewInt64(tableName, "sort")
	_wfState.Type = field.NewInt64(tableName, "type")
	_wfState.EnableRetreat = field.NewInt64(tableName, "enable_retreat")
	_wfState.ParticipantType = field.NewInt64(tableName, "participant_type")
	_wfState.Participant = field.NewString(tableName, "participant")
	_wfState.StateFields = field.NewString(tableName, "state_fields")
	_wfState.DistributeType = field.NewInt64(tableName, "distribute_type")
	_wfState.FilterPolicy = field.NewInt64(tableName, "filter_policy")
	_wfState.ParticipantCc = field.NewString(tableName, "participant_cc")
	_wfState.CreateByID = field.NewInt64(tableName, "create_by_id")
	_wfState.UpdateByID = field.NewInt64(tableName, "update_by_id")
	_wfState.WorkflowID = field.NewInt64(tableName, "workflow_id")

	_wfState.fillFieldMap()

	return _wfState
}

type wfState struct {
	wfStateDo wfStateDo

	ALL             field.Asterisk
	ID              field.Int64
	CreateTime      field.Time
	UpdateTime      field.Time
	IsDeleted       field.Int64
	Name            field.String
	IsHidden        field.Int64
	Sort            field.Int64
	Type            field.Int64
	EnableRetreat   field.Int64
	ParticipantType field.Int64
	Participant     field.String
	StateFields     field.String
	DistributeType  field.Int64
	FilterPolicy    field.Int64
	ParticipantCc   field.String
	CreateByID      field.Int64
	UpdateByID      field.Int64
	WorkflowID      field.Int64

	fieldMap map[string]field.Expr
}

func (w wfState) Table(newTableName string) *wfState {
	w.wfStateDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wfState) As(alias string) *wfState {
	w.wfStateDo.DO = *(w.wfStateDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wfState) updateTableName(table string) *wfState {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.IsDeleted = field.NewInt64(table, "is_deleted")
	w.Name = field.NewString(table, "name")
	w.IsHidden = field.NewInt64(table, "is_hidden")
	w.Sort = field.NewInt64(table, "sort")
	w.Type = field.NewInt64(table, "type")
	w.EnableRetreat = field.NewInt64(table, "enable_retreat")
	w.ParticipantType = field.NewInt64(table, "participant_type")
	w.Participant = field.NewString(table, "participant")
	w.StateFields = field.NewString(table, "state_fields")
	w.DistributeType = field.NewInt64(table, "distribute_type")
	w.FilterPolicy = field.NewInt64(table, "filter_policy")
	w.ParticipantCc = field.NewString(table, "participant_cc")
	w.CreateByID = field.NewInt64(table, "create_by_id")
	w.UpdateByID = field.NewInt64(table, "update_by_id")
	w.WorkflowID = field.NewInt64(table, "workflow_id")

	w.fillFieldMap()

	return w
}

func (w *wfState) WithContext(ctx context.Context) IWfStateDo { return w.wfStateDo.WithContext(ctx) }

func (w wfState) TableName() string { return w.wfStateDo.TableName() }

func (w wfState) Alias() string { return w.wfStateDo.Alias() }

func (w *wfState) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wfState) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 18)
	w.fieldMap["id"] = w.ID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["is_deleted"] = w.IsDeleted
	w.fieldMap["name"] = w.Name
	w.fieldMap["is_hidden"] = w.IsHidden
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["type"] = w.Type
	w.fieldMap["enable_retreat"] = w.EnableRetreat
	w.fieldMap["participant_type"] = w.ParticipantType
	w.fieldMap["participant"] = w.Participant
	w.fieldMap["state_fields"] = w.StateFields
	w.fieldMap["distribute_type"] = w.DistributeType
	w.fieldMap["filter_policy"] = w.FilterPolicy
	w.fieldMap["participant_cc"] = w.ParticipantCc
	w.fieldMap["create_by_id"] = w.CreateByID
	w.fieldMap["update_by_id"] = w.UpdateByID
	w.fieldMap["workflow_id"] = w.WorkflowID
}

func (w wfState) clone(db *gorm.DB) wfState {
	w.wfStateDo.ReplaceDB(db)
	return w
}

type wfStateDo struct{ gen.DO }

type IWfStateDo interface {
	gen.SubQuery
	Debug() IWfStateDo
	WithContext(ctx context.Context) IWfStateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWfStateDo
	Not(conds ...gen.Condition) IWfStateDo
	Or(conds ...gen.Condition) IWfStateDo
	Select(conds ...field.Expr) IWfStateDo
	Where(conds ...gen.Condition) IWfStateDo
	Order(conds ...field.Expr) IWfStateDo
	Distinct(cols ...field.Expr) IWfStateDo
	Omit(cols ...field.Expr) IWfStateDo
	Join(table schema.Tabler, on ...field.Expr) IWfStateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWfStateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWfStateDo
	Group(cols ...field.Expr) IWfStateDo
	Having(conds ...gen.Condition) IWfStateDo
	Limit(limit int) IWfStateDo
	Offset(offset int) IWfStateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWfStateDo
	Unscoped() IWfStateDo
	Create(values ...*model.WfState) error
	CreateInBatches(values []*model.WfState, batchSize int) error
	Save(values ...*model.WfState) error
	First() (*model.WfState, error)
	Take() (*model.WfState, error)
	Last() (*model.WfState, error)
	Find() ([]*model.WfState, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfState, err error)
	FindInBatches(result *[]*model.WfState, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WfState) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWfStateDo
	Assign(attrs ...field.AssignExpr) IWfStateDo
	Joins(fields ...field.RelationField) IWfStateDo
	Preload(fields ...field.RelationField) IWfStateDo
	FirstOrInit() (*model.WfState, error)
	FirstOrCreate() (*model.WfState, error)
	FindByPage(offset int, limit int) (result []*model.WfState, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWfStateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wfStateDo) Debug() IWfStateDo {
	return w.withDO(w.DO.Debug())
}

func (w wfStateDo) WithContext(ctx context.Context) IWfStateDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wfStateDo) ReadDB() IWfStateDo {
	return w.Clauses(dbresolver.Read)
}

func (w wfStateDo) WriteDB() IWfStateDo {
	return w.Clauses(dbresolver.Write)
}

func (w wfStateDo) Clauses(conds ...clause.Expression) IWfStateDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wfStateDo) Returning(value interface{}, columns ...string) IWfStateDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wfStateDo) Not(conds ...gen.Condition) IWfStateDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wfStateDo) Or(conds ...gen.Condition) IWfStateDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wfStateDo) Select(conds ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wfStateDo) Where(conds ...gen.Condition) IWfStateDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wfStateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWfStateDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wfStateDo) Order(conds ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wfStateDo) Distinct(cols ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wfStateDo) Omit(cols ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wfStateDo) Join(table schema.Tabler, on ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wfStateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wfStateDo) RightJoin(table schema.Tabler, on ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wfStateDo) Group(cols ...field.Expr) IWfStateDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wfStateDo) Having(conds ...gen.Condition) IWfStateDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wfStateDo) Limit(limit int) IWfStateDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wfStateDo) Offset(offset int) IWfStateDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wfStateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWfStateDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wfStateDo) Unscoped() IWfStateDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wfStateDo) Create(values ...*model.WfState) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wfStateDo) CreateInBatches(values []*model.WfState, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wfStateDo) Save(values ...*model.WfState) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wfStateDo) First() (*model.WfState, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfState), nil
	}
}

func (w wfStateDo) Take() (*model.WfState, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfState), nil
	}
}

func (w wfStateDo) Last() (*model.WfState, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfState), nil
	}
}

func (w wfStateDo) Find() ([]*model.WfState, error) {
	result, err := w.DO.Find()
	return result.([]*model.WfState), err
}

func (w wfStateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfState, err error) {
	buf := make([]*model.WfState, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wfStateDo) FindInBatches(result *[]*model.WfState, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wfStateDo) Attrs(attrs ...field.AssignExpr) IWfStateDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wfStateDo) Assign(attrs ...field.AssignExpr) IWfStateDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wfStateDo) Joins(fields ...field.RelationField) IWfStateDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wfStateDo) Preload(fields ...field.RelationField) IWfStateDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wfStateDo) FirstOrInit() (*model.WfState, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfState), nil
	}
}

func (w wfStateDo) FirstOrCreate() (*model.WfState, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfState), nil
	}
}

func (w wfStateDo) FindByPage(offset int, limit int) (result []*model.WfState, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wfStateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wfStateDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wfStateDo) Delete(models ...*model.WfState) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wfStateDo) withDO(do gen.Dao) *wfStateDo {
	w.DO = *do.(*gen.DO)
	return w
}
