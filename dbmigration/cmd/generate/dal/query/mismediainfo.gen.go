// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newMismediainfo(db *gorm.DB) mismediainfo {
	_mismediainfo := mismediainfo{}

	_mismediainfo.mismediainfoDo.UseDB(db)
	_mismediainfo.mismediainfoDo.UseModel(&model.Mismediainfo{})

	tableName := _mismediainfo.mismediainfoDo.TableName()
	_mismediainfo.ALL = field.NewAsterisk(tableName)
	_mismediainfo.ID = field.NewString(tableName, "Id")
	_mismediainfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_mismediainfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_mismediainfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_mismediainfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_mismediainfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_mismediainfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_mismediainfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_mismediainfo.Name = field.NewString(tableName, "Name")
	_mismediainfo.MediaType = field.NewInt64(tableName, "MediaType")
	_mismediainfo.AttachmentID = field.NewString(tableName, "AttachmentId")
	_mismediainfo.SortCode = field.NewInt64(tableName, "SortCode")
	_mismediainfo.InformationStatus = field.NewInt64(tableName, "InformationStatus")
	_mismediainfo.Remark = field.NewString(tableName, "Remark")
	_mismediainfo.TenantID = field.NewInt64(tableName, "TenantId")

	_mismediainfo.fillFieldMap()

	return _mismediainfo
}

type mismediainfo struct {
	mismediainfoDo mismediainfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	MediaType            field.Int64
	AttachmentID         field.String
	SortCode             field.Int64
	InformationStatus    field.Int64
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (m mismediainfo) Table(newTableName string) *mismediainfo {
	m.mismediainfoDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mismediainfo) As(alias string) *mismediainfo {
	m.mismediainfoDo.DO = *(m.mismediainfoDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mismediainfo) updateTableName(table string) *mismediainfo {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "Id")
	m.CreationTime = field.NewTime(table, "CreationTime")
	m.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	m.LastModificationTime = field.NewTime(table, "LastModificationTime")
	m.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	m.IsDeleted = field.NewField(table, "IsDeleted")
	m.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	m.DeletionTime = field.NewTime(table, "DeletionTime")
	m.Name = field.NewString(table, "Name")
	m.MediaType = field.NewInt64(table, "MediaType")
	m.AttachmentID = field.NewString(table, "AttachmentId")
	m.SortCode = field.NewInt64(table, "SortCode")
	m.InformationStatus = field.NewInt64(table, "InformationStatus")
	m.Remark = field.NewString(table, "Remark")
	m.TenantID = field.NewInt64(table, "TenantId")

	m.fillFieldMap()

	return m
}

func (m *mismediainfo) WithContext(ctx context.Context) IMismediainfoDo {
	return m.mismediainfoDo.WithContext(ctx)
}

func (m mismediainfo) TableName() string { return m.mismediainfoDo.TableName() }

func (m mismediainfo) Alias() string { return m.mismediainfoDo.Alias() }

func (m *mismediainfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mismediainfo) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["Id"] = m.ID
	m.fieldMap["CreationTime"] = m.CreationTime
	m.fieldMap["CreatorUserId"] = m.CreatorUserID
	m.fieldMap["LastModificationTime"] = m.LastModificationTime
	m.fieldMap["LastModifierUserId"] = m.LastModifierUserID
	m.fieldMap["IsDeleted"] = m.IsDeleted
	m.fieldMap["DeleterUserId"] = m.DeleterUserID
	m.fieldMap["DeletionTime"] = m.DeletionTime
	m.fieldMap["Name"] = m.Name
	m.fieldMap["MediaType"] = m.MediaType
	m.fieldMap["AttachmentId"] = m.AttachmentID
	m.fieldMap["SortCode"] = m.SortCode
	m.fieldMap["InformationStatus"] = m.InformationStatus
	m.fieldMap["Remark"] = m.Remark
	m.fieldMap["TenantId"] = m.TenantID
}

func (m mismediainfo) clone(db *gorm.DB) mismediainfo {
	m.mismediainfoDo.ReplaceDB(db)
	return m
}

type mismediainfoDo struct{ gen.DO }

type IMismediainfoDo interface {
	gen.SubQuery
	Debug() IMismediainfoDo
	WithContext(ctx context.Context) IMismediainfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMismediainfoDo
	Not(conds ...gen.Condition) IMismediainfoDo
	Or(conds ...gen.Condition) IMismediainfoDo
	Select(conds ...field.Expr) IMismediainfoDo
	Where(conds ...gen.Condition) IMismediainfoDo
	Order(conds ...field.Expr) IMismediainfoDo
	Distinct(cols ...field.Expr) IMismediainfoDo
	Omit(cols ...field.Expr) IMismediainfoDo
	Join(table schema.Tabler, on ...field.Expr) IMismediainfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMismediainfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMismediainfoDo
	Group(cols ...field.Expr) IMismediainfoDo
	Having(conds ...gen.Condition) IMismediainfoDo
	Limit(limit int) IMismediainfoDo
	Offset(offset int) IMismediainfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMismediainfoDo
	Unscoped() IMismediainfoDo
	Create(values ...*model.Mismediainfo) error
	CreateInBatches(values []*model.Mismediainfo, batchSize int) error
	Save(values ...*model.Mismediainfo) error
	First() (*model.Mismediainfo, error)
	Take() (*model.Mismediainfo, error)
	Last() (*model.Mismediainfo, error)
	Find() ([]*model.Mismediainfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mismediainfo, err error)
	FindInBatches(result *[]*model.Mismediainfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Mismediainfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMismediainfoDo
	Assign(attrs ...field.AssignExpr) IMismediainfoDo
	Joins(fields ...field.RelationField) IMismediainfoDo
	Preload(fields ...field.RelationField) IMismediainfoDo
	FirstOrInit() (*model.Mismediainfo, error)
	FirstOrCreate() (*model.Mismediainfo, error)
	FindByPage(offset int, limit int) (result []*model.Mismediainfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMismediainfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mismediainfoDo) Debug() IMismediainfoDo {
	return m.withDO(m.DO.Debug())
}

func (m mismediainfoDo) WithContext(ctx context.Context) IMismediainfoDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mismediainfoDo) ReadDB() IMismediainfoDo {
	return m.Clauses(dbresolver.Read)
}

func (m mismediainfoDo) WriteDB() IMismediainfoDo {
	return m.Clauses(dbresolver.Write)
}

func (m mismediainfoDo) Clauses(conds ...clause.Expression) IMismediainfoDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mismediainfoDo) Returning(value interface{}, columns ...string) IMismediainfoDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mismediainfoDo) Not(conds ...gen.Condition) IMismediainfoDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mismediainfoDo) Or(conds ...gen.Condition) IMismediainfoDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mismediainfoDo) Select(conds ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mismediainfoDo) Where(conds ...gen.Condition) IMismediainfoDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mismediainfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMismediainfoDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mismediainfoDo) Order(conds ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mismediainfoDo) Distinct(cols ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mismediainfoDo) Omit(cols ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mismediainfoDo) Join(table schema.Tabler, on ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mismediainfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mismediainfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mismediainfoDo) Group(cols ...field.Expr) IMismediainfoDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mismediainfoDo) Having(conds ...gen.Condition) IMismediainfoDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mismediainfoDo) Limit(limit int) IMismediainfoDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mismediainfoDo) Offset(offset int) IMismediainfoDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mismediainfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMismediainfoDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mismediainfoDo) Unscoped() IMismediainfoDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mismediainfoDo) Create(values ...*model.Mismediainfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mismediainfoDo) CreateInBatches(values []*model.Mismediainfo, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mismediainfoDo) Save(values ...*model.Mismediainfo) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mismediainfoDo) First() (*model.Mismediainfo, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mismediainfo), nil
	}
}

func (m mismediainfoDo) Take() (*model.Mismediainfo, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mismediainfo), nil
	}
}

func (m mismediainfoDo) Last() (*model.Mismediainfo, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mismediainfo), nil
	}
}

func (m mismediainfoDo) Find() ([]*model.Mismediainfo, error) {
	result, err := m.DO.Find()
	return result.([]*model.Mismediainfo), err
}

func (m mismediainfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mismediainfo, err error) {
	buf := make([]*model.Mismediainfo, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mismediainfoDo) FindInBatches(result *[]*model.Mismediainfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mismediainfoDo) Attrs(attrs ...field.AssignExpr) IMismediainfoDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mismediainfoDo) Assign(attrs ...field.AssignExpr) IMismediainfoDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mismediainfoDo) Joins(fields ...field.RelationField) IMismediainfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mismediainfoDo) Preload(fields ...field.RelationField) IMismediainfoDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mismediainfoDo) FirstOrInit() (*model.Mismediainfo, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mismediainfo), nil
	}
}

func (m mismediainfoDo) FirstOrCreate() (*model.Mismediainfo, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mismediainfo), nil
	}
}

func (m mismediainfoDo) FindByPage(offset int, limit int) (result []*model.Mismediainfo, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mismediainfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mismediainfoDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mismediainfoDo) Delete(models ...*model.Mismediainfo) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mismediainfoDo) withDO(do gen.Dao) *mismediainfoDo {
	m.DO = *do.(*gen.DO)
	return m
}
