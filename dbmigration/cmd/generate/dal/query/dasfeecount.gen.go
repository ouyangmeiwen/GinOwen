// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDasfeecount(db *gorm.DB) dasfeecount {
	_dasfeecount := dasfeecount{}

	_dasfeecount.dasfeecountDo.UseDB(db)
	_dasfeecount.dasfeecountDo.UseModel(&model.Dasfeecount{})

	tableName := _dasfeecount.dasfeecountDo.TableName()
	_dasfeecount.ALL = field.NewAsterisk(tableName)
	_dasfeecount.ID = field.NewString(tableName, "Id")
	_dasfeecount.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasfeecount.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasfeecount.TerminalID = field.NewString(tableName, "TerminalId")
	_dasfeecount.TerminalCode = field.NewString(tableName, "TerminalCode")
	_dasfeecount.TerminalName = field.NewString(tableName, "TerminalName")
	_dasfeecount.StartTime = field.NewTime(tableName, "StartTime")
	_dasfeecount.EndTime = field.NewTime(tableName, "EndTime")
	_dasfeecount.FeeType = field.NewInt64(tableName, "FeeType")
	_dasfeecount.PaymentType = field.NewInt64(tableName, "PaymentType")
	_dasfeecount.Amount = field.NewInt64(tableName, "Amount")
	_dasfeecount.Count = field.NewInt64(tableName, "Count")
	_dasfeecount.Result = field.NewInt64(tableName, "Result")
	_dasfeecount.TenantID = field.NewInt64(tableName, "TenantId")

	_dasfeecount.fillFieldMap()

	return _dasfeecount
}

type dasfeecount struct {
	dasfeecountDo dasfeecountDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	TerminalCode  field.String
	TerminalName  field.String
	StartTime     field.Time
	EndTime       field.Time
	FeeType       field.Int64
	PaymentType   field.Int64
	Amount        field.Int64
	Count         field.Int64
	Result        field.Int64
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (d dasfeecount) Table(newTableName string) *dasfeecount {
	d.dasfeecountDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasfeecount) As(alias string) *dasfeecount {
	d.dasfeecountDo.DO = *(d.dasfeecountDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasfeecount) updateTableName(table string) *dasfeecount {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.TerminalID = field.NewString(table, "TerminalId")
	d.TerminalCode = field.NewString(table, "TerminalCode")
	d.TerminalName = field.NewString(table, "TerminalName")
	d.StartTime = field.NewTime(table, "StartTime")
	d.EndTime = field.NewTime(table, "EndTime")
	d.FeeType = field.NewInt64(table, "FeeType")
	d.PaymentType = field.NewInt64(table, "PaymentType")
	d.Amount = field.NewInt64(table, "Amount")
	d.Count = field.NewInt64(table, "Count")
	d.Result = field.NewInt64(table, "Result")
	d.TenantID = field.NewInt64(table, "TenantId")

	d.fillFieldMap()

	return d
}

func (d *dasfeecount) WithContext(ctx context.Context) IDasfeecountDo {
	return d.dasfeecountDo.WithContext(ctx)
}

func (d dasfeecount) TableName() string { return d.dasfeecountDo.TableName() }

func (d dasfeecount) Alias() string { return d.dasfeecountDo.Alias() }

func (d *dasfeecount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasfeecount) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 14)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["TerminalId"] = d.TerminalID
	d.fieldMap["TerminalCode"] = d.TerminalCode
	d.fieldMap["TerminalName"] = d.TerminalName
	d.fieldMap["StartTime"] = d.StartTime
	d.fieldMap["EndTime"] = d.EndTime
	d.fieldMap["FeeType"] = d.FeeType
	d.fieldMap["PaymentType"] = d.PaymentType
	d.fieldMap["Amount"] = d.Amount
	d.fieldMap["Count"] = d.Count
	d.fieldMap["Result"] = d.Result
	d.fieldMap["TenantId"] = d.TenantID
}

func (d dasfeecount) clone(db *gorm.DB) dasfeecount {
	d.dasfeecountDo.ReplaceDB(db)
	return d
}

type dasfeecountDo struct{ gen.DO }

type IDasfeecountDo interface {
	gen.SubQuery
	Debug() IDasfeecountDo
	WithContext(ctx context.Context) IDasfeecountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasfeecountDo
	Not(conds ...gen.Condition) IDasfeecountDo
	Or(conds ...gen.Condition) IDasfeecountDo
	Select(conds ...field.Expr) IDasfeecountDo
	Where(conds ...gen.Condition) IDasfeecountDo
	Order(conds ...field.Expr) IDasfeecountDo
	Distinct(cols ...field.Expr) IDasfeecountDo
	Omit(cols ...field.Expr) IDasfeecountDo
	Join(table schema.Tabler, on ...field.Expr) IDasfeecountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasfeecountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasfeecountDo
	Group(cols ...field.Expr) IDasfeecountDo
	Having(conds ...gen.Condition) IDasfeecountDo
	Limit(limit int) IDasfeecountDo
	Offset(offset int) IDasfeecountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasfeecountDo
	Unscoped() IDasfeecountDo
	Create(values ...*model.Dasfeecount) error
	CreateInBatches(values []*model.Dasfeecount, batchSize int) error
	Save(values ...*model.Dasfeecount) error
	First() (*model.Dasfeecount, error)
	Take() (*model.Dasfeecount, error)
	Last() (*model.Dasfeecount, error)
	Find() ([]*model.Dasfeecount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasfeecount, err error)
	FindInBatches(result *[]*model.Dasfeecount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasfeecount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasfeecountDo
	Assign(attrs ...field.AssignExpr) IDasfeecountDo
	Joins(fields ...field.RelationField) IDasfeecountDo
	Preload(fields ...field.RelationField) IDasfeecountDo
	FirstOrInit() (*model.Dasfeecount, error)
	FirstOrCreate() (*model.Dasfeecount, error)
	FindByPage(offset int, limit int) (result []*model.Dasfeecount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasfeecountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasfeecountDo) Debug() IDasfeecountDo {
	return d.withDO(d.DO.Debug())
}

func (d dasfeecountDo) WithContext(ctx context.Context) IDasfeecountDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasfeecountDo) ReadDB() IDasfeecountDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasfeecountDo) WriteDB() IDasfeecountDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasfeecountDo) Clauses(conds ...clause.Expression) IDasfeecountDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasfeecountDo) Returning(value interface{}, columns ...string) IDasfeecountDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasfeecountDo) Not(conds ...gen.Condition) IDasfeecountDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasfeecountDo) Or(conds ...gen.Condition) IDasfeecountDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasfeecountDo) Select(conds ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasfeecountDo) Where(conds ...gen.Condition) IDasfeecountDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasfeecountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasfeecountDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasfeecountDo) Order(conds ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasfeecountDo) Distinct(cols ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasfeecountDo) Omit(cols ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasfeecountDo) Join(table schema.Tabler, on ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasfeecountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasfeecountDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasfeecountDo) Group(cols ...field.Expr) IDasfeecountDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasfeecountDo) Having(conds ...gen.Condition) IDasfeecountDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasfeecountDo) Limit(limit int) IDasfeecountDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasfeecountDo) Offset(offset int) IDasfeecountDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasfeecountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasfeecountDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasfeecountDo) Unscoped() IDasfeecountDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasfeecountDo) Create(values ...*model.Dasfeecount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasfeecountDo) CreateInBatches(values []*model.Dasfeecount, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasfeecountDo) Save(values ...*model.Dasfeecount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasfeecountDo) First() (*model.Dasfeecount, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasfeecount), nil
	}
}

func (d dasfeecountDo) Take() (*model.Dasfeecount, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasfeecount), nil
	}
}

func (d dasfeecountDo) Last() (*model.Dasfeecount, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasfeecount), nil
	}
}

func (d dasfeecountDo) Find() ([]*model.Dasfeecount, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasfeecount), err
}

func (d dasfeecountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasfeecount, err error) {
	buf := make([]*model.Dasfeecount, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasfeecountDo) FindInBatches(result *[]*model.Dasfeecount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasfeecountDo) Attrs(attrs ...field.AssignExpr) IDasfeecountDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasfeecountDo) Assign(attrs ...field.AssignExpr) IDasfeecountDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasfeecountDo) Joins(fields ...field.RelationField) IDasfeecountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasfeecountDo) Preload(fields ...field.RelationField) IDasfeecountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasfeecountDo) FirstOrInit() (*model.Dasfeecount, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasfeecount), nil
	}
}

func (d dasfeecountDo) FirstOrCreate() (*model.Dasfeecount, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasfeecount), nil
	}
}

func (d dasfeecountDo) FindByPage(offset int, limit int) (result []*model.Dasfeecount, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasfeecountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasfeecountDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasfeecountDo) Delete(models ...*model.Dasfeecount) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasfeecountDo) withDO(do gen.Dao) *dasfeecountDo {
	d.DO = *do.(*gen.DO)
	return d
}
