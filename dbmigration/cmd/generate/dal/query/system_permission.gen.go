// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemPermission(db *gorm.DB) systemPermission {
	_systemPermission := systemPermission{}

	_systemPermission.systemPermissionDo.UseDB(db)
	_systemPermission.systemPermissionDo.UseModel(&model.SystemPermission{})

	tableName := _systemPermission.systemPermissionDo.TableName()
	_systemPermission.ALL = field.NewAsterisk(tableName)
	_systemPermission.ID = field.NewInt64(tableName, "id")
	_systemPermission.CreateTime = field.NewTime(tableName, "create_time")
	_systemPermission.UpdateTime = field.NewTime(tableName, "update_time")
	_systemPermission.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemPermission.Name = field.NewString(tableName, "name")
	_systemPermission.Type = field.NewString(tableName, "type")
	_systemPermission.IsFrame = field.NewInt64(tableName, "is_frame")
	_systemPermission.Sort = field.NewInt64(tableName, "sort")
	_systemPermission.Method = field.NewString(tableName, "method")
	_systemPermission.ParentID = field.NewInt64(tableName, "parent_id")

	_systemPermission.fillFieldMap()

	return _systemPermission
}

type systemPermission struct {
	systemPermissionDo systemPermissionDo

	ALL        field.Asterisk
	ID         field.Int64
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Int64
	Name       field.String
	Type       field.String
	IsFrame    field.Int64
	Sort       field.Int64
	Method     field.String
	ParentID   field.Int64

	fieldMap map[string]field.Expr
}

func (s systemPermission) Table(newTableName string) *systemPermission {
	s.systemPermissionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemPermission) As(alias string) *systemPermission {
	s.systemPermissionDo.DO = *(s.systemPermissionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemPermission) updateTableName(table string) *systemPermission {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewString(table, "type")
	s.IsFrame = field.NewInt64(table, "is_frame")
	s.Sort = field.NewInt64(table, "sort")
	s.Method = field.NewString(table, "method")
	s.ParentID = field.NewInt64(table, "parent_id")

	s.fillFieldMap()

	return s
}

func (s *systemPermission) WithContext(ctx context.Context) ISystemPermissionDo {
	return s.systemPermissionDo.WithContext(ctx)
}

func (s systemPermission) TableName() string { return s.systemPermissionDo.TableName() }

func (s systemPermission) Alias() string { return s.systemPermissionDo.Alias() }

func (s *systemPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemPermission) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["is_frame"] = s.IsFrame
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["method"] = s.Method
	s.fieldMap["parent_id"] = s.ParentID
}

func (s systemPermission) clone(db *gorm.DB) systemPermission {
	s.systemPermissionDo.ReplaceDB(db)
	return s
}

type systemPermissionDo struct{ gen.DO }

type ISystemPermissionDo interface {
	gen.SubQuery
	Debug() ISystemPermissionDo
	WithContext(ctx context.Context) ISystemPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemPermissionDo
	Not(conds ...gen.Condition) ISystemPermissionDo
	Or(conds ...gen.Condition) ISystemPermissionDo
	Select(conds ...field.Expr) ISystemPermissionDo
	Where(conds ...gen.Condition) ISystemPermissionDo
	Order(conds ...field.Expr) ISystemPermissionDo
	Distinct(cols ...field.Expr) ISystemPermissionDo
	Omit(cols ...field.Expr) ISystemPermissionDo
	Join(table schema.Tabler, on ...field.Expr) ISystemPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemPermissionDo
	Group(cols ...field.Expr) ISystemPermissionDo
	Having(conds ...gen.Condition) ISystemPermissionDo
	Limit(limit int) ISystemPermissionDo
	Offset(offset int) ISystemPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemPermissionDo
	Unscoped() ISystemPermissionDo
	Create(values ...*model.SystemPermission) error
	CreateInBatches(values []*model.SystemPermission, batchSize int) error
	Save(values ...*model.SystemPermission) error
	First() (*model.SystemPermission, error)
	Take() (*model.SystemPermission, error)
	Last() (*model.SystemPermission, error)
	Find() ([]*model.SystemPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemPermission, err error)
	FindInBatches(result *[]*model.SystemPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemPermissionDo
	Assign(attrs ...field.AssignExpr) ISystemPermissionDo
	Joins(fields ...field.RelationField) ISystemPermissionDo
	Preload(fields ...field.RelationField) ISystemPermissionDo
	FirstOrInit() (*model.SystemPermission, error)
	FirstOrCreate() (*model.SystemPermission, error)
	FindByPage(offset int, limit int) (result []*model.SystemPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemPermissionDo) Debug() ISystemPermissionDo {
	return s.withDO(s.DO.Debug())
}

func (s systemPermissionDo) WithContext(ctx context.Context) ISystemPermissionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemPermissionDo) ReadDB() ISystemPermissionDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemPermissionDo) WriteDB() ISystemPermissionDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemPermissionDo) Clauses(conds ...clause.Expression) ISystemPermissionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemPermissionDo) Returning(value interface{}, columns ...string) ISystemPermissionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemPermissionDo) Not(conds ...gen.Condition) ISystemPermissionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemPermissionDo) Or(conds ...gen.Condition) ISystemPermissionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemPermissionDo) Select(conds ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemPermissionDo) Where(conds ...gen.Condition) ISystemPermissionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemPermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemPermissionDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemPermissionDo) Order(conds ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemPermissionDo) Distinct(cols ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemPermissionDo) Omit(cols ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemPermissionDo) Join(table schema.Tabler, on ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemPermissionDo) Group(cols ...field.Expr) ISystemPermissionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemPermissionDo) Having(conds ...gen.Condition) ISystemPermissionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemPermissionDo) Limit(limit int) ISystemPermissionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemPermissionDo) Offset(offset int) ISystemPermissionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemPermissionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemPermissionDo) Unscoped() ISystemPermissionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemPermissionDo) Create(values ...*model.SystemPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemPermissionDo) CreateInBatches(values []*model.SystemPermission, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemPermissionDo) Save(values ...*model.SystemPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemPermissionDo) First() (*model.SystemPermission, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPermission), nil
	}
}

func (s systemPermissionDo) Take() (*model.SystemPermission, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPermission), nil
	}
}

func (s systemPermissionDo) Last() (*model.SystemPermission, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPermission), nil
	}
}

func (s systemPermissionDo) Find() ([]*model.SystemPermission, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemPermission), err
}

func (s systemPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemPermission, err error) {
	buf := make([]*model.SystemPermission, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemPermissionDo) FindInBatches(result *[]*model.SystemPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemPermissionDo) Attrs(attrs ...field.AssignExpr) ISystemPermissionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemPermissionDo) Assign(attrs ...field.AssignExpr) ISystemPermissionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemPermissionDo) Joins(fields ...field.RelationField) ISystemPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemPermissionDo) Preload(fields ...field.RelationField) ISystemPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemPermissionDo) FirstOrInit() (*model.SystemPermission, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPermission), nil
	}
}

func (s systemPermissionDo) FirstOrCreate() (*model.SystemPermission, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPermission), nil
	}
}

func (s systemPermissionDo) FindByPage(offset int, limit int) (result []*model.SystemPermission, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemPermissionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemPermissionDo) Delete(models ...*model.SystemPermission) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemPermissionDo) withDO(do gen.Dao) *systemPermissionDo {
	s.DO = *do.(*gen.DO)
	return s
}
