// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibpointslog(db *gorm.DB) libpointslog {
	_libpointslog := libpointslog{}

	_libpointslog.libpointslogDo.UseDB(db)
	_libpointslog.libpointslogDo.UseModel(&model.Libpointslog{})

	tableName := _libpointslog.libpointslogDo.TableName()
	_libpointslog.ALL = field.NewAsterisk(tableName)
	_libpointslog.ID = field.NewString(tableName, "Id")
	_libpointslog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpointslog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpointslog.PatronID = field.NewString(tableName, "PatronId")
	_libpointslog.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libpointslog.PatronName = field.NewString(tableName, "PatronName")
	_libpointslog.ItemID = field.NewString(tableName, "ItemId")
	_libpointslog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libpointslog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libpointslog.PointsRuleType = field.NewInt64(tableName, "PointsRuleType")
	_libpointslog.Points = field.NewInt64(tableName, "Points")
	_libpointslog.TaskPackageID = field.NewString(tableName, "TaskPackageId")
	_libpointslog.TaskPackageName = field.NewString(tableName, "TaskPackageName")
	_libpointslog.Remark = field.NewString(tableName, "Remark")
	_libpointslog.TenantID = field.NewInt64(tableName, "TenantId")

	_libpointslog.fillFieldMap()

	return _libpointslog
}

type libpointslog struct {
	libpointslogDo libpointslogDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	PatronID        field.String
	PatronBarcode   field.String
	PatronName      field.String
	ItemID          field.String
	ItemBarcode     field.String
	ItemTitle       field.String
	PointsRuleType  field.Int64
	Points          field.Int64
	TaskPackageID   field.String
	TaskPackageName field.String
	Remark          field.String
	TenantID        field.Int64

	fieldMap map[string]field.Expr
}

func (l libpointslog) Table(newTableName string) *libpointslog {
	l.libpointslogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpointslog) As(alias string) *libpointslog {
	l.libpointslogDo.DO = *(l.libpointslogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpointslog) updateTableName(table string) *libpointslog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.PatronName = field.NewString(table, "PatronName")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.PointsRuleType = field.NewInt64(table, "PointsRuleType")
	l.Points = field.NewInt64(table, "Points")
	l.TaskPackageID = field.NewString(table, "TaskPackageId")
	l.TaskPackageName = field.NewString(table, "TaskPackageName")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpointslog) WithContext(ctx context.Context) ILibpointslogDo {
	return l.libpointslogDo.WithContext(ctx)
}

func (l libpointslog) TableName() string { return l.libpointslogDo.TableName() }

func (l libpointslog) Alias() string { return l.libpointslogDo.Alias() }

func (l *libpointslog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpointslog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 15)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["PointsRuleType"] = l.PointsRuleType
	l.fieldMap["Points"] = l.Points
	l.fieldMap["TaskPackageId"] = l.TaskPackageID
	l.fieldMap["TaskPackageName"] = l.TaskPackageName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpointslog) clone(db *gorm.DB) libpointslog {
	l.libpointslogDo.ReplaceDB(db)
	return l
}

type libpointslogDo struct{ gen.DO }

type ILibpointslogDo interface {
	gen.SubQuery
	Debug() ILibpointslogDo
	WithContext(ctx context.Context) ILibpointslogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpointslogDo
	Not(conds ...gen.Condition) ILibpointslogDo
	Or(conds ...gen.Condition) ILibpointslogDo
	Select(conds ...field.Expr) ILibpointslogDo
	Where(conds ...gen.Condition) ILibpointslogDo
	Order(conds ...field.Expr) ILibpointslogDo
	Distinct(cols ...field.Expr) ILibpointslogDo
	Omit(cols ...field.Expr) ILibpointslogDo
	Join(table schema.Tabler, on ...field.Expr) ILibpointslogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpointslogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpointslogDo
	Group(cols ...field.Expr) ILibpointslogDo
	Having(conds ...gen.Condition) ILibpointslogDo
	Limit(limit int) ILibpointslogDo
	Offset(offset int) ILibpointslogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpointslogDo
	Unscoped() ILibpointslogDo
	Create(values ...*model.Libpointslog) error
	CreateInBatches(values []*model.Libpointslog, batchSize int) error
	Save(values ...*model.Libpointslog) error
	First() (*model.Libpointslog, error)
	Take() (*model.Libpointslog, error)
	Last() (*model.Libpointslog, error)
	Find() ([]*model.Libpointslog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpointslog, err error)
	FindInBatches(result *[]*model.Libpointslog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpointslog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpointslogDo
	Assign(attrs ...field.AssignExpr) ILibpointslogDo
	Joins(fields ...field.RelationField) ILibpointslogDo
	Preload(fields ...field.RelationField) ILibpointslogDo
	FirstOrInit() (*model.Libpointslog, error)
	FirstOrCreate() (*model.Libpointslog, error)
	FindByPage(offset int, limit int) (result []*model.Libpointslog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpointslogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpointslogDo) Debug() ILibpointslogDo {
	return l.withDO(l.DO.Debug())
}

func (l libpointslogDo) WithContext(ctx context.Context) ILibpointslogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpointslogDo) ReadDB() ILibpointslogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpointslogDo) WriteDB() ILibpointslogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpointslogDo) Clauses(conds ...clause.Expression) ILibpointslogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpointslogDo) Returning(value interface{}, columns ...string) ILibpointslogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpointslogDo) Not(conds ...gen.Condition) ILibpointslogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpointslogDo) Or(conds ...gen.Condition) ILibpointslogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpointslogDo) Select(conds ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpointslogDo) Where(conds ...gen.Condition) ILibpointslogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpointslogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpointslogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpointslogDo) Order(conds ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpointslogDo) Distinct(cols ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpointslogDo) Omit(cols ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpointslogDo) Join(table schema.Tabler, on ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpointslogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpointslogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpointslogDo) Group(cols ...field.Expr) ILibpointslogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpointslogDo) Having(conds ...gen.Condition) ILibpointslogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpointslogDo) Limit(limit int) ILibpointslogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpointslogDo) Offset(offset int) ILibpointslogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpointslogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpointslogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpointslogDo) Unscoped() ILibpointslogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpointslogDo) Create(values ...*model.Libpointslog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpointslogDo) CreateInBatches(values []*model.Libpointslog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpointslogDo) Save(values ...*model.Libpointslog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpointslogDo) First() (*model.Libpointslog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointslog), nil
	}
}

func (l libpointslogDo) Take() (*model.Libpointslog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointslog), nil
	}
}

func (l libpointslogDo) Last() (*model.Libpointslog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointslog), nil
	}
}

func (l libpointslogDo) Find() ([]*model.Libpointslog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpointslog), err
}

func (l libpointslogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpointslog, err error) {
	buf := make([]*model.Libpointslog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpointslogDo) FindInBatches(result *[]*model.Libpointslog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpointslogDo) Attrs(attrs ...field.AssignExpr) ILibpointslogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpointslogDo) Assign(attrs ...field.AssignExpr) ILibpointslogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpointslogDo) Joins(fields ...field.RelationField) ILibpointslogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpointslogDo) Preload(fields ...field.RelationField) ILibpointslogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpointslogDo) FirstOrInit() (*model.Libpointslog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointslog), nil
	}
}

func (l libpointslogDo) FirstOrCreate() (*model.Libpointslog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpointslog), nil
	}
}

func (l libpointslogDo) FindByPage(offset int, limit int) (result []*model.Libpointslog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpointslogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpointslogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpointslogDo) Delete(models ...*model.Libpointslog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpointslogDo) withDO(do gen.Dao) *libpointslogDo {
	l.DO = *do.(*gen.DO)
	return l
}
