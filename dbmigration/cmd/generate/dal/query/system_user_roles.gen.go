// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemUserRole(db *gorm.DB) systemUserRole {
	_systemUserRole := systemUserRole{}

	_systemUserRole.systemUserRoleDo.UseDB(db)
	_systemUserRole.systemUserRoleDo.UseModel(&model.SystemUserRole{})

	tableName := _systemUserRole.systemUserRoleDo.TableName()
	_systemUserRole.ALL = field.NewAsterisk(tableName)
	_systemUserRole.ID = field.NewInt64(tableName, "id")
	_systemUserRole.UserID = field.NewInt64(tableName, "user_id")
	_systemUserRole.RoleID = field.NewInt64(tableName, "role_id")

	_systemUserRole.fillFieldMap()

	return _systemUserRole
}

type systemUserRole struct {
	systemUserRoleDo systemUserRoleDo

	ALL    field.Asterisk
	ID     field.Int64
	UserID field.Int64
	RoleID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemUserRole) Table(newTableName string) *systemUserRole {
	s.systemUserRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserRole) As(alias string) *systemUserRole {
	s.systemUserRoleDo.DO = *(s.systemUserRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserRole) updateTableName(table string) *systemUserRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.RoleID = field.NewInt64(table, "role_id")

	s.fillFieldMap()

	return s
}

func (s *systemUserRole) WithContext(ctx context.Context) ISystemUserRoleDo {
	return s.systemUserRoleDo.WithContext(ctx)
}

func (s systemUserRole) TableName() string { return s.systemUserRoleDo.TableName() }

func (s systemUserRole) Alias() string { return s.systemUserRoleDo.Alias() }

func (s *systemUserRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["role_id"] = s.RoleID
}

func (s systemUserRole) clone(db *gorm.DB) systemUserRole {
	s.systemUserRoleDo.ReplaceDB(db)
	return s
}

type systemUserRoleDo struct{ gen.DO }

type ISystemUserRoleDo interface {
	gen.SubQuery
	Debug() ISystemUserRoleDo
	WithContext(ctx context.Context) ISystemUserRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserRoleDo
	Not(conds ...gen.Condition) ISystemUserRoleDo
	Or(conds ...gen.Condition) ISystemUserRoleDo
	Select(conds ...field.Expr) ISystemUserRoleDo
	Where(conds ...gen.Condition) ISystemUserRoleDo
	Order(conds ...field.Expr) ISystemUserRoleDo
	Distinct(cols ...field.Expr) ISystemUserRoleDo
	Omit(cols ...field.Expr) ISystemUserRoleDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserRoleDo
	Group(cols ...field.Expr) ISystemUserRoleDo
	Having(conds ...gen.Condition) ISystemUserRoleDo
	Limit(limit int) ISystemUserRoleDo
	Offset(offset int) ISystemUserRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserRoleDo
	Unscoped() ISystemUserRoleDo
	Create(values ...*model.SystemUserRole) error
	CreateInBatches(values []*model.SystemUserRole, batchSize int) error
	Save(values ...*model.SystemUserRole) error
	First() (*model.SystemUserRole, error)
	Take() (*model.SystemUserRole, error)
	Last() (*model.SystemUserRole, error)
	Find() ([]*model.SystemUserRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserRole, err error)
	FindInBatches(result *[]*model.SystemUserRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserRoleDo
	Assign(attrs ...field.AssignExpr) ISystemUserRoleDo
	Joins(fields ...field.RelationField) ISystemUserRoleDo
	Preload(fields ...field.RelationField) ISystemUserRoleDo
	FirstOrInit() (*model.SystemUserRole, error)
	FirstOrCreate() (*model.SystemUserRole, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserRoleDo) Debug() ISystemUserRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserRoleDo) WithContext(ctx context.Context) ISystemUserRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserRoleDo) ReadDB() ISystemUserRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserRoleDo) WriteDB() ISystemUserRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserRoleDo) Clauses(conds ...clause.Expression) ISystemUserRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserRoleDo) Returning(value interface{}, columns ...string) ISystemUserRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserRoleDo) Not(conds ...gen.Condition) ISystemUserRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserRoleDo) Or(conds ...gen.Condition) ISystemUserRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserRoleDo) Select(conds ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserRoleDo) Where(conds ...gen.Condition) ISystemUserRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemUserRoleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemUserRoleDo) Order(conds ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserRoleDo) Distinct(cols ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserRoleDo) Omit(cols ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserRoleDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserRoleDo) Group(cols ...field.Expr) ISystemUserRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserRoleDo) Having(conds ...gen.Condition) ISystemUserRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserRoleDo) Limit(limit int) ISystemUserRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserRoleDo) Offset(offset int) ISystemUserRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserRoleDo) Unscoped() ISystemUserRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserRoleDo) Create(values ...*model.SystemUserRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserRoleDo) CreateInBatches(values []*model.SystemUserRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserRoleDo) Save(values ...*model.SystemUserRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserRoleDo) First() (*model.SystemUserRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserRole), nil
	}
}

func (s systemUserRoleDo) Take() (*model.SystemUserRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserRole), nil
	}
}

func (s systemUserRoleDo) Last() (*model.SystemUserRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserRole), nil
	}
}

func (s systemUserRoleDo) Find() ([]*model.SystemUserRole, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserRole), err
}

func (s systemUserRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserRole, err error) {
	buf := make([]*model.SystemUserRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserRoleDo) FindInBatches(result *[]*model.SystemUserRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserRoleDo) Attrs(attrs ...field.AssignExpr) ISystemUserRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserRoleDo) Assign(attrs ...field.AssignExpr) ISystemUserRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserRoleDo) Joins(fields ...field.RelationField) ISystemUserRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserRoleDo) Preload(fields ...field.RelationField) ISystemUserRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserRoleDo) FirstOrInit() (*model.SystemUserRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserRole), nil
	}
}

func (s systemUserRoleDo) FirstOrCreate() (*model.SystemUserRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserRole), nil
	}
}

func (s systemUserRoleDo) FindByPage(offset int, limit int) (result []*model.SystemUserRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserRoleDo) Delete(models ...*model.SystemUserRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserRoleDo) withDO(do gen.Dao) *systemUserRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
