// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newGpiPosition(db *gorm.DB) gpiPosition {
	_gpiPosition := gpiPosition{}

	_gpiPosition.gpiPositionDo.UseDB(db)
	_gpiPosition.gpiPositionDo.UseModel(&model.GpiPosition{})

	tableName := _gpiPosition.gpiPositionDo.TableName()
	_gpiPosition.ALL = field.NewAsterisk(tableName)
	_gpiPosition.ID = field.NewInt64(tableName, "id")
	_gpiPosition.CreateTime = field.NewTime(tableName, "create_time")
	_gpiPosition.UpdateTime = field.NewTime(tableName, "update_time")
	_gpiPosition.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_gpiPosition.Name = field.NewString(tableName, "name")
	_gpiPosition.Description = field.NewString(tableName, "description")

	_gpiPosition.fillFieldMap()

	return _gpiPosition
}

type gpiPosition struct {
	gpiPositionDo gpiPositionDo

	ALL         field.Asterisk
	ID          field.Int64
	CreateTime  field.Time
	UpdateTime  field.Time
	IsDeleted   field.Int64
	Name        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (g gpiPosition) Table(newTableName string) *gpiPosition {
	g.gpiPositionDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gpiPosition) As(alias string) *gpiPosition {
	g.gpiPositionDo.DO = *(g.gpiPositionDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gpiPosition) updateTableName(table string) *gpiPosition {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.CreateTime = field.NewTime(table, "create_time")
	g.UpdateTime = field.NewTime(table, "update_time")
	g.IsDeleted = field.NewInt64(table, "is_deleted")
	g.Name = field.NewString(table, "name")
	g.Description = field.NewString(table, "description")

	g.fillFieldMap()

	return g
}

func (g *gpiPosition) WithContext(ctx context.Context) IGpiPositionDo {
	return g.gpiPositionDo.WithContext(ctx)
}

func (g gpiPosition) TableName() string { return g.gpiPositionDo.TableName() }

func (g gpiPosition) Alias() string { return g.gpiPositionDo.Alias() }

func (g *gpiPosition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gpiPosition) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["update_time"] = g.UpdateTime
	g.fieldMap["is_deleted"] = g.IsDeleted
	g.fieldMap["name"] = g.Name
	g.fieldMap["description"] = g.Description
}

func (g gpiPosition) clone(db *gorm.DB) gpiPosition {
	g.gpiPositionDo.ReplaceDB(db)
	return g
}

type gpiPositionDo struct{ gen.DO }

type IGpiPositionDo interface {
	gen.SubQuery
	Debug() IGpiPositionDo
	WithContext(ctx context.Context) IGpiPositionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGpiPositionDo
	Not(conds ...gen.Condition) IGpiPositionDo
	Or(conds ...gen.Condition) IGpiPositionDo
	Select(conds ...field.Expr) IGpiPositionDo
	Where(conds ...gen.Condition) IGpiPositionDo
	Order(conds ...field.Expr) IGpiPositionDo
	Distinct(cols ...field.Expr) IGpiPositionDo
	Omit(cols ...field.Expr) IGpiPositionDo
	Join(table schema.Tabler, on ...field.Expr) IGpiPositionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGpiPositionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGpiPositionDo
	Group(cols ...field.Expr) IGpiPositionDo
	Having(conds ...gen.Condition) IGpiPositionDo
	Limit(limit int) IGpiPositionDo
	Offset(offset int) IGpiPositionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGpiPositionDo
	Unscoped() IGpiPositionDo
	Create(values ...*model.GpiPosition) error
	CreateInBatches(values []*model.GpiPosition, batchSize int) error
	Save(values ...*model.GpiPosition) error
	First() (*model.GpiPosition, error)
	Take() (*model.GpiPosition, error)
	Last() (*model.GpiPosition, error)
	Find() ([]*model.GpiPosition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GpiPosition, err error)
	FindInBatches(result *[]*model.GpiPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GpiPosition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGpiPositionDo
	Assign(attrs ...field.AssignExpr) IGpiPositionDo
	Joins(fields ...field.RelationField) IGpiPositionDo
	Preload(fields ...field.RelationField) IGpiPositionDo
	FirstOrInit() (*model.GpiPosition, error)
	FirstOrCreate() (*model.GpiPosition, error)
	FindByPage(offset int, limit int) (result []*model.GpiPosition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGpiPositionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gpiPositionDo) Debug() IGpiPositionDo {
	return g.withDO(g.DO.Debug())
}

func (g gpiPositionDo) WithContext(ctx context.Context) IGpiPositionDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gpiPositionDo) ReadDB() IGpiPositionDo {
	return g.Clauses(dbresolver.Read)
}

func (g gpiPositionDo) WriteDB() IGpiPositionDo {
	return g.Clauses(dbresolver.Write)
}

func (g gpiPositionDo) Clauses(conds ...clause.Expression) IGpiPositionDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gpiPositionDo) Returning(value interface{}, columns ...string) IGpiPositionDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gpiPositionDo) Not(conds ...gen.Condition) IGpiPositionDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gpiPositionDo) Or(conds ...gen.Condition) IGpiPositionDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gpiPositionDo) Select(conds ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gpiPositionDo) Where(conds ...gen.Condition) IGpiPositionDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gpiPositionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGpiPositionDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gpiPositionDo) Order(conds ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gpiPositionDo) Distinct(cols ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gpiPositionDo) Omit(cols ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gpiPositionDo) Join(table schema.Tabler, on ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gpiPositionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gpiPositionDo) RightJoin(table schema.Tabler, on ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gpiPositionDo) Group(cols ...field.Expr) IGpiPositionDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gpiPositionDo) Having(conds ...gen.Condition) IGpiPositionDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gpiPositionDo) Limit(limit int) IGpiPositionDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gpiPositionDo) Offset(offset int) IGpiPositionDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gpiPositionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGpiPositionDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gpiPositionDo) Unscoped() IGpiPositionDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gpiPositionDo) Create(values ...*model.GpiPosition) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gpiPositionDo) CreateInBatches(values []*model.GpiPosition, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gpiPositionDo) Save(values ...*model.GpiPosition) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gpiPositionDo) First() (*model.GpiPosition, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GpiPosition), nil
	}
}

func (g gpiPositionDo) Take() (*model.GpiPosition, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GpiPosition), nil
	}
}

func (g gpiPositionDo) Last() (*model.GpiPosition, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GpiPosition), nil
	}
}

func (g gpiPositionDo) Find() ([]*model.GpiPosition, error) {
	result, err := g.DO.Find()
	return result.([]*model.GpiPosition), err
}

func (g gpiPositionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GpiPosition, err error) {
	buf := make([]*model.GpiPosition, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gpiPositionDo) FindInBatches(result *[]*model.GpiPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gpiPositionDo) Attrs(attrs ...field.AssignExpr) IGpiPositionDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gpiPositionDo) Assign(attrs ...field.AssignExpr) IGpiPositionDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gpiPositionDo) Joins(fields ...field.RelationField) IGpiPositionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gpiPositionDo) Preload(fields ...field.RelationField) IGpiPositionDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gpiPositionDo) FirstOrInit() (*model.GpiPosition, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GpiPosition), nil
	}
}

func (g gpiPositionDo) FirstOrCreate() (*model.GpiPosition, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GpiPosition), nil
	}
}

func (g gpiPositionDo) FindByPage(offset int, limit int) (result []*model.GpiPosition, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gpiPositionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gpiPositionDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gpiPositionDo) Delete(models ...*model.GpiPosition) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gpiPositionDo) withDO(do gen.Dao) *gpiPositionDo {
	g.DO = *do.(*gen.DO)
	return g
}
