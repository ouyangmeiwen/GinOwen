// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysfaceofflinefeature(db *gorm.DB) sysfaceofflinefeature {
	_sysfaceofflinefeature := sysfaceofflinefeature{}

	_sysfaceofflinefeature.sysfaceofflinefeatureDo.UseDB(db)
	_sysfaceofflinefeature.sysfaceofflinefeatureDo.UseModel(&model.Sysfaceofflinefeature{})

	tableName := _sysfaceofflinefeature.sysfaceofflinefeatureDo.TableName()
	_sysfaceofflinefeature.ALL = field.NewAsterisk(tableName)
	_sysfaceofflinefeature.ID = field.NewString(tableName, "Id")
	_sysfaceofflinefeature.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysfaceofflinefeature.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysfaceofflinefeature.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_sysfaceofflinefeature.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_sysfaceofflinefeature.IsDeleted = field.NewField(tableName, "IsDeleted")
	_sysfaceofflinefeature.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_sysfaceofflinefeature.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_sysfaceofflinefeature.UserID = field.NewString(tableName, "UserId")
	_sysfaceofflinefeature.GroupID = field.NewString(tableName, "GroupId")
	_sysfaceofflinefeature.FaceToken = field.NewString(tableName, "FaceToken")
	_sysfaceofflinefeature.Feature = field.NewString(tableName, "Feature")
	_sysfaceofflinefeature.FaceID = field.NewInt64(tableName, "FaceId")
	_sysfaceofflinefeature.Image = field.NewString(tableName, "Image")

	_sysfaceofflinefeature.fillFieldMap()

	return _sysfaceofflinefeature
}

type sysfaceofflinefeature struct {
	sysfaceofflinefeatureDo sysfaceofflinefeatureDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	UserID               field.String
	GroupID              field.String
	FaceToken            field.String
	Feature              field.String
	FaceID               field.Int64
	Image                field.String

	fieldMap map[string]field.Expr
}

func (s sysfaceofflinefeature) Table(newTableName string) *sysfaceofflinefeature {
	s.sysfaceofflinefeatureDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysfaceofflinefeature) As(alias string) *sysfaceofflinefeature {
	s.sysfaceofflinefeatureDo.DO = *(s.sysfaceofflinefeatureDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysfaceofflinefeature) updateTableName(table string) *sysfaceofflinefeature {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.IsDeleted = field.NewField(table, "IsDeleted")
	s.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	s.DeletionTime = field.NewTime(table, "DeletionTime")
	s.UserID = field.NewString(table, "UserId")
	s.GroupID = field.NewString(table, "GroupId")
	s.FaceToken = field.NewString(table, "FaceToken")
	s.Feature = field.NewString(table, "Feature")
	s.FaceID = field.NewInt64(table, "FaceId")
	s.Image = field.NewString(table, "Image")

	s.fillFieldMap()

	return s
}

func (s *sysfaceofflinefeature) WithContext(ctx context.Context) ISysfaceofflinefeatureDo {
	return s.sysfaceofflinefeatureDo.WithContext(ctx)
}

func (s sysfaceofflinefeature) TableName() string { return s.sysfaceofflinefeatureDo.TableName() }

func (s sysfaceofflinefeature) Alias() string { return s.sysfaceofflinefeatureDo.Alias() }

func (s *sysfaceofflinefeature) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysfaceofflinefeature) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["IsDeleted"] = s.IsDeleted
	s.fieldMap["DeleterUserId"] = s.DeleterUserID
	s.fieldMap["DeletionTime"] = s.DeletionTime
	s.fieldMap["UserId"] = s.UserID
	s.fieldMap["GroupId"] = s.GroupID
	s.fieldMap["FaceToken"] = s.FaceToken
	s.fieldMap["Feature"] = s.Feature
	s.fieldMap["FaceId"] = s.FaceID
	s.fieldMap["Image"] = s.Image
}

func (s sysfaceofflinefeature) clone(db *gorm.DB) sysfaceofflinefeature {
	s.sysfaceofflinefeatureDo.ReplaceDB(db)
	return s
}

type sysfaceofflinefeatureDo struct{ gen.DO }

type ISysfaceofflinefeatureDo interface {
	gen.SubQuery
	Debug() ISysfaceofflinefeatureDo
	WithContext(ctx context.Context) ISysfaceofflinefeatureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysfaceofflinefeatureDo
	Not(conds ...gen.Condition) ISysfaceofflinefeatureDo
	Or(conds ...gen.Condition) ISysfaceofflinefeatureDo
	Select(conds ...field.Expr) ISysfaceofflinefeatureDo
	Where(conds ...gen.Condition) ISysfaceofflinefeatureDo
	Order(conds ...field.Expr) ISysfaceofflinefeatureDo
	Distinct(cols ...field.Expr) ISysfaceofflinefeatureDo
	Omit(cols ...field.Expr) ISysfaceofflinefeatureDo
	Join(table schema.Tabler, on ...field.Expr) ISysfaceofflinefeatureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinefeatureDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinefeatureDo
	Group(cols ...field.Expr) ISysfaceofflinefeatureDo
	Having(conds ...gen.Condition) ISysfaceofflinefeatureDo
	Limit(limit int) ISysfaceofflinefeatureDo
	Offset(offset int) ISysfaceofflinefeatureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceofflinefeatureDo
	Unscoped() ISysfaceofflinefeatureDo
	Create(values ...*model.Sysfaceofflinefeature) error
	CreateInBatches(values []*model.Sysfaceofflinefeature, batchSize int) error
	Save(values ...*model.Sysfaceofflinefeature) error
	First() (*model.Sysfaceofflinefeature, error)
	Take() (*model.Sysfaceofflinefeature, error)
	Last() (*model.Sysfaceofflinefeature, error)
	Find() ([]*model.Sysfaceofflinefeature, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceofflinefeature, err error)
	FindInBatches(result *[]*model.Sysfaceofflinefeature, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysfaceofflinefeature) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysfaceofflinefeatureDo
	Assign(attrs ...field.AssignExpr) ISysfaceofflinefeatureDo
	Joins(fields ...field.RelationField) ISysfaceofflinefeatureDo
	Preload(fields ...field.RelationField) ISysfaceofflinefeatureDo
	FirstOrInit() (*model.Sysfaceofflinefeature, error)
	FirstOrCreate() (*model.Sysfaceofflinefeature, error)
	FindByPage(offset int, limit int) (result []*model.Sysfaceofflinefeature, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysfaceofflinefeatureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysfaceofflinefeatureDo) Debug() ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Debug())
}

func (s sysfaceofflinefeatureDo) WithContext(ctx context.Context) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysfaceofflinefeatureDo) ReadDB() ISysfaceofflinefeatureDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysfaceofflinefeatureDo) WriteDB() ISysfaceofflinefeatureDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysfaceofflinefeatureDo) Clauses(conds ...clause.Expression) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysfaceofflinefeatureDo) Returning(value interface{}, columns ...string) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysfaceofflinefeatureDo) Not(conds ...gen.Condition) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysfaceofflinefeatureDo) Or(conds ...gen.Condition) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysfaceofflinefeatureDo) Select(conds ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysfaceofflinefeatureDo) Where(conds ...gen.Condition) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysfaceofflinefeatureDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysfaceofflinefeatureDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysfaceofflinefeatureDo) Order(conds ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysfaceofflinefeatureDo) Distinct(cols ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysfaceofflinefeatureDo) Omit(cols ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysfaceofflinefeatureDo) Join(table schema.Tabler, on ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysfaceofflinefeatureDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysfaceofflinefeatureDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysfaceofflinefeatureDo) Group(cols ...field.Expr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysfaceofflinefeatureDo) Having(conds ...gen.Condition) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysfaceofflinefeatureDo) Limit(limit int) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysfaceofflinefeatureDo) Offset(offset int) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysfaceofflinefeatureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysfaceofflinefeatureDo) Unscoped() ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysfaceofflinefeatureDo) Create(values ...*model.Sysfaceofflinefeature) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysfaceofflinefeatureDo) CreateInBatches(values []*model.Sysfaceofflinefeature, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysfaceofflinefeatureDo) Save(values ...*model.Sysfaceofflinefeature) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysfaceofflinefeatureDo) First() (*model.Sysfaceofflinefeature, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinefeature), nil
	}
}

func (s sysfaceofflinefeatureDo) Take() (*model.Sysfaceofflinefeature, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinefeature), nil
	}
}

func (s sysfaceofflinefeatureDo) Last() (*model.Sysfaceofflinefeature, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinefeature), nil
	}
}

func (s sysfaceofflinefeatureDo) Find() ([]*model.Sysfaceofflinefeature, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysfaceofflinefeature), err
}

func (s sysfaceofflinefeatureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysfaceofflinefeature, err error) {
	buf := make([]*model.Sysfaceofflinefeature, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysfaceofflinefeatureDo) FindInBatches(result *[]*model.Sysfaceofflinefeature, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysfaceofflinefeatureDo) Attrs(attrs ...field.AssignExpr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysfaceofflinefeatureDo) Assign(attrs ...field.AssignExpr) ISysfaceofflinefeatureDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysfaceofflinefeatureDo) Joins(fields ...field.RelationField) ISysfaceofflinefeatureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysfaceofflinefeatureDo) Preload(fields ...field.RelationField) ISysfaceofflinefeatureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysfaceofflinefeatureDo) FirstOrInit() (*model.Sysfaceofflinefeature, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinefeature), nil
	}
}

func (s sysfaceofflinefeatureDo) FirstOrCreate() (*model.Sysfaceofflinefeature, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysfaceofflinefeature), nil
	}
}

func (s sysfaceofflinefeatureDo) FindByPage(offset int, limit int) (result []*model.Sysfaceofflinefeature, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysfaceofflinefeatureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysfaceofflinefeatureDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysfaceofflinefeatureDo) Delete(models ...*model.Sysfaceofflinefeature) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysfaceofflinefeatureDo) withDO(do gen.Dao) *sysfaceofflinefeatureDo {
	s.DO = *do.(*gen.DO)
	return s
}
