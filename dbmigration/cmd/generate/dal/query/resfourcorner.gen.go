// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newResfourcorner(db *gorm.DB) resfourcorner {
	_resfourcorner := resfourcorner{}

	_resfourcorner.resfourcornerDo.UseDB(db)
	_resfourcorner.resfourcornerDo.UseModel(&model.Resfourcorner{})

	tableName := _resfourcorner.resfourcornerDo.TableName()
	_resfourcorner.ALL = field.NewAsterisk(tableName)
	_resfourcorner.ID = field.NewInt64(tableName, "Id")
	_resfourcorner.Code = field.NewString(tableName, "Code")
	_resfourcorner.Name = field.NewString(tableName, "Name")

	_resfourcorner.fillFieldMap()

	return _resfourcorner
}

type resfourcorner struct {
	resfourcornerDo resfourcornerDo

	ALL  field.Asterisk
	ID   field.Int64
	Code field.String
	Name field.String

	fieldMap map[string]field.Expr
}

func (r resfourcorner) Table(newTableName string) *resfourcorner {
	r.resfourcornerDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resfourcorner) As(alias string) *resfourcorner {
	r.resfourcornerDo.DO = *(r.resfourcornerDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resfourcorner) updateTableName(table string) *resfourcorner {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "Id")
	r.Code = field.NewString(table, "Code")
	r.Name = field.NewString(table, "Name")

	r.fillFieldMap()

	return r
}

func (r *resfourcorner) WithContext(ctx context.Context) IResfourcornerDo {
	return r.resfourcornerDo.WithContext(ctx)
}

func (r resfourcorner) TableName() string { return r.resfourcornerDo.TableName() }

func (r resfourcorner) Alias() string { return r.resfourcornerDo.Alias() }

func (r *resfourcorner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resfourcorner) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["Id"] = r.ID
	r.fieldMap["Code"] = r.Code
	r.fieldMap["Name"] = r.Name
}

func (r resfourcorner) clone(db *gorm.DB) resfourcorner {
	r.resfourcornerDo.ReplaceDB(db)
	return r
}

type resfourcornerDo struct{ gen.DO }

type IResfourcornerDo interface {
	gen.SubQuery
	Debug() IResfourcornerDo
	WithContext(ctx context.Context) IResfourcornerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IResfourcornerDo
	Not(conds ...gen.Condition) IResfourcornerDo
	Or(conds ...gen.Condition) IResfourcornerDo
	Select(conds ...field.Expr) IResfourcornerDo
	Where(conds ...gen.Condition) IResfourcornerDo
	Order(conds ...field.Expr) IResfourcornerDo
	Distinct(cols ...field.Expr) IResfourcornerDo
	Omit(cols ...field.Expr) IResfourcornerDo
	Join(table schema.Tabler, on ...field.Expr) IResfourcornerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IResfourcornerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IResfourcornerDo
	Group(cols ...field.Expr) IResfourcornerDo
	Having(conds ...gen.Condition) IResfourcornerDo
	Limit(limit int) IResfourcornerDo
	Offset(offset int) IResfourcornerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IResfourcornerDo
	Unscoped() IResfourcornerDo
	Create(values ...*model.Resfourcorner) error
	CreateInBatches(values []*model.Resfourcorner, batchSize int) error
	Save(values ...*model.Resfourcorner) error
	First() (*model.Resfourcorner, error)
	Take() (*model.Resfourcorner, error)
	Last() (*model.Resfourcorner, error)
	Find() ([]*model.Resfourcorner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resfourcorner, err error)
	FindInBatches(result *[]*model.Resfourcorner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Resfourcorner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IResfourcornerDo
	Assign(attrs ...field.AssignExpr) IResfourcornerDo
	Joins(fields ...field.RelationField) IResfourcornerDo
	Preload(fields ...field.RelationField) IResfourcornerDo
	FirstOrInit() (*model.Resfourcorner, error)
	FirstOrCreate() (*model.Resfourcorner, error)
	FindByPage(offset int, limit int) (result []*model.Resfourcorner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IResfourcornerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r resfourcornerDo) Debug() IResfourcornerDo {
	return r.withDO(r.DO.Debug())
}

func (r resfourcornerDo) WithContext(ctx context.Context) IResfourcornerDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resfourcornerDo) ReadDB() IResfourcornerDo {
	return r.Clauses(dbresolver.Read)
}

func (r resfourcornerDo) WriteDB() IResfourcornerDo {
	return r.Clauses(dbresolver.Write)
}

func (r resfourcornerDo) Clauses(conds ...clause.Expression) IResfourcornerDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resfourcornerDo) Returning(value interface{}, columns ...string) IResfourcornerDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resfourcornerDo) Not(conds ...gen.Condition) IResfourcornerDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resfourcornerDo) Or(conds ...gen.Condition) IResfourcornerDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resfourcornerDo) Select(conds ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resfourcornerDo) Where(conds ...gen.Condition) IResfourcornerDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resfourcornerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IResfourcornerDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resfourcornerDo) Order(conds ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resfourcornerDo) Distinct(cols ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resfourcornerDo) Omit(cols ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resfourcornerDo) Join(table schema.Tabler, on ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resfourcornerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resfourcornerDo) RightJoin(table schema.Tabler, on ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resfourcornerDo) Group(cols ...field.Expr) IResfourcornerDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resfourcornerDo) Having(conds ...gen.Condition) IResfourcornerDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resfourcornerDo) Limit(limit int) IResfourcornerDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resfourcornerDo) Offset(offset int) IResfourcornerDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resfourcornerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IResfourcornerDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resfourcornerDo) Unscoped() IResfourcornerDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resfourcornerDo) Create(values ...*model.Resfourcorner) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resfourcornerDo) CreateInBatches(values []*model.Resfourcorner, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resfourcornerDo) Save(values ...*model.Resfourcorner) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resfourcornerDo) First() (*model.Resfourcorner, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resfourcorner), nil
	}
}

func (r resfourcornerDo) Take() (*model.Resfourcorner, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resfourcorner), nil
	}
}

func (r resfourcornerDo) Last() (*model.Resfourcorner, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resfourcorner), nil
	}
}

func (r resfourcornerDo) Find() ([]*model.Resfourcorner, error) {
	result, err := r.DO.Find()
	return result.([]*model.Resfourcorner), err
}

func (r resfourcornerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Resfourcorner, err error) {
	buf := make([]*model.Resfourcorner, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resfourcornerDo) FindInBatches(result *[]*model.Resfourcorner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resfourcornerDo) Attrs(attrs ...field.AssignExpr) IResfourcornerDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resfourcornerDo) Assign(attrs ...field.AssignExpr) IResfourcornerDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resfourcornerDo) Joins(fields ...field.RelationField) IResfourcornerDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resfourcornerDo) Preload(fields ...field.RelationField) IResfourcornerDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resfourcornerDo) FirstOrInit() (*model.Resfourcorner, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resfourcorner), nil
	}
}

func (r resfourcornerDo) FirstOrCreate() (*model.Resfourcorner, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Resfourcorner), nil
	}
}

func (r resfourcornerDo) FindByPage(offset int, limit int) (result []*model.Resfourcorner, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resfourcornerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r resfourcornerDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r resfourcornerDo) Delete(models ...*model.Resfourcorner) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *resfourcornerDo) withDO(do gen.Dao) *resfourcornerDo {
	r.DO = *do.(*gen.DO)
	return r
}
