// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLcpproduct(db *gorm.DB) lcpproduct {
	_lcpproduct := lcpproduct{}

	_lcpproduct.lcpproductDo.UseDB(db)
	_lcpproduct.lcpproductDo.UseModel(&model.Lcpproduct{})

	tableName := _lcpproduct.lcpproductDo.TableName()
	_lcpproduct.ALL = field.NewAsterisk(tableName)
	_lcpproduct.ID = field.NewString(tableName, "Id")
	_lcpproduct.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpproduct.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpproduct.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpproduct.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpproduct.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpproduct.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpproduct.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpproduct.ParentID = field.NewString(tableName, "ParentId")
	_lcpproduct.Code = field.NewString(tableName, "Code")
	_lcpproduct.Name = field.NewString(tableName, "Name")
	_lcpproduct.Directory = field.NewString(tableName, "Directory")
	_lcpproduct.IsSupportUpgrade = field.NewField(tableName, "IsSupportUpgrade")
	_lcpproduct.IsSupportOpen = field.NewField(tableName, "IsSupportOpen")
	_lcpproduct.Order = field.NewInt64(tableName, "Order")
	_lcpproduct.Port = field.NewInt64(tableName, "Port")
	_lcpproduct.ApplicationName = field.NewString(tableName, "ApplicationName")
	_lcpproduct.Description = field.NewString(tableName, "Description")
	_lcpproduct.TerminalTypes = field.NewString(tableName, "TerminalTypes")
	_lcpproduct.StartupType = field.NewInt64(tableName, "StartupType")
	_lcpproduct.IsNeedActivate = field.NewField(tableName, "IsNeedActivate")

	_lcpproduct.fillFieldMap()

	return _lcpproduct
}

type lcpproduct struct {
	lcpproductDo lcpproductDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ParentID             field.String
	Code                 field.String
	Name                 field.String
	Directory            field.String
	IsSupportUpgrade     field.Field
	IsSupportOpen        field.Field
	Order                field.Int64
	Port                 field.Int64
	ApplicationName      field.String
	Description          field.String
	TerminalTypes        field.String
	StartupType          field.Int64
	IsNeedActivate       field.Field

	fieldMap map[string]field.Expr
}

func (l lcpproduct) Table(newTableName string) *lcpproduct {
	l.lcpproductDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpproduct) As(alias string) *lcpproduct {
	l.lcpproductDo.DO = *(l.lcpproductDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpproduct) updateTableName(table string) *lcpproduct {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.ParentID = field.NewString(table, "ParentId")
	l.Code = field.NewString(table, "Code")
	l.Name = field.NewString(table, "Name")
	l.Directory = field.NewString(table, "Directory")
	l.IsSupportUpgrade = field.NewField(table, "IsSupportUpgrade")
	l.IsSupportOpen = field.NewField(table, "IsSupportOpen")
	l.Order = field.NewInt64(table, "Order")
	l.Port = field.NewInt64(table, "Port")
	l.ApplicationName = field.NewString(table, "ApplicationName")
	l.Description = field.NewString(table, "Description")
	l.TerminalTypes = field.NewString(table, "TerminalTypes")
	l.StartupType = field.NewInt64(table, "StartupType")
	l.IsNeedActivate = field.NewField(table, "IsNeedActivate")

	l.fillFieldMap()

	return l
}

func (l *lcpproduct) WithContext(ctx context.Context) ILcpproductDo {
	return l.lcpproductDo.WithContext(ctx)
}

func (l lcpproduct) TableName() string { return l.lcpproductDo.TableName() }

func (l lcpproduct) Alias() string { return l.lcpproductDo.Alias() }

func (l *lcpproduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpproduct) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 21)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["ParentId"] = l.ParentID
	l.fieldMap["Code"] = l.Code
	l.fieldMap["Name"] = l.Name
	l.fieldMap["Directory"] = l.Directory
	l.fieldMap["IsSupportUpgrade"] = l.IsSupportUpgrade
	l.fieldMap["IsSupportOpen"] = l.IsSupportOpen
	l.fieldMap["Order"] = l.Order
	l.fieldMap["Port"] = l.Port
	l.fieldMap["ApplicationName"] = l.ApplicationName
	l.fieldMap["Description"] = l.Description
	l.fieldMap["TerminalTypes"] = l.TerminalTypes
	l.fieldMap["StartupType"] = l.StartupType
	l.fieldMap["IsNeedActivate"] = l.IsNeedActivate
}

func (l lcpproduct) clone(db *gorm.DB) lcpproduct {
	l.lcpproductDo.ReplaceDB(db)
	return l
}

type lcpproductDo struct{ gen.DO }

type ILcpproductDo interface {
	gen.SubQuery
	Debug() ILcpproductDo
	WithContext(ctx context.Context) ILcpproductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpproductDo
	Not(conds ...gen.Condition) ILcpproductDo
	Or(conds ...gen.Condition) ILcpproductDo
	Select(conds ...field.Expr) ILcpproductDo
	Where(conds ...gen.Condition) ILcpproductDo
	Order(conds ...field.Expr) ILcpproductDo
	Distinct(cols ...field.Expr) ILcpproductDo
	Omit(cols ...field.Expr) ILcpproductDo
	Join(table schema.Tabler, on ...field.Expr) ILcpproductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpproductDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpproductDo
	Group(cols ...field.Expr) ILcpproductDo
	Having(conds ...gen.Condition) ILcpproductDo
	Limit(limit int) ILcpproductDo
	Offset(offset int) ILcpproductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpproductDo
	Unscoped() ILcpproductDo
	Create(values ...*model.Lcpproduct) error
	CreateInBatches(values []*model.Lcpproduct, batchSize int) error
	Save(values ...*model.Lcpproduct) error
	First() (*model.Lcpproduct, error)
	Take() (*model.Lcpproduct, error)
	Last() (*model.Lcpproduct, error)
	Find() ([]*model.Lcpproduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpproduct, err error)
	FindInBatches(result *[]*model.Lcpproduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpproduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpproductDo
	Assign(attrs ...field.AssignExpr) ILcpproductDo
	Joins(fields ...field.RelationField) ILcpproductDo
	Preload(fields ...field.RelationField) ILcpproductDo
	FirstOrInit() (*model.Lcpproduct, error)
	FirstOrCreate() (*model.Lcpproduct, error)
	FindByPage(offset int, limit int) (result []*model.Lcpproduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpproductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpproductDo) Debug() ILcpproductDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpproductDo) WithContext(ctx context.Context) ILcpproductDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpproductDo) ReadDB() ILcpproductDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpproductDo) WriteDB() ILcpproductDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpproductDo) Clauses(conds ...clause.Expression) ILcpproductDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpproductDo) Returning(value interface{}, columns ...string) ILcpproductDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpproductDo) Not(conds ...gen.Condition) ILcpproductDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpproductDo) Or(conds ...gen.Condition) ILcpproductDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpproductDo) Select(conds ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpproductDo) Where(conds ...gen.Condition) ILcpproductDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpproductDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpproductDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpproductDo) Order(conds ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpproductDo) Distinct(cols ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpproductDo) Omit(cols ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpproductDo) Join(table schema.Tabler, on ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpproductDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpproductDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpproductDo) Group(cols ...field.Expr) ILcpproductDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpproductDo) Having(conds ...gen.Condition) ILcpproductDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpproductDo) Limit(limit int) ILcpproductDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpproductDo) Offset(offset int) ILcpproductDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpproductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpproductDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpproductDo) Unscoped() ILcpproductDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpproductDo) Create(values ...*model.Lcpproduct) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpproductDo) CreateInBatches(values []*model.Lcpproduct, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpproductDo) Save(values ...*model.Lcpproduct) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpproductDo) First() (*model.Lcpproduct, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpproduct), nil
	}
}

func (l lcpproductDo) Take() (*model.Lcpproduct, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpproduct), nil
	}
}

func (l lcpproductDo) Last() (*model.Lcpproduct, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpproduct), nil
	}
}

func (l lcpproductDo) Find() ([]*model.Lcpproduct, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpproduct), err
}

func (l lcpproductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpproduct, err error) {
	buf := make([]*model.Lcpproduct, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpproductDo) FindInBatches(result *[]*model.Lcpproduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpproductDo) Attrs(attrs ...field.AssignExpr) ILcpproductDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpproductDo) Assign(attrs ...field.AssignExpr) ILcpproductDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpproductDo) Joins(fields ...field.RelationField) ILcpproductDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpproductDo) Preload(fields ...field.RelationField) ILcpproductDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpproductDo) FirstOrInit() (*model.Lcpproduct, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpproduct), nil
	}
}

func (l lcpproductDo) FirstOrCreate() (*model.Lcpproduct, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpproduct), nil
	}
}

func (l lcpproductDo) FindByPage(offset int, limit int) (result []*model.Lcpproduct, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpproductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpproductDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpproductDo) Delete(models ...*model.Lcpproduct) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpproductDo) withDO(do gen.Dao) *lcpproductDo {
	l.DO = *do.(*gen.DO)
	return l
}
