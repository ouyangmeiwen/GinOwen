// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newBookAttrCopy1(db *gorm.DB) bookAttrCopy1 {
	_bookAttrCopy1 := bookAttrCopy1{}

	_bookAttrCopy1.bookAttrCopy1Do.UseDB(db)
	_bookAttrCopy1.bookAttrCopy1Do.UseModel(&model.BookAttrCopy1{})

	tableName := _bookAttrCopy1.bookAttrCopy1Do.TableName()
	_bookAttrCopy1.ALL = field.NewAsterisk(tableName)
	_bookAttrCopy1.RECORDID = field.NewInt64(tableName, "RECORD_ID")
	_bookAttrCopy1.CALLNO = field.NewString(tableName, "CALL_NO")
	_bookAttrCopy1.TITLE = field.NewString(tableName, "TITLE")
	_bookAttrCopy1.TITLES = field.NewString(tableName, "TITLE_S")
	_bookAttrCopy1.ISBN13 = field.NewString(tableName, "ISBN13")
	_bookAttrCopy1.ISBN10 = field.NewString(tableName, "ISBN10")
	_bookAttrCopy1.ISBN = field.NewString(tableName, "ISBN")
	_bookAttrCopy1.AUTHOR = field.NewString(tableName, "AUTHOR")
	_bookAttrCopy1.PUBLISHER = field.NewString(tableName, "PUBLISHER")
	_bookAttrCopy1.PUBDATE = field.NewString(tableName, "PUB_DATE")
	_bookAttrCopy1.PUBYEAR = field.NewString(tableName, "PUB_YEAR")
	_bookAttrCopy1.SERIRLFLAG = field.NewString(tableName, "SERIRL_FLAG")
	_bookAttrCopy1.PARTITIONER = field.NewString(tableName, "PARTITIONER")
	_bookAttrCopy1.VERSION = field.NewString(tableName, "VERSION")
	_bookAttrCopy1.SERIES = field.NewString(tableName, "SERIES")
	_bookAttrCopy1.POSTISSUE = field.NewString(tableName, "POST_ISSUE_")
	_bookAttrCopy1.CNNO = field.NewString(tableName, "CN_NO")

	_bookAttrCopy1.fillFieldMap()

	return _bookAttrCopy1
}

type bookAttrCopy1 struct {
	bookAttrCopy1Do bookAttrCopy1Do

	ALL         field.Asterisk
	RECORDID    field.Int64
	CALLNO      field.String
	TITLE       field.String
	TITLES      field.String
	ISBN13      field.String
	ISBN10      field.String
	ISBN        field.String
	AUTHOR      field.String
	PUBLISHER   field.String
	PUBDATE     field.String
	PUBYEAR     field.String
	SERIRLFLAG  field.String
	PARTITIONER field.String
	VERSION     field.String
	SERIES      field.String
	POSTISSUE   field.String
	CNNO        field.String

	fieldMap map[string]field.Expr
}

func (b bookAttrCopy1) Table(newTableName string) *bookAttrCopy1 {
	b.bookAttrCopy1Do.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bookAttrCopy1) As(alias string) *bookAttrCopy1 {
	b.bookAttrCopy1Do.DO = *(b.bookAttrCopy1Do.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bookAttrCopy1) updateTableName(table string) *bookAttrCopy1 {
	b.ALL = field.NewAsterisk(table)
	b.RECORDID = field.NewInt64(table, "RECORD_ID")
	b.CALLNO = field.NewString(table, "CALL_NO")
	b.TITLE = field.NewString(table, "TITLE")
	b.TITLES = field.NewString(table, "TITLE_S")
	b.ISBN13 = field.NewString(table, "ISBN13")
	b.ISBN10 = field.NewString(table, "ISBN10")
	b.ISBN = field.NewString(table, "ISBN")
	b.AUTHOR = field.NewString(table, "AUTHOR")
	b.PUBLISHER = field.NewString(table, "PUBLISHER")
	b.PUBDATE = field.NewString(table, "PUB_DATE")
	b.PUBYEAR = field.NewString(table, "PUB_YEAR")
	b.SERIRLFLAG = field.NewString(table, "SERIRL_FLAG")
	b.PARTITIONER = field.NewString(table, "PARTITIONER")
	b.VERSION = field.NewString(table, "VERSION")
	b.SERIES = field.NewString(table, "SERIES")
	b.POSTISSUE = field.NewString(table, "POST_ISSUE_")
	b.CNNO = field.NewString(table, "CN_NO")

	b.fillFieldMap()

	return b
}

func (b *bookAttrCopy1) WithContext(ctx context.Context) IBookAttrCopy1Do {
	return b.bookAttrCopy1Do.WithContext(ctx)
}

func (b bookAttrCopy1) TableName() string { return b.bookAttrCopy1Do.TableName() }

func (b bookAttrCopy1) Alias() string { return b.bookAttrCopy1Do.Alias() }

func (b *bookAttrCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bookAttrCopy1) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 17)
	b.fieldMap["RECORD_ID"] = b.RECORDID
	b.fieldMap["CALL_NO"] = b.CALLNO
	b.fieldMap["TITLE"] = b.TITLE
	b.fieldMap["TITLE_S"] = b.TITLES
	b.fieldMap["ISBN13"] = b.ISBN13
	b.fieldMap["ISBN10"] = b.ISBN10
	b.fieldMap["ISBN"] = b.ISBN
	b.fieldMap["AUTHOR"] = b.AUTHOR
	b.fieldMap["PUBLISHER"] = b.PUBLISHER
	b.fieldMap["PUB_DATE"] = b.PUBDATE
	b.fieldMap["PUB_YEAR"] = b.PUBYEAR
	b.fieldMap["SERIRL_FLAG"] = b.SERIRLFLAG
	b.fieldMap["PARTITIONER"] = b.PARTITIONER
	b.fieldMap["VERSION"] = b.VERSION
	b.fieldMap["SERIES"] = b.SERIES
	b.fieldMap["POST_ISSUE_"] = b.POSTISSUE
	b.fieldMap["CN_NO"] = b.CNNO
}

func (b bookAttrCopy1) clone(db *gorm.DB) bookAttrCopy1 {
	b.bookAttrCopy1Do.ReplaceDB(db)
	return b
}

type bookAttrCopy1Do struct{ gen.DO }

type IBookAttrCopy1Do interface {
	gen.SubQuery
	Debug() IBookAttrCopy1Do
	WithContext(ctx context.Context) IBookAttrCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBookAttrCopy1Do
	Not(conds ...gen.Condition) IBookAttrCopy1Do
	Or(conds ...gen.Condition) IBookAttrCopy1Do
	Select(conds ...field.Expr) IBookAttrCopy1Do
	Where(conds ...gen.Condition) IBookAttrCopy1Do
	Order(conds ...field.Expr) IBookAttrCopy1Do
	Distinct(cols ...field.Expr) IBookAttrCopy1Do
	Omit(cols ...field.Expr) IBookAttrCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IBookAttrCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IBookAttrCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IBookAttrCopy1Do
	Group(cols ...field.Expr) IBookAttrCopy1Do
	Having(conds ...gen.Condition) IBookAttrCopy1Do
	Limit(limit int) IBookAttrCopy1Do
	Offset(offset int) IBookAttrCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBookAttrCopy1Do
	Unscoped() IBookAttrCopy1Do
	Create(values ...*model.BookAttrCopy1) error
	CreateInBatches(values []*model.BookAttrCopy1, batchSize int) error
	Save(values ...*model.BookAttrCopy1) error
	First() (*model.BookAttrCopy1, error)
	Take() (*model.BookAttrCopy1, error)
	Last() (*model.BookAttrCopy1, error)
	Find() ([]*model.BookAttrCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookAttrCopy1, err error)
	FindInBatches(result *[]*model.BookAttrCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BookAttrCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBookAttrCopy1Do
	Assign(attrs ...field.AssignExpr) IBookAttrCopy1Do
	Joins(fields ...field.RelationField) IBookAttrCopy1Do
	Preload(fields ...field.RelationField) IBookAttrCopy1Do
	FirstOrInit() (*model.BookAttrCopy1, error)
	FirstOrCreate() (*model.BookAttrCopy1, error)
	FindByPage(offset int, limit int) (result []*model.BookAttrCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBookAttrCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bookAttrCopy1Do) Debug() IBookAttrCopy1Do {
	return b.withDO(b.DO.Debug())
}

func (b bookAttrCopy1Do) WithContext(ctx context.Context) IBookAttrCopy1Do {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookAttrCopy1Do) ReadDB() IBookAttrCopy1Do {
	return b.Clauses(dbresolver.Read)
}

func (b bookAttrCopy1Do) WriteDB() IBookAttrCopy1Do {
	return b.Clauses(dbresolver.Write)
}

func (b bookAttrCopy1Do) Clauses(conds ...clause.Expression) IBookAttrCopy1Do {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookAttrCopy1Do) Returning(value interface{}, columns ...string) IBookAttrCopy1Do {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookAttrCopy1Do) Not(conds ...gen.Condition) IBookAttrCopy1Do {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookAttrCopy1Do) Or(conds ...gen.Condition) IBookAttrCopy1Do {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookAttrCopy1Do) Select(conds ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookAttrCopy1Do) Where(conds ...gen.Condition) IBookAttrCopy1Do {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookAttrCopy1Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBookAttrCopy1Do {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b bookAttrCopy1Do) Order(conds ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookAttrCopy1Do) Distinct(cols ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookAttrCopy1Do) Omit(cols ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookAttrCopy1Do) Join(table schema.Tabler, on ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookAttrCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookAttrCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookAttrCopy1Do) Group(cols ...field.Expr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookAttrCopy1Do) Having(conds ...gen.Condition) IBookAttrCopy1Do {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookAttrCopy1Do) Limit(limit int) IBookAttrCopy1Do {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookAttrCopy1Do) Offset(offset int) IBookAttrCopy1Do {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookAttrCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IBookAttrCopy1Do {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookAttrCopy1Do) Unscoped() IBookAttrCopy1Do {
	return b.withDO(b.DO.Unscoped())
}

func (b bookAttrCopy1Do) Create(values ...*model.BookAttrCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookAttrCopy1Do) CreateInBatches(values []*model.BookAttrCopy1, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookAttrCopy1Do) Save(values ...*model.BookAttrCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookAttrCopy1Do) First() (*model.BookAttrCopy1, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookAttrCopy1), nil
	}
}

func (b bookAttrCopy1Do) Take() (*model.BookAttrCopy1, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookAttrCopy1), nil
	}
}

func (b bookAttrCopy1Do) Last() (*model.BookAttrCopy1, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookAttrCopy1), nil
	}
}

func (b bookAttrCopy1Do) Find() ([]*model.BookAttrCopy1, error) {
	result, err := b.DO.Find()
	return result.([]*model.BookAttrCopy1), err
}

func (b bookAttrCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookAttrCopy1, err error) {
	buf := make([]*model.BookAttrCopy1, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookAttrCopy1Do) FindInBatches(result *[]*model.BookAttrCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookAttrCopy1Do) Attrs(attrs ...field.AssignExpr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookAttrCopy1Do) Assign(attrs ...field.AssignExpr) IBookAttrCopy1Do {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookAttrCopy1Do) Joins(fields ...field.RelationField) IBookAttrCopy1Do {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookAttrCopy1Do) Preload(fields ...field.RelationField) IBookAttrCopy1Do {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookAttrCopy1Do) FirstOrInit() (*model.BookAttrCopy1, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookAttrCopy1), nil
	}
}

func (b bookAttrCopy1Do) FirstOrCreate() (*model.BookAttrCopy1, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookAttrCopy1), nil
	}
}

func (b bookAttrCopy1Do) FindByPage(offset int, limit int) (result []*model.BookAttrCopy1, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookAttrCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookAttrCopy1Do) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookAttrCopy1Do) Delete(models ...*model.BookAttrCopy1) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookAttrCopy1Do) withDO(do gen.Dao) *bookAttrCopy1Do {
	b.DO = *do.(*gen.DO)
	return b
}
