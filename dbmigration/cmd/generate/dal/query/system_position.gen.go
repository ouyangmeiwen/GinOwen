// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemPosition(db *gorm.DB) systemPosition {
	_systemPosition := systemPosition{}

	_systemPosition.systemPositionDo.UseDB(db)
	_systemPosition.systemPositionDo.UseModel(&model.SystemPosition{})

	tableName := _systemPosition.systemPositionDo.TableName()
	_systemPosition.ALL = field.NewAsterisk(tableName)
	_systemPosition.ID = field.NewInt64(tableName, "id")
	_systemPosition.CreateTime = field.NewTime(tableName, "create_time")
	_systemPosition.UpdateTime = field.NewTime(tableName, "update_time")
	_systemPosition.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemPosition.Name = field.NewString(tableName, "name")
	_systemPosition.Description = field.NewString(tableName, "description")

	_systemPosition.fillFieldMap()

	return _systemPosition
}

type systemPosition struct {
	systemPositionDo systemPositionDo

	ALL         field.Asterisk
	ID          field.Int64
	CreateTime  field.Time
	UpdateTime  field.Time
	IsDeleted   field.Int64
	Name        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (s systemPosition) Table(newTableName string) *systemPosition {
	s.systemPositionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemPosition) As(alias string) *systemPosition {
	s.systemPositionDo.DO = *(s.systemPositionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemPosition) updateTableName(table string) *systemPosition {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewString(table, "description")

	s.fillFieldMap()

	return s
}

func (s *systemPosition) WithContext(ctx context.Context) ISystemPositionDo {
	return s.systemPositionDo.WithContext(ctx)
}

func (s systemPosition) TableName() string { return s.systemPositionDo.TableName() }

func (s systemPosition) Alias() string { return s.systemPositionDo.Alias() }

func (s *systemPosition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemPosition) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
}

func (s systemPosition) clone(db *gorm.DB) systemPosition {
	s.systemPositionDo.ReplaceDB(db)
	return s
}

type systemPositionDo struct{ gen.DO }

type ISystemPositionDo interface {
	gen.SubQuery
	Debug() ISystemPositionDo
	WithContext(ctx context.Context) ISystemPositionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemPositionDo
	Not(conds ...gen.Condition) ISystemPositionDo
	Or(conds ...gen.Condition) ISystemPositionDo
	Select(conds ...field.Expr) ISystemPositionDo
	Where(conds ...gen.Condition) ISystemPositionDo
	Order(conds ...field.Expr) ISystemPositionDo
	Distinct(cols ...field.Expr) ISystemPositionDo
	Omit(cols ...field.Expr) ISystemPositionDo
	Join(table schema.Tabler, on ...field.Expr) ISystemPositionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemPositionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemPositionDo
	Group(cols ...field.Expr) ISystemPositionDo
	Having(conds ...gen.Condition) ISystemPositionDo
	Limit(limit int) ISystemPositionDo
	Offset(offset int) ISystemPositionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemPositionDo
	Unscoped() ISystemPositionDo
	Create(values ...*model.SystemPosition) error
	CreateInBatches(values []*model.SystemPosition, batchSize int) error
	Save(values ...*model.SystemPosition) error
	First() (*model.SystemPosition, error)
	Take() (*model.SystemPosition, error)
	Last() (*model.SystemPosition, error)
	Find() ([]*model.SystemPosition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemPosition, err error)
	FindInBatches(result *[]*model.SystemPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemPosition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemPositionDo
	Assign(attrs ...field.AssignExpr) ISystemPositionDo
	Joins(fields ...field.RelationField) ISystemPositionDo
	Preload(fields ...field.RelationField) ISystemPositionDo
	FirstOrInit() (*model.SystemPosition, error)
	FirstOrCreate() (*model.SystemPosition, error)
	FindByPage(offset int, limit int) (result []*model.SystemPosition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemPositionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemPositionDo) Debug() ISystemPositionDo {
	return s.withDO(s.DO.Debug())
}

func (s systemPositionDo) WithContext(ctx context.Context) ISystemPositionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemPositionDo) ReadDB() ISystemPositionDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemPositionDo) WriteDB() ISystemPositionDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemPositionDo) Clauses(conds ...clause.Expression) ISystemPositionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemPositionDo) Returning(value interface{}, columns ...string) ISystemPositionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemPositionDo) Not(conds ...gen.Condition) ISystemPositionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemPositionDo) Or(conds ...gen.Condition) ISystemPositionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemPositionDo) Select(conds ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemPositionDo) Where(conds ...gen.Condition) ISystemPositionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemPositionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemPositionDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemPositionDo) Order(conds ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemPositionDo) Distinct(cols ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemPositionDo) Omit(cols ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemPositionDo) Join(table schema.Tabler, on ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemPositionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemPositionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemPositionDo) Group(cols ...field.Expr) ISystemPositionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemPositionDo) Having(conds ...gen.Condition) ISystemPositionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemPositionDo) Limit(limit int) ISystemPositionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemPositionDo) Offset(offset int) ISystemPositionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemPositionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemPositionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemPositionDo) Unscoped() ISystemPositionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemPositionDo) Create(values ...*model.SystemPosition) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemPositionDo) CreateInBatches(values []*model.SystemPosition, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemPositionDo) Save(values ...*model.SystemPosition) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemPositionDo) First() (*model.SystemPosition, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPosition), nil
	}
}

func (s systemPositionDo) Take() (*model.SystemPosition, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPosition), nil
	}
}

func (s systemPositionDo) Last() (*model.SystemPosition, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPosition), nil
	}
}

func (s systemPositionDo) Find() ([]*model.SystemPosition, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemPosition), err
}

func (s systemPositionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemPosition, err error) {
	buf := make([]*model.SystemPosition, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemPositionDo) FindInBatches(result *[]*model.SystemPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemPositionDo) Attrs(attrs ...field.AssignExpr) ISystemPositionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemPositionDo) Assign(attrs ...field.AssignExpr) ISystemPositionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemPositionDo) Joins(fields ...field.RelationField) ISystemPositionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemPositionDo) Preload(fields ...field.RelationField) ISystemPositionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemPositionDo) FirstOrInit() (*model.SystemPosition, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPosition), nil
	}
}

func (s systemPositionDo) FirstOrCreate() (*model.SystemPosition, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPosition), nil
	}
}

func (s systemPositionDo) FindByPage(offset int, limit int) (result []*model.SystemPosition, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemPositionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemPositionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemPositionDo) Delete(models ...*model.SystemPosition) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemPositionDo) withDO(do gen.Dao) *systemPositionDo {
	s.DO = *do.(*gen.DO)
	return s
}
