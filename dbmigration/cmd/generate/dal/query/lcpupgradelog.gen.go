// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLcpupgradelog(db *gorm.DB) lcpupgradelog {
	_lcpupgradelog := lcpupgradelog{}

	_lcpupgradelog.lcpupgradelogDo.UseDB(db)
	_lcpupgradelog.lcpupgradelogDo.UseModel(&model.Lcpupgradelog{})

	tableName := _lcpupgradelog.lcpupgradelogDo.TableName()
	_lcpupgradelog.ALL = field.NewAsterisk(tableName)
	_lcpupgradelog.ID = field.NewString(tableName, "Id")
	_lcpupgradelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpupgradelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpupgradelog.OldVersionCode = field.NewInt64(tableName, "OldVersionCode")
	_lcpupgradelog.OldVersionName = field.NewString(tableName, "OldVersionName")
	_lcpupgradelog.UpgradeVersionID = field.NewString(tableName, "UpgradeVersionId")
	_lcpupgradelog.UpgradeVersionCode = field.NewInt64(tableName, "UpgradeVersionCode")
	_lcpupgradelog.UpgradeVersionName = field.NewString(tableName, "UpgradeVersionName")
	_lcpupgradelog.TargetType = field.NewString(tableName, "TargetType")
	_lcpupgradelog.TargetID = field.NewString(tableName, "TargetId")
	_lcpupgradelog.TargetCode = field.NewString(tableName, "TargetCode")
	_lcpupgradelog.TargetName = field.NewString(tableName, "TargetName")
	_lcpupgradelog.Remark = field.NewString(tableName, "Remark")
	_lcpupgradelog.Result = field.NewInt64(tableName, "Result")
	_lcpupgradelog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpupgradelog.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpupgradelog.fillFieldMap()

	return _lcpupgradelog
}

type lcpupgradelog struct {
	lcpupgradelogDo lcpupgradelogDo

	ALL                field.Asterisk
	ID                 field.String
	CreationTime       field.Time
	CreatorUserID      field.Int64
	OldVersionCode     field.Int64
	OldVersionName     field.String
	UpgradeVersionID   field.String
	UpgradeVersionCode field.Int64
	UpgradeVersionName field.String
	TargetType         field.String
	TargetID           field.String
	TargetCode         field.String
	TargetName         field.String
	Remark             field.String
	Result             field.Int64
	ErrorMessage       field.String
	TenantID           field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpupgradelog) Table(newTableName string) *lcpupgradelog {
	l.lcpupgradelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpupgradelog) As(alias string) *lcpupgradelog {
	l.lcpupgradelogDo.DO = *(l.lcpupgradelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpupgradelog) updateTableName(table string) *lcpupgradelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.OldVersionCode = field.NewInt64(table, "OldVersionCode")
	l.OldVersionName = field.NewString(table, "OldVersionName")
	l.UpgradeVersionID = field.NewString(table, "UpgradeVersionId")
	l.UpgradeVersionCode = field.NewInt64(table, "UpgradeVersionCode")
	l.UpgradeVersionName = field.NewString(table, "UpgradeVersionName")
	l.TargetType = field.NewString(table, "TargetType")
	l.TargetID = field.NewString(table, "TargetId")
	l.TargetCode = field.NewString(table, "TargetCode")
	l.TargetName = field.NewString(table, "TargetName")
	l.Remark = field.NewString(table, "Remark")
	l.Result = field.NewInt64(table, "Result")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpupgradelog) WithContext(ctx context.Context) ILcpupgradelogDo {
	return l.lcpupgradelogDo.WithContext(ctx)
}

func (l lcpupgradelog) TableName() string { return l.lcpupgradelogDo.TableName() }

func (l lcpupgradelog) Alias() string { return l.lcpupgradelogDo.Alias() }

func (l *lcpupgradelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpupgradelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 16)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["OldVersionCode"] = l.OldVersionCode
	l.fieldMap["OldVersionName"] = l.OldVersionName
	l.fieldMap["UpgradeVersionId"] = l.UpgradeVersionID
	l.fieldMap["UpgradeVersionCode"] = l.UpgradeVersionCode
	l.fieldMap["UpgradeVersionName"] = l.UpgradeVersionName
	l.fieldMap["TargetType"] = l.TargetType
	l.fieldMap["TargetId"] = l.TargetID
	l.fieldMap["TargetCode"] = l.TargetCode
	l.fieldMap["TargetName"] = l.TargetName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["Result"] = l.Result
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpupgradelog) clone(db *gorm.DB) lcpupgradelog {
	l.lcpupgradelogDo.ReplaceDB(db)
	return l
}

type lcpupgradelogDo struct{ gen.DO }

type ILcpupgradelogDo interface {
	gen.SubQuery
	Debug() ILcpupgradelogDo
	WithContext(ctx context.Context) ILcpupgradelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpupgradelogDo
	Not(conds ...gen.Condition) ILcpupgradelogDo
	Or(conds ...gen.Condition) ILcpupgradelogDo
	Select(conds ...field.Expr) ILcpupgradelogDo
	Where(conds ...gen.Condition) ILcpupgradelogDo
	Order(conds ...field.Expr) ILcpupgradelogDo
	Distinct(cols ...field.Expr) ILcpupgradelogDo
	Omit(cols ...field.Expr) ILcpupgradelogDo
	Join(table schema.Tabler, on ...field.Expr) ILcpupgradelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpupgradelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpupgradelogDo
	Group(cols ...field.Expr) ILcpupgradelogDo
	Having(conds ...gen.Condition) ILcpupgradelogDo
	Limit(limit int) ILcpupgradelogDo
	Offset(offset int) ILcpupgradelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpupgradelogDo
	Unscoped() ILcpupgradelogDo
	Create(values ...*model.Lcpupgradelog) error
	CreateInBatches(values []*model.Lcpupgradelog, batchSize int) error
	Save(values ...*model.Lcpupgradelog) error
	First() (*model.Lcpupgradelog, error)
	Take() (*model.Lcpupgradelog, error)
	Last() (*model.Lcpupgradelog, error)
	Find() ([]*model.Lcpupgradelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpupgradelog, err error)
	FindInBatches(result *[]*model.Lcpupgradelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpupgradelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpupgradelogDo
	Assign(attrs ...field.AssignExpr) ILcpupgradelogDo
	Joins(fields ...field.RelationField) ILcpupgradelogDo
	Preload(fields ...field.RelationField) ILcpupgradelogDo
	FirstOrInit() (*model.Lcpupgradelog, error)
	FirstOrCreate() (*model.Lcpupgradelog, error)
	FindByPage(offset int, limit int) (result []*model.Lcpupgradelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpupgradelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpupgradelogDo) Debug() ILcpupgradelogDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpupgradelogDo) WithContext(ctx context.Context) ILcpupgradelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpupgradelogDo) ReadDB() ILcpupgradelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpupgradelogDo) WriteDB() ILcpupgradelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpupgradelogDo) Clauses(conds ...clause.Expression) ILcpupgradelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpupgradelogDo) Returning(value interface{}, columns ...string) ILcpupgradelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpupgradelogDo) Not(conds ...gen.Condition) ILcpupgradelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpupgradelogDo) Or(conds ...gen.Condition) ILcpupgradelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpupgradelogDo) Select(conds ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpupgradelogDo) Where(conds ...gen.Condition) ILcpupgradelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpupgradelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpupgradelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpupgradelogDo) Order(conds ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpupgradelogDo) Distinct(cols ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpupgradelogDo) Omit(cols ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpupgradelogDo) Join(table schema.Tabler, on ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpupgradelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpupgradelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpupgradelogDo) Group(cols ...field.Expr) ILcpupgradelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpupgradelogDo) Having(conds ...gen.Condition) ILcpupgradelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpupgradelogDo) Limit(limit int) ILcpupgradelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpupgradelogDo) Offset(offset int) ILcpupgradelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpupgradelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpupgradelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpupgradelogDo) Unscoped() ILcpupgradelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpupgradelogDo) Create(values ...*model.Lcpupgradelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpupgradelogDo) CreateInBatches(values []*model.Lcpupgradelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpupgradelogDo) Save(values ...*model.Lcpupgradelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpupgradelogDo) First() (*model.Lcpupgradelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpupgradelog), nil
	}
}

func (l lcpupgradelogDo) Take() (*model.Lcpupgradelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpupgradelog), nil
	}
}

func (l lcpupgradelogDo) Last() (*model.Lcpupgradelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpupgradelog), nil
	}
}

func (l lcpupgradelogDo) Find() ([]*model.Lcpupgradelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpupgradelog), err
}

func (l lcpupgradelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpupgradelog, err error) {
	buf := make([]*model.Lcpupgradelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpupgradelogDo) FindInBatches(result *[]*model.Lcpupgradelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpupgradelogDo) Attrs(attrs ...field.AssignExpr) ILcpupgradelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpupgradelogDo) Assign(attrs ...field.AssignExpr) ILcpupgradelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpupgradelogDo) Joins(fields ...field.RelationField) ILcpupgradelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpupgradelogDo) Preload(fields ...field.RelationField) ILcpupgradelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpupgradelogDo) FirstOrInit() (*model.Lcpupgradelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpupgradelog), nil
	}
}

func (l lcpupgradelogDo) FirstOrCreate() (*model.Lcpupgradelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpupgradelog), nil
	}
}

func (l lcpupgradelogDo) FindByPage(offset int, limit int) (result []*model.Lcpupgradelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpupgradelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpupgradelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpupgradelogDo) Delete(models ...*model.Lcpupgradelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpupgradelogDo) withDO(do gen.Dao) *lcpupgradelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
