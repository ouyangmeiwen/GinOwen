// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpentitypropertychange(db *gorm.DB) abpentitypropertychange {
	_abpentitypropertychange := abpentitypropertychange{}

	_abpentitypropertychange.abpentitypropertychangeDo.UseDB(db)
	_abpentitypropertychange.abpentitypropertychangeDo.UseModel(&model.Abpentitypropertychange{})

	tableName := _abpentitypropertychange.abpentitypropertychangeDo.TableName()
	_abpentitypropertychange.ALL = field.NewAsterisk(tableName)
	_abpentitypropertychange.ID = field.NewInt64(tableName, "Id")
	_abpentitypropertychange.EntityChangeID = field.NewInt64(tableName, "EntityChangeId")
	_abpentitypropertychange.NewValue = field.NewString(tableName, "NewValue")
	_abpentitypropertychange.OriginalValue = field.NewString(tableName, "OriginalValue")
	_abpentitypropertychange.PropertyName = field.NewString(tableName, "PropertyName")
	_abpentitypropertychange.PropertyTypeFullName = field.NewString(tableName, "PropertyTypeFullName")
	_abpentitypropertychange.TenantID = field.NewInt64(tableName, "TenantId")

	_abpentitypropertychange.fillFieldMap()

	return _abpentitypropertychange
}

type abpentitypropertychange struct {
	abpentitypropertychangeDo abpentitypropertychangeDo

	ALL                  field.Asterisk
	ID                   field.Int64
	EntityChangeID       field.Int64
	NewValue             field.String
	OriginalValue        field.String
	PropertyName         field.String
	PropertyTypeFullName field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a abpentitypropertychange) Table(newTableName string) *abpentitypropertychange {
	a.abpentitypropertychangeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpentitypropertychange) As(alias string) *abpentitypropertychange {
	a.abpentitypropertychangeDo.DO = *(a.abpentitypropertychangeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpentitypropertychange) updateTableName(table string) *abpentitypropertychange {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.EntityChangeID = field.NewInt64(table, "EntityChangeId")
	a.NewValue = field.NewString(table, "NewValue")
	a.OriginalValue = field.NewString(table, "OriginalValue")
	a.PropertyName = field.NewString(table, "PropertyName")
	a.PropertyTypeFullName = field.NewString(table, "PropertyTypeFullName")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *abpentitypropertychange) WithContext(ctx context.Context) IAbpentitypropertychangeDo {
	return a.abpentitypropertychangeDo.WithContext(ctx)
}

func (a abpentitypropertychange) TableName() string { return a.abpentitypropertychangeDo.TableName() }

func (a abpentitypropertychange) Alias() string { return a.abpentitypropertychangeDo.Alias() }

func (a *abpentitypropertychange) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpentitypropertychange) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["EntityChangeId"] = a.EntityChangeID
	a.fieldMap["NewValue"] = a.NewValue
	a.fieldMap["OriginalValue"] = a.OriginalValue
	a.fieldMap["PropertyName"] = a.PropertyName
	a.fieldMap["PropertyTypeFullName"] = a.PropertyTypeFullName
	a.fieldMap["TenantId"] = a.TenantID
}

func (a abpentitypropertychange) clone(db *gorm.DB) abpentitypropertychange {
	a.abpentitypropertychangeDo.ReplaceDB(db)
	return a
}

type abpentitypropertychangeDo struct{ gen.DO }

type IAbpentitypropertychangeDo interface {
	gen.SubQuery
	Debug() IAbpentitypropertychangeDo
	WithContext(ctx context.Context) IAbpentitypropertychangeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpentitypropertychangeDo
	Not(conds ...gen.Condition) IAbpentitypropertychangeDo
	Or(conds ...gen.Condition) IAbpentitypropertychangeDo
	Select(conds ...field.Expr) IAbpentitypropertychangeDo
	Where(conds ...gen.Condition) IAbpentitypropertychangeDo
	Order(conds ...field.Expr) IAbpentitypropertychangeDo
	Distinct(cols ...field.Expr) IAbpentitypropertychangeDo
	Omit(cols ...field.Expr) IAbpentitypropertychangeDo
	Join(table schema.Tabler, on ...field.Expr) IAbpentitypropertychangeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpentitypropertychangeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpentitypropertychangeDo
	Group(cols ...field.Expr) IAbpentitypropertychangeDo
	Having(conds ...gen.Condition) IAbpentitypropertychangeDo
	Limit(limit int) IAbpentitypropertychangeDo
	Offset(offset int) IAbpentitypropertychangeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpentitypropertychangeDo
	Unscoped() IAbpentitypropertychangeDo
	Create(values ...*model.Abpentitypropertychange) error
	CreateInBatches(values []*model.Abpentitypropertychange, batchSize int) error
	Save(values ...*model.Abpentitypropertychange) error
	First() (*model.Abpentitypropertychange, error)
	Take() (*model.Abpentitypropertychange, error)
	Last() (*model.Abpentitypropertychange, error)
	Find() ([]*model.Abpentitypropertychange, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpentitypropertychange, err error)
	FindInBatches(result *[]*model.Abpentitypropertychange, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpentitypropertychange) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpentitypropertychangeDo
	Assign(attrs ...field.AssignExpr) IAbpentitypropertychangeDo
	Joins(fields ...field.RelationField) IAbpentitypropertychangeDo
	Preload(fields ...field.RelationField) IAbpentitypropertychangeDo
	FirstOrInit() (*model.Abpentitypropertychange, error)
	FirstOrCreate() (*model.Abpentitypropertychange, error)
	FindByPage(offset int, limit int) (result []*model.Abpentitypropertychange, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpentitypropertychangeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpentitypropertychangeDo) Debug() IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Debug())
}

func (a abpentitypropertychangeDo) WithContext(ctx context.Context) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpentitypropertychangeDo) ReadDB() IAbpentitypropertychangeDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpentitypropertychangeDo) WriteDB() IAbpentitypropertychangeDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpentitypropertychangeDo) Clauses(conds ...clause.Expression) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpentitypropertychangeDo) Returning(value interface{}, columns ...string) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpentitypropertychangeDo) Not(conds ...gen.Condition) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpentitypropertychangeDo) Or(conds ...gen.Condition) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpentitypropertychangeDo) Select(conds ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpentitypropertychangeDo) Where(conds ...gen.Condition) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpentitypropertychangeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpentitypropertychangeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpentitypropertychangeDo) Order(conds ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpentitypropertychangeDo) Distinct(cols ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpentitypropertychangeDo) Omit(cols ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpentitypropertychangeDo) Join(table schema.Tabler, on ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpentitypropertychangeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpentitypropertychangeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpentitypropertychangeDo) Group(cols ...field.Expr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpentitypropertychangeDo) Having(conds ...gen.Condition) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpentitypropertychangeDo) Limit(limit int) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpentitypropertychangeDo) Offset(offset int) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpentitypropertychangeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpentitypropertychangeDo) Unscoped() IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpentitypropertychangeDo) Create(values ...*model.Abpentitypropertychange) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpentitypropertychangeDo) CreateInBatches(values []*model.Abpentitypropertychange, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpentitypropertychangeDo) Save(values ...*model.Abpentitypropertychange) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpentitypropertychangeDo) First() (*model.Abpentitypropertychange, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitypropertychange), nil
	}
}

func (a abpentitypropertychangeDo) Take() (*model.Abpentitypropertychange, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitypropertychange), nil
	}
}

func (a abpentitypropertychangeDo) Last() (*model.Abpentitypropertychange, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitypropertychange), nil
	}
}

func (a abpentitypropertychangeDo) Find() ([]*model.Abpentitypropertychange, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpentitypropertychange), err
}

func (a abpentitypropertychangeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpentitypropertychange, err error) {
	buf := make([]*model.Abpentitypropertychange, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpentitypropertychangeDo) FindInBatches(result *[]*model.Abpentitypropertychange, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpentitypropertychangeDo) Attrs(attrs ...field.AssignExpr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpentitypropertychangeDo) Assign(attrs ...field.AssignExpr) IAbpentitypropertychangeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpentitypropertychangeDo) Joins(fields ...field.RelationField) IAbpentitypropertychangeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpentitypropertychangeDo) Preload(fields ...field.RelationField) IAbpentitypropertychangeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpentitypropertychangeDo) FirstOrInit() (*model.Abpentitypropertychange, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitypropertychange), nil
	}
}

func (a abpentitypropertychangeDo) FirstOrCreate() (*model.Abpentitypropertychange, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitypropertychange), nil
	}
}

func (a abpentitypropertychangeDo) FindByPage(offset int, limit int) (result []*model.Abpentitypropertychange, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpentitypropertychangeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpentitypropertychangeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpentitypropertychangeDo) Delete(models ...*model.Abpentitypropertychange) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpentitypropertychangeDo) withDO(do gen.Dao) *abpentitypropertychangeDo {
	a.DO = *do.(*gen.DO)
	return a
}
