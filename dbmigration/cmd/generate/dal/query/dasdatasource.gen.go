// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDasdatasource(db *gorm.DB) dasdatasource {
	_dasdatasource := dasdatasource{}

	_dasdatasource.dasdatasourceDo.UseDB(db)
	_dasdatasource.dasdatasourceDo.UseModel(&model.Dasdatasource{})

	tableName := _dasdatasource.dasdatasourceDo.TableName()
	_dasdatasource.ALL = field.NewAsterisk(tableName)
	_dasdatasource.ID = field.NewString(tableName, "Id")
	_dasdatasource.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasdatasource.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasdatasource.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_dasdatasource.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_dasdatasource.IsDeleted = field.NewField(tableName, "IsDeleted")
	_dasdatasource.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_dasdatasource.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_dasdatasource.Code = field.NewString(tableName, "Code")
	_dasdatasource.Name = field.NewString(tableName, "Name")
	_dasdatasource.DbLinkID = field.NewString(tableName, "DbLinkId")
	_dasdatasource.Sql = field.NewString(tableName, "Sql")
	_dasdatasource.Remark = field.NewString(tableName, "Remark")

	_dasdatasource.fillFieldMap()

	return _dasdatasource
}

type dasdatasource struct {
	dasdatasourceDo dasdatasourceDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	DbLinkID             field.String
	Sql                  field.String
	Remark               field.String

	fieldMap map[string]field.Expr
}

func (d dasdatasource) Table(newTableName string) *dasdatasource {
	d.dasdatasourceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasdatasource) As(alias string) *dasdatasource {
	d.dasdatasourceDo.DO = *(d.dasdatasourceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasdatasource) updateTableName(table string) *dasdatasource {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.LastModificationTime = field.NewTime(table, "LastModificationTime")
	d.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	d.IsDeleted = field.NewField(table, "IsDeleted")
	d.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	d.DeletionTime = field.NewTime(table, "DeletionTime")
	d.Code = field.NewString(table, "Code")
	d.Name = field.NewString(table, "Name")
	d.DbLinkID = field.NewString(table, "DbLinkId")
	d.Sql = field.NewString(table, "Sql")
	d.Remark = field.NewString(table, "Remark")

	d.fillFieldMap()

	return d
}

func (d *dasdatasource) WithContext(ctx context.Context) IDasdatasourceDo {
	return d.dasdatasourceDo.WithContext(ctx)
}

func (d dasdatasource) TableName() string { return d.dasdatasourceDo.TableName() }

func (d dasdatasource) Alias() string { return d.dasdatasourceDo.Alias() }

func (d *dasdatasource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasdatasource) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["LastModificationTime"] = d.LastModificationTime
	d.fieldMap["LastModifierUserId"] = d.LastModifierUserID
	d.fieldMap["IsDeleted"] = d.IsDeleted
	d.fieldMap["DeleterUserId"] = d.DeleterUserID
	d.fieldMap["DeletionTime"] = d.DeletionTime
	d.fieldMap["Code"] = d.Code
	d.fieldMap["Name"] = d.Name
	d.fieldMap["DbLinkId"] = d.DbLinkID
	d.fieldMap["Sql"] = d.Sql
	d.fieldMap["Remark"] = d.Remark
}

func (d dasdatasource) clone(db *gorm.DB) dasdatasource {
	d.dasdatasourceDo.ReplaceDB(db)
	return d
}

type dasdatasourceDo struct{ gen.DO }

type IDasdatasourceDo interface {
	gen.SubQuery
	Debug() IDasdatasourceDo
	WithContext(ctx context.Context) IDasdatasourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasdatasourceDo
	Not(conds ...gen.Condition) IDasdatasourceDo
	Or(conds ...gen.Condition) IDasdatasourceDo
	Select(conds ...field.Expr) IDasdatasourceDo
	Where(conds ...gen.Condition) IDasdatasourceDo
	Order(conds ...field.Expr) IDasdatasourceDo
	Distinct(cols ...field.Expr) IDasdatasourceDo
	Omit(cols ...field.Expr) IDasdatasourceDo
	Join(table schema.Tabler, on ...field.Expr) IDasdatasourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasdatasourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasdatasourceDo
	Group(cols ...field.Expr) IDasdatasourceDo
	Having(conds ...gen.Condition) IDasdatasourceDo
	Limit(limit int) IDasdatasourceDo
	Offset(offset int) IDasdatasourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasdatasourceDo
	Unscoped() IDasdatasourceDo
	Create(values ...*model.Dasdatasource) error
	CreateInBatches(values []*model.Dasdatasource, batchSize int) error
	Save(values ...*model.Dasdatasource) error
	First() (*model.Dasdatasource, error)
	Take() (*model.Dasdatasource, error)
	Last() (*model.Dasdatasource, error)
	Find() ([]*model.Dasdatasource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasdatasource, err error)
	FindInBatches(result *[]*model.Dasdatasource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasdatasource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasdatasourceDo
	Assign(attrs ...field.AssignExpr) IDasdatasourceDo
	Joins(fields ...field.RelationField) IDasdatasourceDo
	Preload(fields ...field.RelationField) IDasdatasourceDo
	FirstOrInit() (*model.Dasdatasource, error)
	FirstOrCreate() (*model.Dasdatasource, error)
	FindByPage(offset int, limit int) (result []*model.Dasdatasource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasdatasourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasdatasourceDo) Debug() IDasdatasourceDo {
	return d.withDO(d.DO.Debug())
}

func (d dasdatasourceDo) WithContext(ctx context.Context) IDasdatasourceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasdatasourceDo) ReadDB() IDasdatasourceDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasdatasourceDo) WriteDB() IDasdatasourceDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasdatasourceDo) Clauses(conds ...clause.Expression) IDasdatasourceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasdatasourceDo) Returning(value interface{}, columns ...string) IDasdatasourceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasdatasourceDo) Not(conds ...gen.Condition) IDasdatasourceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasdatasourceDo) Or(conds ...gen.Condition) IDasdatasourceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasdatasourceDo) Select(conds ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasdatasourceDo) Where(conds ...gen.Condition) IDasdatasourceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasdatasourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasdatasourceDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasdatasourceDo) Order(conds ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasdatasourceDo) Distinct(cols ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasdatasourceDo) Omit(cols ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasdatasourceDo) Join(table schema.Tabler, on ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasdatasourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasdatasourceDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasdatasourceDo) Group(cols ...field.Expr) IDasdatasourceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasdatasourceDo) Having(conds ...gen.Condition) IDasdatasourceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasdatasourceDo) Limit(limit int) IDasdatasourceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasdatasourceDo) Offset(offset int) IDasdatasourceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasdatasourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasdatasourceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasdatasourceDo) Unscoped() IDasdatasourceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasdatasourceDo) Create(values ...*model.Dasdatasource) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasdatasourceDo) CreateInBatches(values []*model.Dasdatasource, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasdatasourceDo) Save(values ...*model.Dasdatasource) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasdatasourceDo) First() (*model.Dasdatasource, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatasource), nil
	}
}

func (d dasdatasourceDo) Take() (*model.Dasdatasource, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatasource), nil
	}
}

func (d dasdatasourceDo) Last() (*model.Dasdatasource, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatasource), nil
	}
}

func (d dasdatasourceDo) Find() ([]*model.Dasdatasource, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasdatasource), err
}

func (d dasdatasourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasdatasource, err error) {
	buf := make([]*model.Dasdatasource, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasdatasourceDo) FindInBatches(result *[]*model.Dasdatasource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasdatasourceDo) Attrs(attrs ...field.AssignExpr) IDasdatasourceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasdatasourceDo) Assign(attrs ...field.AssignExpr) IDasdatasourceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasdatasourceDo) Joins(fields ...field.RelationField) IDasdatasourceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasdatasourceDo) Preload(fields ...field.RelationField) IDasdatasourceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasdatasourceDo) FirstOrInit() (*model.Dasdatasource, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatasource), nil
	}
}

func (d dasdatasourceDo) FirstOrCreate() (*model.Dasdatasource, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasdatasource), nil
	}
}

func (d dasdatasourceDo) FindByPage(offset int, limit int) (result []*model.Dasdatasource, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasdatasourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasdatasourceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasdatasourceDo) Delete(models ...*model.Dasdatasource) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasdatasourceDo) withDO(do gen.Dao) *dasdatasourceDo {
	d.DO = *do.(*gen.DO)
	return d
}
