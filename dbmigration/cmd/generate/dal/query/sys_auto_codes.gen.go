// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysAutoCode(db *gorm.DB) sysAutoCode {
	_sysAutoCode := sysAutoCode{}

	_sysAutoCode.sysAutoCodeDo.UseDB(db)
	_sysAutoCode.sysAutoCodeDo.UseModel(&model.SysAutoCode{})

	tableName := _sysAutoCode.sysAutoCodeDo.TableName()
	_sysAutoCode.ALL = field.NewAsterisk(tableName)
	_sysAutoCode.ID = field.NewInt64(tableName, "id")
	_sysAutoCode.CreatedAt = field.NewTime(tableName, "created_at")
	_sysAutoCode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysAutoCode.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysAutoCode.PackageName = field.NewString(tableName, "package_name")
	_sysAutoCode.Label = field.NewString(tableName, "label")
	_sysAutoCode.Desc = field.NewString(tableName, "desc")

	_sysAutoCode.fillFieldMap()

	return _sysAutoCode
}

type sysAutoCode struct {
	sysAutoCodeDo sysAutoCodeDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	PackageName field.String // 包名
	Label       field.String // 展示名
	Desc        field.String // 描述

	fieldMap map[string]field.Expr
}

func (s sysAutoCode) Table(newTableName string) *sysAutoCode {
	s.sysAutoCodeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysAutoCode) As(alias string) *sysAutoCode {
	s.sysAutoCodeDo.DO = *(s.sysAutoCodeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysAutoCode) updateTableName(table string) *sysAutoCode {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.PackageName = field.NewString(table, "package_name")
	s.Label = field.NewString(table, "label")
	s.Desc = field.NewString(table, "desc")

	s.fillFieldMap()

	return s
}

func (s *sysAutoCode) WithContext(ctx context.Context) ISysAutoCodeDo {
	return s.sysAutoCodeDo.WithContext(ctx)
}

func (s sysAutoCode) TableName() string { return s.sysAutoCodeDo.TableName() }

func (s sysAutoCode) Alias() string { return s.sysAutoCodeDo.Alias() }

func (s *sysAutoCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysAutoCode) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["package_name"] = s.PackageName
	s.fieldMap["label"] = s.Label
	s.fieldMap["desc"] = s.Desc
}

func (s sysAutoCode) clone(db *gorm.DB) sysAutoCode {
	s.sysAutoCodeDo.ReplaceDB(db)
	return s
}

type sysAutoCodeDo struct{ gen.DO }

type ISysAutoCodeDo interface {
	gen.SubQuery
	Debug() ISysAutoCodeDo
	WithContext(ctx context.Context) ISysAutoCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysAutoCodeDo
	Not(conds ...gen.Condition) ISysAutoCodeDo
	Or(conds ...gen.Condition) ISysAutoCodeDo
	Select(conds ...field.Expr) ISysAutoCodeDo
	Where(conds ...gen.Condition) ISysAutoCodeDo
	Order(conds ...field.Expr) ISysAutoCodeDo
	Distinct(cols ...field.Expr) ISysAutoCodeDo
	Omit(cols ...field.Expr) ISysAutoCodeDo
	Join(table schema.Tabler, on ...field.Expr) ISysAutoCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysAutoCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysAutoCodeDo
	Group(cols ...field.Expr) ISysAutoCodeDo
	Having(conds ...gen.Condition) ISysAutoCodeDo
	Limit(limit int) ISysAutoCodeDo
	Offset(offset int) ISysAutoCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysAutoCodeDo
	Unscoped() ISysAutoCodeDo
	Create(values ...*model.SysAutoCode) error
	CreateInBatches(values []*model.SysAutoCode, batchSize int) error
	Save(values ...*model.SysAutoCode) error
	First() (*model.SysAutoCode, error)
	Take() (*model.SysAutoCode, error)
	Last() (*model.SysAutoCode, error)
	Find() ([]*model.SysAutoCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysAutoCode, err error)
	FindInBatches(result *[]*model.SysAutoCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysAutoCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysAutoCodeDo
	Assign(attrs ...field.AssignExpr) ISysAutoCodeDo
	Joins(fields ...field.RelationField) ISysAutoCodeDo
	Preload(fields ...field.RelationField) ISysAutoCodeDo
	FirstOrInit() (*model.SysAutoCode, error)
	FirstOrCreate() (*model.SysAutoCode, error)
	FindByPage(offset int, limit int) (result []*model.SysAutoCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysAutoCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysAutoCodeDo) Debug() ISysAutoCodeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysAutoCodeDo) WithContext(ctx context.Context) ISysAutoCodeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysAutoCodeDo) ReadDB() ISysAutoCodeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysAutoCodeDo) WriteDB() ISysAutoCodeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysAutoCodeDo) Clauses(conds ...clause.Expression) ISysAutoCodeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysAutoCodeDo) Returning(value interface{}, columns ...string) ISysAutoCodeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysAutoCodeDo) Not(conds ...gen.Condition) ISysAutoCodeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysAutoCodeDo) Or(conds ...gen.Condition) ISysAutoCodeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysAutoCodeDo) Select(conds ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysAutoCodeDo) Where(conds ...gen.Condition) ISysAutoCodeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysAutoCodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysAutoCodeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysAutoCodeDo) Order(conds ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysAutoCodeDo) Distinct(cols ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysAutoCodeDo) Omit(cols ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysAutoCodeDo) Join(table schema.Tabler, on ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysAutoCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysAutoCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysAutoCodeDo) Group(cols ...field.Expr) ISysAutoCodeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysAutoCodeDo) Having(conds ...gen.Condition) ISysAutoCodeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysAutoCodeDo) Limit(limit int) ISysAutoCodeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysAutoCodeDo) Offset(offset int) ISysAutoCodeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysAutoCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysAutoCodeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysAutoCodeDo) Unscoped() ISysAutoCodeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysAutoCodeDo) Create(values ...*model.SysAutoCode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysAutoCodeDo) CreateInBatches(values []*model.SysAutoCode, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysAutoCodeDo) Save(values ...*model.SysAutoCode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysAutoCodeDo) First() (*model.SysAutoCode, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysAutoCode), nil
	}
}

func (s sysAutoCodeDo) Take() (*model.SysAutoCode, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysAutoCode), nil
	}
}

func (s sysAutoCodeDo) Last() (*model.SysAutoCode, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysAutoCode), nil
	}
}

func (s sysAutoCodeDo) Find() ([]*model.SysAutoCode, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysAutoCode), err
}

func (s sysAutoCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysAutoCode, err error) {
	buf := make([]*model.SysAutoCode, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysAutoCodeDo) FindInBatches(result *[]*model.SysAutoCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysAutoCodeDo) Attrs(attrs ...field.AssignExpr) ISysAutoCodeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysAutoCodeDo) Assign(attrs ...field.AssignExpr) ISysAutoCodeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysAutoCodeDo) Joins(fields ...field.RelationField) ISysAutoCodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysAutoCodeDo) Preload(fields ...field.RelationField) ISysAutoCodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysAutoCodeDo) FirstOrInit() (*model.SysAutoCode, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysAutoCode), nil
	}
}

func (s sysAutoCodeDo) FirstOrCreate() (*model.SysAutoCode, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysAutoCode), nil
	}
}

func (s sysAutoCodeDo) FindByPage(offset int, limit int) (result []*model.SysAutoCode, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysAutoCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysAutoCodeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysAutoCodeDo) Delete(models ...*model.SysAutoCode) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysAutoCodeDo) withDO(do gen.Dao) *sysAutoCodeDo {
	s.DO = *do.(*gen.DO)
	return s
}
