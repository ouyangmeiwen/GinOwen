// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibtagtobarcodelog(db *gorm.DB) libtagtobarcodelog {
	_libtagtobarcodelog := libtagtobarcodelog{}

	_libtagtobarcodelog.libtagtobarcodelogDo.UseDB(db)
	_libtagtobarcodelog.libtagtobarcodelogDo.UseModel(&model.Libtagtobarcodelog{})

	tableName := _libtagtobarcodelog.libtagtobarcodelogDo.TableName()
	_libtagtobarcodelog.ALL = field.NewAsterisk(tableName)
	_libtagtobarcodelog.ID = field.NewString(tableName, "Id")
	_libtagtobarcodelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libtagtobarcodelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libtagtobarcodelog.IPAddress = field.NewString(tableName, "IPAddress")
	_libtagtobarcodelog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libtagtobarcodelog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libtagtobarcodelog.OperateType = field.NewInt64(tableName, "OperateType")
	_libtagtobarcodelog.IsSuccess = field.NewField(tableName, "IsSuccess")
	_libtagtobarcodelog.IsUpdate = field.NewField(tableName, "IsUpdate")
	_libtagtobarcodelog.Remark = field.NewString(tableName, "Remark")
	_libtagtobarcodelog.TenantID = field.NewInt64(tableName, "TenantId")
	_libtagtobarcodelog.CreatorUserName = field.NewString(tableName, "CreatorUserName")

	_libtagtobarcodelog.fillFieldMap()

	return _libtagtobarcodelog
}

type libtagtobarcodelog struct {
	libtagtobarcodelogDo libtagtobarcodelogDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	IPAddress       field.String
	ItemBarcode     field.String
	ItemTitle       field.String
	OperateType     field.Int64
	IsSuccess       field.Field
	IsUpdate        field.Field
	Remark          field.String
	TenantID        field.Int64
	CreatorUserName field.String

	fieldMap map[string]field.Expr
}

func (l libtagtobarcodelog) Table(newTableName string) *libtagtobarcodelog {
	l.libtagtobarcodelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libtagtobarcodelog) As(alias string) *libtagtobarcodelog {
	l.libtagtobarcodelogDo.DO = *(l.libtagtobarcodelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libtagtobarcodelog) updateTableName(table string) *libtagtobarcodelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.IPAddress = field.NewString(table, "IPAddress")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.OperateType = field.NewInt64(table, "OperateType")
	l.IsSuccess = field.NewField(table, "IsSuccess")
	l.IsUpdate = field.NewField(table, "IsUpdate")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")

	l.fillFieldMap()

	return l
}

func (l *libtagtobarcodelog) WithContext(ctx context.Context) ILibtagtobarcodelogDo {
	return l.libtagtobarcodelogDo.WithContext(ctx)
}

func (l libtagtobarcodelog) TableName() string { return l.libtagtobarcodelogDo.TableName() }

func (l libtagtobarcodelog) Alias() string { return l.libtagtobarcodelogDo.Alias() }

func (l *libtagtobarcodelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libtagtobarcodelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["IPAddress"] = l.IPAddress
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["OperateType"] = l.OperateType
	l.fieldMap["IsSuccess"] = l.IsSuccess
	l.fieldMap["IsUpdate"] = l.IsUpdate
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
}

func (l libtagtobarcodelog) clone(db *gorm.DB) libtagtobarcodelog {
	l.libtagtobarcodelogDo.ReplaceDB(db)
	return l
}

type libtagtobarcodelogDo struct{ gen.DO }

type ILibtagtobarcodelogDo interface {
	gen.SubQuery
	Debug() ILibtagtobarcodelogDo
	WithContext(ctx context.Context) ILibtagtobarcodelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibtagtobarcodelogDo
	Not(conds ...gen.Condition) ILibtagtobarcodelogDo
	Or(conds ...gen.Condition) ILibtagtobarcodelogDo
	Select(conds ...field.Expr) ILibtagtobarcodelogDo
	Where(conds ...gen.Condition) ILibtagtobarcodelogDo
	Order(conds ...field.Expr) ILibtagtobarcodelogDo
	Distinct(cols ...field.Expr) ILibtagtobarcodelogDo
	Omit(cols ...field.Expr) ILibtagtobarcodelogDo
	Join(table schema.Tabler, on ...field.Expr) ILibtagtobarcodelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibtagtobarcodelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibtagtobarcodelogDo
	Group(cols ...field.Expr) ILibtagtobarcodelogDo
	Having(conds ...gen.Condition) ILibtagtobarcodelogDo
	Limit(limit int) ILibtagtobarcodelogDo
	Offset(offset int) ILibtagtobarcodelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibtagtobarcodelogDo
	Unscoped() ILibtagtobarcodelogDo
	Create(values ...*model.Libtagtobarcodelog) error
	CreateInBatches(values []*model.Libtagtobarcodelog, batchSize int) error
	Save(values ...*model.Libtagtobarcodelog) error
	First() (*model.Libtagtobarcodelog, error)
	Take() (*model.Libtagtobarcodelog, error)
	Last() (*model.Libtagtobarcodelog, error)
	Find() ([]*model.Libtagtobarcodelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libtagtobarcodelog, err error)
	FindInBatches(result *[]*model.Libtagtobarcodelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libtagtobarcodelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibtagtobarcodelogDo
	Assign(attrs ...field.AssignExpr) ILibtagtobarcodelogDo
	Joins(fields ...field.RelationField) ILibtagtobarcodelogDo
	Preload(fields ...field.RelationField) ILibtagtobarcodelogDo
	FirstOrInit() (*model.Libtagtobarcodelog, error)
	FirstOrCreate() (*model.Libtagtobarcodelog, error)
	FindByPage(offset int, limit int) (result []*model.Libtagtobarcodelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibtagtobarcodelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libtagtobarcodelogDo) Debug() ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Debug())
}

func (l libtagtobarcodelogDo) WithContext(ctx context.Context) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libtagtobarcodelogDo) ReadDB() ILibtagtobarcodelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libtagtobarcodelogDo) WriteDB() ILibtagtobarcodelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libtagtobarcodelogDo) Clauses(conds ...clause.Expression) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libtagtobarcodelogDo) Returning(value interface{}, columns ...string) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libtagtobarcodelogDo) Not(conds ...gen.Condition) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libtagtobarcodelogDo) Or(conds ...gen.Condition) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libtagtobarcodelogDo) Select(conds ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libtagtobarcodelogDo) Where(conds ...gen.Condition) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libtagtobarcodelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibtagtobarcodelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libtagtobarcodelogDo) Order(conds ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libtagtobarcodelogDo) Distinct(cols ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libtagtobarcodelogDo) Omit(cols ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libtagtobarcodelogDo) Join(table schema.Tabler, on ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libtagtobarcodelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libtagtobarcodelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libtagtobarcodelogDo) Group(cols ...field.Expr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libtagtobarcodelogDo) Having(conds ...gen.Condition) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libtagtobarcodelogDo) Limit(limit int) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libtagtobarcodelogDo) Offset(offset int) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libtagtobarcodelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libtagtobarcodelogDo) Unscoped() ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libtagtobarcodelogDo) Create(values ...*model.Libtagtobarcodelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libtagtobarcodelogDo) CreateInBatches(values []*model.Libtagtobarcodelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libtagtobarcodelogDo) Save(values ...*model.Libtagtobarcodelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libtagtobarcodelogDo) First() (*model.Libtagtobarcodelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtagtobarcodelog), nil
	}
}

func (l libtagtobarcodelogDo) Take() (*model.Libtagtobarcodelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtagtobarcodelog), nil
	}
}

func (l libtagtobarcodelogDo) Last() (*model.Libtagtobarcodelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtagtobarcodelog), nil
	}
}

func (l libtagtobarcodelogDo) Find() ([]*model.Libtagtobarcodelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libtagtobarcodelog), err
}

func (l libtagtobarcodelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libtagtobarcodelog, err error) {
	buf := make([]*model.Libtagtobarcodelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libtagtobarcodelogDo) FindInBatches(result *[]*model.Libtagtobarcodelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libtagtobarcodelogDo) Attrs(attrs ...field.AssignExpr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libtagtobarcodelogDo) Assign(attrs ...field.AssignExpr) ILibtagtobarcodelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libtagtobarcodelogDo) Joins(fields ...field.RelationField) ILibtagtobarcodelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libtagtobarcodelogDo) Preload(fields ...field.RelationField) ILibtagtobarcodelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libtagtobarcodelogDo) FirstOrInit() (*model.Libtagtobarcodelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtagtobarcodelog), nil
	}
}

func (l libtagtobarcodelogDo) FirstOrCreate() (*model.Libtagtobarcodelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libtagtobarcodelog), nil
	}
}

func (l libtagtobarcodelogDo) FindByPage(offset int, limit int) (result []*model.Libtagtobarcodelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libtagtobarcodelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libtagtobarcodelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libtagtobarcodelogDo) Delete(models ...*model.Libtagtobarcodelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libtagtobarcodelogDo) withDO(do gen.Dao) *libtagtobarcodelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
