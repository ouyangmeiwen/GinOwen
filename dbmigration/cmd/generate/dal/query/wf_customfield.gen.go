// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newWfCustomfield(db *gorm.DB) wfCustomfield {
	_wfCustomfield := wfCustomfield{}

	_wfCustomfield.wfCustomfieldDo.UseDB(db)
	_wfCustomfield.wfCustomfieldDo.UseModel(&model.WfCustomfield{})

	tableName := _wfCustomfield.wfCustomfieldDo.TableName()
	_wfCustomfield.ALL = field.NewAsterisk(tableName)
	_wfCustomfield.ID = field.NewInt64(tableName, "id")
	_wfCustomfield.CreateTime = field.NewTime(tableName, "create_time")
	_wfCustomfield.UpdateTime = field.NewTime(tableName, "update_time")
	_wfCustomfield.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_wfCustomfield.FieldType = field.NewString(tableName, "field_type")
	_wfCustomfield.FieldKey = field.NewString(tableName, "field_key")
	_wfCustomfield.FieldName = field.NewString(tableName, "field_name")
	_wfCustomfield.Sort = field.NewInt64(tableName, "sort")
	_wfCustomfield.DefaultValue = field.NewString(tableName, "default_value")
	_wfCustomfield.Description = field.NewString(tableName, "description")
	_wfCustomfield.Placeholder = field.NewString(tableName, "placeholder")
	_wfCustomfield.FieldTemplate = field.NewString(tableName, "field_template")
	_wfCustomfield.BooleanFieldDisplay = field.NewString(tableName, "boolean_field_display")
	_wfCustomfield.FieldChoice = field.NewString(tableName, "field_choice")
	_wfCustomfield.Label = field.NewString(tableName, "label")
	_wfCustomfield.IsHidden = field.NewInt64(tableName, "is_hidden")
	_wfCustomfield.CreateByID = field.NewInt64(tableName, "create_by_id")
	_wfCustomfield.UpdateByID = field.NewInt64(tableName, "update_by_id")
	_wfCustomfield.WorkflowID = field.NewInt64(tableName, "workflow_id")

	_wfCustomfield.fillFieldMap()

	return _wfCustomfield
}

type wfCustomfield struct {
	wfCustomfieldDo wfCustomfieldDo

	ALL                 field.Asterisk
	ID                  field.Int64
	CreateTime          field.Time
	UpdateTime          field.Time
	IsDeleted           field.Int64
	FieldType           field.String
	FieldKey            field.String
	FieldName           field.String
	Sort                field.Int64
	DefaultValue        field.String
	Description         field.String
	Placeholder         field.String
	FieldTemplate       field.String
	BooleanFieldDisplay field.String
	FieldChoice         field.String
	Label               field.String
	IsHidden            field.Int64
	CreateByID          field.Int64
	UpdateByID          field.Int64
	WorkflowID          field.Int64

	fieldMap map[string]field.Expr
}

func (w wfCustomfield) Table(newTableName string) *wfCustomfield {
	w.wfCustomfieldDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wfCustomfield) As(alias string) *wfCustomfield {
	w.wfCustomfieldDo.DO = *(w.wfCustomfieldDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wfCustomfield) updateTableName(table string) *wfCustomfield {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.IsDeleted = field.NewInt64(table, "is_deleted")
	w.FieldType = field.NewString(table, "field_type")
	w.FieldKey = field.NewString(table, "field_key")
	w.FieldName = field.NewString(table, "field_name")
	w.Sort = field.NewInt64(table, "sort")
	w.DefaultValue = field.NewString(table, "default_value")
	w.Description = field.NewString(table, "description")
	w.Placeholder = field.NewString(table, "placeholder")
	w.FieldTemplate = field.NewString(table, "field_template")
	w.BooleanFieldDisplay = field.NewString(table, "boolean_field_display")
	w.FieldChoice = field.NewString(table, "field_choice")
	w.Label = field.NewString(table, "label")
	w.IsHidden = field.NewInt64(table, "is_hidden")
	w.CreateByID = field.NewInt64(table, "create_by_id")
	w.UpdateByID = field.NewInt64(table, "update_by_id")
	w.WorkflowID = field.NewInt64(table, "workflow_id")

	w.fillFieldMap()

	return w
}

func (w *wfCustomfield) WithContext(ctx context.Context) IWfCustomfieldDo {
	return w.wfCustomfieldDo.WithContext(ctx)
}

func (w wfCustomfield) TableName() string { return w.wfCustomfieldDo.TableName() }

func (w wfCustomfield) Alias() string { return w.wfCustomfieldDo.Alias() }

func (w *wfCustomfield) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wfCustomfield) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 19)
	w.fieldMap["id"] = w.ID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["is_deleted"] = w.IsDeleted
	w.fieldMap["field_type"] = w.FieldType
	w.fieldMap["field_key"] = w.FieldKey
	w.fieldMap["field_name"] = w.FieldName
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["default_value"] = w.DefaultValue
	w.fieldMap["description"] = w.Description
	w.fieldMap["placeholder"] = w.Placeholder
	w.fieldMap["field_template"] = w.FieldTemplate
	w.fieldMap["boolean_field_display"] = w.BooleanFieldDisplay
	w.fieldMap["field_choice"] = w.FieldChoice
	w.fieldMap["label"] = w.Label
	w.fieldMap["is_hidden"] = w.IsHidden
	w.fieldMap["create_by_id"] = w.CreateByID
	w.fieldMap["update_by_id"] = w.UpdateByID
	w.fieldMap["workflow_id"] = w.WorkflowID
}

func (w wfCustomfield) clone(db *gorm.DB) wfCustomfield {
	w.wfCustomfieldDo.ReplaceDB(db)
	return w
}

type wfCustomfieldDo struct{ gen.DO }

type IWfCustomfieldDo interface {
	gen.SubQuery
	Debug() IWfCustomfieldDo
	WithContext(ctx context.Context) IWfCustomfieldDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWfCustomfieldDo
	Not(conds ...gen.Condition) IWfCustomfieldDo
	Or(conds ...gen.Condition) IWfCustomfieldDo
	Select(conds ...field.Expr) IWfCustomfieldDo
	Where(conds ...gen.Condition) IWfCustomfieldDo
	Order(conds ...field.Expr) IWfCustomfieldDo
	Distinct(cols ...field.Expr) IWfCustomfieldDo
	Omit(cols ...field.Expr) IWfCustomfieldDo
	Join(table schema.Tabler, on ...field.Expr) IWfCustomfieldDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWfCustomfieldDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWfCustomfieldDo
	Group(cols ...field.Expr) IWfCustomfieldDo
	Having(conds ...gen.Condition) IWfCustomfieldDo
	Limit(limit int) IWfCustomfieldDo
	Offset(offset int) IWfCustomfieldDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWfCustomfieldDo
	Unscoped() IWfCustomfieldDo
	Create(values ...*model.WfCustomfield) error
	CreateInBatches(values []*model.WfCustomfield, batchSize int) error
	Save(values ...*model.WfCustomfield) error
	First() (*model.WfCustomfield, error)
	Take() (*model.WfCustomfield, error)
	Last() (*model.WfCustomfield, error)
	Find() ([]*model.WfCustomfield, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfCustomfield, err error)
	FindInBatches(result *[]*model.WfCustomfield, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WfCustomfield) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWfCustomfieldDo
	Assign(attrs ...field.AssignExpr) IWfCustomfieldDo
	Joins(fields ...field.RelationField) IWfCustomfieldDo
	Preload(fields ...field.RelationField) IWfCustomfieldDo
	FirstOrInit() (*model.WfCustomfield, error)
	FirstOrCreate() (*model.WfCustomfield, error)
	FindByPage(offset int, limit int) (result []*model.WfCustomfield, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWfCustomfieldDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wfCustomfieldDo) Debug() IWfCustomfieldDo {
	return w.withDO(w.DO.Debug())
}

func (w wfCustomfieldDo) WithContext(ctx context.Context) IWfCustomfieldDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wfCustomfieldDo) ReadDB() IWfCustomfieldDo {
	return w.Clauses(dbresolver.Read)
}

func (w wfCustomfieldDo) WriteDB() IWfCustomfieldDo {
	return w.Clauses(dbresolver.Write)
}

func (w wfCustomfieldDo) Clauses(conds ...clause.Expression) IWfCustomfieldDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wfCustomfieldDo) Returning(value interface{}, columns ...string) IWfCustomfieldDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wfCustomfieldDo) Not(conds ...gen.Condition) IWfCustomfieldDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wfCustomfieldDo) Or(conds ...gen.Condition) IWfCustomfieldDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wfCustomfieldDo) Select(conds ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wfCustomfieldDo) Where(conds ...gen.Condition) IWfCustomfieldDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wfCustomfieldDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWfCustomfieldDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wfCustomfieldDo) Order(conds ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wfCustomfieldDo) Distinct(cols ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wfCustomfieldDo) Omit(cols ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wfCustomfieldDo) Join(table schema.Tabler, on ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wfCustomfieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wfCustomfieldDo) RightJoin(table schema.Tabler, on ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wfCustomfieldDo) Group(cols ...field.Expr) IWfCustomfieldDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wfCustomfieldDo) Having(conds ...gen.Condition) IWfCustomfieldDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wfCustomfieldDo) Limit(limit int) IWfCustomfieldDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wfCustomfieldDo) Offset(offset int) IWfCustomfieldDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wfCustomfieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWfCustomfieldDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wfCustomfieldDo) Unscoped() IWfCustomfieldDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wfCustomfieldDo) Create(values ...*model.WfCustomfield) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wfCustomfieldDo) CreateInBatches(values []*model.WfCustomfield, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wfCustomfieldDo) Save(values ...*model.WfCustomfield) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wfCustomfieldDo) First() (*model.WfCustomfield, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfCustomfield), nil
	}
}

func (w wfCustomfieldDo) Take() (*model.WfCustomfield, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfCustomfield), nil
	}
}

func (w wfCustomfieldDo) Last() (*model.WfCustomfield, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfCustomfield), nil
	}
}

func (w wfCustomfieldDo) Find() ([]*model.WfCustomfield, error) {
	result, err := w.DO.Find()
	return result.([]*model.WfCustomfield), err
}

func (w wfCustomfieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfCustomfield, err error) {
	buf := make([]*model.WfCustomfield, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wfCustomfieldDo) FindInBatches(result *[]*model.WfCustomfield, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wfCustomfieldDo) Attrs(attrs ...field.AssignExpr) IWfCustomfieldDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wfCustomfieldDo) Assign(attrs ...field.AssignExpr) IWfCustomfieldDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wfCustomfieldDo) Joins(fields ...field.RelationField) IWfCustomfieldDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wfCustomfieldDo) Preload(fields ...field.RelationField) IWfCustomfieldDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wfCustomfieldDo) FirstOrInit() (*model.WfCustomfield, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfCustomfield), nil
	}
}

func (w wfCustomfieldDo) FirstOrCreate() (*model.WfCustomfield, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfCustomfield), nil
	}
}

func (w wfCustomfieldDo) FindByPage(offset int, limit int) (result []*model.WfCustomfield, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wfCustomfieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wfCustomfieldDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wfCustomfieldDo) Delete(models ...*model.WfCustomfield) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wfCustomfieldDo) withDO(do gen.Dao) *wfCustomfieldDo {
	w.DO = *do.(*gen.DO)
	return w
}
