// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibstruct(db *gorm.DB) libstruct {
	_libstruct := libstruct{}

	_libstruct.libstructDo.UseDB(db)
	_libstruct.libstructDo.UseModel(&model.Libstruct{})

	tableName := _libstruct.libstructDo.TableName()
	_libstruct.ALL = field.NewAsterisk(tableName)
	_libstruct.ID = field.NewString(tableName, "Id")
	_libstruct.CreationTime = field.NewTime(tableName, "CreationTime")
	_libstruct.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libstruct.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libstruct.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libstruct.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libstruct.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libstruct.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libstruct.BuildNo = field.NewInt64(tableName, "BuildNo")
	_libstruct.FloorNo = field.NewInt64(tableName, "FloorNo")
	_libstruct.RoomNo = field.NewInt64(tableName, "RoomNo")
	_libstruct.BuildingName = field.NewString(tableName, "BuildingName")
	_libstruct.FloorName = field.NewString(tableName, "FloorName")
	_libstruct.RoomName = field.NewString(tableName, "RoomName")
	_libstruct.Description = field.NewString(tableName, "Description")
	_libstruct.Img = field.NewBytes(tableName, "Img")
	_libstruct.ExtensionName = field.NewString(tableName, "ExtensionName")
	_libstruct.Remark = field.NewString(tableName, "Remark")
	_libstruct.TenantID = field.NewInt64(tableName, "TenantId")

	_libstruct.fillFieldMap()

	return _libstruct
}

type libstruct struct {
	libstructDo libstructDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	BuildNo              field.Int64
	FloorNo              field.Int64
	RoomNo               field.Int64
	BuildingName         field.String
	FloorName            field.String
	RoomName             field.String
	Description          field.String
	Img                  field.Bytes
	ExtensionName        field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libstruct) Table(newTableName string) *libstruct {
	l.libstructDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libstruct) As(alias string) *libstruct {
	l.libstructDo.DO = *(l.libstructDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libstruct) updateTableName(table string) *libstruct {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.BuildNo = field.NewInt64(table, "BuildNo")
	l.FloorNo = field.NewInt64(table, "FloorNo")
	l.RoomNo = field.NewInt64(table, "RoomNo")
	l.BuildingName = field.NewString(table, "BuildingName")
	l.FloorName = field.NewString(table, "FloorName")
	l.RoomName = field.NewString(table, "RoomName")
	l.Description = field.NewString(table, "Description")
	l.Img = field.NewBytes(table, "Img")
	l.ExtensionName = field.NewString(table, "ExtensionName")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libstruct) WithContext(ctx context.Context) ILibstructDo {
	return l.libstructDo.WithContext(ctx)
}

func (l libstruct) TableName() string { return l.libstructDo.TableName() }

func (l libstruct) Alias() string { return l.libstructDo.Alias() }

func (l *libstruct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libstruct) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 19)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["BuildNo"] = l.BuildNo
	l.fieldMap["FloorNo"] = l.FloorNo
	l.fieldMap["RoomNo"] = l.RoomNo
	l.fieldMap["BuildingName"] = l.BuildingName
	l.fieldMap["FloorName"] = l.FloorName
	l.fieldMap["RoomName"] = l.RoomName
	l.fieldMap["Description"] = l.Description
	l.fieldMap["Img"] = l.Img
	l.fieldMap["ExtensionName"] = l.ExtensionName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libstruct) clone(db *gorm.DB) libstruct {
	l.libstructDo.ReplaceDB(db)
	return l
}

type libstructDo struct{ gen.DO }

type ILibstructDo interface {
	gen.SubQuery
	Debug() ILibstructDo
	WithContext(ctx context.Context) ILibstructDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibstructDo
	Not(conds ...gen.Condition) ILibstructDo
	Or(conds ...gen.Condition) ILibstructDo
	Select(conds ...field.Expr) ILibstructDo
	Where(conds ...gen.Condition) ILibstructDo
	Order(conds ...field.Expr) ILibstructDo
	Distinct(cols ...field.Expr) ILibstructDo
	Omit(cols ...field.Expr) ILibstructDo
	Join(table schema.Tabler, on ...field.Expr) ILibstructDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibstructDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibstructDo
	Group(cols ...field.Expr) ILibstructDo
	Having(conds ...gen.Condition) ILibstructDo
	Limit(limit int) ILibstructDo
	Offset(offset int) ILibstructDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibstructDo
	Unscoped() ILibstructDo
	Create(values ...*model.Libstruct) error
	CreateInBatches(values []*model.Libstruct, batchSize int) error
	Save(values ...*model.Libstruct) error
	First() (*model.Libstruct, error)
	Take() (*model.Libstruct, error)
	Last() (*model.Libstruct, error)
	Find() ([]*model.Libstruct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libstruct, err error)
	FindInBatches(result *[]*model.Libstruct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libstruct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibstructDo
	Assign(attrs ...field.AssignExpr) ILibstructDo
	Joins(fields ...field.RelationField) ILibstructDo
	Preload(fields ...field.RelationField) ILibstructDo
	FirstOrInit() (*model.Libstruct, error)
	FirstOrCreate() (*model.Libstruct, error)
	FindByPage(offset int, limit int) (result []*model.Libstruct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibstructDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libstructDo) Debug() ILibstructDo {
	return l.withDO(l.DO.Debug())
}

func (l libstructDo) WithContext(ctx context.Context) ILibstructDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libstructDo) ReadDB() ILibstructDo {
	return l.Clauses(dbresolver.Read)
}

func (l libstructDo) WriteDB() ILibstructDo {
	return l.Clauses(dbresolver.Write)
}

func (l libstructDo) Clauses(conds ...clause.Expression) ILibstructDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libstructDo) Returning(value interface{}, columns ...string) ILibstructDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libstructDo) Not(conds ...gen.Condition) ILibstructDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libstructDo) Or(conds ...gen.Condition) ILibstructDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libstructDo) Select(conds ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libstructDo) Where(conds ...gen.Condition) ILibstructDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libstructDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibstructDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libstructDo) Order(conds ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libstructDo) Distinct(cols ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libstructDo) Omit(cols ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libstructDo) Join(table schema.Tabler, on ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libstructDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libstructDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libstructDo) Group(cols ...field.Expr) ILibstructDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libstructDo) Having(conds ...gen.Condition) ILibstructDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libstructDo) Limit(limit int) ILibstructDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libstructDo) Offset(offset int) ILibstructDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libstructDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibstructDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libstructDo) Unscoped() ILibstructDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libstructDo) Create(values ...*model.Libstruct) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libstructDo) CreateInBatches(values []*model.Libstruct, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libstructDo) Save(values ...*model.Libstruct) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libstructDo) First() (*model.Libstruct, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libstruct), nil
	}
}

func (l libstructDo) Take() (*model.Libstruct, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libstruct), nil
	}
}

func (l libstructDo) Last() (*model.Libstruct, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libstruct), nil
	}
}

func (l libstructDo) Find() ([]*model.Libstruct, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libstruct), err
}

func (l libstructDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libstruct, err error) {
	buf := make([]*model.Libstruct, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libstructDo) FindInBatches(result *[]*model.Libstruct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libstructDo) Attrs(attrs ...field.AssignExpr) ILibstructDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libstructDo) Assign(attrs ...field.AssignExpr) ILibstructDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libstructDo) Joins(fields ...field.RelationField) ILibstructDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libstructDo) Preload(fields ...field.RelationField) ILibstructDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libstructDo) FirstOrInit() (*model.Libstruct, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libstruct), nil
	}
}

func (l libstructDo) FirstOrCreate() (*model.Libstruct, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libstruct), nil
	}
}

func (l libstructDo) FindByPage(offset int, limit int) (result []*model.Libstruct, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libstructDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libstructDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libstructDo) Delete(models ...*model.Libstruct) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libstructDo) withDO(do gen.Dao) *libstructDo {
	l.DO = *do.(*gen.DO)
	return l
}
