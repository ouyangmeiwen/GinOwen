// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibbatchoperateindex(db *gorm.DB) libbatchoperateindex {
	_libbatchoperateindex := libbatchoperateindex{}

	_libbatchoperateindex.libbatchoperateindexDo.UseDB(db)
	_libbatchoperateindex.libbatchoperateindexDo.UseModel(&model.Libbatchoperateindex{})

	tableName := _libbatchoperateindex.libbatchoperateindexDo.TableName()
	_libbatchoperateindex.ALL = field.NewAsterisk(tableName)
	_libbatchoperateindex.ID = field.NewString(tableName, "Id")
	_libbatchoperateindex.CreationTime = field.NewTime(tableName, "CreationTime")
	_libbatchoperateindex.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libbatchoperateindex.BatchNo = field.NewString(tableName, "BatchNo")
	_libbatchoperateindex.BatchOperateType = field.NewInt64(tableName, "BatchOperateType")
	_libbatchoperateindex.Remark = field.NewString(tableName, "Remark")
	_libbatchoperateindex.TenantID = field.NewInt64(tableName, "TenantId")
	_libbatchoperateindex.CreatorUserName = field.NewString(tableName, "CreatorUserName")
	_libbatchoperateindex.FailCount = field.NewInt64(tableName, "FailCount")
	_libbatchoperateindex.SuccessCount = field.NewInt64(tableName, "SuccessCount")

	_libbatchoperateindex.fillFieldMap()

	return _libbatchoperateindex
}

type libbatchoperateindex struct {
	libbatchoperateindexDo libbatchoperateindexDo

	ALL              field.Asterisk
	ID               field.String
	CreationTime     field.Time
	CreatorUserID    field.Int64
	BatchNo          field.String
	BatchOperateType field.Int64
	Remark           field.String
	TenantID         field.Int64
	CreatorUserName  field.String
	FailCount        field.Int64
	SuccessCount     field.Int64

	fieldMap map[string]field.Expr
}

func (l libbatchoperateindex) Table(newTableName string) *libbatchoperateindex {
	l.libbatchoperateindexDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libbatchoperateindex) As(alias string) *libbatchoperateindex {
	l.libbatchoperateindexDo.DO = *(l.libbatchoperateindexDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libbatchoperateindex) updateTableName(table string) *libbatchoperateindex {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.BatchNo = field.NewString(table, "BatchNo")
	l.BatchOperateType = field.NewInt64(table, "BatchOperateType")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")
	l.FailCount = field.NewInt64(table, "FailCount")
	l.SuccessCount = field.NewInt64(table, "SuccessCount")

	l.fillFieldMap()

	return l
}

func (l *libbatchoperateindex) WithContext(ctx context.Context) ILibbatchoperateindexDo {
	return l.libbatchoperateindexDo.WithContext(ctx)
}

func (l libbatchoperateindex) TableName() string { return l.libbatchoperateindexDo.TableName() }

func (l libbatchoperateindex) Alias() string { return l.libbatchoperateindexDo.Alias() }

func (l *libbatchoperateindex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libbatchoperateindex) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["BatchNo"] = l.BatchNo
	l.fieldMap["BatchOperateType"] = l.BatchOperateType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
	l.fieldMap["FailCount"] = l.FailCount
	l.fieldMap["SuccessCount"] = l.SuccessCount
}

func (l libbatchoperateindex) clone(db *gorm.DB) libbatchoperateindex {
	l.libbatchoperateindexDo.ReplaceDB(db)
	return l
}

type libbatchoperateindexDo struct{ gen.DO }

type ILibbatchoperateindexDo interface {
	gen.SubQuery
	Debug() ILibbatchoperateindexDo
	WithContext(ctx context.Context) ILibbatchoperateindexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibbatchoperateindexDo
	Not(conds ...gen.Condition) ILibbatchoperateindexDo
	Or(conds ...gen.Condition) ILibbatchoperateindexDo
	Select(conds ...field.Expr) ILibbatchoperateindexDo
	Where(conds ...gen.Condition) ILibbatchoperateindexDo
	Order(conds ...field.Expr) ILibbatchoperateindexDo
	Distinct(cols ...field.Expr) ILibbatchoperateindexDo
	Omit(cols ...field.Expr) ILibbatchoperateindexDo
	Join(table schema.Tabler, on ...field.Expr) ILibbatchoperateindexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperateindexDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperateindexDo
	Group(cols ...field.Expr) ILibbatchoperateindexDo
	Having(conds ...gen.Condition) ILibbatchoperateindexDo
	Limit(limit int) ILibbatchoperateindexDo
	Offset(offset int) ILibbatchoperateindexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbatchoperateindexDo
	Unscoped() ILibbatchoperateindexDo
	Create(values ...*model.Libbatchoperateindex) error
	CreateInBatches(values []*model.Libbatchoperateindex, batchSize int) error
	Save(values ...*model.Libbatchoperateindex) error
	First() (*model.Libbatchoperateindex, error)
	Take() (*model.Libbatchoperateindex, error)
	Last() (*model.Libbatchoperateindex, error)
	Find() ([]*model.Libbatchoperateindex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbatchoperateindex, err error)
	FindInBatches(result *[]*model.Libbatchoperateindex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libbatchoperateindex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibbatchoperateindexDo
	Assign(attrs ...field.AssignExpr) ILibbatchoperateindexDo
	Joins(fields ...field.RelationField) ILibbatchoperateindexDo
	Preload(fields ...field.RelationField) ILibbatchoperateindexDo
	FirstOrInit() (*model.Libbatchoperateindex, error)
	FirstOrCreate() (*model.Libbatchoperateindex, error)
	FindByPage(offset int, limit int) (result []*model.Libbatchoperateindex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibbatchoperateindexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libbatchoperateindexDo) Debug() ILibbatchoperateindexDo {
	return l.withDO(l.DO.Debug())
}

func (l libbatchoperateindexDo) WithContext(ctx context.Context) ILibbatchoperateindexDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libbatchoperateindexDo) ReadDB() ILibbatchoperateindexDo {
	return l.Clauses(dbresolver.Read)
}

func (l libbatchoperateindexDo) WriteDB() ILibbatchoperateindexDo {
	return l.Clauses(dbresolver.Write)
}

func (l libbatchoperateindexDo) Clauses(conds ...clause.Expression) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libbatchoperateindexDo) Returning(value interface{}, columns ...string) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libbatchoperateindexDo) Not(conds ...gen.Condition) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libbatchoperateindexDo) Or(conds ...gen.Condition) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libbatchoperateindexDo) Select(conds ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libbatchoperateindexDo) Where(conds ...gen.Condition) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libbatchoperateindexDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibbatchoperateindexDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libbatchoperateindexDo) Order(conds ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libbatchoperateindexDo) Distinct(cols ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libbatchoperateindexDo) Omit(cols ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libbatchoperateindexDo) Join(table schema.Tabler, on ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libbatchoperateindexDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libbatchoperateindexDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libbatchoperateindexDo) Group(cols ...field.Expr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libbatchoperateindexDo) Having(conds ...gen.Condition) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libbatchoperateindexDo) Limit(limit int) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libbatchoperateindexDo) Offset(offset int) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libbatchoperateindexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libbatchoperateindexDo) Unscoped() ILibbatchoperateindexDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libbatchoperateindexDo) Create(values ...*model.Libbatchoperateindex) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libbatchoperateindexDo) CreateInBatches(values []*model.Libbatchoperateindex, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libbatchoperateindexDo) Save(values ...*model.Libbatchoperateindex) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libbatchoperateindexDo) First() (*model.Libbatchoperateindex, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperateindex), nil
	}
}

func (l libbatchoperateindexDo) Take() (*model.Libbatchoperateindex, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperateindex), nil
	}
}

func (l libbatchoperateindexDo) Last() (*model.Libbatchoperateindex, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperateindex), nil
	}
}

func (l libbatchoperateindexDo) Find() ([]*model.Libbatchoperateindex, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libbatchoperateindex), err
}

func (l libbatchoperateindexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbatchoperateindex, err error) {
	buf := make([]*model.Libbatchoperateindex, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libbatchoperateindexDo) FindInBatches(result *[]*model.Libbatchoperateindex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libbatchoperateindexDo) Attrs(attrs ...field.AssignExpr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libbatchoperateindexDo) Assign(attrs ...field.AssignExpr) ILibbatchoperateindexDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libbatchoperateindexDo) Joins(fields ...field.RelationField) ILibbatchoperateindexDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libbatchoperateindexDo) Preload(fields ...field.RelationField) ILibbatchoperateindexDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libbatchoperateindexDo) FirstOrInit() (*model.Libbatchoperateindex, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperateindex), nil
	}
}

func (l libbatchoperateindexDo) FirstOrCreate() (*model.Libbatchoperateindex, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbatchoperateindex), nil
	}
}

func (l libbatchoperateindexDo) FindByPage(offset int, limit int) (result []*model.Libbatchoperateindex, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libbatchoperateindexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libbatchoperateindexDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libbatchoperateindexDo) Delete(models ...*model.Libbatchoperateindex) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libbatchoperateindexDo) withDO(do gen.Dao) *libbatchoperateindexDo {
	l.DO = *do.(*gen.DO)
	return l
}
