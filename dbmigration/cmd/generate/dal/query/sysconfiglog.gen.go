// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysconfiglog(db *gorm.DB) sysconfiglog {
	_sysconfiglog := sysconfiglog{}

	_sysconfiglog.sysconfiglogDo.UseDB(db)
	_sysconfiglog.sysconfiglogDo.UseModel(&model.Sysconfiglog{})

	tableName := _sysconfiglog.sysconfiglogDo.TableName()
	_sysconfiglog.ALL = field.NewAsterisk(tableName)
	_sysconfiglog.ID = field.NewString(tableName, "Id")
	_sysconfiglog.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysconfiglog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysconfiglog.TerminalID = field.NewString(tableName, "TerminalId")
	_sysconfiglog.ConfigType = field.NewString(tableName, "ConfigType")
	_sysconfiglog.Content = field.NewString(tableName, "Content")
	_sysconfiglog.TenantID = field.NewInt64(tableName, "TenantId")

	_sysconfiglog.fillFieldMap()

	return _sysconfiglog
}

type sysconfiglog struct {
	sysconfiglogDo sysconfiglogDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	TerminalID    field.String
	ConfigType    field.String
	Content       field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (s sysconfiglog) Table(newTableName string) *sysconfiglog {
	s.sysconfiglogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysconfiglog) As(alias string) *sysconfiglog {
	s.sysconfiglogDo.DO = *(s.sysconfiglogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysconfiglog) updateTableName(table string) *sysconfiglog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.TerminalID = field.NewString(table, "TerminalId")
	s.ConfigType = field.NewString(table, "ConfigType")
	s.Content = field.NewString(table, "Content")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysconfiglog) WithContext(ctx context.Context) ISysconfiglogDo {
	return s.sysconfiglogDo.WithContext(ctx)
}

func (s sysconfiglog) TableName() string { return s.sysconfiglogDo.TableName() }

func (s sysconfiglog) Alias() string { return s.sysconfiglogDo.Alias() }

func (s *sysconfiglog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysconfiglog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["TerminalId"] = s.TerminalID
	s.fieldMap["ConfigType"] = s.ConfigType
	s.fieldMap["Content"] = s.Content
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysconfiglog) clone(db *gorm.DB) sysconfiglog {
	s.sysconfiglogDo.ReplaceDB(db)
	return s
}

type sysconfiglogDo struct{ gen.DO }

type ISysconfiglogDo interface {
	gen.SubQuery
	Debug() ISysconfiglogDo
	WithContext(ctx context.Context) ISysconfiglogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysconfiglogDo
	Not(conds ...gen.Condition) ISysconfiglogDo
	Or(conds ...gen.Condition) ISysconfiglogDo
	Select(conds ...field.Expr) ISysconfiglogDo
	Where(conds ...gen.Condition) ISysconfiglogDo
	Order(conds ...field.Expr) ISysconfiglogDo
	Distinct(cols ...field.Expr) ISysconfiglogDo
	Omit(cols ...field.Expr) ISysconfiglogDo
	Join(table schema.Tabler, on ...field.Expr) ISysconfiglogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfiglogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysconfiglogDo
	Group(cols ...field.Expr) ISysconfiglogDo
	Having(conds ...gen.Condition) ISysconfiglogDo
	Limit(limit int) ISysconfiglogDo
	Offset(offset int) ISysconfiglogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfiglogDo
	Unscoped() ISysconfiglogDo
	Create(values ...*model.Sysconfiglog) error
	CreateInBatches(values []*model.Sysconfiglog, batchSize int) error
	Save(values ...*model.Sysconfiglog) error
	First() (*model.Sysconfiglog, error)
	Take() (*model.Sysconfiglog, error)
	Last() (*model.Sysconfiglog, error)
	Find() ([]*model.Sysconfiglog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysconfiglog, err error)
	FindInBatches(result *[]*model.Sysconfiglog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysconfiglog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysconfiglogDo
	Assign(attrs ...field.AssignExpr) ISysconfiglogDo
	Joins(fields ...field.RelationField) ISysconfiglogDo
	Preload(fields ...field.RelationField) ISysconfiglogDo
	FirstOrInit() (*model.Sysconfiglog, error)
	FirstOrCreate() (*model.Sysconfiglog, error)
	FindByPage(offset int, limit int) (result []*model.Sysconfiglog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysconfiglogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysconfiglogDo) Debug() ISysconfiglogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysconfiglogDo) WithContext(ctx context.Context) ISysconfiglogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysconfiglogDo) ReadDB() ISysconfiglogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysconfiglogDo) WriteDB() ISysconfiglogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysconfiglogDo) Clauses(conds ...clause.Expression) ISysconfiglogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysconfiglogDo) Returning(value interface{}, columns ...string) ISysconfiglogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysconfiglogDo) Not(conds ...gen.Condition) ISysconfiglogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysconfiglogDo) Or(conds ...gen.Condition) ISysconfiglogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysconfiglogDo) Select(conds ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysconfiglogDo) Where(conds ...gen.Condition) ISysconfiglogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysconfiglogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysconfiglogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysconfiglogDo) Order(conds ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysconfiglogDo) Distinct(cols ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysconfiglogDo) Omit(cols ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysconfiglogDo) Join(table schema.Tabler, on ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysconfiglogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysconfiglogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysconfiglogDo) Group(cols ...field.Expr) ISysconfiglogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysconfiglogDo) Having(conds ...gen.Condition) ISysconfiglogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysconfiglogDo) Limit(limit int) ISysconfiglogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysconfiglogDo) Offset(offset int) ISysconfiglogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysconfiglogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysconfiglogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysconfiglogDo) Unscoped() ISysconfiglogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysconfiglogDo) Create(values ...*model.Sysconfiglog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysconfiglogDo) CreateInBatches(values []*model.Sysconfiglog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysconfiglogDo) Save(values ...*model.Sysconfiglog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysconfiglogDo) First() (*model.Sysconfiglog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfiglog), nil
	}
}

func (s sysconfiglogDo) Take() (*model.Sysconfiglog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfiglog), nil
	}
}

func (s sysconfiglogDo) Last() (*model.Sysconfiglog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfiglog), nil
	}
}

func (s sysconfiglogDo) Find() ([]*model.Sysconfiglog, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysconfiglog), err
}

func (s sysconfiglogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysconfiglog, err error) {
	buf := make([]*model.Sysconfiglog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysconfiglogDo) FindInBatches(result *[]*model.Sysconfiglog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysconfiglogDo) Attrs(attrs ...field.AssignExpr) ISysconfiglogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysconfiglogDo) Assign(attrs ...field.AssignExpr) ISysconfiglogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysconfiglogDo) Joins(fields ...field.RelationField) ISysconfiglogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysconfiglogDo) Preload(fields ...field.RelationField) ISysconfiglogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysconfiglogDo) FirstOrInit() (*model.Sysconfiglog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfiglog), nil
	}
}

func (s sysconfiglogDo) FirstOrCreate() (*model.Sysconfiglog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysconfiglog), nil
	}
}

func (s sysconfiglogDo) FindByPage(offset int, limit int) (result []*model.Sysconfiglog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysconfiglogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysconfiglogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysconfiglogDo) Delete(models ...*model.Sysconfiglog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysconfiglogDo) withDO(do gen.Dao) *sysconfiglogDo {
	s.DO = *do.(*gen.DO)
	return s
}
