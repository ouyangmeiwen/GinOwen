// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpfeature(db *gorm.DB) abpfeature {
	_abpfeature := abpfeature{}

	_abpfeature.abpfeatureDo.UseDB(db)
	_abpfeature.abpfeatureDo.UseModel(&model.Abpfeature{})

	tableName := _abpfeature.abpfeatureDo.TableName()
	_abpfeature.ALL = field.NewAsterisk(tableName)
	_abpfeature.ID = field.NewInt64(tableName, "Id")
	_abpfeature.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpfeature.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpfeature.TenantID = field.NewInt64(tableName, "TenantId")
	_abpfeature.Name = field.NewString(tableName, "Name")
	_abpfeature.Value = field.NewString(tableName, "Value")
	_abpfeature.Discriminator = field.NewString(tableName, "Discriminator")
	_abpfeature.EditionID = field.NewInt64(tableName, "EditionId")

	_abpfeature.fillFieldMap()

	return _abpfeature
}

type abpfeature struct {
	abpfeatureDo abpfeatureDo

	ALL           field.Asterisk
	ID            field.Int64
	CreationTime  field.Time
	CreatorUserID field.Int64
	TenantID      field.Int64
	Name          field.String
	Value         field.String
	Discriminator field.String
	EditionID     field.Int64

	fieldMap map[string]field.Expr
}

func (a abpfeature) Table(newTableName string) *abpfeature {
	a.abpfeatureDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpfeature) As(alias string) *abpfeature {
	a.abpfeatureDo.DO = *(a.abpfeatureDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpfeature) updateTableName(table string) *abpfeature {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.Name = field.NewString(table, "Name")
	a.Value = field.NewString(table, "Value")
	a.Discriminator = field.NewString(table, "Discriminator")
	a.EditionID = field.NewInt64(table, "EditionId")

	a.fillFieldMap()

	return a
}

func (a *abpfeature) WithContext(ctx context.Context) IAbpfeatureDo {
	return a.abpfeatureDo.WithContext(ctx)
}

func (a abpfeature) TableName() string { return a.abpfeatureDo.TableName() }

func (a abpfeature) Alias() string { return a.abpfeatureDo.Alias() }

func (a *abpfeature) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpfeature) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["Name"] = a.Name
	a.fieldMap["Value"] = a.Value
	a.fieldMap["Discriminator"] = a.Discriminator
	a.fieldMap["EditionId"] = a.EditionID
}

func (a abpfeature) clone(db *gorm.DB) abpfeature {
	a.abpfeatureDo.ReplaceDB(db)
	return a
}

type abpfeatureDo struct{ gen.DO }

type IAbpfeatureDo interface {
	gen.SubQuery
	Debug() IAbpfeatureDo
	WithContext(ctx context.Context) IAbpfeatureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpfeatureDo
	Not(conds ...gen.Condition) IAbpfeatureDo
	Or(conds ...gen.Condition) IAbpfeatureDo
	Select(conds ...field.Expr) IAbpfeatureDo
	Where(conds ...gen.Condition) IAbpfeatureDo
	Order(conds ...field.Expr) IAbpfeatureDo
	Distinct(cols ...field.Expr) IAbpfeatureDo
	Omit(cols ...field.Expr) IAbpfeatureDo
	Join(table schema.Tabler, on ...field.Expr) IAbpfeatureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpfeatureDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpfeatureDo
	Group(cols ...field.Expr) IAbpfeatureDo
	Having(conds ...gen.Condition) IAbpfeatureDo
	Limit(limit int) IAbpfeatureDo
	Offset(offset int) IAbpfeatureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpfeatureDo
	Unscoped() IAbpfeatureDo
	Create(values ...*model.Abpfeature) error
	CreateInBatches(values []*model.Abpfeature, batchSize int) error
	Save(values ...*model.Abpfeature) error
	First() (*model.Abpfeature, error)
	Take() (*model.Abpfeature, error)
	Last() (*model.Abpfeature, error)
	Find() ([]*model.Abpfeature, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpfeature, err error)
	FindInBatches(result *[]*model.Abpfeature, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpfeature) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpfeatureDo
	Assign(attrs ...field.AssignExpr) IAbpfeatureDo
	Joins(fields ...field.RelationField) IAbpfeatureDo
	Preload(fields ...field.RelationField) IAbpfeatureDo
	FirstOrInit() (*model.Abpfeature, error)
	FirstOrCreate() (*model.Abpfeature, error)
	FindByPage(offset int, limit int) (result []*model.Abpfeature, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpfeatureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpfeatureDo) Debug() IAbpfeatureDo {
	return a.withDO(a.DO.Debug())
}

func (a abpfeatureDo) WithContext(ctx context.Context) IAbpfeatureDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpfeatureDo) ReadDB() IAbpfeatureDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpfeatureDo) WriteDB() IAbpfeatureDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpfeatureDo) Clauses(conds ...clause.Expression) IAbpfeatureDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpfeatureDo) Returning(value interface{}, columns ...string) IAbpfeatureDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpfeatureDo) Not(conds ...gen.Condition) IAbpfeatureDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpfeatureDo) Or(conds ...gen.Condition) IAbpfeatureDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpfeatureDo) Select(conds ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpfeatureDo) Where(conds ...gen.Condition) IAbpfeatureDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpfeatureDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpfeatureDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpfeatureDo) Order(conds ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpfeatureDo) Distinct(cols ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpfeatureDo) Omit(cols ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpfeatureDo) Join(table schema.Tabler, on ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpfeatureDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpfeatureDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpfeatureDo) Group(cols ...field.Expr) IAbpfeatureDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpfeatureDo) Having(conds ...gen.Condition) IAbpfeatureDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpfeatureDo) Limit(limit int) IAbpfeatureDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpfeatureDo) Offset(offset int) IAbpfeatureDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpfeatureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpfeatureDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpfeatureDo) Unscoped() IAbpfeatureDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpfeatureDo) Create(values ...*model.Abpfeature) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpfeatureDo) CreateInBatches(values []*model.Abpfeature, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpfeatureDo) Save(values ...*model.Abpfeature) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpfeatureDo) First() (*model.Abpfeature, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpfeature), nil
	}
}

func (a abpfeatureDo) Take() (*model.Abpfeature, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpfeature), nil
	}
}

func (a abpfeatureDo) Last() (*model.Abpfeature, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpfeature), nil
	}
}

func (a abpfeatureDo) Find() ([]*model.Abpfeature, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpfeature), err
}

func (a abpfeatureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpfeature, err error) {
	buf := make([]*model.Abpfeature, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpfeatureDo) FindInBatches(result *[]*model.Abpfeature, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpfeatureDo) Attrs(attrs ...field.AssignExpr) IAbpfeatureDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpfeatureDo) Assign(attrs ...field.AssignExpr) IAbpfeatureDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpfeatureDo) Joins(fields ...field.RelationField) IAbpfeatureDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpfeatureDo) Preload(fields ...field.RelationField) IAbpfeatureDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpfeatureDo) FirstOrInit() (*model.Abpfeature, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpfeature), nil
	}
}

func (a abpfeatureDo) FirstOrCreate() (*model.Abpfeature, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpfeature), nil
	}
}

func (a abpfeatureDo) FindByPage(offset int, limit int) (result []*model.Abpfeature, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpfeatureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpfeatureDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpfeatureDo) Delete(models ...*model.Abpfeature) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpfeatureDo) withDO(do gen.Dao) *abpfeatureDo {
	a.DO = *do.(*gen.DO)
	return a
}
