// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDasvisitpage(db *gorm.DB) dasvisitpage {
	_dasvisitpage := dasvisitpage{}

	_dasvisitpage.dasvisitpageDo.UseDB(db)
	_dasvisitpage.dasvisitpageDo.UseModel(&model.Dasvisitpage{})

	tableName := _dasvisitpage.dasvisitpageDo.TableName()
	_dasvisitpage.ALL = field.NewAsterisk(tableName)
	_dasvisitpage.ID = field.NewString(tableName, "Id")
	_dasvisitpage.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasvisitpage.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasvisitpage.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_dasvisitpage.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_dasvisitpage.RefDate = field.NewString(tableName, "ref_date")
	_dasvisitpage.PagePath = field.NewString(tableName, "page_path")
	_dasvisitpage.PageVisitPv = field.NewInt64(tableName, "page_visit_pv")
	_dasvisitpage.PageVisitUv = field.NewString(tableName, "page_visit_uv")
	_dasvisitpage.PageStaytimePv = field.NewFloat64(tableName, "page_staytime_pv")
	_dasvisitpage.EntrypagePv = field.NewInt64(tableName, "entrypage_pv")
	_dasvisitpage.ExitpagePv = field.NewInt64(tableName, "exitpage_pv")
	_dasvisitpage.PageSharePv = field.NewInt64(tableName, "page_share_pv")
	_dasvisitpage.PageShareUv = field.NewInt64(tableName, "page_share_uv")
	_dasvisitpage.TenantID = field.NewInt64(tableName, "TenantId")
	_dasvisitpage.AppID = field.NewString(tableName, "AppId")

	_dasvisitpage.fillFieldMap()

	return _dasvisitpage
}

type dasvisitpage struct {
	dasvisitpageDo dasvisitpageDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	RefDate              field.String
	PagePath             field.String
	PageVisitPv          field.Int64
	PageVisitUv          field.String
	PageStaytimePv       field.Float64
	EntrypagePv          field.Int64
	ExitpagePv           field.Int64
	PageSharePv          field.Int64
	PageShareUv          field.Int64
	TenantID             field.Int64
	AppID                field.String

	fieldMap map[string]field.Expr
}

func (d dasvisitpage) Table(newTableName string) *dasvisitpage {
	d.dasvisitpageDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasvisitpage) As(alias string) *dasvisitpage {
	d.dasvisitpageDo.DO = *(d.dasvisitpageDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasvisitpage) updateTableName(table string) *dasvisitpage {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.LastModificationTime = field.NewTime(table, "LastModificationTime")
	d.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	d.RefDate = field.NewString(table, "ref_date")
	d.PagePath = field.NewString(table, "page_path")
	d.PageVisitPv = field.NewInt64(table, "page_visit_pv")
	d.PageVisitUv = field.NewString(table, "page_visit_uv")
	d.PageStaytimePv = field.NewFloat64(table, "page_staytime_pv")
	d.EntrypagePv = field.NewInt64(table, "entrypage_pv")
	d.ExitpagePv = field.NewInt64(table, "exitpage_pv")
	d.PageSharePv = field.NewInt64(table, "page_share_pv")
	d.PageShareUv = field.NewInt64(table, "page_share_uv")
	d.TenantID = field.NewInt64(table, "TenantId")
	d.AppID = field.NewString(table, "AppId")

	d.fillFieldMap()

	return d
}

func (d *dasvisitpage) WithContext(ctx context.Context) IDasvisitpageDo {
	return d.dasvisitpageDo.WithContext(ctx)
}

func (d dasvisitpage) TableName() string { return d.dasvisitpageDo.TableName() }

func (d dasvisitpage) Alias() string { return d.dasvisitpageDo.Alias() }

func (d *dasvisitpage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasvisitpage) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 16)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["LastModificationTime"] = d.LastModificationTime
	d.fieldMap["LastModifierUserId"] = d.LastModifierUserID
	d.fieldMap["ref_date"] = d.RefDate
	d.fieldMap["page_path"] = d.PagePath
	d.fieldMap["page_visit_pv"] = d.PageVisitPv
	d.fieldMap["page_visit_uv"] = d.PageVisitUv
	d.fieldMap["page_staytime_pv"] = d.PageStaytimePv
	d.fieldMap["entrypage_pv"] = d.EntrypagePv
	d.fieldMap["exitpage_pv"] = d.ExitpagePv
	d.fieldMap["page_share_pv"] = d.PageSharePv
	d.fieldMap["page_share_uv"] = d.PageShareUv
	d.fieldMap["TenantId"] = d.TenantID
	d.fieldMap["AppId"] = d.AppID
}

func (d dasvisitpage) clone(db *gorm.DB) dasvisitpage {
	d.dasvisitpageDo.ReplaceDB(db)
	return d
}

type dasvisitpageDo struct{ gen.DO }

type IDasvisitpageDo interface {
	gen.SubQuery
	Debug() IDasvisitpageDo
	WithContext(ctx context.Context) IDasvisitpageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasvisitpageDo
	Not(conds ...gen.Condition) IDasvisitpageDo
	Or(conds ...gen.Condition) IDasvisitpageDo
	Select(conds ...field.Expr) IDasvisitpageDo
	Where(conds ...gen.Condition) IDasvisitpageDo
	Order(conds ...field.Expr) IDasvisitpageDo
	Distinct(cols ...field.Expr) IDasvisitpageDo
	Omit(cols ...field.Expr) IDasvisitpageDo
	Join(table schema.Tabler, on ...field.Expr) IDasvisitpageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasvisitpageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasvisitpageDo
	Group(cols ...field.Expr) IDasvisitpageDo
	Having(conds ...gen.Condition) IDasvisitpageDo
	Limit(limit int) IDasvisitpageDo
	Offset(offset int) IDasvisitpageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasvisitpageDo
	Unscoped() IDasvisitpageDo
	Create(values ...*model.Dasvisitpage) error
	CreateInBatches(values []*model.Dasvisitpage, batchSize int) error
	Save(values ...*model.Dasvisitpage) error
	First() (*model.Dasvisitpage, error)
	Take() (*model.Dasvisitpage, error)
	Last() (*model.Dasvisitpage, error)
	Find() ([]*model.Dasvisitpage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasvisitpage, err error)
	FindInBatches(result *[]*model.Dasvisitpage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasvisitpage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasvisitpageDo
	Assign(attrs ...field.AssignExpr) IDasvisitpageDo
	Joins(fields ...field.RelationField) IDasvisitpageDo
	Preload(fields ...field.RelationField) IDasvisitpageDo
	FirstOrInit() (*model.Dasvisitpage, error)
	FirstOrCreate() (*model.Dasvisitpage, error)
	FindByPage(offset int, limit int) (result []*model.Dasvisitpage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasvisitpageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasvisitpageDo) Debug() IDasvisitpageDo {
	return d.withDO(d.DO.Debug())
}

func (d dasvisitpageDo) WithContext(ctx context.Context) IDasvisitpageDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasvisitpageDo) ReadDB() IDasvisitpageDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasvisitpageDo) WriteDB() IDasvisitpageDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasvisitpageDo) Clauses(conds ...clause.Expression) IDasvisitpageDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasvisitpageDo) Returning(value interface{}, columns ...string) IDasvisitpageDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasvisitpageDo) Not(conds ...gen.Condition) IDasvisitpageDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasvisitpageDo) Or(conds ...gen.Condition) IDasvisitpageDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasvisitpageDo) Select(conds ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasvisitpageDo) Where(conds ...gen.Condition) IDasvisitpageDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasvisitpageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasvisitpageDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasvisitpageDo) Order(conds ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasvisitpageDo) Distinct(cols ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasvisitpageDo) Omit(cols ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasvisitpageDo) Join(table schema.Tabler, on ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasvisitpageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasvisitpageDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasvisitpageDo) Group(cols ...field.Expr) IDasvisitpageDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasvisitpageDo) Having(conds ...gen.Condition) IDasvisitpageDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasvisitpageDo) Limit(limit int) IDasvisitpageDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasvisitpageDo) Offset(offset int) IDasvisitpageDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasvisitpageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasvisitpageDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasvisitpageDo) Unscoped() IDasvisitpageDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasvisitpageDo) Create(values ...*model.Dasvisitpage) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasvisitpageDo) CreateInBatches(values []*model.Dasvisitpage, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasvisitpageDo) Save(values ...*model.Dasvisitpage) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasvisitpageDo) First() (*model.Dasvisitpage, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisitpage), nil
	}
}

func (d dasvisitpageDo) Take() (*model.Dasvisitpage, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisitpage), nil
	}
}

func (d dasvisitpageDo) Last() (*model.Dasvisitpage, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisitpage), nil
	}
}

func (d dasvisitpageDo) Find() ([]*model.Dasvisitpage, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasvisitpage), err
}

func (d dasvisitpageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasvisitpage, err error) {
	buf := make([]*model.Dasvisitpage, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasvisitpageDo) FindInBatches(result *[]*model.Dasvisitpage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasvisitpageDo) Attrs(attrs ...field.AssignExpr) IDasvisitpageDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasvisitpageDo) Assign(attrs ...field.AssignExpr) IDasvisitpageDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasvisitpageDo) Joins(fields ...field.RelationField) IDasvisitpageDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasvisitpageDo) Preload(fields ...field.RelationField) IDasvisitpageDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasvisitpageDo) FirstOrInit() (*model.Dasvisitpage, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisitpage), nil
	}
}

func (d dasvisitpageDo) FirstOrCreate() (*model.Dasvisitpage, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasvisitpage), nil
	}
}

func (d dasvisitpageDo) FindByPage(offset int, limit int) (result []*model.Dasvisitpage, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasvisitpageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasvisitpageDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasvisitpageDo) Delete(models ...*model.Dasvisitpage) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasvisitpageDo) withDO(do gen.Dao) *dasvisitpageDo {
	d.DO = *do.(*gen.DO)
	return d
}
