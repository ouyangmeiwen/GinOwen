// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLcpconfig(db *gorm.DB) lcpconfig {
	_lcpconfig := lcpconfig{}

	_lcpconfig.lcpconfigDo.UseDB(db)
	_lcpconfig.lcpconfigDo.UseModel(&model.Lcpconfig{})

	tableName := _lcpconfig.lcpconfigDo.TableName()
	_lcpconfig.ALL = field.NewAsterisk(tableName)
	_lcpconfig.ID = field.NewString(tableName, "Id")
	_lcpconfig.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpconfig.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpconfig.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpconfig.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpconfig.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpconfig.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpconfig.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpconfig.TargetID = field.NewString(tableName, "TargetId")
	_lcpconfig.TargetCode = field.NewString(tableName, "TargetCode")
	_lcpconfig.TargetName = field.NewString(tableName, "TargetName")
	_lcpconfig.Directory = field.NewString(tableName, "Directory")
	_lcpconfig.FileName = field.NewString(tableName, "FileName")
	_lcpconfig.Content = field.NewString(tableName, "Content")
	_lcpconfig.IsLost = field.NewField(tableName, "IsLost")
	_lcpconfig.Remark = field.NewString(tableName, "Remark")
	_lcpconfig.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpconfig.fillFieldMap()

	return _lcpconfig
}

type lcpconfig struct {
	lcpconfigDo lcpconfigDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TargetID             field.String
	TargetCode           field.String
	TargetName           field.String
	Directory            field.String
	FileName             field.String
	Content              field.String
	IsLost               field.Field
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpconfig) Table(newTableName string) *lcpconfig {
	l.lcpconfigDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpconfig) As(alias string) *lcpconfig {
	l.lcpconfigDo.DO = *(l.lcpconfigDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpconfig) updateTableName(table string) *lcpconfig {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TargetID = field.NewString(table, "TargetId")
	l.TargetCode = field.NewString(table, "TargetCode")
	l.TargetName = field.NewString(table, "TargetName")
	l.Directory = field.NewString(table, "Directory")
	l.FileName = field.NewString(table, "FileName")
	l.Content = field.NewString(table, "Content")
	l.IsLost = field.NewField(table, "IsLost")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpconfig) WithContext(ctx context.Context) ILcpconfigDo {
	return l.lcpconfigDo.WithContext(ctx)
}

func (l lcpconfig) TableName() string { return l.lcpconfigDo.TableName() }

func (l lcpconfig) Alias() string { return l.lcpconfigDo.Alias() }

func (l *lcpconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpconfig) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TargetId"] = l.TargetID
	l.fieldMap["TargetCode"] = l.TargetCode
	l.fieldMap["TargetName"] = l.TargetName
	l.fieldMap["Directory"] = l.Directory
	l.fieldMap["FileName"] = l.FileName
	l.fieldMap["Content"] = l.Content
	l.fieldMap["IsLost"] = l.IsLost
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpconfig) clone(db *gorm.DB) lcpconfig {
	l.lcpconfigDo.ReplaceDB(db)
	return l
}

type lcpconfigDo struct{ gen.DO }

type ILcpconfigDo interface {
	gen.SubQuery
	Debug() ILcpconfigDo
	WithContext(ctx context.Context) ILcpconfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpconfigDo
	Not(conds ...gen.Condition) ILcpconfigDo
	Or(conds ...gen.Condition) ILcpconfigDo
	Select(conds ...field.Expr) ILcpconfigDo
	Where(conds ...gen.Condition) ILcpconfigDo
	Order(conds ...field.Expr) ILcpconfigDo
	Distinct(cols ...field.Expr) ILcpconfigDo
	Omit(cols ...field.Expr) ILcpconfigDo
	Join(table schema.Tabler, on ...field.Expr) ILcpconfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpconfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpconfigDo
	Group(cols ...field.Expr) ILcpconfigDo
	Having(conds ...gen.Condition) ILcpconfigDo
	Limit(limit int) ILcpconfigDo
	Offset(offset int) ILcpconfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpconfigDo
	Unscoped() ILcpconfigDo
	Create(values ...*model.Lcpconfig) error
	CreateInBatches(values []*model.Lcpconfig, batchSize int) error
	Save(values ...*model.Lcpconfig) error
	First() (*model.Lcpconfig, error)
	Take() (*model.Lcpconfig, error)
	Last() (*model.Lcpconfig, error)
	Find() ([]*model.Lcpconfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpconfig, err error)
	FindInBatches(result *[]*model.Lcpconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpconfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpconfigDo
	Assign(attrs ...field.AssignExpr) ILcpconfigDo
	Joins(fields ...field.RelationField) ILcpconfigDo
	Preload(fields ...field.RelationField) ILcpconfigDo
	FirstOrInit() (*model.Lcpconfig, error)
	FirstOrCreate() (*model.Lcpconfig, error)
	FindByPage(offset int, limit int) (result []*model.Lcpconfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpconfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpconfigDo) Debug() ILcpconfigDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpconfigDo) WithContext(ctx context.Context) ILcpconfigDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpconfigDo) ReadDB() ILcpconfigDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpconfigDo) WriteDB() ILcpconfigDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpconfigDo) Clauses(conds ...clause.Expression) ILcpconfigDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpconfigDo) Returning(value interface{}, columns ...string) ILcpconfigDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpconfigDo) Not(conds ...gen.Condition) ILcpconfigDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpconfigDo) Or(conds ...gen.Condition) ILcpconfigDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpconfigDo) Select(conds ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpconfigDo) Where(conds ...gen.Condition) ILcpconfigDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpconfigDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpconfigDo) Order(conds ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpconfigDo) Distinct(cols ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpconfigDo) Omit(cols ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpconfigDo) Join(table schema.Tabler, on ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpconfigDo) Group(cols ...field.Expr) ILcpconfigDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpconfigDo) Having(conds ...gen.Condition) ILcpconfigDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpconfigDo) Limit(limit int) ILcpconfigDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpconfigDo) Offset(offset int) ILcpconfigDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpconfigDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpconfigDo) Unscoped() ILcpconfigDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpconfigDo) Create(values ...*model.Lcpconfig) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpconfigDo) CreateInBatches(values []*model.Lcpconfig, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpconfigDo) Save(values ...*model.Lcpconfig) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpconfigDo) First() (*model.Lcpconfig, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpconfig), nil
	}
}

func (l lcpconfigDo) Take() (*model.Lcpconfig, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpconfig), nil
	}
}

func (l lcpconfigDo) Last() (*model.Lcpconfig, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpconfig), nil
	}
}

func (l lcpconfigDo) Find() ([]*model.Lcpconfig, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpconfig), err
}

func (l lcpconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpconfig, err error) {
	buf := make([]*model.Lcpconfig, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpconfigDo) FindInBatches(result *[]*model.Lcpconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpconfigDo) Attrs(attrs ...field.AssignExpr) ILcpconfigDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpconfigDo) Assign(attrs ...field.AssignExpr) ILcpconfigDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpconfigDo) Joins(fields ...field.RelationField) ILcpconfigDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpconfigDo) Preload(fields ...field.RelationField) ILcpconfigDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpconfigDo) FirstOrInit() (*model.Lcpconfig, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpconfig), nil
	}
}

func (l lcpconfigDo) FirstOrCreate() (*model.Lcpconfig, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpconfig), nil
	}
}

func (l lcpconfigDo) FindByPage(offset int, limit int) (result []*model.Lcpconfig, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpconfigDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpconfigDo) Delete(models ...*model.Lcpconfig) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpconfigDo) withDO(do gen.Dao) *lcpconfigDo {
	l.DO = *do.(*gen.DO)
	return l
}
