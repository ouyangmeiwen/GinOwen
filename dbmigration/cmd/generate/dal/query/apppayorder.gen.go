// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newApppayorder(db *gorm.DB) apppayorder {
	_apppayorder := apppayorder{}

	_apppayorder.apppayorderDo.UseDB(db)
	_apppayorder.apppayorderDo.UseModel(&model.Apppayorder{})

	tableName := _apppayorder.apppayorderDo.TableName()
	_apppayorder.ALL = field.NewAsterisk(tableName)
	_apppayorder.ID = field.NewString(tableName, "Id")
	_apppayorder.CreationTime = field.NewTime(tableName, "CreationTime")
	_apppayorder.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_apppayorder.OutTradeNo = field.NewString(tableName, "OutTradeNo")
	_apppayorder.AppOrderNo = field.NewString(tableName, "AppOrderNo")
	_apppayorder.AppID = field.NewString(tableName, "AppId")
	_apppayorder.PayerID = field.NewString(tableName, "PayerId")
	_apppayorder.PaymentStatus = field.NewInt64(tableName, "PaymentStatus")
	_apppayorder.PayMoney = field.NewInt64(tableName, "PayMoney")
	_apppayorder.PaymentType = field.NewInt64(tableName, "PaymentType")
	_apppayorder.DeviceInfo = field.NewString(tableName, "DeviceInfo")
	_apppayorder.BodyInfo = field.NewString(tableName, "BodyInfo")
	_apppayorder.DetailInfo = field.NewString(tableName, "DetailInfo")
	_apppayorder.QrCodeURL = field.NewString(tableName, "QrCodeUrl")
	_apppayorder.TenantID = field.NewInt64(tableName, "TenantId")

	_apppayorder.fillFieldMap()

	return _apppayorder
}

type apppayorder struct {
	apppayorderDo apppayorderDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	OutTradeNo    field.String
	AppOrderNo    field.String
	AppID         field.String
	PayerID       field.String
	PaymentStatus field.Int64
	PayMoney      field.Int64
	PaymentType   field.Int64
	DeviceInfo    field.String
	BodyInfo      field.String
	DetailInfo    field.String
	QrCodeURL     field.String
	TenantID      field.Int64

	fieldMap map[string]field.Expr
}

func (a apppayorder) Table(newTableName string) *apppayorder {
	a.apppayorderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apppayorder) As(alias string) *apppayorder {
	a.apppayorderDo.DO = *(a.apppayorderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apppayorder) updateTableName(table string) *apppayorder {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.OutTradeNo = field.NewString(table, "OutTradeNo")
	a.AppOrderNo = field.NewString(table, "AppOrderNo")
	a.AppID = field.NewString(table, "AppId")
	a.PayerID = field.NewString(table, "PayerId")
	a.PaymentStatus = field.NewInt64(table, "PaymentStatus")
	a.PayMoney = field.NewInt64(table, "PayMoney")
	a.PaymentType = field.NewInt64(table, "PaymentType")
	a.DeviceInfo = field.NewString(table, "DeviceInfo")
	a.BodyInfo = field.NewString(table, "BodyInfo")
	a.DetailInfo = field.NewString(table, "DetailInfo")
	a.QrCodeURL = field.NewString(table, "QrCodeUrl")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *apppayorder) WithContext(ctx context.Context) IApppayorderDo {
	return a.apppayorderDo.WithContext(ctx)
}

func (a apppayorder) TableName() string { return a.apppayorderDo.TableName() }

func (a apppayorder) Alias() string { return a.apppayorderDo.Alias() }

func (a *apppayorder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apppayorder) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["OutTradeNo"] = a.OutTradeNo
	a.fieldMap["AppOrderNo"] = a.AppOrderNo
	a.fieldMap["AppId"] = a.AppID
	a.fieldMap["PayerId"] = a.PayerID
	a.fieldMap["PaymentStatus"] = a.PaymentStatus
	a.fieldMap["PayMoney"] = a.PayMoney
	a.fieldMap["PaymentType"] = a.PaymentType
	a.fieldMap["DeviceInfo"] = a.DeviceInfo
	a.fieldMap["BodyInfo"] = a.BodyInfo
	a.fieldMap["DetailInfo"] = a.DetailInfo
	a.fieldMap["QrCodeUrl"] = a.QrCodeURL
	a.fieldMap["TenantId"] = a.TenantID
}

func (a apppayorder) clone(db *gorm.DB) apppayorder {
	a.apppayorderDo.ReplaceDB(db)
	return a
}

type apppayorderDo struct{ gen.DO }

type IApppayorderDo interface {
	gen.SubQuery
	Debug() IApppayorderDo
	WithContext(ctx context.Context) IApppayorderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApppayorderDo
	Not(conds ...gen.Condition) IApppayorderDo
	Or(conds ...gen.Condition) IApppayorderDo
	Select(conds ...field.Expr) IApppayorderDo
	Where(conds ...gen.Condition) IApppayorderDo
	Order(conds ...field.Expr) IApppayorderDo
	Distinct(cols ...field.Expr) IApppayorderDo
	Omit(cols ...field.Expr) IApppayorderDo
	Join(table schema.Tabler, on ...field.Expr) IApppayorderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApppayorderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApppayorderDo
	Group(cols ...field.Expr) IApppayorderDo
	Having(conds ...gen.Condition) IApppayorderDo
	Limit(limit int) IApppayorderDo
	Offset(offset int) IApppayorderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApppayorderDo
	Unscoped() IApppayorderDo
	Create(values ...*model.Apppayorder) error
	CreateInBatches(values []*model.Apppayorder, batchSize int) error
	Save(values ...*model.Apppayorder) error
	First() (*model.Apppayorder, error)
	Take() (*model.Apppayorder, error)
	Last() (*model.Apppayorder, error)
	Find() ([]*model.Apppayorder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apppayorder, err error)
	FindInBatches(result *[]*model.Apppayorder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Apppayorder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApppayorderDo
	Assign(attrs ...field.AssignExpr) IApppayorderDo
	Joins(fields ...field.RelationField) IApppayorderDo
	Preload(fields ...field.RelationField) IApppayorderDo
	FirstOrInit() (*model.Apppayorder, error)
	FirstOrCreate() (*model.Apppayorder, error)
	FindByPage(offset int, limit int) (result []*model.Apppayorder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApppayorderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a apppayorderDo) Debug() IApppayorderDo {
	return a.withDO(a.DO.Debug())
}

func (a apppayorderDo) WithContext(ctx context.Context) IApppayorderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apppayorderDo) ReadDB() IApppayorderDo {
	return a.Clauses(dbresolver.Read)
}

func (a apppayorderDo) WriteDB() IApppayorderDo {
	return a.Clauses(dbresolver.Write)
}

func (a apppayorderDo) Clauses(conds ...clause.Expression) IApppayorderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apppayorderDo) Returning(value interface{}, columns ...string) IApppayorderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apppayorderDo) Not(conds ...gen.Condition) IApppayorderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apppayorderDo) Or(conds ...gen.Condition) IApppayorderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apppayorderDo) Select(conds ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apppayorderDo) Where(conds ...gen.Condition) IApppayorderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apppayorderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IApppayorderDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a apppayorderDo) Order(conds ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apppayorderDo) Distinct(cols ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apppayorderDo) Omit(cols ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apppayorderDo) Join(table schema.Tabler, on ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apppayorderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apppayorderDo) RightJoin(table schema.Tabler, on ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apppayorderDo) Group(cols ...field.Expr) IApppayorderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apppayorderDo) Having(conds ...gen.Condition) IApppayorderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apppayorderDo) Limit(limit int) IApppayorderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apppayorderDo) Offset(offset int) IApppayorderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apppayorderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApppayorderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apppayorderDo) Unscoped() IApppayorderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apppayorderDo) Create(values ...*model.Apppayorder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apppayorderDo) CreateInBatches(values []*model.Apppayorder, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apppayorderDo) Save(values ...*model.Apppayorder) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apppayorderDo) First() (*model.Apppayorder, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppayorder), nil
	}
}

func (a apppayorderDo) Take() (*model.Apppayorder, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppayorder), nil
	}
}

func (a apppayorderDo) Last() (*model.Apppayorder, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppayorder), nil
	}
}

func (a apppayorderDo) Find() ([]*model.Apppayorder, error) {
	result, err := a.DO.Find()
	return result.([]*model.Apppayorder), err
}

func (a apppayorderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Apppayorder, err error) {
	buf := make([]*model.Apppayorder, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apppayorderDo) FindInBatches(result *[]*model.Apppayorder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apppayorderDo) Attrs(attrs ...field.AssignExpr) IApppayorderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apppayorderDo) Assign(attrs ...field.AssignExpr) IApppayorderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apppayorderDo) Joins(fields ...field.RelationField) IApppayorderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apppayorderDo) Preload(fields ...field.RelationField) IApppayorderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apppayorderDo) FirstOrInit() (*model.Apppayorder, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppayorder), nil
	}
}

func (a apppayorderDo) FirstOrCreate() (*model.Apppayorder, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Apppayorder), nil
	}
}

func (a apppayorderDo) FindByPage(offset int, limit int) (result []*model.Apppayorder, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apppayorderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apppayorderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apppayorderDo) Delete(models ...*model.Apppayorder) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apppayorderDo) withDO(do gen.Dao) *apppayorderDo {
	a.DO = *do.(*gen.DO)
	return a
}
