// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibpatron(db *gorm.DB) libpatron {
	_libpatron := libpatron{}

	_libpatron.libpatronDo.UseDB(db)
	_libpatron.libpatronDo.UseModel(&model.Libpatron{})

	tableName := _libpatron.libpatronDo.TableName()
	_libpatron.ALL = field.NewAsterisk(tableName)
	_libpatron.ID = field.NewString(tableName, "Id")
	_libpatron.CreationTime = field.NewTime(tableName, "CreationTime")
	_libpatron.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libpatron.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libpatron.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libpatron.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libpatron.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libpatron.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libpatron.Name = field.NewString(tableName, "Name")
	_libpatron.IDCard = field.NewString(tableName, "IdCard")
	_libpatron.Barcode = field.NewString(tableName, "Barcode")
	_libpatron.IsEnable = field.NewField(tableName, "IsEnable")
	_libpatron.Sex = field.NewInt64(tableName, "Sex")
	_libpatron.Birthday = field.NewTime(tableName, "Birthday")
	_libpatron.Password = field.NewString(tableName, "Password")
	_libpatron.CardTypeID = field.NewString(tableName, "CardTypeId")
	_libpatron.CardTypeName = field.NewString(tableName, "CardTypeName")
	_libpatron.Tid = field.NewString(tableName, "Tid")
	_libpatron.Points = field.NewInt64(tableName, "Points")
	_libpatron.DepositMoney = field.NewInt64(tableName, "DepositMoney")
	_libpatron.Balance = field.NewInt64(tableName, "Balance")
	_libpatron.LateFee = field.NewInt64(tableName, "LateFee")
	_libpatron.Phone = field.NewString(tableName, "Phone")
	_libpatron.Email = field.NewString(tableName, "Email")
	_libpatron.Address = field.NewString(tableName, "Address")
	_libpatron.DepartmentID = field.NewString(tableName, "DepartmentId")
	_libpatron.DepartmentName = field.NewString(tableName, "DepartmentName")
	_libpatron.ExpireTime = field.NewTime(tableName, "ExpireTime")
	_libpatron.Remark = field.NewString(tableName, "Remark")
	_libpatron.OriginType = field.NewInt64(tableName, "OriginType")
	_libpatron.CreateType = field.NewInt64(tableName, "CreateType")
	_libpatron.TenantID = field.NewInt64(tableName, "TenantId")

	_libpatron.fillFieldMap()

	return _libpatron
}

type libpatron struct {
	libpatronDo libpatronDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	IDCard               field.String
	Barcode              field.String
	IsEnable             field.Field
	Sex                  field.Int64
	Birthday             field.Time
	Password             field.String
	CardTypeID           field.String
	CardTypeName         field.String
	Tid                  field.String
	Points               field.Int64
	DepositMoney         field.Int64
	Balance              field.Int64
	LateFee              field.Int64
	Phone                field.String
	Email                field.String
	Address              field.String
	DepartmentID         field.String
	DepartmentName       field.String
	ExpireTime           field.Time
	Remark               field.String
	OriginType           field.Int64
	CreateType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libpatron) Table(newTableName string) *libpatron {
	l.libpatronDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libpatron) As(alias string) *libpatron {
	l.libpatronDo.DO = *(l.libpatronDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libpatron) updateTableName(table string) *libpatron {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.Name = field.NewString(table, "Name")
	l.IDCard = field.NewString(table, "IdCard")
	l.Barcode = field.NewString(table, "Barcode")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.Sex = field.NewInt64(table, "Sex")
	l.Birthday = field.NewTime(table, "Birthday")
	l.Password = field.NewString(table, "Password")
	l.CardTypeID = field.NewString(table, "CardTypeId")
	l.CardTypeName = field.NewString(table, "CardTypeName")
	l.Tid = field.NewString(table, "Tid")
	l.Points = field.NewInt64(table, "Points")
	l.DepositMoney = field.NewInt64(table, "DepositMoney")
	l.Balance = field.NewInt64(table, "Balance")
	l.LateFee = field.NewInt64(table, "LateFee")
	l.Phone = field.NewString(table, "Phone")
	l.Email = field.NewString(table, "Email")
	l.Address = field.NewString(table, "Address")
	l.DepartmentID = field.NewString(table, "DepartmentId")
	l.DepartmentName = field.NewString(table, "DepartmentName")
	l.ExpireTime = field.NewTime(table, "ExpireTime")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.CreateType = field.NewInt64(table, "CreateType")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libpatron) WithContext(ctx context.Context) ILibpatronDo {
	return l.libpatronDo.WithContext(ctx)
}

func (l libpatron) TableName() string { return l.libpatronDo.TableName() }

func (l libpatron) Alias() string { return l.libpatronDo.Alias() }

func (l *libpatron) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libpatron) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 32)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["Name"] = l.Name
	l.fieldMap["IdCard"] = l.IDCard
	l.fieldMap["Barcode"] = l.Barcode
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["Sex"] = l.Sex
	l.fieldMap["Birthday"] = l.Birthday
	l.fieldMap["Password"] = l.Password
	l.fieldMap["CardTypeId"] = l.CardTypeID
	l.fieldMap["CardTypeName"] = l.CardTypeName
	l.fieldMap["Tid"] = l.Tid
	l.fieldMap["Points"] = l.Points
	l.fieldMap["DepositMoney"] = l.DepositMoney
	l.fieldMap["Balance"] = l.Balance
	l.fieldMap["LateFee"] = l.LateFee
	l.fieldMap["Phone"] = l.Phone
	l.fieldMap["Email"] = l.Email
	l.fieldMap["Address"] = l.Address
	l.fieldMap["DepartmentId"] = l.DepartmentID
	l.fieldMap["DepartmentName"] = l.DepartmentName
	l.fieldMap["ExpireTime"] = l.ExpireTime
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["CreateType"] = l.CreateType
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libpatron) clone(db *gorm.DB) libpatron {
	l.libpatronDo.ReplaceDB(db)
	return l
}

type libpatronDo struct{ gen.DO }

type ILibpatronDo interface {
	gen.SubQuery
	Debug() ILibpatronDo
	WithContext(ctx context.Context) ILibpatronDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibpatronDo
	Not(conds ...gen.Condition) ILibpatronDo
	Or(conds ...gen.Condition) ILibpatronDo
	Select(conds ...field.Expr) ILibpatronDo
	Where(conds ...gen.Condition) ILibpatronDo
	Order(conds ...field.Expr) ILibpatronDo
	Distinct(cols ...field.Expr) ILibpatronDo
	Omit(cols ...field.Expr) ILibpatronDo
	Join(table schema.Tabler, on ...field.Expr) ILibpatronDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibpatronDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibpatronDo
	Group(cols ...field.Expr) ILibpatronDo
	Having(conds ...gen.Condition) ILibpatronDo
	Limit(limit int) ILibpatronDo
	Offset(offset int) ILibpatronDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpatronDo
	Unscoped() ILibpatronDo
	Create(values ...*model.Libpatron) error
	CreateInBatches(values []*model.Libpatron, batchSize int) error
	Save(values ...*model.Libpatron) error
	First() (*model.Libpatron, error)
	Take() (*model.Libpatron, error)
	Last() (*model.Libpatron, error)
	Find() ([]*model.Libpatron, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpatron, err error)
	FindInBatches(result *[]*model.Libpatron, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libpatron) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibpatronDo
	Assign(attrs ...field.AssignExpr) ILibpatronDo
	Joins(fields ...field.RelationField) ILibpatronDo
	Preload(fields ...field.RelationField) ILibpatronDo
	FirstOrInit() (*model.Libpatron, error)
	FirstOrCreate() (*model.Libpatron, error)
	FindByPage(offset int, limit int) (result []*model.Libpatron, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibpatronDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libpatronDo) Debug() ILibpatronDo {
	return l.withDO(l.DO.Debug())
}

func (l libpatronDo) WithContext(ctx context.Context) ILibpatronDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libpatronDo) ReadDB() ILibpatronDo {
	return l.Clauses(dbresolver.Read)
}

func (l libpatronDo) WriteDB() ILibpatronDo {
	return l.Clauses(dbresolver.Write)
}

func (l libpatronDo) Clauses(conds ...clause.Expression) ILibpatronDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libpatronDo) Returning(value interface{}, columns ...string) ILibpatronDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libpatronDo) Not(conds ...gen.Condition) ILibpatronDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libpatronDo) Or(conds ...gen.Condition) ILibpatronDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libpatronDo) Select(conds ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libpatronDo) Where(conds ...gen.Condition) ILibpatronDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libpatronDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibpatronDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libpatronDo) Order(conds ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libpatronDo) Distinct(cols ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libpatronDo) Omit(cols ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libpatronDo) Join(table schema.Tabler, on ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libpatronDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libpatronDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libpatronDo) Group(cols ...field.Expr) ILibpatronDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libpatronDo) Having(conds ...gen.Condition) ILibpatronDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libpatronDo) Limit(limit int) ILibpatronDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libpatronDo) Offset(offset int) ILibpatronDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libpatronDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibpatronDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libpatronDo) Unscoped() ILibpatronDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libpatronDo) Create(values ...*model.Libpatron) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libpatronDo) CreateInBatches(values []*model.Libpatron, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libpatronDo) Save(values ...*model.Libpatron) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libpatronDo) First() (*model.Libpatron, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatron), nil
	}
}

func (l libpatronDo) Take() (*model.Libpatron, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatron), nil
	}
}

func (l libpatronDo) Last() (*model.Libpatron, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatron), nil
	}
}

func (l libpatronDo) Find() ([]*model.Libpatron, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libpatron), err
}

func (l libpatronDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libpatron, err error) {
	buf := make([]*model.Libpatron, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libpatronDo) FindInBatches(result *[]*model.Libpatron, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libpatronDo) Attrs(attrs ...field.AssignExpr) ILibpatronDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libpatronDo) Assign(attrs ...field.AssignExpr) ILibpatronDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libpatronDo) Joins(fields ...field.RelationField) ILibpatronDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libpatronDo) Preload(fields ...field.RelationField) ILibpatronDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libpatronDo) FirstOrInit() (*model.Libpatron, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatron), nil
	}
}

func (l libpatronDo) FirstOrCreate() (*model.Libpatron, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libpatron), nil
	}
}

func (l libpatronDo) FindByPage(offset int, limit int) (result []*model.Libpatron, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libpatronDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libpatronDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libpatronDo) Delete(models ...*model.Libpatron) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libpatronDo) withDO(do gen.Dao) *libpatronDo {
	l.DO = *do.(*gen.DO)
	return l
}
