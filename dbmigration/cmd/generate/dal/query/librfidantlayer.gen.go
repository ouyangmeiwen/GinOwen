// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibrfidantlayer(db *gorm.DB) librfidantlayer {
	_librfidantlayer := librfidantlayer{}

	_librfidantlayer.librfidantlayerDo.UseDB(db)
	_librfidantlayer.librfidantlayerDo.UseModel(&model.Librfidantlayer{})

	tableName := _librfidantlayer.librfidantlayerDo.TableName()
	_librfidantlayer.ALL = field.NewAsterisk(tableName)
	_librfidantlayer.ID = field.NewString(tableName, "Id")
	_librfidantlayer.CreationTime = field.NewTime(tableName, "CreationTime")
	_librfidantlayer.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_librfidantlayer.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_librfidantlayer.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_librfidantlayer.AntennaID = field.NewString(tableName, "AntennaId")
	_librfidantlayer.LayerID = field.NewString(tableName, "LayerId")
	_librfidantlayer.Remark = field.NewString(tableName, "Remark")
	_librfidantlayer.TenantID = field.NewInt64(tableName, "TenantId")

	_librfidantlayer.fillFieldMap()

	return _librfidantlayer
}

type librfidantlayer struct {
	librfidantlayerDo librfidantlayerDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	AntennaID            field.String
	LayerID              field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l librfidantlayer) Table(newTableName string) *librfidantlayer {
	l.librfidantlayerDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l librfidantlayer) As(alias string) *librfidantlayer {
	l.librfidantlayerDo.DO = *(l.librfidantlayerDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *librfidantlayer) updateTableName(table string) *librfidantlayer {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.AntennaID = field.NewString(table, "AntennaId")
	l.LayerID = field.NewString(table, "LayerId")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *librfidantlayer) WithContext(ctx context.Context) ILibrfidantlayerDo {
	return l.librfidantlayerDo.WithContext(ctx)
}

func (l librfidantlayer) TableName() string { return l.librfidantlayerDo.TableName() }

func (l librfidantlayer) Alias() string { return l.librfidantlayerDo.Alias() }

func (l *librfidantlayer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *librfidantlayer) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 9)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["AntennaId"] = l.AntennaID
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l librfidantlayer) clone(db *gorm.DB) librfidantlayer {
	l.librfidantlayerDo.ReplaceDB(db)
	return l
}

type librfidantlayerDo struct{ gen.DO }

type ILibrfidantlayerDo interface {
	gen.SubQuery
	Debug() ILibrfidantlayerDo
	WithContext(ctx context.Context) ILibrfidantlayerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibrfidantlayerDo
	Not(conds ...gen.Condition) ILibrfidantlayerDo
	Or(conds ...gen.Condition) ILibrfidantlayerDo
	Select(conds ...field.Expr) ILibrfidantlayerDo
	Where(conds ...gen.Condition) ILibrfidantlayerDo
	Order(conds ...field.Expr) ILibrfidantlayerDo
	Distinct(cols ...field.Expr) ILibrfidantlayerDo
	Omit(cols ...field.Expr) ILibrfidantlayerDo
	Join(table schema.Tabler, on ...field.Expr) ILibrfidantlayerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibrfidantlayerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibrfidantlayerDo
	Group(cols ...field.Expr) ILibrfidantlayerDo
	Having(conds ...gen.Condition) ILibrfidantlayerDo
	Limit(limit int) ILibrfidantlayerDo
	Offset(offset int) ILibrfidantlayerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrfidantlayerDo
	Unscoped() ILibrfidantlayerDo
	Create(values ...*model.Librfidantlayer) error
	CreateInBatches(values []*model.Librfidantlayer, batchSize int) error
	Save(values ...*model.Librfidantlayer) error
	First() (*model.Librfidantlayer, error)
	Take() (*model.Librfidantlayer, error)
	Last() (*model.Librfidantlayer, error)
	Find() ([]*model.Librfidantlayer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librfidantlayer, err error)
	FindInBatches(result *[]*model.Librfidantlayer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Librfidantlayer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibrfidantlayerDo
	Assign(attrs ...field.AssignExpr) ILibrfidantlayerDo
	Joins(fields ...field.RelationField) ILibrfidantlayerDo
	Preload(fields ...field.RelationField) ILibrfidantlayerDo
	FirstOrInit() (*model.Librfidantlayer, error)
	FirstOrCreate() (*model.Librfidantlayer, error)
	FindByPage(offset int, limit int) (result []*model.Librfidantlayer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibrfidantlayerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l librfidantlayerDo) Debug() ILibrfidantlayerDo {
	return l.withDO(l.DO.Debug())
}

func (l librfidantlayerDo) WithContext(ctx context.Context) ILibrfidantlayerDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l librfidantlayerDo) ReadDB() ILibrfidantlayerDo {
	return l.Clauses(dbresolver.Read)
}

func (l librfidantlayerDo) WriteDB() ILibrfidantlayerDo {
	return l.Clauses(dbresolver.Write)
}

func (l librfidantlayerDo) Clauses(conds ...clause.Expression) ILibrfidantlayerDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l librfidantlayerDo) Returning(value interface{}, columns ...string) ILibrfidantlayerDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l librfidantlayerDo) Not(conds ...gen.Condition) ILibrfidantlayerDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l librfidantlayerDo) Or(conds ...gen.Condition) ILibrfidantlayerDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l librfidantlayerDo) Select(conds ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l librfidantlayerDo) Where(conds ...gen.Condition) ILibrfidantlayerDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l librfidantlayerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibrfidantlayerDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l librfidantlayerDo) Order(conds ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l librfidantlayerDo) Distinct(cols ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l librfidantlayerDo) Omit(cols ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l librfidantlayerDo) Join(table schema.Tabler, on ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l librfidantlayerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l librfidantlayerDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l librfidantlayerDo) Group(cols ...field.Expr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l librfidantlayerDo) Having(conds ...gen.Condition) ILibrfidantlayerDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l librfidantlayerDo) Limit(limit int) ILibrfidantlayerDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l librfidantlayerDo) Offset(offset int) ILibrfidantlayerDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l librfidantlayerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrfidantlayerDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l librfidantlayerDo) Unscoped() ILibrfidantlayerDo {
	return l.withDO(l.DO.Unscoped())
}

func (l librfidantlayerDo) Create(values ...*model.Librfidantlayer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l librfidantlayerDo) CreateInBatches(values []*model.Librfidantlayer, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l librfidantlayerDo) Save(values ...*model.Librfidantlayer) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l librfidantlayerDo) First() (*model.Librfidantlayer, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidantlayer), nil
	}
}

func (l librfidantlayerDo) Take() (*model.Librfidantlayer, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidantlayer), nil
	}
}

func (l librfidantlayerDo) Last() (*model.Librfidantlayer, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidantlayer), nil
	}
}

func (l librfidantlayerDo) Find() ([]*model.Librfidantlayer, error) {
	result, err := l.DO.Find()
	return result.([]*model.Librfidantlayer), err
}

func (l librfidantlayerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librfidantlayer, err error) {
	buf := make([]*model.Librfidantlayer, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l librfidantlayerDo) FindInBatches(result *[]*model.Librfidantlayer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l librfidantlayerDo) Attrs(attrs ...field.AssignExpr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l librfidantlayerDo) Assign(attrs ...field.AssignExpr) ILibrfidantlayerDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l librfidantlayerDo) Joins(fields ...field.RelationField) ILibrfidantlayerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l librfidantlayerDo) Preload(fields ...field.RelationField) ILibrfidantlayerDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l librfidantlayerDo) FirstOrInit() (*model.Librfidantlayer, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidantlayer), nil
	}
}

func (l librfidantlayerDo) FirstOrCreate() (*model.Librfidantlayer, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidantlayer), nil
	}
}

func (l librfidantlayerDo) FindByPage(offset int, limit int) (result []*model.Librfidantlayer, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l librfidantlayerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l librfidantlayerDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l librfidantlayerDo) Delete(models ...*model.Librfidantlayer) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *librfidantlayerDo) withDO(do gen.Dao) *librfidantlayerDo {
	l.DO = *do.(*gen.DO)
	return l
}
