// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newMistemplate(db *gorm.DB) mistemplate {
	_mistemplate := mistemplate{}

	_mistemplate.mistemplateDo.UseDB(db)
	_mistemplate.mistemplateDo.UseModel(&model.Mistemplate{})

	tableName := _mistemplate.mistemplateDo.TableName()
	_mistemplate.ALL = field.NewAsterisk(tableName)
	_mistemplate.ID = field.NewString(tableName, "Id")
	_mistemplate.CreationTime = field.NewTime(tableName, "CreationTime")
	_mistemplate.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_mistemplate.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_mistemplate.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_mistemplate.IsDeleted = field.NewField(tableName, "IsDeleted")
	_mistemplate.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_mistemplate.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_mistemplate.Name = field.NewString(tableName, "Name")
	_mistemplate.Thumbnail = field.NewString(tableName, "Thumbnail")
	_mistemplate.Config = field.NewString(tableName, "Config")
	_mistemplate.RootID = field.NewString(tableName, "RootId")
	_mistemplate.Remark = field.NewString(tableName, "Remark")
	_mistemplate.TenantID = field.NewInt64(tableName, "TenantId")

	_mistemplate.fillFieldMap()

	return _mistemplate
}

type mistemplate struct {
	mistemplateDo mistemplateDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Name                 field.String
	Thumbnail            field.String
	Config               field.String
	RootID               field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (m mistemplate) Table(newTableName string) *mistemplate {
	m.mistemplateDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mistemplate) As(alias string) *mistemplate {
	m.mistemplateDo.DO = *(m.mistemplateDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mistemplate) updateTableName(table string) *mistemplate {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "Id")
	m.CreationTime = field.NewTime(table, "CreationTime")
	m.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	m.LastModificationTime = field.NewTime(table, "LastModificationTime")
	m.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	m.IsDeleted = field.NewField(table, "IsDeleted")
	m.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	m.DeletionTime = field.NewTime(table, "DeletionTime")
	m.Name = field.NewString(table, "Name")
	m.Thumbnail = field.NewString(table, "Thumbnail")
	m.Config = field.NewString(table, "Config")
	m.RootID = field.NewString(table, "RootId")
	m.Remark = field.NewString(table, "Remark")
	m.TenantID = field.NewInt64(table, "TenantId")

	m.fillFieldMap()

	return m
}

func (m *mistemplate) WithContext(ctx context.Context) IMistemplateDo {
	return m.mistemplateDo.WithContext(ctx)
}

func (m mistemplate) TableName() string { return m.mistemplateDo.TableName() }

func (m mistemplate) Alias() string { return m.mistemplateDo.Alias() }

func (m *mistemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mistemplate) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["Id"] = m.ID
	m.fieldMap["CreationTime"] = m.CreationTime
	m.fieldMap["CreatorUserId"] = m.CreatorUserID
	m.fieldMap["LastModificationTime"] = m.LastModificationTime
	m.fieldMap["LastModifierUserId"] = m.LastModifierUserID
	m.fieldMap["IsDeleted"] = m.IsDeleted
	m.fieldMap["DeleterUserId"] = m.DeleterUserID
	m.fieldMap["DeletionTime"] = m.DeletionTime
	m.fieldMap["Name"] = m.Name
	m.fieldMap["Thumbnail"] = m.Thumbnail
	m.fieldMap["Config"] = m.Config
	m.fieldMap["RootId"] = m.RootID
	m.fieldMap["Remark"] = m.Remark
	m.fieldMap["TenantId"] = m.TenantID
}

func (m mistemplate) clone(db *gorm.DB) mistemplate {
	m.mistemplateDo.ReplaceDB(db)
	return m
}

type mistemplateDo struct{ gen.DO }

type IMistemplateDo interface {
	gen.SubQuery
	Debug() IMistemplateDo
	WithContext(ctx context.Context) IMistemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMistemplateDo
	Not(conds ...gen.Condition) IMistemplateDo
	Or(conds ...gen.Condition) IMistemplateDo
	Select(conds ...field.Expr) IMistemplateDo
	Where(conds ...gen.Condition) IMistemplateDo
	Order(conds ...field.Expr) IMistemplateDo
	Distinct(cols ...field.Expr) IMistemplateDo
	Omit(cols ...field.Expr) IMistemplateDo
	Join(table schema.Tabler, on ...field.Expr) IMistemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMistemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMistemplateDo
	Group(cols ...field.Expr) IMistemplateDo
	Having(conds ...gen.Condition) IMistemplateDo
	Limit(limit int) IMistemplateDo
	Offset(offset int) IMistemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMistemplateDo
	Unscoped() IMistemplateDo
	Create(values ...*model.Mistemplate) error
	CreateInBatches(values []*model.Mistemplate, batchSize int) error
	Save(values ...*model.Mistemplate) error
	First() (*model.Mistemplate, error)
	Take() (*model.Mistemplate, error)
	Last() (*model.Mistemplate, error)
	Find() ([]*model.Mistemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mistemplate, err error)
	FindInBatches(result *[]*model.Mistemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Mistemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMistemplateDo
	Assign(attrs ...field.AssignExpr) IMistemplateDo
	Joins(fields ...field.RelationField) IMistemplateDo
	Preload(fields ...field.RelationField) IMistemplateDo
	FirstOrInit() (*model.Mistemplate, error)
	FirstOrCreate() (*model.Mistemplate, error)
	FindByPage(offset int, limit int) (result []*model.Mistemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMistemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mistemplateDo) Debug() IMistemplateDo {
	return m.withDO(m.DO.Debug())
}

func (m mistemplateDo) WithContext(ctx context.Context) IMistemplateDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mistemplateDo) ReadDB() IMistemplateDo {
	return m.Clauses(dbresolver.Read)
}

func (m mistemplateDo) WriteDB() IMistemplateDo {
	return m.Clauses(dbresolver.Write)
}

func (m mistemplateDo) Clauses(conds ...clause.Expression) IMistemplateDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mistemplateDo) Returning(value interface{}, columns ...string) IMistemplateDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mistemplateDo) Not(conds ...gen.Condition) IMistemplateDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mistemplateDo) Or(conds ...gen.Condition) IMistemplateDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mistemplateDo) Select(conds ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mistemplateDo) Where(conds ...gen.Condition) IMistemplateDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mistemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMistemplateDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mistemplateDo) Order(conds ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mistemplateDo) Distinct(cols ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mistemplateDo) Omit(cols ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mistemplateDo) Join(table schema.Tabler, on ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mistemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mistemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mistemplateDo) Group(cols ...field.Expr) IMistemplateDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mistemplateDo) Having(conds ...gen.Condition) IMistemplateDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mistemplateDo) Limit(limit int) IMistemplateDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mistemplateDo) Offset(offset int) IMistemplateDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mistemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMistemplateDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mistemplateDo) Unscoped() IMistemplateDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mistemplateDo) Create(values ...*model.Mistemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mistemplateDo) CreateInBatches(values []*model.Mistemplate, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mistemplateDo) Save(values ...*model.Mistemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mistemplateDo) First() (*model.Mistemplate, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mistemplate), nil
	}
}

func (m mistemplateDo) Take() (*model.Mistemplate, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mistemplate), nil
	}
}

func (m mistemplateDo) Last() (*model.Mistemplate, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mistemplate), nil
	}
}

func (m mistemplateDo) Find() ([]*model.Mistemplate, error) {
	result, err := m.DO.Find()
	return result.([]*model.Mistemplate), err
}

func (m mistemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mistemplate, err error) {
	buf := make([]*model.Mistemplate, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mistemplateDo) FindInBatches(result *[]*model.Mistemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mistemplateDo) Attrs(attrs ...field.AssignExpr) IMistemplateDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mistemplateDo) Assign(attrs ...field.AssignExpr) IMistemplateDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mistemplateDo) Joins(fields ...field.RelationField) IMistemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mistemplateDo) Preload(fields ...field.RelationField) IMistemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mistemplateDo) FirstOrInit() (*model.Mistemplate, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mistemplate), nil
	}
}

func (m mistemplateDo) FirstOrCreate() (*model.Mistemplate, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mistemplate), nil
	}
}

func (m mistemplateDo) FindByPage(offset int, limit int) (result []*model.Mistemplate, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mistemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mistemplateDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mistemplateDo) Delete(models ...*model.Mistemplate) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mistemplateDo) withDO(do gen.Dao) *mistemplateDo {
	m.DO = *do.(*gen.DO)
	return m
}
