// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemOrganization(db *gorm.DB) systemOrganization {
	_systemOrganization := systemOrganization{}

	_systemOrganization.systemOrganizationDo.UseDB(db)
	_systemOrganization.systemOrganizationDo.UseModel(&model.SystemOrganization{})

	tableName := _systemOrganization.systemOrganizationDo.TableName()
	_systemOrganization.ALL = field.NewAsterisk(tableName)
	_systemOrganization.ID = field.NewInt64(tableName, "id")
	_systemOrganization.CreateTime = field.NewTime(tableName, "create_time")
	_systemOrganization.UpdateTime = field.NewTime(tableName, "update_time")
	_systemOrganization.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemOrganization.Name = field.NewString(tableName, "name")
	_systemOrganization.Type = field.NewString(tableName, "type")
	_systemOrganization.ParentID = field.NewInt64(tableName, "parent_id")

	_systemOrganization.fillFieldMap()

	return _systemOrganization
}

type systemOrganization struct {
	systemOrganizationDo systemOrganizationDo

	ALL        field.Asterisk
	ID         field.Int64
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Int64
	Name       field.String
	Type       field.String
	ParentID   field.Int64

	fieldMap map[string]field.Expr
}

func (s systemOrganization) Table(newTableName string) *systemOrganization {
	s.systemOrganizationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemOrganization) As(alias string) *systemOrganization {
	s.systemOrganizationDo.DO = *(s.systemOrganizationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemOrganization) updateTableName(table string) *systemOrganization {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewString(table, "type")
	s.ParentID = field.NewInt64(table, "parent_id")

	s.fillFieldMap()

	return s
}

func (s *systemOrganization) WithContext(ctx context.Context) ISystemOrganizationDo {
	return s.systemOrganizationDo.WithContext(ctx)
}

func (s systemOrganization) TableName() string { return s.systemOrganizationDo.TableName() }

func (s systemOrganization) Alias() string { return s.systemOrganizationDo.Alias() }

func (s *systemOrganization) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemOrganization) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["parent_id"] = s.ParentID
}

func (s systemOrganization) clone(db *gorm.DB) systemOrganization {
	s.systemOrganizationDo.ReplaceDB(db)
	return s
}

type systemOrganizationDo struct{ gen.DO }

type ISystemOrganizationDo interface {
	gen.SubQuery
	Debug() ISystemOrganizationDo
	WithContext(ctx context.Context) ISystemOrganizationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemOrganizationDo
	Not(conds ...gen.Condition) ISystemOrganizationDo
	Or(conds ...gen.Condition) ISystemOrganizationDo
	Select(conds ...field.Expr) ISystemOrganizationDo
	Where(conds ...gen.Condition) ISystemOrganizationDo
	Order(conds ...field.Expr) ISystemOrganizationDo
	Distinct(cols ...field.Expr) ISystemOrganizationDo
	Omit(cols ...field.Expr) ISystemOrganizationDo
	Join(table schema.Tabler, on ...field.Expr) ISystemOrganizationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemOrganizationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemOrganizationDo
	Group(cols ...field.Expr) ISystemOrganizationDo
	Having(conds ...gen.Condition) ISystemOrganizationDo
	Limit(limit int) ISystemOrganizationDo
	Offset(offset int) ISystemOrganizationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemOrganizationDo
	Unscoped() ISystemOrganizationDo
	Create(values ...*model.SystemOrganization) error
	CreateInBatches(values []*model.SystemOrganization, batchSize int) error
	Save(values ...*model.SystemOrganization) error
	First() (*model.SystemOrganization, error)
	Take() (*model.SystemOrganization, error)
	Last() (*model.SystemOrganization, error)
	Find() ([]*model.SystemOrganization, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemOrganization, err error)
	FindInBatches(result *[]*model.SystemOrganization, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemOrganization) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemOrganizationDo
	Assign(attrs ...field.AssignExpr) ISystemOrganizationDo
	Joins(fields ...field.RelationField) ISystemOrganizationDo
	Preload(fields ...field.RelationField) ISystemOrganizationDo
	FirstOrInit() (*model.SystemOrganization, error)
	FirstOrCreate() (*model.SystemOrganization, error)
	FindByPage(offset int, limit int) (result []*model.SystemOrganization, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemOrganizationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemOrganizationDo) Debug() ISystemOrganizationDo {
	return s.withDO(s.DO.Debug())
}

func (s systemOrganizationDo) WithContext(ctx context.Context) ISystemOrganizationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemOrganizationDo) ReadDB() ISystemOrganizationDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemOrganizationDo) WriteDB() ISystemOrganizationDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemOrganizationDo) Clauses(conds ...clause.Expression) ISystemOrganizationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemOrganizationDo) Returning(value interface{}, columns ...string) ISystemOrganizationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemOrganizationDo) Not(conds ...gen.Condition) ISystemOrganizationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemOrganizationDo) Or(conds ...gen.Condition) ISystemOrganizationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemOrganizationDo) Select(conds ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemOrganizationDo) Where(conds ...gen.Condition) ISystemOrganizationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemOrganizationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemOrganizationDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemOrganizationDo) Order(conds ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemOrganizationDo) Distinct(cols ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemOrganizationDo) Omit(cols ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemOrganizationDo) Join(table schema.Tabler, on ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemOrganizationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemOrganizationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemOrganizationDo) Group(cols ...field.Expr) ISystemOrganizationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemOrganizationDo) Having(conds ...gen.Condition) ISystemOrganizationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemOrganizationDo) Limit(limit int) ISystemOrganizationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemOrganizationDo) Offset(offset int) ISystemOrganizationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemOrganizationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemOrganizationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemOrganizationDo) Unscoped() ISystemOrganizationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemOrganizationDo) Create(values ...*model.SystemOrganization) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemOrganizationDo) CreateInBatches(values []*model.SystemOrganization, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemOrganizationDo) Save(values ...*model.SystemOrganization) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemOrganizationDo) First() (*model.SystemOrganization, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemOrganization), nil
	}
}

func (s systemOrganizationDo) Take() (*model.SystemOrganization, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemOrganization), nil
	}
}

func (s systemOrganizationDo) Last() (*model.SystemOrganization, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemOrganization), nil
	}
}

func (s systemOrganizationDo) Find() ([]*model.SystemOrganization, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemOrganization), err
}

func (s systemOrganizationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemOrganization, err error) {
	buf := make([]*model.SystemOrganization, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemOrganizationDo) FindInBatches(result *[]*model.SystemOrganization, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemOrganizationDo) Attrs(attrs ...field.AssignExpr) ISystemOrganizationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemOrganizationDo) Assign(attrs ...field.AssignExpr) ISystemOrganizationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemOrganizationDo) Joins(fields ...field.RelationField) ISystemOrganizationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemOrganizationDo) Preload(fields ...field.RelationField) ISystemOrganizationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemOrganizationDo) FirstOrInit() (*model.SystemOrganization, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemOrganization), nil
	}
}

func (s systemOrganizationDo) FirstOrCreate() (*model.SystemOrganization, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemOrganization), nil
	}
}

func (s systemOrganizationDo) FindByPage(offset int, limit int) (result []*model.SystemOrganization, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemOrganizationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemOrganizationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemOrganizationDo) Delete(models ...*model.SystemOrganization) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemOrganizationDo) withDO(do gen.Dao) *systemOrganizationDo {
	s.DO = *do.(*gen.DO)
	return s
}
