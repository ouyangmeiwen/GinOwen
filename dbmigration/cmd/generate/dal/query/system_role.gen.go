// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemRole(db *gorm.DB) systemRole {
	_systemRole := systemRole{}

	_systemRole.systemRoleDo.UseDB(db)
	_systemRole.systemRoleDo.UseModel(&model.SystemRole{})

	tableName := _systemRole.systemRoleDo.TableName()
	_systemRole.ALL = field.NewAsterisk(tableName)
	_systemRole.ID = field.NewInt64(tableName, "id")
	_systemRole.CreateTime = field.NewTime(tableName, "create_time")
	_systemRole.UpdateTime = field.NewTime(tableName, "update_time")
	_systemRole.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemRole.Name = field.NewString(tableName, "name")
	_systemRole.Datas = field.NewString(tableName, "datas")
	_systemRole.Description = field.NewString(tableName, "description")

	_systemRole.fillFieldMap()

	return _systemRole
}

type systemRole struct {
	systemRoleDo systemRoleDo

	ALL         field.Asterisk
	ID          field.Int64
	CreateTime  field.Time
	UpdateTime  field.Time
	IsDeleted   field.Int64
	Name        field.String
	Datas       field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (s systemRole) Table(newTableName string) *systemRole {
	s.systemRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemRole) As(alias string) *systemRole {
	s.systemRoleDo.DO = *(s.systemRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemRole) updateTableName(table string) *systemRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Datas = field.NewString(table, "datas")
	s.Description = field.NewString(table, "description")

	s.fillFieldMap()

	return s
}

func (s *systemRole) WithContext(ctx context.Context) ISystemRoleDo {
	return s.systemRoleDo.WithContext(ctx)
}

func (s systemRole) TableName() string { return s.systemRoleDo.TableName() }

func (s systemRole) Alias() string { return s.systemRoleDo.Alias() }

func (s *systemRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["datas"] = s.Datas
	s.fieldMap["description"] = s.Description
}

func (s systemRole) clone(db *gorm.DB) systemRole {
	s.systemRoleDo.ReplaceDB(db)
	return s
}

type systemRoleDo struct{ gen.DO }

type ISystemRoleDo interface {
	gen.SubQuery
	Debug() ISystemRoleDo
	WithContext(ctx context.Context) ISystemRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemRoleDo
	Not(conds ...gen.Condition) ISystemRoleDo
	Or(conds ...gen.Condition) ISystemRoleDo
	Select(conds ...field.Expr) ISystemRoleDo
	Where(conds ...gen.Condition) ISystemRoleDo
	Order(conds ...field.Expr) ISystemRoleDo
	Distinct(cols ...field.Expr) ISystemRoleDo
	Omit(cols ...field.Expr) ISystemRoleDo
	Join(table schema.Tabler, on ...field.Expr) ISystemRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDo
	Group(cols ...field.Expr) ISystemRoleDo
	Having(conds ...gen.Condition) ISystemRoleDo
	Limit(limit int) ISystemRoleDo
	Offset(offset int) ISystemRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemRoleDo
	Unscoped() ISystemRoleDo
	Create(values ...*model.SystemRole) error
	CreateInBatches(values []*model.SystemRole, batchSize int) error
	Save(values ...*model.SystemRole) error
	First() (*model.SystemRole, error)
	Take() (*model.SystemRole, error)
	Last() (*model.SystemRole, error)
	Find() ([]*model.SystemRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemRole, err error)
	FindInBatches(result *[]*model.SystemRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemRoleDo
	Assign(attrs ...field.AssignExpr) ISystemRoleDo
	Joins(fields ...field.RelationField) ISystemRoleDo
	Preload(fields ...field.RelationField) ISystemRoleDo
	FirstOrInit() (*model.SystemRole, error)
	FirstOrCreate() (*model.SystemRole, error)
	FindByPage(offset int, limit int) (result []*model.SystemRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemRoleDo) Debug() ISystemRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s systemRoleDo) WithContext(ctx context.Context) ISystemRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemRoleDo) ReadDB() ISystemRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemRoleDo) WriteDB() ISystemRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemRoleDo) Clauses(conds ...clause.Expression) ISystemRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemRoleDo) Returning(value interface{}, columns ...string) ISystemRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemRoleDo) Not(conds ...gen.Condition) ISystemRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemRoleDo) Or(conds ...gen.Condition) ISystemRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemRoleDo) Select(conds ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemRoleDo) Where(conds ...gen.Condition) ISystemRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemRoleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemRoleDo) Order(conds ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemRoleDo) Distinct(cols ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemRoleDo) Omit(cols ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemRoleDo) Join(table schema.Tabler, on ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemRoleDo) Group(cols ...field.Expr) ISystemRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemRoleDo) Having(conds ...gen.Condition) ISystemRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemRoleDo) Limit(limit int) ISystemRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemRoleDo) Offset(offset int) ISystemRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemRoleDo) Unscoped() ISystemRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemRoleDo) Create(values ...*model.SystemRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemRoleDo) CreateInBatches(values []*model.SystemRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemRoleDo) Save(values ...*model.SystemRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemRoleDo) First() (*model.SystemRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRole), nil
	}
}

func (s systemRoleDo) Take() (*model.SystemRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRole), nil
	}
}

func (s systemRoleDo) Last() (*model.SystemRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRole), nil
	}
}

func (s systemRoleDo) Find() ([]*model.SystemRole, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemRole), err
}

func (s systemRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemRole, err error) {
	buf := make([]*model.SystemRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemRoleDo) FindInBatches(result *[]*model.SystemRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemRoleDo) Attrs(attrs ...field.AssignExpr) ISystemRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemRoleDo) Assign(attrs ...field.AssignExpr) ISystemRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemRoleDo) Joins(fields ...field.RelationField) ISystemRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemRoleDo) Preload(fields ...field.RelationField) ISystemRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemRoleDo) FirstOrInit() (*model.SystemRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRole), nil
	}
}

func (s systemRoleDo) FirstOrCreate() (*model.SystemRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRole), nil
	}
}

func (s systemRoleDo) FindByPage(offset int, limit int) (result []*model.SystemRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemRoleDo) Delete(models ...*model.SystemRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemRoleDo) withDO(do gen.Dao) *systemRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
