// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysattachment(db *gorm.DB) sysattachment {
	_sysattachment := sysattachment{}

	_sysattachment.sysattachmentDo.UseDB(db)
	_sysattachment.sysattachmentDo.UseModel(&model.Sysattachment{})

	tableName := _sysattachment.sysattachmentDo.TableName()
	_sysattachment.ALL = field.NewAsterisk(tableName)
	_sysattachment.ID = field.NewString(tableName, "Id")
	_sysattachment.CreationTime = field.NewTime(tableName, "CreationTime")
	_sysattachment.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_sysattachment.Name = field.NewString(tableName, "Name")
	_sysattachment.Length = field.NewInt64(tableName, "Length")
	_sysattachment.Extension = field.NewString(tableName, "Extension")
	_sysattachment.AttachmentApplyType = field.NewInt64(tableName, "AttachmentApplyType")
	_sysattachment.TenantID = field.NewInt64(tableName, "TenantId")
	_sysattachment.StorageMode = field.NewInt64(tableName, "StorageMode")

	_sysattachment.fillFieldMap()

	return _sysattachment
}

type sysattachment struct {
	sysattachmentDo sysattachmentDo

	ALL                 field.Asterisk
	ID                  field.String
	CreationTime        field.Time
	CreatorUserID       field.Int64
	Name                field.String
	Length              field.Int64
	Extension           field.String
	AttachmentApplyType field.Int64
	TenantID            field.Int64
	StorageMode         field.Int64

	fieldMap map[string]field.Expr
}

func (s sysattachment) Table(newTableName string) *sysattachment {
	s.sysattachmentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysattachment) As(alias string) *sysattachment {
	s.sysattachmentDo.DO = *(s.sysattachmentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysattachment) updateTableName(table string) *sysattachment {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.Name = field.NewString(table, "Name")
	s.Length = field.NewInt64(table, "Length")
	s.Extension = field.NewString(table, "Extension")
	s.AttachmentApplyType = field.NewInt64(table, "AttachmentApplyType")
	s.TenantID = field.NewInt64(table, "TenantId")
	s.StorageMode = field.NewInt64(table, "StorageMode")

	s.fillFieldMap()

	return s
}

func (s *sysattachment) WithContext(ctx context.Context) ISysattachmentDo {
	return s.sysattachmentDo.WithContext(ctx)
}

func (s sysattachment) TableName() string { return s.sysattachmentDo.TableName() }

func (s sysattachment) Alias() string { return s.sysattachmentDo.Alias() }

func (s *sysattachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysattachment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["Name"] = s.Name
	s.fieldMap["Length"] = s.Length
	s.fieldMap["Extension"] = s.Extension
	s.fieldMap["AttachmentApplyType"] = s.AttachmentApplyType
	s.fieldMap["TenantId"] = s.TenantID
	s.fieldMap["StorageMode"] = s.StorageMode
}

func (s sysattachment) clone(db *gorm.DB) sysattachment {
	s.sysattachmentDo.ReplaceDB(db)
	return s
}

type sysattachmentDo struct{ gen.DO }

type ISysattachmentDo interface {
	gen.SubQuery
	Debug() ISysattachmentDo
	WithContext(ctx context.Context) ISysattachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysattachmentDo
	Not(conds ...gen.Condition) ISysattachmentDo
	Or(conds ...gen.Condition) ISysattachmentDo
	Select(conds ...field.Expr) ISysattachmentDo
	Where(conds ...gen.Condition) ISysattachmentDo
	Order(conds ...field.Expr) ISysattachmentDo
	Distinct(cols ...field.Expr) ISysattachmentDo
	Omit(cols ...field.Expr) ISysattachmentDo
	Join(table schema.Tabler, on ...field.Expr) ISysattachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysattachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysattachmentDo
	Group(cols ...field.Expr) ISysattachmentDo
	Having(conds ...gen.Condition) ISysattachmentDo
	Limit(limit int) ISysattachmentDo
	Offset(offset int) ISysattachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysattachmentDo
	Unscoped() ISysattachmentDo
	Create(values ...*model.Sysattachment) error
	CreateInBatches(values []*model.Sysattachment, batchSize int) error
	Save(values ...*model.Sysattachment) error
	First() (*model.Sysattachment, error)
	Take() (*model.Sysattachment, error)
	Last() (*model.Sysattachment, error)
	Find() ([]*model.Sysattachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysattachment, err error)
	FindInBatches(result *[]*model.Sysattachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysattachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysattachmentDo
	Assign(attrs ...field.AssignExpr) ISysattachmentDo
	Joins(fields ...field.RelationField) ISysattachmentDo
	Preload(fields ...field.RelationField) ISysattachmentDo
	FirstOrInit() (*model.Sysattachment, error)
	FirstOrCreate() (*model.Sysattachment, error)
	FindByPage(offset int, limit int) (result []*model.Sysattachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysattachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysattachmentDo) Debug() ISysattachmentDo {
	return s.withDO(s.DO.Debug())
}

func (s sysattachmentDo) WithContext(ctx context.Context) ISysattachmentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysattachmentDo) ReadDB() ISysattachmentDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysattachmentDo) WriteDB() ISysattachmentDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysattachmentDo) Clauses(conds ...clause.Expression) ISysattachmentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysattachmentDo) Returning(value interface{}, columns ...string) ISysattachmentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysattachmentDo) Not(conds ...gen.Condition) ISysattachmentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysattachmentDo) Or(conds ...gen.Condition) ISysattachmentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysattachmentDo) Select(conds ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysattachmentDo) Where(conds ...gen.Condition) ISysattachmentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysattachmentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysattachmentDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysattachmentDo) Order(conds ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysattachmentDo) Distinct(cols ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysattachmentDo) Omit(cols ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysattachmentDo) Join(table schema.Tabler, on ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysattachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysattachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysattachmentDo) Group(cols ...field.Expr) ISysattachmentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysattachmentDo) Having(conds ...gen.Condition) ISysattachmentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysattachmentDo) Limit(limit int) ISysattachmentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysattachmentDo) Offset(offset int) ISysattachmentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysattachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysattachmentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysattachmentDo) Unscoped() ISysattachmentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysattachmentDo) Create(values ...*model.Sysattachment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysattachmentDo) CreateInBatches(values []*model.Sysattachment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysattachmentDo) Save(values ...*model.Sysattachment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysattachmentDo) First() (*model.Sysattachment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysattachment), nil
	}
}

func (s sysattachmentDo) Take() (*model.Sysattachment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysattachment), nil
	}
}

func (s sysattachmentDo) Last() (*model.Sysattachment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysattachment), nil
	}
}

func (s sysattachmentDo) Find() ([]*model.Sysattachment, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysattachment), err
}

func (s sysattachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysattachment, err error) {
	buf := make([]*model.Sysattachment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysattachmentDo) FindInBatches(result *[]*model.Sysattachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysattachmentDo) Attrs(attrs ...field.AssignExpr) ISysattachmentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysattachmentDo) Assign(attrs ...field.AssignExpr) ISysattachmentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysattachmentDo) Joins(fields ...field.RelationField) ISysattachmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysattachmentDo) Preload(fields ...field.RelationField) ISysattachmentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysattachmentDo) FirstOrInit() (*model.Sysattachment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysattachment), nil
	}
}

func (s sysattachmentDo) FirstOrCreate() (*model.Sysattachment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysattachment), nil
	}
}

func (s sysattachmentDo) FindByPage(offset int, limit int) (result []*model.Sysattachment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysattachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysattachmentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysattachmentDo) Delete(models ...*model.Sysattachment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysattachmentDo) withDO(do gen.Dao) *sysattachmentDo {
	s.DO = *do.(*gen.DO)
	return s
}
