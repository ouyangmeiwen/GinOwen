// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysbooknumlib(db *gorm.DB) sysbooknumlib {
	_sysbooknumlib := sysbooknumlib{}

	_sysbooknumlib.sysbooknumlibDo.UseDB(db)
	_sysbooknumlib.sysbooknumlibDo.UseModel(&model.Sysbooknumlib{})

	tableName := _sysbooknumlib.sysbooknumlibDo.TableName()
	_sysbooknumlib.ALL = field.NewAsterisk(tableName)
	_sysbooknumlib.ID = field.NewString(tableName, "Id")
	_sysbooknumlib.Barcode = field.NewString(tableName, "Barcode")
	_sysbooknumlib.Year = field.NewInt64(tableName, "Year")
	_sysbooknumlib.Order = field.NewInt64(tableName, "Order")
	_sysbooknumlib.IsUsed = field.NewField(tableName, "IsUsed")
	_sysbooknumlib.LocationName = field.NewString(tableName, "LocationName")
	_sysbooknumlib.BookType = field.NewString(tableName, "BookType")
	_sysbooknumlib.TenantID = field.NewInt64(tableName, "TenantId")

	_sysbooknumlib.fillFieldMap()

	return _sysbooknumlib
}

type sysbooknumlib struct {
	sysbooknumlibDo sysbooknumlibDo

	ALL          field.Asterisk
	ID           field.String
	Barcode      field.String
	Year         field.Int64
	Order        field.Int64
	IsUsed       field.Field
	LocationName field.String
	BookType     field.String
	TenantID     field.Int64

	fieldMap map[string]field.Expr
}

func (s sysbooknumlib) Table(newTableName string) *sysbooknumlib {
	s.sysbooknumlibDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysbooknumlib) As(alias string) *sysbooknumlib {
	s.sysbooknumlibDo.DO = *(s.sysbooknumlibDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysbooknumlib) updateTableName(table string) *sysbooknumlib {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.Barcode = field.NewString(table, "Barcode")
	s.Year = field.NewInt64(table, "Year")
	s.Order = field.NewInt64(table, "Order")
	s.IsUsed = field.NewField(table, "IsUsed")
	s.LocationName = field.NewString(table, "LocationName")
	s.BookType = field.NewString(table, "BookType")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysbooknumlib) WithContext(ctx context.Context) ISysbooknumlibDo {
	return s.sysbooknumlibDo.WithContext(ctx)
}

func (s sysbooknumlib) TableName() string { return s.sysbooknumlibDo.TableName() }

func (s sysbooknumlib) Alias() string { return s.sysbooknumlibDo.Alias() }

func (s *sysbooknumlib) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysbooknumlib) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["Barcode"] = s.Barcode
	s.fieldMap["Year"] = s.Year
	s.fieldMap["Order"] = s.Order
	s.fieldMap["IsUsed"] = s.IsUsed
	s.fieldMap["LocationName"] = s.LocationName
	s.fieldMap["BookType"] = s.BookType
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysbooknumlib) clone(db *gorm.DB) sysbooknumlib {
	s.sysbooknumlibDo.ReplaceDB(db)
	return s
}

type sysbooknumlibDo struct{ gen.DO }

type ISysbooknumlibDo interface {
	gen.SubQuery
	Debug() ISysbooknumlibDo
	WithContext(ctx context.Context) ISysbooknumlibDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysbooknumlibDo
	Not(conds ...gen.Condition) ISysbooknumlibDo
	Or(conds ...gen.Condition) ISysbooknumlibDo
	Select(conds ...field.Expr) ISysbooknumlibDo
	Where(conds ...gen.Condition) ISysbooknumlibDo
	Order(conds ...field.Expr) ISysbooknumlibDo
	Distinct(cols ...field.Expr) ISysbooknumlibDo
	Omit(cols ...field.Expr) ISysbooknumlibDo
	Join(table schema.Tabler, on ...field.Expr) ISysbooknumlibDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysbooknumlibDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysbooknumlibDo
	Group(cols ...field.Expr) ISysbooknumlibDo
	Having(conds ...gen.Condition) ISysbooknumlibDo
	Limit(limit int) ISysbooknumlibDo
	Offset(offset int) ISysbooknumlibDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysbooknumlibDo
	Unscoped() ISysbooknumlibDo
	Create(values ...*model.Sysbooknumlib) error
	CreateInBatches(values []*model.Sysbooknumlib, batchSize int) error
	Save(values ...*model.Sysbooknumlib) error
	First() (*model.Sysbooknumlib, error)
	Take() (*model.Sysbooknumlib, error)
	Last() (*model.Sysbooknumlib, error)
	Find() ([]*model.Sysbooknumlib, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysbooknumlib, err error)
	FindInBatches(result *[]*model.Sysbooknumlib, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysbooknumlib) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysbooknumlibDo
	Assign(attrs ...field.AssignExpr) ISysbooknumlibDo
	Joins(fields ...field.RelationField) ISysbooknumlibDo
	Preload(fields ...field.RelationField) ISysbooknumlibDo
	FirstOrInit() (*model.Sysbooknumlib, error)
	FirstOrCreate() (*model.Sysbooknumlib, error)
	FindByPage(offset int, limit int) (result []*model.Sysbooknumlib, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysbooknumlibDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysbooknumlibDo) Debug() ISysbooknumlibDo {
	return s.withDO(s.DO.Debug())
}

func (s sysbooknumlibDo) WithContext(ctx context.Context) ISysbooknumlibDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysbooknumlibDo) ReadDB() ISysbooknumlibDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysbooknumlibDo) WriteDB() ISysbooknumlibDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysbooknumlibDo) Clauses(conds ...clause.Expression) ISysbooknumlibDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysbooknumlibDo) Returning(value interface{}, columns ...string) ISysbooknumlibDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysbooknumlibDo) Not(conds ...gen.Condition) ISysbooknumlibDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysbooknumlibDo) Or(conds ...gen.Condition) ISysbooknumlibDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysbooknumlibDo) Select(conds ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysbooknumlibDo) Where(conds ...gen.Condition) ISysbooknumlibDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysbooknumlibDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysbooknumlibDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysbooknumlibDo) Order(conds ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysbooknumlibDo) Distinct(cols ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysbooknumlibDo) Omit(cols ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysbooknumlibDo) Join(table schema.Tabler, on ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysbooknumlibDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysbooknumlibDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysbooknumlibDo) Group(cols ...field.Expr) ISysbooknumlibDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysbooknumlibDo) Having(conds ...gen.Condition) ISysbooknumlibDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysbooknumlibDo) Limit(limit int) ISysbooknumlibDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysbooknumlibDo) Offset(offset int) ISysbooknumlibDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysbooknumlibDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysbooknumlibDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysbooknumlibDo) Unscoped() ISysbooknumlibDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysbooknumlibDo) Create(values ...*model.Sysbooknumlib) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysbooknumlibDo) CreateInBatches(values []*model.Sysbooknumlib, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysbooknumlibDo) Save(values ...*model.Sysbooknumlib) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysbooknumlibDo) First() (*model.Sysbooknumlib, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumlib), nil
	}
}

func (s sysbooknumlibDo) Take() (*model.Sysbooknumlib, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumlib), nil
	}
}

func (s sysbooknumlibDo) Last() (*model.Sysbooknumlib, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumlib), nil
	}
}

func (s sysbooknumlibDo) Find() ([]*model.Sysbooknumlib, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysbooknumlib), err
}

func (s sysbooknumlibDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysbooknumlib, err error) {
	buf := make([]*model.Sysbooknumlib, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysbooknumlibDo) FindInBatches(result *[]*model.Sysbooknumlib, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysbooknumlibDo) Attrs(attrs ...field.AssignExpr) ISysbooknumlibDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysbooknumlibDo) Assign(attrs ...field.AssignExpr) ISysbooknumlibDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysbooknumlibDo) Joins(fields ...field.RelationField) ISysbooknumlibDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysbooknumlibDo) Preload(fields ...field.RelationField) ISysbooknumlibDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysbooknumlibDo) FirstOrInit() (*model.Sysbooknumlib, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumlib), nil
	}
}

func (s sysbooknumlibDo) FirstOrCreate() (*model.Sysbooknumlib, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysbooknumlib), nil
	}
}

func (s sysbooknumlibDo) FindByPage(offset int, limit int) (result []*model.Sysbooknumlib, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysbooknumlibDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysbooknumlibDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysbooknumlibDo) Delete(models ...*model.Sysbooknumlib) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysbooknumlibDo) withDO(do gen.Dao) *sysbooknumlibDo {
	s.DO = *do.(*gen.DO)
	return s
}
