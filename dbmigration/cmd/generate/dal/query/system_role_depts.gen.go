// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemRoleDept(db *gorm.DB) systemRoleDept {
	_systemRoleDept := systemRoleDept{}

	_systemRoleDept.systemRoleDeptDo.UseDB(db)
	_systemRoleDept.systemRoleDeptDo.UseModel(&model.SystemRoleDept{})

	tableName := _systemRoleDept.systemRoleDeptDo.TableName()
	_systemRoleDept.ALL = field.NewAsterisk(tableName)
	_systemRoleDept.ID = field.NewInt64(tableName, "id")
	_systemRoleDept.RoleID = field.NewInt64(tableName, "role_id")
	_systemRoleDept.OrganizationID = field.NewInt64(tableName, "organization_id")

	_systemRoleDept.fillFieldMap()

	return _systemRoleDept
}

type systemRoleDept struct {
	systemRoleDeptDo systemRoleDeptDo

	ALL            field.Asterisk
	ID             field.Int64
	RoleID         field.Int64
	OrganizationID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemRoleDept) Table(newTableName string) *systemRoleDept {
	s.systemRoleDeptDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemRoleDept) As(alias string) *systemRoleDept {
	s.systemRoleDeptDo.DO = *(s.systemRoleDeptDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemRoleDept) updateTableName(table string) *systemRoleDept {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.RoleID = field.NewInt64(table, "role_id")
	s.OrganizationID = field.NewInt64(table, "organization_id")

	s.fillFieldMap()

	return s
}

func (s *systemRoleDept) WithContext(ctx context.Context) ISystemRoleDeptDo {
	return s.systemRoleDeptDo.WithContext(ctx)
}

func (s systemRoleDept) TableName() string { return s.systemRoleDeptDo.TableName() }

func (s systemRoleDept) Alias() string { return s.systemRoleDeptDo.Alias() }

func (s *systemRoleDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemRoleDept) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["organization_id"] = s.OrganizationID
}

func (s systemRoleDept) clone(db *gorm.DB) systemRoleDept {
	s.systemRoleDeptDo.ReplaceDB(db)
	return s
}

type systemRoleDeptDo struct{ gen.DO }

type ISystemRoleDeptDo interface {
	gen.SubQuery
	Debug() ISystemRoleDeptDo
	WithContext(ctx context.Context) ISystemRoleDeptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemRoleDeptDo
	Not(conds ...gen.Condition) ISystemRoleDeptDo
	Or(conds ...gen.Condition) ISystemRoleDeptDo
	Select(conds ...field.Expr) ISystemRoleDeptDo
	Where(conds ...gen.Condition) ISystemRoleDeptDo
	Order(conds ...field.Expr) ISystemRoleDeptDo
	Distinct(cols ...field.Expr) ISystemRoleDeptDo
	Omit(cols ...field.Expr) ISystemRoleDeptDo
	Join(table schema.Tabler, on ...field.Expr) ISystemRoleDeptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDeptDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDeptDo
	Group(cols ...field.Expr) ISystemRoleDeptDo
	Having(conds ...gen.Condition) ISystemRoleDeptDo
	Limit(limit int) ISystemRoleDeptDo
	Offset(offset int) ISystemRoleDeptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemRoleDeptDo
	Unscoped() ISystemRoleDeptDo
	Create(values ...*model.SystemRoleDept) error
	CreateInBatches(values []*model.SystemRoleDept, batchSize int) error
	Save(values ...*model.SystemRoleDept) error
	First() (*model.SystemRoleDept, error)
	Take() (*model.SystemRoleDept, error)
	Last() (*model.SystemRoleDept, error)
	Find() ([]*model.SystemRoleDept, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemRoleDept, err error)
	FindInBatches(result *[]*model.SystemRoleDept, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemRoleDept) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemRoleDeptDo
	Assign(attrs ...field.AssignExpr) ISystemRoleDeptDo
	Joins(fields ...field.RelationField) ISystemRoleDeptDo
	Preload(fields ...field.RelationField) ISystemRoleDeptDo
	FirstOrInit() (*model.SystemRoleDept, error)
	FirstOrCreate() (*model.SystemRoleDept, error)
	FindByPage(offset int, limit int) (result []*model.SystemRoleDept, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemRoleDeptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemRoleDeptDo) Debug() ISystemRoleDeptDo {
	return s.withDO(s.DO.Debug())
}

func (s systemRoleDeptDo) WithContext(ctx context.Context) ISystemRoleDeptDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemRoleDeptDo) ReadDB() ISystemRoleDeptDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemRoleDeptDo) WriteDB() ISystemRoleDeptDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemRoleDeptDo) Clauses(conds ...clause.Expression) ISystemRoleDeptDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemRoleDeptDo) Returning(value interface{}, columns ...string) ISystemRoleDeptDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemRoleDeptDo) Not(conds ...gen.Condition) ISystemRoleDeptDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemRoleDeptDo) Or(conds ...gen.Condition) ISystemRoleDeptDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemRoleDeptDo) Select(conds ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemRoleDeptDo) Where(conds ...gen.Condition) ISystemRoleDeptDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemRoleDeptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemRoleDeptDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemRoleDeptDo) Order(conds ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemRoleDeptDo) Distinct(cols ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemRoleDeptDo) Omit(cols ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemRoleDeptDo) Join(table schema.Tabler, on ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemRoleDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemRoleDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemRoleDeptDo) Group(cols ...field.Expr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemRoleDeptDo) Having(conds ...gen.Condition) ISystemRoleDeptDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemRoleDeptDo) Limit(limit int) ISystemRoleDeptDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemRoleDeptDo) Offset(offset int) ISystemRoleDeptDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemRoleDeptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemRoleDeptDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemRoleDeptDo) Unscoped() ISystemRoleDeptDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemRoleDeptDo) Create(values ...*model.SystemRoleDept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemRoleDeptDo) CreateInBatches(values []*model.SystemRoleDept, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemRoleDeptDo) Save(values ...*model.SystemRoleDept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemRoleDeptDo) First() (*model.SystemRoleDept, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRoleDept), nil
	}
}

func (s systemRoleDeptDo) Take() (*model.SystemRoleDept, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRoleDept), nil
	}
}

func (s systemRoleDeptDo) Last() (*model.SystemRoleDept, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRoleDept), nil
	}
}

func (s systemRoleDeptDo) Find() ([]*model.SystemRoleDept, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemRoleDept), err
}

func (s systemRoleDeptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemRoleDept, err error) {
	buf := make([]*model.SystemRoleDept, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemRoleDeptDo) FindInBatches(result *[]*model.SystemRoleDept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemRoleDeptDo) Attrs(attrs ...field.AssignExpr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemRoleDeptDo) Assign(attrs ...field.AssignExpr) ISystemRoleDeptDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemRoleDeptDo) Joins(fields ...field.RelationField) ISystemRoleDeptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemRoleDeptDo) Preload(fields ...field.RelationField) ISystemRoleDeptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemRoleDeptDo) FirstOrInit() (*model.SystemRoleDept, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRoleDept), nil
	}
}

func (s systemRoleDeptDo) FirstOrCreate() (*model.SystemRoleDept, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRoleDept), nil
	}
}

func (s systemRoleDeptDo) FindByPage(offset int, limit int) (result []*model.SystemRoleDept, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemRoleDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemRoleDeptDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemRoleDeptDo) Delete(models ...*model.SystemRoleDept) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemRoleDeptDo) withDO(do gen.Dao) *systemRoleDeptDo {
	s.DO = *do.(*gen.DO)
	return s
}
