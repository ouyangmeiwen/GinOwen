// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibcirculatelog(db *gorm.DB) libcirculatelog {
	_libcirculatelog := libcirculatelog{}

	_libcirculatelog.libcirculatelogDo.UseDB(db)
	_libcirculatelog.libcirculatelogDo.UseModel(&model.Libcirculatelog{})

	tableName := _libcirculatelog.libcirculatelogDo.TableName()
	_libcirculatelog.ALL = field.NewAsterisk(tableName)
	_libcirculatelog.ID = field.NewString(tableName, "Id")
	_libcirculatelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libcirculatelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libcirculatelog.SerialNo = field.NewString(tableName, "SerialNo")
	_libcirculatelog.TerminalID = field.NewString(tableName, "TerminalId")
	_libcirculatelog.TerminalCode = field.NewString(tableName, "TerminalCode")
	_libcirculatelog.TerminalName = field.NewString(tableName, "TerminalName")
	_libcirculatelog.TerminalShelfID = field.NewString(tableName, "TerminalShelfId")
	_libcirculatelog.TerminalShelfName = field.NewString(tableName, "TerminalShelfName")
	_libcirculatelog.ItemID = field.NewString(tableName, "ItemId")
	_libcirculatelog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libcirculatelog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libcirculatelog.ItemISBN = field.NewString(tableName, "ItemISBN")
	_libcirculatelog.ItemType = field.NewInt64(tableName, "ItemType")
	_libcirculatelog.ItemCallNo = field.NewString(tableName, "ItemCallNo")
	_libcirculatelog.PatronID = field.NewString(tableName, "PatronId")
	_libcirculatelog.PatronName = field.NewString(tableName, "PatronName")
	_libcirculatelog.PatronBarcode = field.NewString(tableName, "PatronBarcode")
	_libcirculatelog.CardTypeID = field.NewString(tableName, "CardTypeId")
	_libcirculatelog.CardTypeName = field.NewString(tableName, "CardTypeName")
	_libcirculatelog.CirculateType = field.NewInt64(tableName, "CirculateType")
	_libcirculatelog.Result = field.NewInt64(tableName, "Result")
	_libcirculatelog.Remark = field.NewString(tableName, "Remark")
	_libcirculatelog.OriginType = field.NewInt64(tableName, "OriginType")
	_libcirculatelog.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_libcirculatelog.ErrorCode = field.NewString(tableName, "ErrorCode")
	_libcirculatelog.TenantID = field.NewInt64(tableName, "TenantId")
	_libcirculatelog.OperateTenantID = field.NewInt64(tableName, "OperateTenantId")

	_libcirculatelog.fillFieldMap()

	return _libcirculatelog
}

type libcirculatelog struct {
	libcirculatelogDo libcirculatelogDo

	ALL               field.Asterisk
	ID                field.String
	CreationTime      field.Time
	CreatorUserID     field.Int64
	SerialNo          field.String
	TerminalID        field.String
	TerminalCode      field.String
	TerminalName      field.String
	TerminalShelfID   field.String
	TerminalShelfName field.String
	ItemID            field.String
	ItemTitle         field.String
	ItemBarcode       field.String
	ItemISBN          field.String
	ItemType          field.Int64
	ItemCallNo        field.String
	PatronID          field.String
	PatronName        field.String
	PatronBarcode     field.String
	CardTypeID        field.String
	CardTypeName      field.String
	CirculateType     field.Int64
	Result            field.Int64
	Remark            field.String
	OriginType        field.Int64
	ErrorMessage      field.String
	ErrorCode         field.String
	TenantID          field.Int64
	OperateTenantID   field.Int64

	fieldMap map[string]field.Expr
}

func (l libcirculatelog) Table(newTableName string) *libcirculatelog {
	l.libcirculatelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libcirculatelog) As(alias string) *libcirculatelog {
	l.libcirculatelogDo.DO = *(l.libcirculatelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libcirculatelog) updateTableName(table string) *libcirculatelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.SerialNo = field.NewString(table, "SerialNo")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalCode = field.NewString(table, "TerminalCode")
	l.TerminalName = field.NewString(table, "TerminalName")
	l.TerminalShelfID = field.NewString(table, "TerminalShelfId")
	l.TerminalShelfName = field.NewString(table, "TerminalShelfName")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemISBN = field.NewString(table, "ItemISBN")
	l.ItemType = field.NewInt64(table, "ItemType")
	l.ItemCallNo = field.NewString(table, "ItemCallNo")
	l.PatronID = field.NewString(table, "PatronId")
	l.PatronName = field.NewString(table, "PatronName")
	l.PatronBarcode = field.NewString(table, "PatronBarcode")
	l.CardTypeID = field.NewString(table, "CardTypeId")
	l.CardTypeName = field.NewString(table, "CardTypeName")
	l.CirculateType = field.NewInt64(table, "CirculateType")
	l.Result = field.NewInt64(table, "Result")
	l.Remark = field.NewString(table, "Remark")
	l.OriginType = field.NewInt64(table, "OriginType")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.ErrorCode = field.NewString(table, "ErrorCode")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.OperateTenantID = field.NewInt64(table, "OperateTenantId")

	l.fillFieldMap()

	return l
}

func (l *libcirculatelog) WithContext(ctx context.Context) ILibcirculatelogDo {
	return l.libcirculatelogDo.WithContext(ctx)
}

func (l libcirculatelog) TableName() string { return l.libcirculatelogDo.TableName() }

func (l libcirculatelog) Alias() string { return l.libcirculatelogDo.Alias() }

func (l *libcirculatelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libcirculatelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 28)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["SerialNo"] = l.SerialNo
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalCode"] = l.TerminalCode
	l.fieldMap["TerminalName"] = l.TerminalName
	l.fieldMap["TerminalShelfId"] = l.TerminalShelfID
	l.fieldMap["TerminalShelfName"] = l.TerminalShelfName
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemISBN"] = l.ItemISBN
	l.fieldMap["ItemType"] = l.ItemType
	l.fieldMap["ItemCallNo"] = l.ItemCallNo
	l.fieldMap["PatronId"] = l.PatronID
	l.fieldMap["PatronName"] = l.PatronName
	l.fieldMap["PatronBarcode"] = l.PatronBarcode
	l.fieldMap["CardTypeId"] = l.CardTypeID
	l.fieldMap["CardTypeName"] = l.CardTypeName
	l.fieldMap["CirculateType"] = l.CirculateType
	l.fieldMap["Result"] = l.Result
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["OriginType"] = l.OriginType
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["ErrorCode"] = l.ErrorCode
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["OperateTenantId"] = l.OperateTenantID
}

func (l libcirculatelog) clone(db *gorm.DB) libcirculatelog {
	l.libcirculatelogDo.ReplaceDB(db)
	return l
}

type libcirculatelogDo struct{ gen.DO }

type ILibcirculatelogDo interface {
	gen.SubQuery
	Debug() ILibcirculatelogDo
	WithContext(ctx context.Context) ILibcirculatelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibcirculatelogDo
	Not(conds ...gen.Condition) ILibcirculatelogDo
	Or(conds ...gen.Condition) ILibcirculatelogDo
	Select(conds ...field.Expr) ILibcirculatelogDo
	Where(conds ...gen.Condition) ILibcirculatelogDo
	Order(conds ...field.Expr) ILibcirculatelogDo
	Distinct(cols ...field.Expr) ILibcirculatelogDo
	Omit(cols ...field.Expr) ILibcirculatelogDo
	Join(table schema.Tabler, on ...field.Expr) ILibcirculatelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibcirculatelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibcirculatelogDo
	Group(cols ...field.Expr) ILibcirculatelogDo
	Having(conds ...gen.Condition) ILibcirculatelogDo
	Limit(limit int) ILibcirculatelogDo
	Offset(offset int) ILibcirculatelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibcirculatelogDo
	Unscoped() ILibcirculatelogDo
	Create(values ...*model.Libcirculatelog) error
	CreateInBatches(values []*model.Libcirculatelog, batchSize int) error
	Save(values ...*model.Libcirculatelog) error
	First() (*model.Libcirculatelog, error)
	Take() (*model.Libcirculatelog, error)
	Last() (*model.Libcirculatelog, error)
	Find() ([]*model.Libcirculatelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libcirculatelog, err error)
	FindInBatches(result *[]*model.Libcirculatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libcirculatelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibcirculatelogDo
	Assign(attrs ...field.AssignExpr) ILibcirculatelogDo
	Joins(fields ...field.RelationField) ILibcirculatelogDo
	Preload(fields ...field.RelationField) ILibcirculatelogDo
	FirstOrInit() (*model.Libcirculatelog, error)
	FirstOrCreate() (*model.Libcirculatelog, error)
	FindByPage(offset int, limit int) (result []*model.Libcirculatelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibcirculatelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libcirculatelogDo) Debug() ILibcirculatelogDo {
	return l.withDO(l.DO.Debug())
}

func (l libcirculatelogDo) WithContext(ctx context.Context) ILibcirculatelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libcirculatelogDo) ReadDB() ILibcirculatelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libcirculatelogDo) WriteDB() ILibcirculatelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libcirculatelogDo) Clauses(conds ...clause.Expression) ILibcirculatelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libcirculatelogDo) Returning(value interface{}, columns ...string) ILibcirculatelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libcirculatelogDo) Not(conds ...gen.Condition) ILibcirculatelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libcirculatelogDo) Or(conds ...gen.Condition) ILibcirculatelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libcirculatelogDo) Select(conds ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libcirculatelogDo) Where(conds ...gen.Condition) ILibcirculatelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libcirculatelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibcirculatelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libcirculatelogDo) Order(conds ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libcirculatelogDo) Distinct(cols ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libcirculatelogDo) Omit(cols ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libcirculatelogDo) Join(table schema.Tabler, on ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libcirculatelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libcirculatelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libcirculatelogDo) Group(cols ...field.Expr) ILibcirculatelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libcirculatelogDo) Having(conds ...gen.Condition) ILibcirculatelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libcirculatelogDo) Limit(limit int) ILibcirculatelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libcirculatelogDo) Offset(offset int) ILibcirculatelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libcirculatelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibcirculatelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libcirculatelogDo) Unscoped() ILibcirculatelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libcirculatelogDo) Create(values ...*model.Libcirculatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libcirculatelogDo) CreateInBatches(values []*model.Libcirculatelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libcirculatelogDo) Save(values ...*model.Libcirculatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libcirculatelogDo) First() (*model.Libcirculatelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libcirculatelog), nil
	}
}

func (l libcirculatelogDo) Take() (*model.Libcirculatelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libcirculatelog), nil
	}
}

func (l libcirculatelogDo) Last() (*model.Libcirculatelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libcirculatelog), nil
	}
}

func (l libcirculatelogDo) Find() ([]*model.Libcirculatelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libcirculatelog), err
}

func (l libcirculatelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libcirculatelog, err error) {
	buf := make([]*model.Libcirculatelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libcirculatelogDo) FindInBatches(result *[]*model.Libcirculatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libcirculatelogDo) Attrs(attrs ...field.AssignExpr) ILibcirculatelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libcirculatelogDo) Assign(attrs ...field.AssignExpr) ILibcirculatelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libcirculatelogDo) Joins(fields ...field.RelationField) ILibcirculatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libcirculatelogDo) Preload(fields ...field.RelationField) ILibcirculatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libcirculatelogDo) FirstOrInit() (*model.Libcirculatelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libcirculatelog), nil
	}
}

func (l libcirculatelogDo) FirstOrCreate() (*model.Libcirculatelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libcirculatelog), nil
	}
}

func (l libcirculatelogDo) FindByPage(offset int, limit int) (result []*model.Libcirculatelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libcirculatelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libcirculatelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libcirculatelogDo) Delete(models ...*model.Libcirculatelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libcirculatelogDo) withDO(do gen.Dao) *libcirculatelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
