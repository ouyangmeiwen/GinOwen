// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLiblabeloperatelog(db *gorm.DB) liblabeloperatelog {
	_liblabeloperatelog := liblabeloperatelog{}

	_liblabeloperatelog.liblabeloperatelogDo.UseDB(db)
	_liblabeloperatelog.liblabeloperatelogDo.UseModel(&model.Liblabeloperatelog{})

	tableName := _liblabeloperatelog.liblabeloperatelogDo.TableName()
	_liblabeloperatelog.ALL = field.NewAsterisk(tableName)
	_liblabeloperatelog.ID = field.NewString(tableName, "Id")
	_liblabeloperatelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_liblabeloperatelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_liblabeloperatelog.Tid = field.NewString(tableName, "Tid")
	_liblabeloperatelog.Code = field.NewString(tableName, "Code")
	_liblabeloperatelog.Description = field.NewString(tableName, "Description")
	_liblabeloperatelog.OldTid = field.NewString(tableName, "OldTid")
	_liblabeloperatelog.LabelType = field.NewInt64(tableName, "LabelType")
	_liblabeloperatelog.LabelOperateType = field.NewInt64(tableName, "LabelOperateType")
	_liblabeloperatelog.Remark = field.NewString(tableName, "Remark")
	_liblabeloperatelog.TenantID = field.NewInt64(tableName, "TenantId")
	_liblabeloperatelog.CreatorUserName = field.NewString(tableName, "CreatorUserName")

	_liblabeloperatelog.fillFieldMap()

	return _liblabeloperatelog
}

type liblabeloperatelog struct {
	liblabeloperatelogDo liblabeloperatelogDo

	ALL              field.Asterisk
	ID               field.String
	CreationTime     field.Time
	CreatorUserID    field.Int64
	Tid              field.String
	Code             field.String
	Description      field.String
	OldTid           field.String
	LabelType        field.Int64
	LabelOperateType field.Int64
	Remark           field.String
	TenantID         field.Int64
	CreatorUserName  field.String

	fieldMap map[string]field.Expr
}

func (l liblabeloperatelog) Table(newTableName string) *liblabeloperatelog {
	l.liblabeloperatelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liblabeloperatelog) As(alias string) *liblabeloperatelog {
	l.liblabeloperatelogDo.DO = *(l.liblabeloperatelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liblabeloperatelog) updateTableName(table string) *liblabeloperatelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.Tid = field.NewString(table, "Tid")
	l.Code = field.NewString(table, "Code")
	l.Description = field.NewString(table, "Description")
	l.OldTid = field.NewString(table, "OldTid")
	l.LabelType = field.NewInt64(table, "LabelType")
	l.LabelOperateType = field.NewInt64(table, "LabelOperateType")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")

	l.fillFieldMap()

	return l
}

func (l *liblabeloperatelog) WithContext(ctx context.Context) ILiblabeloperatelogDo {
	return l.liblabeloperatelogDo.WithContext(ctx)
}

func (l liblabeloperatelog) TableName() string { return l.liblabeloperatelogDo.TableName() }

func (l liblabeloperatelog) Alias() string { return l.liblabeloperatelogDo.Alias() }

func (l *liblabeloperatelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liblabeloperatelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["Tid"] = l.Tid
	l.fieldMap["Code"] = l.Code
	l.fieldMap["Description"] = l.Description
	l.fieldMap["OldTid"] = l.OldTid
	l.fieldMap["LabelType"] = l.LabelType
	l.fieldMap["LabelOperateType"] = l.LabelOperateType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
}

func (l liblabeloperatelog) clone(db *gorm.DB) liblabeloperatelog {
	l.liblabeloperatelogDo.ReplaceDB(db)
	return l
}

type liblabeloperatelogDo struct{ gen.DO }

type ILiblabeloperatelogDo interface {
	gen.SubQuery
	Debug() ILiblabeloperatelogDo
	WithContext(ctx context.Context) ILiblabeloperatelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiblabeloperatelogDo
	Not(conds ...gen.Condition) ILiblabeloperatelogDo
	Or(conds ...gen.Condition) ILiblabeloperatelogDo
	Select(conds ...field.Expr) ILiblabeloperatelogDo
	Where(conds ...gen.Condition) ILiblabeloperatelogDo
	Order(conds ...field.Expr) ILiblabeloperatelogDo
	Distinct(cols ...field.Expr) ILiblabeloperatelogDo
	Omit(cols ...field.Expr) ILiblabeloperatelogDo
	Join(table schema.Tabler, on ...field.Expr) ILiblabeloperatelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiblabeloperatelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiblabeloperatelogDo
	Group(cols ...field.Expr) ILiblabeloperatelogDo
	Having(conds ...gen.Condition) ILiblabeloperatelogDo
	Limit(limit int) ILiblabeloperatelogDo
	Offset(offset int) ILiblabeloperatelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiblabeloperatelogDo
	Unscoped() ILiblabeloperatelogDo
	Create(values ...*model.Liblabeloperatelog) error
	CreateInBatches(values []*model.Liblabeloperatelog, batchSize int) error
	Save(values ...*model.Liblabeloperatelog) error
	First() (*model.Liblabeloperatelog, error)
	Take() (*model.Liblabeloperatelog, error)
	Last() (*model.Liblabeloperatelog, error)
	Find() ([]*model.Liblabeloperatelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Liblabeloperatelog, err error)
	FindInBatches(result *[]*model.Liblabeloperatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Liblabeloperatelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiblabeloperatelogDo
	Assign(attrs ...field.AssignExpr) ILiblabeloperatelogDo
	Joins(fields ...field.RelationField) ILiblabeloperatelogDo
	Preload(fields ...field.RelationField) ILiblabeloperatelogDo
	FirstOrInit() (*model.Liblabeloperatelog, error)
	FirstOrCreate() (*model.Liblabeloperatelog, error)
	FindByPage(offset int, limit int) (result []*model.Liblabeloperatelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiblabeloperatelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liblabeloperatelogDo) Debug() ILiblabeloperatelogDo {
	return l.withDO(l.DO.Debug())
}

func (l liblabeloperatelogDo) WithContext(ctx context.Context) ILiblabeloperatelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liblabeloperatelogDo) ReadDB() ILiblabeloperatelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l liblabeloperatelogDo) WriteDB() ILiblabeloperatelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l liblabeloperatelogDo) Clauses(conds ...clause.Expression) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liblabeloperatelogDo) Returning(value interface{}, columns ...string) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liblabeloperatelogDo) Not(conds ...gen.Condition) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liblabeloperatelogDo) Or(conds ...gen.Condition) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liblabeloperatelogDo) Select(conds ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liblabeloperatelogDo) Where(conds ...gen.Condition) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liblabeloperatelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILiblabeloperatelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l liblabeloperatelogDo) Order(conds ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liblabeloperatelogDo) Distinct(cols ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liblabeloperatelogDo) Omit(cols ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liblabeloperatelogDo) Join(table schema.Tabler, on ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liblabeloperatelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liblabeloperatelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liblabeloperatelogDo) Group(cols ...field.Expr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liblabeloperatelogDo) Having(conds ...gen.Condition) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liblabeloperatelogDo) Limit(limit int) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liblabeloperatelogDo) Offset(offset int) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liblabeloperatelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liblabeloperatelogDo) Unscoped() ILiblabeloperatelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liblabeloperatelogDo) Create(values ...*model.Liblabeloperatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liblabeloperatelogDo) CreateInBatches(values []*model.Liblabeloperatelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liblabeloperatelogDo) Save(values ...*model.Liblabeloperatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liblabeloperatelogDo) First() (*model.Liblabeloperatelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabeloperatelog), nil
	}
}

func (l liblabeloperatelogDo) Take() (*model.Liblabeloperatelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabeloperatelog), nil
	}
}

func (l liblabeloperatelogDo) Last() (*model.Liblabeloperatelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabeloperatelog), nil
	}
}

func (l liblabeloperatelogDo) Find() ([]*model.Liblabeloperatelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Liblabeloperatelog), err
}

func (l liblabeloperatelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Liblabeloperatelog, err error) {
	buf := make([]*model.Liblabeloperatelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liblabeloperatelogDo) FindInBatches(result *[]*model.Liblabeloperatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liblabeloperatelogDo) Attrs(attrs ...field.AssignExpr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liblabeloperatelogDo) Assign(attrs ...field.AssignExpr) ILiblabeloperatelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liblabeloperatelogDo) Joins(fields ...field.RelationField) ILiblabeloperatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liblabeloperatelogDo) Preload(fields ...field.RelationField) ILiblabeloperatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liblabeloperatelogDo) FirstOrInit() (*model.Liblabeloperatelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabeloperatelog), nil
	}
}

func (l liblabeloperatelogDo) FirstOrCreate() (*model.Liblabeloperatelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Liblabeloperatelog), nil
	}
}

func (l liblabeloperatelogDo) FindByPage(offset int, limit int) (result []*model.Liblabeloperatelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liblabeloperatelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liblabeloperatelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liblabeloperatelogDo) Delete(models ...*model.Liblabeloperatelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liblabeloperatelogDo) withDO(do gen.Dao) *liblabeloperatelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
