// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLcpterminaldevice(db *gorm.DB) lcpterminaldevice {
	_lcpterminaldevice := lcpterminaldevice{}

	_lcpterminaldevice.lcpterminaldeviceDo.UseDB(db)
	_lcpterminaldevice.lcpterminaldeviceDo.UseModel(&model.Lcpterminaldevice{})

	tableName := _lcpterminaldevice.lcpterminaldeviceDo.TableName()
	_lcpterminaldevice.ALL = field.NewAsterisk(tableName)
	_lcpterminaldevice.ID = field.NewString(tableName, "Id")
	_lcpterminaldevice.CreationTime = field.NewTime(tableName, "CreationTime")
	_lcpterminaldevice.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_lcpterminaldevice.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_lcpterminaldevice.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_lcpterminaldevice.IsDeleted = field.NewField(tableName, "IsDeleted")
	_lcpterminaldevice.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_lcpterminaldevice.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_lcpterminaldevice.TerminalID = field.NewString(tableName, "TerminalId")
	_lcpterminaldevice.TerminalDeviceType = field.NewInt64(tableName, "TerminalDeviceType")
	_lcpterminaldevice.Name = field.NewString(tableName, "Name")
	_lcpterminaldevice.IsError = field.NewField(tableName, "IsError")
	_lcpterminaldevice.ErrorMessage = field.NewString(tableName, "ErrorMessage")
	_lcpterminaldevice.Brand = field.NewString(tableName, "Brand")
	_lcpterminaldevice.Model = field.NewString(tableName, "Model")
	_lcpterminaldevice.Version = field.NewString(tableName, "Version")
	_lcpterminaldevice.ConnectionString = field.NewString(tableName, "ConnectionString")
	_lcpterminaldevice.Remark = field.NewString(tableName, "Remark")
	_lcpterminaldevice.TenantID = field.NewInt64(tableName, "TenantId")

	_lcpterminaldevice.fillFieldMap()

	return _lcpterminaldevice
}

type lcpterminaldevice struct {
	lcpterminaldeviceDo lcpterminaldeviceDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TerminalID           field.String
	TerminalDeviceType   field.Int64
	Name                 field.String
	IsError              field.Field
	ErrorMessage         field.String
	Brand                field.String
	Model                field.String
	Version              field.String
	ConnectionString     field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l lcpterminaldevice) Table(newTableName string) *lcpterminaldevice {
	l.lcpterminaldeviceDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lcpterminaldevice) As(alias string) *lcpterminaldevice {
	l.lcpterminaldeviceDo.DO = *(l.lcpterminaldeviceDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lcpterminaldevice) updateTableName(table string) *lcpterminaldevice {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TerminalID = field.NewString(table, "TerminalId")
	l.TerminalDeviceType = field.NewInt64(table, "TerminalDeviceType")
	l.Name = field.NewString(table, "Name")
	l.IsError = field.NewField(table, "IsError")
	l.ErrorMessage = field.NewString(table, "ErrorMessage")
	l.Brand = field.NewString(table, "Brand")
	l.Model = field.NewString(table, "Model")
	l.Version = field.NewString(table, "Version")
	l.ConnectionString = field.NewString(table, "ConnectionString")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *lcpterminaldevice) WithContext(ctx context.Context) ILcpterminaldeviceDo {
	return l.lcpterminaldeviceDo.WithContext(ctx)
}

func (l lcpterminaldevice) TableName() string { return l.lcpterminaldeviceDo.TableName() }

func (l lcpterminaldevice) Alias() string { return l.lcpterminaldeviceDo.Alias() }

func (l *lcpterminaldevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lcpterminaldevice) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 19)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TerminalId"] = l.TerminalID
	l.fieldMap["TerminalDeviceType"] = l.TerminalDeviceType
	l.fieldMap["Name"] = l.Name
	l.fieldMap["IsError"] = l.IsError
	l.fieldMap["ErrorMessage"] = l.ErrorMessage
	l.fieldMap["Brand"] = l.Brand
	l.fieldMap["Model"] = l.Model
	l.fieldMap["Version"] = l.Version
	l.fieldMap["ConnectionString"] = l.ConnectionString
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l lcpterminaldevice) clone(db *gorm.DB) lcpterminaldevice {
	l.lcpterminaldeviceDo.ReplaceDB(db)
	return l
}

type lcpterminaldeviceDo struct{ gen.DO }

type ILcpterminaldeviceDo interface {
	gen.SubQuery
	Debug() ILcpterminaldeviceDo
	WithContext(ctx context.Context) ILcpterminaldeviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILcpterminaldeviceDo
	Not(conds ...gen.Condition) ILcpterminaldeviceDo
	Or(conds ...gen.Condition) ILcpterminaldeviceDo
	Select(conds ...field.Expr) ILcpterminaldeviceDo
	Where(conds ...gen.Condition) ILcpterminaldeviceDo
	Order(conds ...field.Expr) ILcpterminaldeviceDo
	Distinct(cols ...field.Expr) ILcpterminaldeviceDo
	Omit(cols ...field.Expr) ILcpterminaldeviceDo
	Join(table schema.Tabler, on ...field.Expr) ILcpterminaldeviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldeviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldeviceDo
	Group(cols ...field.Expr) ILcpterminaldeviceDo
	Having(conds ...gen.Condition) ILcpterminaldeviceDo
	Limit(limit int) ILcpterminaldeviceDo
	Offset(offset int) ILcpterminaldeviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminaldeviceDo
	Unscoped() ILcpterminaldeviceDo
	Create(values ...*model.Lcpterminaldevice) error
	CreateInBatches(values []*model.Lcpterminaldevice, batchSize int) error
	Save(values ...*model.Lcpterminaldevice) error
	First() (*model.Lcpterminaldevice, error)
	Take() (*model.Lcpterminaldevice, error)
	Last() (*model.Lcpterminaldevice, error)
	Find() ([]*model.Lcpterminaldevice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminaldevice, err error)
	FindInBatches(result *[]*model.Lcpterminaldevice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lcpterminaldevice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILcpterminaldeviceDo
	Assign(attrs ...field.AssignExpr) ILcpterminaldeviceDo
	Joins(fields ...field.RelationField) ILcpterminaldeviceDo
	Preload(fields ...field.RelationField) ILcpterminaldeviceDo
	FirstOrInit() (*model.Lcpterminaldevice, error)
	FirstOrCreate() (*model.Lcpterminaldevice, error)
	FindByPage(offset int, limit int) (result []*model.Lcpterminaldevice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILcpterminaldeviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lcpterminaldeviceDo) Debug() ILcpterminaldeviceDo {
	return l.withDO(l.DO.Debug())
}

func (l lcpterminaldeviceDo) WithContext(ctx context.Context) ILcpterminaldeviceDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lcpterminaldeviceDo) ReadDB() ILcpterminaldeviceDo {
	return l.Clauses(dbresolver.Read)
}

func (l lcpterminaldeviceDo) WriteDB() ILcpterminaldeviceDo {
	return l.Clauses(dbresolver.Write)
}

func (l lcpterminaldeviceDo) Clauses(conds ...clause.Expression) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lcpterminaldeviceDo) Returning(value interface{}, columns ...string) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lcpterminaldeviceDo) Not(conds ...gen.Condition) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lcpterminaldeviceDo) Or(conds ...gen.Condition) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lcpterminaldeviceDo) Select(conds ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lcpterminaldeviceDo) Where(conds ...gen.Condition) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lcpterminaldeviceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILcpterminaldeviceDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lcpterminaldeviceDo) Order(conds ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lcpterminaldeviceDo) Distinct(cols ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lcpterminaldeviceDo) Omit(cols ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lcpterminaldeviceDo) Join(table schema.Tabler, on ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lcpterminaldeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lcpterminaldeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lcpterminaldeviceDo) Group(cols ...field.Expr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lcpterminaldeviceDo) Having(conds ...gen.Condition) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lcpterminaldeviceDo) Limit(limit int) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lcpterminaldeviceDo) Offset(offset int) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lcpterminaldeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lcpterminaldeviceDo) Unscoped() ILcpterminaldeviceDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lcpterminaldeviceDo) Create(values ...*model.Lcpterminaldevice) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lcpterminaldeviceDo) CreateInBatches(values []*model.Lcpterminaldevice, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lcpterminaldeviceDo) Save(values ...*model.Lcpterminaldevice) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lcpterminaldeviceDo) First() (*model.Lcpterminaldevice, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevice), nil
	}
}

func (l lcpterminaldeviceDo) Take() (*model.Lcpterminaldevice, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevice), nil
	}
}

func (l lcpterminaldeviceDo) Last() (*model.Lcpterminaldevice, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevice), nil
	}
}

func (l lcpterminaldeviceDo) Find() ([]*model.Lcpterminaldevice, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lcpterminaldevice), err
}

func (l lcpterminaldeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lcpterminaldevice, err error) {
	buf := make([]*model.Lcpterminaldevice, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lcpterminaldeviceDo) FindInBatches(result *[]*model.Lcpterminaldevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lcpterminaldeviceDo) Attrs(attrs ...field.AssignExpr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lcpterminaldeviceDo) Assign(attrs ...field.AssignExpr) ILcpterminaldeviceDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lcpterminaldeviceDo) Joins(fields ...field.RelationField) ILcpterminaldeviceDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lcpterminaldeviceDo) Preload(fields ...field.RelationField) ILcpterminaldeviceDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lcpterminaldeviceDo) FirstOrInit() (*model.Lcpterminaldevice, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevice), nil
	}
}

func (l lcpterminaldeviceDo) FirstOrCreate() (*model.Lcpterminaldevice, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lcpterminaldevice), nil
	}
}

func (l lcpterminaldeviceDo) FindByPage(offset int, limit int) (result []*model.Lcpterminaldevice, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lcpterminaldeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lcpterminaldeviceDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lcpterminaldeviceDo) Delete(models ...*model.Lcpterminaldevice) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lcpterminaldeviceDo) withDO(do gen.Dao) *lcpterminaldeviceDo {
	l.DO = *do.(*gen.DO)
	return l
}
