// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpusernotification(db *gorm.DB) abpusernotification {
	_abpusernotification := abpusernotification{}

	_abpusernotification.abpusernotificationDo.UseDB(db)
	_abpusernotification.abpusernotificationDo.UseModel(&model.Abpusernotification{})

	tableName := _abpusernotification.abpusernotificationDo.TableName()
	_abpusernotification.ALL = field.NewAsterisk(tableName)
	_abpusernotification.ID = field.NewString(tableName, "Id")
	_abpusernotification.TenantID = field.NewInt64(tableName, "TenantId")
	_abpusernotification.UserID = field.NewInt64(tableName, "UserId")
	_abpusernotification.TenantNotificationID = field.NewString(tableName, "TenantNotificationId")
	_abpusernotification.State = field.NewInt64(tableName, "State")
	_abpusernotification.CreationTime = field.NewTime(tableName, "CreationTime")

	_abpusernotification.fillFieldMap()

	return _abpusernotification
}

type abpusernotification struct {
	abpusernotificationDo abpusernotificationDo

	ALL                  field.Asterisk
	ID                   field.String
	TenantID             field.Int64
	UserID               field.Int64
	TenantNotificationID field.String
	State                field.Int64
	CreationTime         field.Time

	fieldMap map[string]field.Expr
}

func (a abpusernotification) Table(newTableName string) *abpusernotification {
	a.abpusernotificationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpusernotification) As(alias string) *abpusernotification {
	a.abpusernotificationDo.DO = *(a.abpusernotificationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpusernotification) updateTableName(table string) *abpusernotification {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.TenantNotificationID = field.NewString(table, "TenantNotificationId")
	a.State = field.NewInt64(table, "State")
	a.CreationTime = field.NewTime(table, "CreationTime")

	a.fillFieldMap()

	return a
}

func (a *abpusernotification) WithContext(ctx context.Context) IAbpusernotificationDo {
	return a.abpusernotificationDo.WithContext(ctx)
}

func (a abpusernotification) TableName() string { return a.abpusernotificationDo.TableName() }

func (a abpusernotification) Alias() string { return a.abpusernotificationDo.Alias() }

func (a *abpusernotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpusernotification) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["TenantNotificationId"] = a.TenantNotificationID
	a.fieldMap["State"] = a.State
	a.fieldMap["CreationTime"] = a.CreationTime
}

func (a abpusernotification) clone(db *gorm.DB) abpusernotification {
	a.abpusernotificationDo.ReplaceDB(db)
	return a
}

type abpusernotificationDo struct{ gen.DO }

type IAbpusernotificationDo interface {
	gen.SubQuery
	Debug() IAbpusernotificationDo
	WithContext(ctx context.Context) IAbpusernotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpusernotificationDo
	Not(conds ...gen.Condition) IAbpusernotificationDo
	Or(conds ...gen.Condition) IAbpusernotificationDo
	Select(conds ...field.Expr) IAbpusernotificationDo
	Where(conds ...gen.Condition) IAbpusernotificationDo
	Order(conds ...field.Expr) IAbpusernotificationDo
	Distinct(cols ...field.Expr) IAbpusernotificationDo
	Omit(cols ...field.Expr) IAbpusernotificationDo
	Join(table schema.Tabler, on ...field.Expr) IAbpusernotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpusernotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpusernotificationDo
	Group(cols ...field.Expr) IAbpusernotificationDo
	Having(conds ...gen.Condition) IAbpusernotificationDo
	Limit(limit int) IAbpusernotificationDo
	Offset(offset int) IAbpusernotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpusernotificationDo
	Unscoped() IAbpusernotificationDo
	Create(values ...*model.Abpusernotification) error
	CreateInBatches(values []*model.Abpusernotification, batchSize int) error
	Save(values ...*model.Abpusernotification) error
	First() (*model.Abpusernotification, error)
	Take() (*model.Abpusernotification, error)
	Last() (*model.Abpusernotification, error)
	Find() ([]*model.Abpusernotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpusernotification, err error)
	FindInBatches(result *[]*model.Abpusernotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpusernotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpusernotificationDo
	Assign(attrs ...field.AssignExpr) IAbpusernotificationDo
	Joins(fields ...field.RelationField) IAbpusernotificationDo
	Preload(fields ...field.RelationField) IAbpusernotificationDo
	FirstOrInit() (*model.Abpusernotification, error)
	FirstOrCreate() (*model.Abpusernotification, error)
	FindByPage(offset int, limit int) (result []*model.Abpusernotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpusernotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpusernotificationDo) Debug() IAbpusernotificationDo {
	return a.withDO(a.DO.Debug())
}

func (a abpusernotificationDo) WithContext(ctx context.Context) IAbpusernotificationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpusernotificationDo) ReadDB() IAbpusernotificationDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpusernotificationDo) WriteDB() IAbpusernotificationDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpusernotificationDo) Clauses(conds ...clause.Expression) IAbpusernotificationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpusernotificationDo) Returning(value interface{}, columns ...string) IAbpusernotificationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpusernotificationDo) Not(conds ...gen.Condition) IAbpusernotificationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpusernotificationDo) Or(conds ...gen.Condition) IAbpusernotificationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpusernotificationDo) Select(conds ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpusernotificationDo) Where(conds ...gen.Condition) IAbpusernotificationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpusernotificationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpusernotificationDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpusernotificationDo) Order(conds ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpusernotificationDo) Distinct(cols ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpusernotificationDo) Omit(cols ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpusernotificationDo) Join(table schema.Tabler, on ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpusernotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpusernotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpusernotificationDo) Group(cols ...field.Expr) IAbpusernotificationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpusernotificationDo) Having(conds ...gen.Condition) IAbpusernotificationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpusernotificationDo) Limit(limit int) IAbpusernotificationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpusernotificationDo) Offset(offset int) IAbpusernotificationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpusernotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpusernotificationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpusernotificationDo) Unscoped() IAbpusernotificationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpusernotificationDo) Create(values ...*model.Abpusernotification) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpusernotificationDo) CreateInBatches(values []*model.Abpusernotification, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpusernotificationDo) Save(values ...*model.Abpusernotification) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpusernotificationDo) First() (*model.Abpusernotification, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusernotification), nil
	}
}

func (a abpusernotificationDo) Take() (*model.Abpusernotification, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusernotification), nil
	}
}

func (a abpusernotificationDo) Last() (*model.Abpusernotification, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusernotification), nil
	}
}

func (a abpusernotificationDo) Find() ([]*model.Abpusernotification, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpusernotification), err
}

func (a abpusernotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpusernotification, err error) {
	buf := make([]*model.Abpusernotification, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpusernotificationDo) FindInBatches(result *[]*model.Abpusernotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpusernotificationDo) Attrs(attrs ...field.AssignExpr) IAbpusernotificationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpusernotificationDo) Assign(attrs ...field.AssignExpr) IAbpusernotificationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpusernotificationDo) Joins(fields ...field.RelationField) IAbpusernotificationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpusernotificationDo) Preload(fields ...field.RelationField) IAbpusernotificationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpusernotificationDo) FirstOrInit() (*model.Abpusernotification, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusernotification), nil
	}
}

func (a abpusernotificationDo) FirstOrCreate() (*model.Abpusernotification, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusernotification), nil
	}
}

func (a abpusernotificationDo) FindByPage(offset int, limit int) (result []*model.Abpusernotification, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpusernotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpusernotificationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpusernotificationDo) Delete(models ...*model.Abpusernotification) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpusernotificationDo) withDO(do gen.Dao) *abpusernotificationDo {
	a.DO = *do.(*gen.DO)
	return a
}
