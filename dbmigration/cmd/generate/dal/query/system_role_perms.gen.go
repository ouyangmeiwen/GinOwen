// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemRolePerm(db *gorm.DB) systemRolePerm {
	_systemRolePerm := systemRolePerm{}

	_systemRolePerm.systemRolePermDo.UseDB(db)
	_systemRolePerm.systemRolePermDo.UseModel(&model.SystemRolePerm{})

	tableName := _systemRolePerm.systemRolePermDo.TableName()
	_systemRolePerm.ALL = field.NewAsterisk(tableName)
	_systemRolePerm.ID = field.NewInt64(tableName, "id")
	_systemRolePerm.RoleID = field.NewInt64(tableName, "role_id")
	_systemRolePerm.PermissionID = field.NewInt64(tableName, "permission_id")

	_systemRolePerm.fillFieldMap()

	return _systemRolePerm
}

type systemRolePerm struct {
	systemRolePermDo systemRolePermDo

	ALL          field.Asterisk
	ID           field.Int64
	RoleID       field.Int64
	PermissionID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemRolePerm) Table(newTableName string) *systemRolePerm {
	s.systemRolePermDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemRolePerm) As(alias string) *systemRolePerm {
	s.systemRolePermDo.DO = *(s.systemRolePermDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemRolePerm) updateTableName(table string) *systemRolePerm {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.RoleID = field.NewInt64(table, "role_id")
	s.PermissionID = field.NewInt64(table, "permission_id")

	s.fillFieldMap()

	return s
}

func (s *systemRolePerm) WithContext(ctx context.Context) ISystemRolePermDo {
	return s.systemRolePermDo.WithContext(ctx)
}

func (s systemRolePerm) TableName() string { return s.systemRolePermDo.TableName() }

func (s systemRolePerm) Alias() string { return s.systemRolePermDo.Alias() }

func (s *systemRolePerm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemRolePerm) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["permission_id"] = s.PermissionID
}

func (s systemRolePerm) clone(db *gorm.DB) systemRolePerm {
	s.systemRolePermDo.ReplaceDB(db)
	return s
}

type systemRolePermDo struct{ gen.DO }

type ISystemRolePermDo interface {
	gen.SubQuery
	Debug() ISystemRolePermDo
	WithContext(ctx context.Context) ISystemRolePermDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemRolePermDo
	Not(conds ...gen.Condition) ISystemRolePermDo
	Or(conds ...gen.Condition) ISystemRolePermDo
	Select(conds ...field.Expr) ISystemRolePermDo
	Where(conds ...gen.Condition) ISystemRolePermDo
	Order(conds ...field.Expr) ISystemRolePermDo
	Distinct(cols ...field.Expr) ISystemRolePermDo
	Omit(cols ...field.Expr) ISystemRolePermDo
	Join(table schema.Tabler, on ...field.Expr) ISystemRolePermDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemRolePermDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemRolePermDo
	Group(cols ...field.Expr) ISystemRolePermDo
	Having(conds ...gen.Condition) ISystemRolePermDo
	Limit(limit int) ISystemRolePermDo
	Offset(offset int) ISystemRolePermDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemRolePermDo
	Unscoped() ISystemRolePermDo
	Create(values ...*model.SystemRolePerm) error
	CreateInBatches(values []*model.SystemRolePerm, batchSize int) error
	Save(values ...*model.SystemRolePerm) error
	First() (*model.SystemRolePerm, error)
	Take() (*model.SystemRolePerm, error)
	Last() (*model.SystemRolePerm, error)
	Find() ([]*model.SystemRolePerm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemRolePerm, err error)
	FindInBatches(result *[]*model.SystemRolePerm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemRolePerm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemRolePermDo
	Assign(attrs ...field.AssignExpr) ISystemRolePermDo
	Joins(fields ...field.RelationField) ISystemRolePermDo
	Preload(fields ...field.RelationField) ISystemRolePermDo
	FirstOrInit() (*model.SystemRolePerm, error)
	FirstOrCreate() (*model.SystemRolePerm, error)
	FindByPage(offset int, limit int) (result []*model.SystemRolePerm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemRolePermDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemRolePermDo) Debug() ISystemRolePermDo {
	return s.withDO(s.DO.Debug())
}

func (s systemRolePermDo) WithContext(ctx context.Context) ISystemRolePermDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemRolePermDo) ReadDB() ISystemRolePermDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemRolePermDo) WriteDB() ISystemRolePermDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemRolePermDo) Clauses(conds ...clause.Expression) ISystemRolePermDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemRolePermDo) Returning(value interface{}, columns ...string) ISystemRolePermDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemRolePermDo) Not(conds ...gen.Condition) ISystemRolePermDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemRolePermDo) Or(conds ...gen.Condition) ISystemRolePermDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemRolePermDo) Select(conds ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemRolePermDo) Where(conds ...gen.Condition) ISystemRolePermDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemRolePermDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemRolePermDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemRolePermDo) Order(conds ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemRolePermDo) Distinct(cols ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemRolePermDo) Omit(cols ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemRolePermDo) Join(table schema.Tabler, on ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemRolePermDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemRolePermDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemRolePermDo) Group(cols ...field.Expr) ISystemRolePermDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemRolePermDo) Having(conds ...gen.Condition) ISystemRolePermDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemRolePermDo) Limit(limit int) ISystemRolePermDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemRolePermDo) Offset(offset int) ISystemRolePermDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemRolePermDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemRolePermDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemRolePermDo) Unscoped() ISystemRolePermDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemRolePermDo) Create(values ...*model.SystemRolePerm) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemRolePermDo) CreateInBatches(values []*model.SystemRolePerm, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemRolePermDo) Save(values ...*model.SystemRolePerm) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemRolePermDo) First() (*model.SystemRolePerm, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRolePerm), nil
	}
}

func (s systemRolePermDo) Take() (*model.SystemRolePerm, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRolePerm), nil
	}
}

func (s systemRolePermDo) Last() (*model.SystemRolePerm, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRolePerm), nil
	}
}

func (s systemRolePermDo) Find() ([]*model.SystemRolePerm, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemRolePerm), err
}

func (s systemRolePermDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemRolePerm, err error) {
	buf := make([]*model.SystemRolePerm, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemRolePermDo) FindInBatches(result *[]*model.SystemRolePerm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemRolePermDo) Attrs(attrs ...field.AssignExpr) ISystemRolePermDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemRolePermDo) Assign(attrs ...field.AssignExpr) ISystemRolePermDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemRolePermDo) Joins(fields ...field.RelationField) ISystemRolePermDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemRolePermDo) Preload(fields ...field.RelationField) ISystemRolePermDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemRolePermDo) FirstOrInit() (*model.SystemRolePerm, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRolePerm), nil
	}
}

func (s systemRolePermDo) FirstOrCreate() (*model.SystemRolePerm, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemRolePerm), nil
	}
}

func (s systemRolePermDo) FindByPage(offset int, limit int) (result []*model.SystemRolePerm, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemRolePermDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemRolePermDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemRolePermDo) Delete(models ...*model.SystemRolePerm) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemRolePermDo) withDO(do gen.Dao) *systemRolePermDo {
	s.DO = *do.(*gen.DO)
	return s
}
