// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibscanitemlog(db *gorm.DB) libscanitemlog {
	_libscanitemlog := libscanitemlog{}

	_libscanitemlog.libscanitemlogDo.UseDB(db)
	_libscanitemlog.libscanitemlogDo.UseModel(&model.Libscanitemlog{})

	tableName := _libscanitemlog.libscanitemlogDo.TableName()
	_libscanitemlog.ALL = field.NewAsterisk(tableName)
	_libscanitemlog.ID = field.NewString(tableName, "Id")
	_libscanitemlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libscanitemlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libscanitemlog.SerialNo = field.NewString(tableName, "SerialNo")
	_libscanitemlog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libscanitemlog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libscanitemlog.LocationID = field.NewString(tableName, "LocationId")
	_libscanitemlog.LocationName = field.NewString(tableName, "LocationName")
	_libscanitemlog.Remark = field.NewString(tableName, "Remark")
	_libscanitemlog.TenantID = field.NewInt64(tableName, "TenantId")
	_libscanitemlog.CreatorUserName = field.NewString(tableName, "CreatorUserName")

	_libscanitemlog.fillFieldMap()

	return _libscanitemlog
}

type libscanitemlog struct {
	libscanitemlogDo libscanitemlogDo

	ALL             field.Asterisk
	ID              field.String
	CreationTime    field.Time
	CreatorUserID   field.Int64
	SerialNo        field.String
	ItemBarcode     field.String
	ItemTitle       field.String
	LocationID      field.String
	LocationName    field.String
	Remark          field.String
	TenantID        field.Int64
	CreatorUserName field.String

	fieldMap map[string]field.Expr
}

func (l libscanitemlog) Table(newTableName string) *libscanitemlog {
	l.libscanitemlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libscanitemlog) As(alias string) *libscanitemlog {
	l.libscanitemlogDo.DO = *(l.libscanitemlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libscanitemlog) updateTableName(table string) *libscanitemlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.SerialNo = field.NewString(table, "SerialNo")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.LocationID = field.NewString(table, "LocationId")
	l.LocationName = field.NewString(table, "LocationName")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")

	l.fillFieldMap()

	return l
}

func (l *libscanitemlog) WithContext(ctx context.Context) ILibscanitemlogDo {
	return l.libscanitemlogDo.WithContext(ctx)
}

func (l libscanitemlog) TableName() string { return l.libscanitemlogDo.TableName() }

func (l libscanitemlog) Alias() string { return l.libscanitemlogDo.Alias() }

func (l *libscanitemlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libscanitemlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["SerialNo"] = l.SerialNo
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["LocationName"] = l.LocationName
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
}

func (l libscanitemlog) clone(db *gorm.DB) libscanitemlog {
	l.libscanitemlogDo.ReplaceDB(db)
	return l
}

type libscanitemlogDo struct{ gen.DO }

type ILibscanitemlogDo interface {
	gen.SubQuery
	Debug() ILibscanitemlogDo
	WithContext(ctx context.Context) ILibscanitemlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibscanitemlogDo
	Not(conds ...gen.Condition) ILibscanitemlogDo
	Or(conds ...gen.Condition) ILibscanitemlogDo
	Select(conds ...field.Expr) ILibscanitemlogDo
	Where(conds ...gen.Condition) ILibscanitemlogDo
	Order(conds ...field.Expr) ILibscanitemlogDo
	Distinct(cols ...field.Expr) ILibscanitemlogDo
	Omit(cols ...field.Expr) ILibscanitemlogDo
	Join(table schema.Tabler, on ...field.Expr) ILibscanitemlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibscanitemlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibscanitemlogDo
	Group(cols ...field.Expr) ILibscanitemlogDo
	Having(conds ...gen.Condition) ILibscanitemlogDo
	Limit(limit int) ILibscanitemlogDo
	Offset(offset int) ILibscanitemlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibscanitemlogDo
	Unscoped() ILibscanitemlogDo
	Create(values ...*model.Libscanitemlog) error
	CreateInBatches(values []*model.Libscanitemlog, batchSize int) error
	Save(values ...*model.Libscanitemlog) error
	First() (*model.Libscanitemlog, error)
	Take() (*model.Libscanitemlog, error)
	Last() (*model.Libscanitemlog, error)
	Find() ([]*model.Libscanitemlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libscanitemlog, err error)
	FindInBatches(result *[]*model.Libscanitemlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libscanitemlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibscanitemlogDo
	Assign(attrs ...field.AssignExpr) ILibscanitemlogDo
	Joins(fields ...field.RelationField) ILibscanitemlogDo
	Preload(fields ...field.RelationField) ILibscanitemlogDo
	FirstOrInit() (*model.Libscanitemlog, error)
	FirstOrCreate() (*model.Libscanitemlog, error)
	FindByPage(offset int, limit int) (result []*model.Libscanitemlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibscanitemlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libscanitemlogDo) Debug() ILibscanitemlogDo {
	return l.withDO(l.DO.Debug())
}

func (l libscanitemlogDo) WithContext(ctx context.Context) ILibscanitemlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libscanitemlogDo) ReadDB() ILibscanitemlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libscanitemlogDo) WriteDB() ILibscanitemlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libscanitemlogDo) Clauses(conds ...clause.Expression) ILibscanitemlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libscanitemlogDo) Returning(value interface{}, columns ...string) ILibscanitemlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libscanitemlogDo) Not(conds ...gen.Condition) ILibscanitemlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libscanitemlogDo) Or(conds ...gen.Condition) ILibscanitemlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libscanitemlogDo) Select(conds ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libscanitemlogDo) Where(conds ...gen.Condition) ILibscanitemlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libscanitemlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibscanitemlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libscanitemlogDo) Order(conds ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libscanitemlogDo) Distinct(cols ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libscanitemlogDo) Omit(cols ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libscanitemlogDo) Join(table schema.Tabler, on ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libscanitemlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libscanitemlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libscanitemlogDo) Group(cols ...field.Expr) ILibscanitemlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libscanitemlogDo) Having(conds ...gen.Condition) ILibscanitemlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libscanitemlogDo) Limit(limit int) ILibscanitemlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libscanitemlogDo) Offset(offset int) ILibscanitemlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libscanitemlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibscanitemlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libscanitemlogDo) Unscoped() ILibscanitemlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libscanitemlogDo) Create(values ...*model.Libscanitemlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libscanitemlogDo) CreateInBatches(values []*model.Libscanitemlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libscanitemlogDo) Save(values ...*model.Libscanitemlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libscanitemlogDo) First() (*model.Libscanitemlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libscanitemlog), nil
	}
}

func (l libscanitemlogDo) Take() (*model.Libscanitemlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libscanitemlog), nil
	}
}

func (l libscanitemlogDo) Last() (*model.Libscanitemlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libscanitemlog), nil
	}
}

func (l libscanitemlogDo) Find() ([]*model.Libscanitemlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libscanitemlog), err
}

func (l libscanitemlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libscanitemlog, err error) {
	buf := make([]*model.Libscanitemlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libscanitemlogDo) FindInBatches(result *[]*model.Libscanitemlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libscanitemlogDo) Attrs(attrs ...field.AssignExpr) ILibscanitemlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libscanitemlogDo) Assign(attrs ...field.AssignExpr) ILibscanitemlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libscanitemlogDo) Joins(fields ...field.RelationField) ILibscanitemlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libscanitemlogDo) Preload(fields ...field.RelationField) ILibscanitemlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libscanitemlogDo) FirstOrInit() (*model.Libscanitemlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libscanitemlog), nil
	}
}

func (l libscanitemlogDo) FirstOrCreate() (*model.Libscanitemlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libscanitemlog), nil
	}
}

func (l libscanitemlogDo) FindByPage(offset int, limit int) (result []*model.Libscanitemlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libscanitemlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libscanitemlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libscanitemlogDo) Delete(models ...*model.Libscanitemlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libscanitemlogDo) withDO(do gen.Dao) *libscanitemlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
