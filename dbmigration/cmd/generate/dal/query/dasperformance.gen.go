// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDasperformance(db *gorm.DB) dasperformance {
	_dasperformance := dasperformance{}

	_dasperformance.dasperformanceDo.UseDB(db)
	_dasperformance.dasperformanceDo.UseModel(&model.Dasperformance{})

	tableName := _dasperformance.dasperformanceDo.TableName()
	_dasperformance.ALL = field.NewAsterisk(tableName)
	_dasperformance.ID = field.NewString(tableName, "Id")
	_dasperformance.CreationTime = field.NewTime(tableName, "CreationTime")
	_dasperformance.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_dasperformance.CurrentCPUUsage = field.NewFloat32(tableName, "Current_CPU_Usage")
	_dasperformance.AvailableRAM = field.NewFloat32(tableName, "Available_RAM")
	_dasperformance.TotalSYSRAMInMB = field.NewFloat32(tableName, "Total_SYS_RAM_In_MB")
	_dasperformance.TotalSYSRAMInBytes = field.NewFloat32(tableName, "Total_SYS_RAM_In_Bytes")
	_dasperformance.RAMUsed = field.NewFloat32(tableName, "RAM_Used")
	_dasperformance.PercentRAMUsed = field.NewFloat32(tableName, "Percent_RAM_Used")
	_dasperformance.SystemPerformingCritical = field.NewField(tableName, "System_Performing_Critical")
	_dasperformance.CPUPerformingCritical = field.NewField(tableName, "CPU_Performing_Critical")
	_dasperformance.RAMPerformingCritical = field.NewField(tableName, "RAM_Performing_Critical")
	_dasperformance.SystemCallsByCPUPerSec = field.NewFloat32(tableName, "SystemCalls_ByCPU_PerSec")
	_dasperformance.GetNumThreadsEachProcessorServing = field.NewFloat32(tableName, "Get_NumThreads_EachProcessorServing")
	_dasperformance.NumThreadsCreatedByProcessLast = field.NewFloat32(tableName, "NumThreads_CreatedByProcess_Last")
	_dasperformance.AvgDiskReadPerSec = field.NewFloat32(tableName, "Avg_DiskRead_PerSec")
	_dasperformance.AvgDiskWritePerSec = field.NewFloat32(tableName, "Avg_DiskWrite_PerSec")
	_dasperformance.DiskReadBytesPerSec = field.NewFloat32(tableName, "DiskRead_BytesPerSec")
	_dasperformance.DiskWriteBytesPerSec = field.NewFloat32(tableName, "DiskWrite_BytesPerSec")
	_dasperformance.NetworkReceivedBytesPerSec = field.NewFloat32(tableName, "NetworkReceived_BytesPerSec")
	_dasperformance.NetworkSentBytesPerSec = field.NewFloat32(tableName, "NetworkSent_BytesPerSec")

	_dasperformance.fillFieldMap()

	return _dasperformance
}

type dasperformance struct {
	dasperformanceDo dasperformanceDo

	ALL                               field.Asterisk
	ID                                field.String
	CreationTime                      field.Time
	CreatorUserID                     field.Int64
	CurrentCPUUsage                   field.Float32
	AvailableRAM                      field.Float32
	TotalSYSRAMInMB                   field.Float32
	TotalSYSRAMInBytes                field.Float32
	RAMUsed                           field.Float32
	PercentRAMUsed                    field.Float32
	SystemPerformingCritical          field.Field
	CPUPerformingCritical             field.Field
	RAMPerformingCritical             field.Field
	SystemCallsByCPUPerSec            field.Float32
	GetNumThreadsEachProcessorServing field.Float32
	NumThreadsCreatedByProcessLast    field.Float32
	AvgDiskReadPerSec                 field.Float32
	AvgDiskWritePerSec                field.Float32
	DiskReadBytesPerSec               field.Float32
	DiskWriteBytesPerSec              field.Float32
	NetworkReceivedBytesPerSec        field.Float32
	NetworkSentBytesPerSec            field.Float32

	fieldMap map[string]field.Expr
}

func (d dasperformance) Table(newTableName string) *dasperformance {
	d.dasperformanceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dasperformance) As(alias string) *dasperformance {
	d.dasperformanceDo.DO = *(d.dasperformanceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dasperformance) updateTableName(table string) *dasperformance {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "Id")
	d.CreationTime = field.NewTime(table, "CreationTime")
	d.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	d.CurrentCPUUsage = field.NewFloat32(table, "Current_CPU_Usage")
	d.AvailableRAM = field.NewFloat32(table, "Available_RAM")
	d.TotalSYSRAMInMB = field.NewFloat32(table, "Total_SYS_RAM_In_MB")
	d.TotalSYSRAMInBytes = field.NewFloat32(table, "Total_SYS_RAM_In_Bytes")
	d.RAMUsed = field.NewFloat32(table, "RAM_Used")
	d.PercentRAMUsed = field.NewFloat32(table, "Percent_RAM_Used")
	d.SystemPerformingCritical = field.NewField(table, "System_Performing_Critical")
	d.CPUPerformingCritical = field.NewField(table, "CPU_Performing_Critical")
	d.RAMPerformingCritical = field.NewField(table, "RAM_Performing_Critical")
	d.SystemCallsByCPUPerSec = field.NewFloat32(table, "SystemCalls_ByCPU_PerSec")
	d.GetNumThreadsEachProcessorServing = field.NewFloat32(table, "Get_NumThreads_EachProcessorServing")
	d.NumThreadsCreatedByProcessLast = field.NewFloat32(table, "NumThreads_CreatedByProcess_Last")
	d.AvgDiskReadPerSec = field.NewFloat32(table, "Avg_DiskRead_PerSec")
	d.AvgDiskWritePerSec = field.NewFloat32(table, "Avg_DiskWrite_PerSec")
	d.DiskReadBytesPerSec = field.NewFloat32(table, "DiskRead_BytesPerSec")
	d.DiskWriteBytesPerSec = field.NewFloat32(table, "DiskWrite_BytesPerSec")
	d.NetworkReceivedBytesPerSec = field.NewFloat32(table, "NetworkReceived_BytesPerSec")
	d.NetworkSentBytesPerSec = field.NewFloat32(table, "NetworkSent_BytesPerSec")

	d.fillFieldMap()

	return d
}

func (d *dasperformance) WithContext(ctx context.Context) IDasperformanceDo {
	return d.dasperformanceDo.WithContext(ctx)
}

func (d dasperformance) TableName() string { return d.dasperformanceDo.TableName() }

func (d dasperformance) Alias() string { return d.dasperformanceDo.Alias() }

func (d *dasperformance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dasperformance) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 21)
	d.fieldMap["Id"] = d.ID
	d.fieldMap["CreationTime"] = d.CreationTime
	d.fieldMap["CreatorUserId"] = d.CreatorUserID
	d.fieldMap["Current_CPU_Usage"] = d.CurrentCPUUsage
	d.fieldMap["Available_RAM"] = d.AvailableRAM
	d.fieldMap["Total_SYS_RAM_In_MB"] = d.TotalSYSRAMInMB
	d.fieldMap["Total_SYS_RAM_In_Bytes"] = d.TotalSYSRAMInBytes
	d.fieldMap["RAM_Used"] = d.RAMUsed
	d.fieldMap["Percent_RAM_Used"] = d.PercentRAMUsed
	d.fieldMap["System_Performing_Critical"] = d.SystemPerformingCritical
	d.fieldMap["CPU_Performing_Critical"] = d.CPUPerformingCritical
	d.fieldMap["RAM_Performing_Critical"] = d.RAMPerformingCritical
	d.fieldMap["SystemCalls_ByCPU_PerSec"] = d.SystemCallsByCPUPerSec
	d.fieldMap["Get_NumThreads_EachProcessorServing"] = d.GetNumThreadsEachProcessorServing
	d.fieldMap["NumThreads_CreatedByProcess_Last"] = d.NumThreadsCreatedByProcessLast
	d.fieldMap["Avg_DiskRead_PerSec"] = d.AvgDiskReadPerSec
	d.fieldMap["Avg_DiskWrite_PerSec"] = d.AvgDiskWritePerSec
	d.fieldMap["DiskRead_BytesPerSec"] = d.DiskReadBytesPerSec
	d.fieldMap["DiskWrite_BytesPerSec"] = d.DiskWriteBytesPerSec
	d.fieldMap["NetworkReceived_BytesPerSec"] = d.NetworkReceivedBytesPerSec
	d.fieldMap["NetworkSent_BytesPerSec"] = d.NetworkSentBytesPerSec
}

func (d dasperformance) clone(db *gorm.DB) dasperformance {
	d.dasperformanceDo.ReplaceDB(db)
	return d
}

type dasperformanceDo struct{ gen.DO }

type IDasperformanceDo interface {
	gen.SubQuery
	Debug() IDasperformanceDo
	WithContext(ctx context.Context) IDasperformanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDasperformanceDo
	Not(conds ...gen.Condition) IDasperformanceDo
	Or(conds ...gen.Condition) IDasperformanceDo
	Select(conds ...field.Expr) IDasperformanceDo
	Where(conds ...gen.Condition) IDasperformanceDo
	Order(conds ...field.Expr) IDasperformanceDo
	Distinct(cols ...field.Expr) IDasperformanceDo
	Omit(cols ...field.Expr) IDasperformanceDo
	Join(table schema.Tabler, on ...field.Expr) IDasperformanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDasperformanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDasperformanceDo
	Group(cols ...field.Expr) IDasperformanceDo
	Having(conds ...gen.Condition) IDasperformanceDo
	Limit(limit int) IDasperformanceDo
	Offset(offset int) IDasperformanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDasperformanceDo
	Unscoped() IDasperformanceDo
	Create(values ...*model.Dasperformance) error
	CreateInBatches(values []*model.Dasperformance, batchSize int) error
	Save(values ...*model.Dasperformance) error
	First() (*model.Dasperformance, error)
	Take() (*model.Dasperformance, error)
	Last() (*model.Dasperformance, error)
	Find() ([]*model.Dasperformance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasperformance, err error)
	FindInBatches(result *[]*model.Dasperformance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dasperformance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDasperformanceDo
	Assign(attrs ...field.AssignExpr) IDasperformanceDo
	Joins(fields ...field.RelationField) IDasperformanceDo
	Preload(fields ...field.RelationField) IDasperformanceDo
	FirstOrInit() (*model.Dasperformance, error)
	FirstOrCreate() (*model.Dasperformance, error)
	FindByPage(offset int, limit int) (result []*model.Dasperformance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDasperformanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dasperformanceDo) Debug() IDasperformanceDo {
	return d.withDO(d.DO.Debug())
}

func (d dasperformanceDo) WithContext(ctx context.Context) IDasperformanceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dasperformanceDo) ReadDB() IDasperformanceDo {
	return d.Clauses(dbresolver.Read)
}

func (d dasperformanceDo) WriteDB() IDasperformanceDo {
	return d.Clauses(dbresolver.Write)
}

func (d dasperformanceDo) Clauses(conds ...clause.Expression) IDasperformanceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dasperformanceDo) Returning(value interface{}, columns ...string) IDasperformanceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dasperformanceDo) Not(conds ...gen.Condition) IDasperformanceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dasperformanceDo) Or(conds ...gen.Condition) IDasperformanceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dasperformanceDo) Select(conds ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dasperformanceDo) Where(conds ...gen.Condition) IDasperformanceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dasperformanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDasperformanceDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dasperformanceDo) Order(conds ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dasperformanceDo) Distinct(cols ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dasperformanceDo) Omit(cols ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dasperformanceDo) Join(table schema.Tabler, on ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dasperformanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dasperformanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dasperformanceDo) Group(cols ...field.Expr) IDasperformanceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dasperformanceDo) Having(conds ...gen.Condition) IDasperformanceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dasperformanceDo) Limit(limit int) IDasperformanceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dasperformanceDo) Offset(offset int) IDasperformanceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dasperformanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDasperformanceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dasperformanceDo) Unscoped() IDasperformanceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dasperformanceDo) Create(values ...*model.Dasperformance) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dasperformanceDo) CreateInBatches(values []*model.Dasperformance, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dasperformanceDo) Save(values ...*model.Dasperformance) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dasperformanceDo) First() (*model.Dasperformance, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasperformance), nil
	}
}

func (d dasperformanceDo) Take() (*model.Dasperformance, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasperformance), nil
	}
}

func (d dasperformanceDo) Last() (*model.Dasperformance, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasperformance), nil
	}
}

func (d dasperformanceDo) Find() ([]*model.Dasperformance, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dasperformance), err
}

func (d dasperformanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dasperformance, err error) {
	buf := make([]*model.Dasperformance, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dasperformanceDo) FindInBatches(result *[]*model.Dasperformance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dasperformanceDo) Attrs(attrs ...field.AssignExpr) IDasperformanceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dasperformanceDo) Assign(attrs ...field.AssignExpr) IDasperformanceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dasperformanceDo) Joins(fields ...field.RelationField) IDasperformanceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dasperformanceDo) Preload(fields ...field.RelationField) IDasperformanceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dasperformanceDo) FirstOrInit() (*model.Dasperformance, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasperformance), nil
	}
}

func (d dasperformanceDo) FirstOrCreate() (*model.Dasperformance, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dasperformance), nil
	}
}

func (d dasperformanceDo) FindByPage(offset int, limit int) (result []*model.Dasperformance, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dasperformanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dasperformanceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dasperformanceDo) Delete(models ...*model.Dasperformance) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dasperformanceDo) withDO(do gen.Dao) *dasperformanceDo {
	d.DO = *do.(*gen.DO)
	return d
}
