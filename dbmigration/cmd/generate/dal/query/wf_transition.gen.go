// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newWfTransition(db *gorm.DB) wfTransition {
	_wfTransition := wfTransition{}

	_wfTransition.wfTransitionDo.UseDB(db)
	_wfTransition.wfTransitionDo.UseModel(&model.WfTransition{})

	tableName := _wfTransition.wfTransitionDo.TableName()
	_wfTransition.ALL = field.NewAsterisk(tableName)
	_wfTransition.ID = field.NewInt64(tableName, "id")
	_wfTransition.CreateTime = field.NewTime(tableName, "create_time")
	_wfTransition.UpdateTime = field.NewTime(tableName, "update_time")
	_wfTransition.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_wfTransition.Name = field.NewString(tableName, "name")
	_wfTransition.Timer = field.NewInt64(tableName, "timer")
	_wfTransition.ConditionExpression = field.NewString(tableName, "condition_expression")
	_wfTransition.AttributeType = field.NewInt64(tableName, "attribute_type")
	_wfTransition.FieldRequireCheck = field.NewInt64(tableName, "field_require_check")
	_wfTransition.CreateByID = field.NewInt64(tableName, "create_by_id")
	_wfTransition.DestinationStateID = field.NewInt64(tableName, "destination_state_id")
	_wfTransition.SourceStateID = field.NewInt64(tableName, "source_state_id")
	_wfTransition.UpdateByID = field.NewInt64(tableName, "update_by_id")
	_wfTransition.WorkflowID = field.NewInt64(tableName, "workflow_id")

	_wfTransition.fillFieldMap()

	return _wfTransition
}

type wfTransition struct {
	wfTransitionDo wfTransitionDo

	ALL                 field.Asterisk
	ID                  field.Int64
	CreateTime          field.Time
	UpdateTime          field.Time
	IsDeleted           field.Int64
	Name                field.String
	Timer               field.Int64
	ConditionExpression field.String
	AttributeType       field.Int64
	FieldRequireCheck   field.Int64
	CreateByID          field.Int64
	DestinationStateID  field.Int64
	SourceStateID       field.Int64
	UpdateByID          field.Int64
	WorkflowID          field.Int64

	fieldMap map[string]field.Expr
}

func (w wfTransition) Table(newTableName string) *wfTransition {
	w.wfTransitionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wfTransition) As(alias string) *wfTransition {
	w.wfTransitionDo.DO = *(w.wfTransitionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wfTransition) updateTableName(table string) *wfTransition {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.IsDeleted = field.NewInt64(table, "is_deleted")
	w.Name = field.NewString(table, "name")
	w.Timer = field.NewInt64(table, "timer")
	w.ConditionExpression = field.NewString(table, "condition_expression")
	w.AttributeType = field.NewInt64(table, "attribute_type")
	w.FieldRequireCheck = field.NewInt64(table, "field_require_check")
	w.CreateByID = field.NewInt64(table, "create_by_id")
	w.DestinationStateID = field.NewInt64(table, "destination_state_id")
	w.SourceStateID = field.NewInt64(table, "source_state_id")
	w.UpdateByID = field.NewInt64(table, "update_by_id")
	w.WorkflowID = field.NewInt64(table, "workflow_id")

	w.fillFieldMap()

	return w
}

func (w *wfTransition) WithContext(ctx context.Context) IWfTransitionDo {
	return w.wfTransitionDo.WithContext(ctx)
}

func (w wfTransition) TableName() string { return w.wfTransitionDo.TableName() }

func (w wfTransition) Alias() string { return w.wfTransitionDo.Alias() }

func (w *wfTransition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wfTransition) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 14)
	w.fieldMap["id"] = w.ID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["is_deleted"] = w.IsDeleted
	w.fieldMap["name"] = w.Name
	w.fieldMap["timer"] = w.Timer
	w.fieldMap["condition_expression"] = w.ConditionExpression
	w.fieldMap["attribute_type"] = w.AttributeType
	w.fieldMap["field_require_check"] = w.FieldRequireCheck
	w.fieldMap["create_by_id"] = w.CreateByID
	w.fieldMap["destination_state_id"] = w.DestinationStateID
	w.fieldMap["source_state_id"] = w.SourceStateID
	w.fieldMap["update_by_id"] = w.UpdateByID
	w.fieldMap["workflow_id"] = w.WorkflowID
}

func (w wfTransition) clone(db *gorm.DB) wfTransition {
	w.wfTransitionDo.ReplaceDB(db)
	return w
}

type wfTransitionDo struct{ gen.DO }

type IWfTransitionDo interface {
	gen.SubQuery
	Debug() IWfTransitionDo
	WithContext(ctx context.Context) IWfTransitionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWfTransitionDo
	Not(conds ...gen.Condition) IWfTransitionDo
	Or(conds ...gen.Condition) IWfTransitionDo
	Select(conds ...field.Expr) IWfTransitionDo
	Where(conds ...gen.Condition) IWfTransitionDo
	Order(conds ...field.Expr) IWfTransitionDo
	Distinct(cols ...field.Expr) IWfTransitionDo
	Omit(cols ...field.Expr) IWfTransitionDo
	Join(table schema.Tabler, on ...field.Expr) IWfTransitionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWfTransitionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWfTransitionDo
	Group(cols ...field.Expr) IWfTransitionDo
	Having(conds ...gen.Condition) IWfTransitionDo
	Limit(limit int) IWfTransitionDo
	Offset(offset int) IWfTransitionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWfTransitionDo
	Unscoped() IWfTransitionDo
	Create(values ...*model.WfTransition) error
	CreateInBatches(values []*model.WfTransition, batchSize int) error
	Save(values ...*model.WfTransition) error
	First() (*model.WfTransition, error)
	Take() (*model.WfTransition, error)
	Last() (*model.WfTransition, error)
	Find() ([]*model.WfTransition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfTransition, err error)
	FindInBatches(result *[]*model.WfTransition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WfTransition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWfTransitionDo
	Assign(attrs ...field.AssignExpr) IWfTransitionDo
	Joins(fields ...field.RelationField) IWfTransitionDo
	Preload(fields ...field.RelationField) IWfTransitionDo
	FirstOrInit() (*model.WfTransition, error)
	FirstOrCreate() (*model.WfTransition, error)
	FindByPage(offset int, limit int) (result []*model.WfTransition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWfTransitionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wfTransitionDo) Debug() IWfTransitionDo {
	return w.withDO(w.DO.Debug())
}

func (w wfTransitionDo) WithContext(ctx context.Context) IWfTransitionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wfTransitionDo) ReadDB() IWfTransitionDo {
	return w.Clauses(dbresolver.Read)
}

func (w wfTransitionDo) WriteDB() IWfTransitionDo {
	return w.Clauses(dbresolver.Write)
}

func (w wfTransitionDo) Clauses(conds ...clause.Expression) IWfTransitionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wfTransitionDo) Returning(value interface{}, columns ...string) IWfTransitionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wfTransitionDo) Not(conds ...gen.Condition) IWfTransitionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wfTransitionDo) Or(conds ...gen.Condition) IWfTransitionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wfTransitionDo) Select(conds ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wfTransitionDo) Where(conds ...gen.Condition) IWfTransitionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wfTransitionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWfTransitionDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wfTransitionDo) Order(conds ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wfTransitionDo) Distinct(cols ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wfTransitionDo) Omit(cols ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wfTransitionDo) Join(table schema.Tabler, on ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wfTransitionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wfTransitionDo) RightJoin(table schema.Tabler, on ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wfTransitionDo) Group(cols ...field.Expr) IWfTransitionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wfTransitionDo) Having(conds ...gen.Condition) IWfTransitionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wfTransitionDo) Limit(limit int) IWfTransitionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wfTransitionDo) Offset(offset int) IWfTransitionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wfTransitionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWfTransitionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wfTransitionDo) Unscoped() IWfTransitionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wfTransitionDo) Create(values ...*model.WfTransition) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wfTransitionDo) CreateInBatches(values []*model.WfTransition, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wfTransitionDo) Save(values ...*model.WfTransition) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wfTransitionDo) First() (*model.WfTransition, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfTransition), nil
	}
}

func (w wfTransitionDo) Take() (*model.WfTransition, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfTransition), nil
	}
}

func (w wfTransitionDo) Last() (*model.WfTransition, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfTransition), nil
	}
}

func (w wfTransitionDo) Find() ([]*model.WfTransition, error) {
	result, err := w.DO.Find()
	return result.([]*model.WfTransition), err
}

func (w wfTransitionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WfTransition, err error) {
	buf := make([]*model.WfTransition, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wfTransitionDo) FindInBatches(result *[]*model.WfTransition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wfTransitionDo) Attrs(attrs ...field.AssignExpr) IWfTransitionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wfTransitionDo) Assign(attrs ...field.AssignExpr) IWfTransitionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wfTransitionDo) Joins(fields ...field.RelationField) IWfTransitionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wfTransitionDo) Preload(fields ...field.RelationField) IWfTransitionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wfTransitionDo) FirstOrInit() (*model.WfTransition, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfTransition), nil
	}
}

func (w wfTransitionDo) FirstOrCreate() (*model.WfTransition, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WfTransition), nil
	}
}

func (w wfTransitionDo) FindByPage(offset int, limit int) (result []*model.WfTransition, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wfTransitionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wfTransitionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wfTransitionDo) Delete(models ...*model.WfTransition) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wfTransitionDo) withDO(do gen.Dao) *wfTransitionDo {
	w.DO = *do.(*gen.DO)
	return w
}
