// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibrfidscanlog(db *gorm.DB) librfidscanlog {
	_librfidscanlog := librfidscanlog{}

	_librfidscanlog.librfidscanlogDo.UseDB(db)
	_librfidscanlog.librfidscanlogDo.UseModel(&model.Librfidscanlog{})

	tableName := _librfidscanlog.librfidscanlogDo.TableName()
	_librfidscanlog.ALL = field.NewAsterisk(tableName)
	_librfidscanlog.ID = field.NewString(tableName, "Id")
	_librfidscanlog.CreationTime = field.NewTime(tableName, "CreationTime")
	_librfidscanlog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_librfidscanlog.ItemTid = field.NewString(tableName, "ItemTid")
	_librfidscanlog.ItemEpc = field.NewString(tableName, "ItemEpc")
	_librfidscanlog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_librfidscanlog.Title = field.NewString(tableName, "Title")
	_librfidscanlog.RfidReaderID = field.NewString(tableName, "RfidReaderId")
	_librfidscanlog.Antenna = field.NewString(tableName, "Antenna")
	_librfidscanlog.Remark = field.NewString(tableName, "Remark")
	_librfidscanlog.TenantID = field.NewInt64(tableName, "TenantId")
	_librfidscanlog.RecordTime = field.NewTime(tableName, "RecordTime")

	_librfidscanlog.fillFieldMap()

	return _librfidscanlog
}

type librfidscanlog struct {
	librfidscanlogDo librfidscanlogDo

	ALL           field.Asterisk
	ID            field.String
	CreationTime  field.Time
	CreatorUserID field.Int64
	ItemTid       field.String
	ItemEpc       field.String
	ItemBarcode   field.String
	Title         field.String
	RfidReaderID  field.String
	Antenna       field.String
	Remark        field.String
	TenantID      field.Int64
	RecordTime    field.Time

	fieldMap map[string]field.Expr
}

func (l librfidscanlog) Table(newTableName string) *librfidscanlog {
	l.librfidscanlogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l librfidscanlog) As(alias string) *librfidscanlog {
	l.librfidscanlogDo.DO = *(l.librfidscanlogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *librfidscanlog) updateTableName(table string) *librfidscanlog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.ItemTid = field.NewString(table, "ItemTid")
	l.ItemEpc = field.NewString(table, "ItemEpc")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.Title = field.NewString(table, "Title")
	l.RfidReaderID = field.NewString(table, "RfidReaderId")
	l.Antenna = field.NewString(table, "Antenna")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.RecordTime = field.NewTime(table, "RecordTime")

	l.fillFieldMap()

	return l
}

func (l *librfidscanlog) WithContext(ctx context.Context) ILibrfidscanlogDo {
	return l.librfidscanlogDo.WithContext(ctx)
}

func (l librfidscanlog) TableName() string { return l.librfidscanlogDo.TableName() }

func (l librfidscanlog) Alias() string { return l.librfidscanlogDo.Alias() }

func (l *librfidscanlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *librfidscanlog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["ItemTid"] = l.ItemTid
	l.fieldMap["ItemEpc"] = l.ItemEpc
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["Title"] = l.Title
	l.fieldMap["RfidReaderId"] = l.RfidReaderID
	l.fieldMap["Antenna"] = l.Antenna
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["RecordTime"] = l.RecordTime
}

func (l librfidscanlog) clone(db *gorm.DB) librfidscanlog {
	l.librfidscanlogDo.ReplaceDB(db)
	return l
}

type librfidscanlogDo struct{ gen.DO }

type ILibrfidscanlogDo interface {
	gen.SubQuery
	Debug() ILibrfidscanlogDo
	WithContext(ctx context.Context) ILibrfidscanlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibrfidscanlogDo
	Not(conds ...gen.Condition) ILibrfidscanlogDo
	Or(conds ...gen.Condition) ILibrfidscanlogDo
	Select(conds ...field.Expr) ILibrfidscanlogDo
	Where(conds ...gen.Condition) ILibrfidscanlogDo
	Order(conds ...field.Expr) ILibrfidscanlogDo
	Distinct(cols ...field.Expr) ILibrfidscanlogDo
	Omit(cols ...field.Expr) ILibrfidscanlogDo
	Join(table schema.Tabler, on ...field.Expr) ILibrfidscanlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibrfidscanlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibrfidscanlogDo
	Group(cols ...field.Expr) ILibrfidscanlogDo
	Having(conds ...gen.Condition) ILibrfidscanlogDo
	Limit(limit int) ILibrfidscanlogDo
	Offset(offset int) ILibrfidscanlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrfidscanlogDo
	Unscoped() ILibrfidscanlogDo
	Create(values ...*model.Librfidscanlog) error
	CreateInBatches(values []*model.Librfidscanlog, batchSize int) error
	Save(values ...*model.Librfidscanlog) error
	First() (*model.Librfidscanlog, error)
	Take() (*model.Librfidscanlog, error)
	Last() (*model.Librfidscanlog, error)
	Find() ([]*model.Librfidscanlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librfidscanlog, err error)
	FindInBatches(result *[]*model.Librfidscanlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Librfidscanlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibrfidscanlogDo
	Assign(attrs ...field.AssignExpr) ILibrfidscanlogDo
	Joins(fields ...field.RelationField) ILibrfidscanlogDo
	Preload(fields ...field.RelationField) ILibrfidscanlogDo
	FirstOrInit() (*model.Librfidscanlog, error)
	FirstOrCreate() (*model.Librfidscanlog, error)
	FindByPage(offset int, limit int) (result []*model.Librfidscanlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibrfidscanlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l librfidscanlogDo) Debug() ILibrfidscanlogDo {
	return l.withDO(l.DO.Debug())
}

func (l librfidscanlogDo) WithContext(ctx context.Context) ILibrfidscanlogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l librfidscanlogDo) ReadDB() ILibrfidscanlogDo {
	return l.Clauses(dbresolver.Read)
}

func (l librfidscanlogDo) WriteDB() ILibrfidscanlogDo {
	return l.Clauses(dbresolver.Write)
}

func (l librfidscanlogDo) Clauses(conds ...clause.Expression) ILibrfidscanlogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l librfidscanlogDo) Returning(value interface{}, columns ...string) ILibrfidscanlogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l librfidscanlogDo) Not(conds ...gen.Condition) ILibrfidscanlogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l librfidscanlogDo) Or(conds ...gen.Condition) ILibrfidscanlogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l librfidscanlogDo) Select(conds ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l librfidscanlogDo) Where(conds ...gen.Condition) ILibrfidscanlogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l librfidscanlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibrfidscanlogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l librfidscanlogDo) Order(conds ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l librfidscanlogDo) Distinct(cols ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l librfidscanlogDo) Omit(cols ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l librfidscanlogDo) Join(table schema.Tabler, on ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l librfidscanlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l librfidscanlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l librfidscanlogDo) Group(cols ...field.Expr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l librfidscanlogDo) Having(conds ...gen.Condition) ILibrfidscanlogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l librfidscanlogDo) Limit(limit int) ILibrfidscanlogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l librfidscanlogDo) Offset(offset int) ILibrfidscanlogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l librfidscanlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibrfidscanlogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l librfidscanlogDo) Unscoped() ILibrfidscanlogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l librfidscanlogDo) Create(values ...*model.Librfidscanlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l librfidscanlogDo) CreateInBatches(values []*model.Librfidscanlog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l librfidscanlogDo) Save(values ...*model.Librfidscanlog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l librfidscanlogDo) First() (*model.Librfidscanlog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscanlog), nil
	}
}

func (l librfidscanlogDo) Take() (*model.Librfidscanlog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscanlog), nil
	}
}

func (l librfidscanlogDo) Last() (*model.Librfidscanlog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscanlog), nil
	}
}

func (l librfidscanlogDo) Find() ([]*model.Librfidscanlog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Librfidscanlog), err
}

func (l librfidscanlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Librfidscanlog, err error) {
	buf := make([]*model.Librfidscanlog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l librfidscanlogDo) FindInBatches(result *[]*model.Librfidscanlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l librfidscanlogDo) Attrs(attrs ...field.AssignExpr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l librfidscanlogDo) Assign(attrs ...field.AssignExpr) ILibrfidscanlogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l librfidscanlogDo) Joins(fields ...field.RelationField) ILibrfidscanlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l librfidscanlogDo) Preload(fields ...field.RelationField) ILibrfidscanlogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l librfidscanlogDo) FirstOrInit() (*model.Librfidscanlog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscanlog), nil
	}
}

func (l librfidscanlogDo) FirstOrCreate() (*model.Librfidscanlog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Librfidscanlog), nil
	}
}

func (l librfidscanlogDo) FindByPage(offset int, limit int) (result []*model.Librfidscanlog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l librfidscanlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l librfidscanlogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l librfidscanlogDo) Delete(models ...*model.Librfidscanlog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *librfidscanlogDo) withDO(do gen.Dao) *librfidscanlogDo {
	l.DO = *do.(*gen.DO)
	return l
}
