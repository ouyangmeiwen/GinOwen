// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpentitychangeset(db *gorm.DB) abpentitychangeset {
	_abpentitychangeset := abpentitychangeset{}

	_abpentitychangeset.abpentitychangesetDo.UseDB(db)
	_abpentitychangeset.abpentitychangesetDo.UseModel(&model.Abpentitychangeset{})

	tableName := _abpentitychangeset.abpentitychangesetDo.TableName()
	_abpentitychangeset.ALL = field.NewAsterisk(tableName)
	_abpentitychangeset.ID = field.NewInt64(tableName, "Id")
	_abpentitychangeset.BrowserInfo = field.NewString(tableName, "BrowserInfo")
	_abpentitychangeset.ClientIPAddress = field.NewString(tableName, "ClientIpAddress")
	_abpentitychangeset.ClientName = field.NewString(tableName, "ClientName")
	_abpentitychangeset.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpentitychangeset.ExtensionData = field.NewString(tableName, "ExtensionData")
	_abpentitychangeset.ImpersonatorTenantID = field.NewInt64(tableName, "ImpersonatorTenantId")
	_abpentitychangeset.ImpersonatorUserID = field.NewInt64(tableName, "ImpersonatorUserId")
	_abpentitychangeset.Reason = field.NewString(tableName, "Reason")
	_abpentitychangeset.TenantID = field.NewInt64(tableName, "TenantId")
	_abpentitychangeset.UserID = field.NewInt64(tableName, "UserId")

	_abpentitychangeset.fillFieldMap()

	return _abpentitychangeset
}

type abpentitychangeset struct {
	abpentitychangesetDo abpentitychangesetDo

	ALL                  field.Asterisk
	ID                   field.Int64
	BrowserInfo          field.String
	ClientIPAddress      field.String
	ClientName           field.String
	CreationTime         field.Time
	ExtensionData        field.String
	ImpersonatorTenantID field.Int64
	ImpersonatorUserID   field.Int64
	Reason               field.String
	TenantID             field.Int64
	UserID               field.Int64

	fieldMap map[string]field.Expr
}

func (a abpentitychangeset) Table(newTableName string) *abpentitychangeset {
	a.abpentitychangesetDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpentitychangeset) As(alias string) *abpentitychangeset {
	a.abpentitychangesetDo.DO = *(a.abpentitychangesetDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpentitychangeset) updateTableName(table string) *abpentitychangeset {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.BrowserInfo = field.NewString(table, "BrowserInfo")
	a.ClientIPAddress = field.NewString(table, "ClientIpAddress")
	a.ClientName = field.NewString(table, "ClientName")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.ExtensionData = field.NewString(table, "ExtensionData")
	a.ImpersonatorTenantID = field.NewInt64(table, "ImpersonatorTenantId")
	a.ImpersonatorUserID = field.NewInt64(table, "ImpersonatorUserId")
	a.Reason = field.NewString(table, "Reason")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")

	a.fillFieldMap()

	return a
}

func (a *abpentitychangeset) WithContext(ctx context.Context) IAbpentitychangesetDo {
	return a.abpentitychangesetDo.WithContext(ctx)
}

func (a abpentitychangeset) TableName() string { return a.abpentitychangesetDo.TableName() }

func (a abpentitychangeset) Alias() string { return a.abpentitychangesetDo.Alias() }

func (a *abpentitychangeset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpentitychangeset) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["BrowserInfo"] = a.BrowserInfo
	a.fieldMap["ClientIpAddress"] = a.ClientIPAddress
	a.fieldMap["ClientName"] = a.ClientName
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["ExtensionData"] = a.ExtensionData
	a.fieldMap["ImpersonatorTenantId"] = a.ImpersonatorTenantID
	a.fieldMap["ImpersonatorUserId"] = a.ImpersonatorUserID
	a.fieldMap["Reason"] = a.Reason
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
}

func (a abpentitychangeset) clone(db *gorm.DB) abpentitychangeset {
	a.abpentitychangesetDo.ReplaceDB(db)
	return a
}

type abpentitychangesetDo struct{ gen.DO }

type IAbpentitychangesetDo interface {
	gen.SubQuery
	Debug() IAbpentitychangesetDo
	WithContext(ctx context.Context) IAbpentitychangesetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpentitychangesetDo
	Not(conds ...gen.Condition) IAbpentitychangesetDo
	Or(conds ...gen.Condition) IAbpentitychangesetDo
	Select(conds ...field.Expr) IAbpentitychangesetDo
	Where(conds ...gen.Condition) IAbpentitychangesetDo
	Order(conds ...field.Expr) IAbpentitychangesetDo
	Distinct(cols ...field.Expr) IAbpentitychangesetDo
	Omit(cols ...field.Expr) IAbpentitychangesetDo
	Join(table schema.Tabler, on ...field.Expr) IAbpentitychangesetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangesetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangesetDo
	Group(cols ...field.Expr) IAbpentitychangesetDo
	Having(conds ...gen.Condition) IAbpentitychangesetDo
	Limit(limit int) IAbpentitychangesetDo
	Offset(offset int) IAbpentitychangesetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpentitychangesetDo
	Unscoped() IAbpentitychangesetDo
	Create(values ...*model.Abpentitychangeset) error
	CreateInBatches(values []*model.Abpentitychangeset, batchSize int) error
	Save(values ...*model.Abpentitychangeset) error
	First() (*model.Abpentitychangeset, error)
	Take() (*model.Abpentitychangeset, error)
	Last() (*model.Abpentitychangeset, error)
	Find() ([]*model.Abpentitychangeset, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpentitychangeset, err error)
	FindInBatches(result *[]*model.Abpentitychangeset, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpentitychangeset) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpentitychangesetDo
	Assign(attrs ...field.AssignExpr) IAbpentitychangesetDo
	Joins(fields ...field.RelationField) IAbpentitychangesetDo
	Preload(fields ...field.RelationField) IAbpentitychangesetDo
	FirstOrInit() (*model.Abpentitychangeset, error)
	FirstOrCreate() (*model.Abpentitychangeset, error)
	FindByPage(offset int, limit int) (result []*model.Abpentitychangeset, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpentitychangesetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpentitychangesetDo) Debug() IAbpentitychangesetDo {
	return a.withDO(a.DO.Debug())
}

func (a abpentitychangesetDo) WithContext(ctx context.Context) IAbpentitychangesetDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpentitychangesetDo) ReadDB() IAbpentitychangesetDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpentitychangesetDo) WriteDB() IAbpentitychangesetDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpentitychangesetDo) Clauses(conds ...clause.Expression) IAbpentitychangesetDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpentitychangesetDo) Returning(value interface{}, columns ...string) IAbpentitychangesetDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpentitychangesetDo) Not(conds ...gen.Condition) IAbpentitychangesetDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpentitychangesetDo) Or(conds ...gen.Condition) IAbpentitychangesetDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpentitychangesetDo) Select(conds ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpentitychangesetDo) Where(conds ...gen.Condition) IAbpentitychangesetDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpentitychangesetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpentitychangesetDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpentitychangesetDo) Order(conds ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpentitychangesetDo) Distinct(cols ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpentitychangesetDo) Omit(cols ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpentitychangesetDo) Join(table schema.Tabler, on ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpentitychangesetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpentitychangesetDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpentitychangesetDo) Group(cols ...field.Expr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpentitychangesetDo) Having(conds ...gen.Condition) IAbpentitychangesetDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpentitychangesetDo) Limit(limit int) IAbpentitychangesetDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpentitychangesetDo) Offset(offset int) IAbpentitychangesetDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpentitychangesetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpentitychangesetDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpentitychangesetDo) Unscoped() IAbpentitychangesetDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpentitychangesetDo) Create(values ...*model.Abpentitychangeset) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpentitychangesetDo) CreateInBatches(values []*model.Abpentitychangeset, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpentitychangesetDo) Save(values ...*model.Abpentitychangeset) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpentitychangesetDo) First() (*model.Abpentitychangeset, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychangeset), nil
	}
}

func (a abpentitychangesetDo) Take() (*model.Abpentitychangeset, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychangeset), nil
	}
}

func (a abpentitychangesetDo) Last() (*model.Abpentitychangeset, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychangeset), nil
	}
}

func (a abpentitychangesetDo) Find() ([]*model.Abpentitychangeset, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpentitychangeset), err
}

func (a abpentitychangesetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpentitychangeset, err error) {
	buf := make([]*model.Abpentitychangeset, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpentitychangesetDo) FindInBatches(result *[]*model.Abpentitychangeset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpentitychangesetDo) Attrs(attrs ...field.AssignExpr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpentitychangesetDo) Assign(attrs ...field.AssignExpr) IAbpentitychangesetDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpentitychangesetDo) Joins(fields ...field.RelationField) IAbpentitychangesetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpentitychangesetDo) Preload(fields ...field.RelationField) IAbpentitychangesetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpentitychangesetDo) FirstOrInit() (*model.Abpentitychangeset, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychangeset), nil
	}
}

func (a abpentitychangesetDo) FirstOrCreate() (*model.Abpentitychangeset, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpentitychangeset), nil
	}
}

func (a abpentitychangesetDo) FindByPage(offset int, limit int) (result []*model.Abpentitychangeset, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpentitychangesetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpentitychangesetDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpentitychangesetDo) Delete(models ...*model.Abpentitychangeset) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpentitychangesetDo) withDO(do gen.Dao) *abpentitychangesetDo {
	a.DO = *do.(*gen.DO)
	return a
}
