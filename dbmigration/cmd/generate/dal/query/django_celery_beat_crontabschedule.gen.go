// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDjangoCeleryBeatCrontabschedule(db *gorm.DB) djangoCeleryBeatCrontabschedule {
	_djangoCeleryBeatCrontabschedule := djangoCeleryBeatCrontabschedule{}

	_djangoCeleryBeatCrontabschedule.djangoCeleryBeatCrontabscheduleDo.UseDB(db)
	_djangoCeleryBeatCrontabschedule.djangoCeleryBeatCrontabscheduleDo.UseModel(&model.DjangoCeleryBeatCrontabschedule{})

	tableName := _djangoCeleryBeatCrontabschedule.djangoCeleryBeatCrontabscheduleDo.TableName()
	_djangoCeleryBeatCrontabschedule.ALL = field.NewAsterisk(tableName)
	_djangoCeleryBeatCrontabschedule.ID = field.NewInt64(tableName, "id")
	_djangoCeleryBeatCrontabschedule.Minute = field.NewString(tableName, "minute")
	_djangoCeleryBeatCrontabschedule.Hour = field.NewString(tableName, "hour")
	_djangoCeleryBeatCrontabschedule.DayOfWeek = field.NewString(tableName, "day_of_week")
	_djangoCeleryBeatCrontabschedule.DayOfMonth = field.NewString(tableName, "day_of_month")
	_djangoCeleryBeatCrontabschedule.MonthOfYear = field.NewString(tableName, "month_of_year")
	_djangoCeleryBeatCrontabschedule.Timezone = field.NewString(tableName, "timezone")

	_djangoCeleryBeatCrontabschedule.fillFieldMap()

	return _djangoCeleryBeatCrontabschedule
}

type djangoCeleryBeatCrontabschedule struct {
	djangoCeleryBeatCrontabscheduleDo djangoCeleryBeatCrontabscheduleDo

	ALL         field.Asterisk
	ID          field.Int64
	Minute      field.String
	Hour        field.String
	DayOfWeek   field.String
	DayOfMonth  field.String
	MonthOfYear field.String
	Timezone    field.String

	fieldMap map[string]field.Expr
}

func (d djangoCeleryBeatCrontabschedule) Table(newTableName string) *djangoCeleryBeatCrontabschedule {
	d.djangoCeleryBeatCrontabscheduleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoCeleryBeatCrontabschedule) As(alias string) *djangoCeleryBeatCrontabschedule {
	d.djangoCeleryBeatCrontabscheduleDo.DO = *(d.djangoCeleryBeatCrontabscheduleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoCeleryBeatCrontabschedule) updateTableName(table string) *djangoCeleryBeatCrontabschedule {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Minute = field.NewString(table, "minute")
	d.Hour = field.NewString(table, "hour")
	d.DayOfWeek = field.NewString(table, "day_of_week")
	d.DayOfMonth = field.NewString(table, "day_of_month")
	d.MonthOfYear = field.NewString(table, "month_of_year")
	d.Timezone = field.NewString(table, "timezone")

	d.fillFieldMap()

	return d
}

func (d *djangoCeleryBeatCrontabschedule) WithContext(ctx context.Context) IDjangoCeleryBeatCrontabscheduleDo {
	return d.djangoCeleryBeatCrontabscheduleDo.WithContext(ctx)
}

func (d djangoCeleryBeatCrontabschedule) TableName() string {
	return d.djangoCeleryBeatCrontabscheduleDo.TableName()
}

func (d djangoCeleryBeatCrontabschedule) Alias() string {
	return d.djangoCeleryBeatCrontabscheduleDo.Alias()
}

func (d *djangoCeleryBeatCrontabschedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoCeleryBeatCrontabschedule) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["minute"] = d.Minute
	d.fieldMap["hour"] = d.Hour
	d.fieldMap["day_of_week"] = d.DayOfWeek
	d.fieldMap["day_of_month"] = d.DayOfMonth
	d.fieldMap["month_of_year"] = d.MonthOfYear
	d.fieldMap["timezone"] = d.Timezone
}

func (d djangoCeleryBeatCrontabschedule) clone(db *gorm.DB) djangoCeleryBeatCrontabschedule {
	d.djangoCeleryBeatCrontabscheduleDo.ReplaceDB(db)
	return d
}

type djangoCeleryBeatCrontabscheduleDo struct{ gen.DO }

type IDjangoCeleryBeatCrontabscheduleDo interface {
	gen.SubQuery
	Debug() IDjangoCeleryBeatCrontabscheduleDo
	WithContext(ctx context.Context) IDjangoCeleryBeatCrontabscheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoCeleryBeatCrontabscheduleDo
	Not(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo
	Or(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo
	Select(conds ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	Where(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo
	Order(conds ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	Distinct(cols ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	Omit(cols ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	Group(cols ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo
	Having(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo
	Limit(limit int) IDjangoCeleryBeatCrontabscheduleDo
	Offset(offset int) IDjangoCeleryBeatCrontabscheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatCrontabscheduleDo
	Unscoped() IDjangoCeleryBeatCrontabscheduleDo
	Create(values ...*model.DjangoCeleryBeatCrontabschedule) error
	CreateInBatches(values []*model.DjangoCeleryBeatCrontabschedule, batchSize int) error
	Save(values ...*model.DjangoCeleryBeatCrontabschedule) error
	First() (*model.DjangoCeleryBeatCrontabschedule, error)
	Take() (*model.DjangoCeleryBeatCrontabschedule, error)
	Last() (*model.DjangoCeleryBeatCrontabschedule, error)
	Find() ([]*model.DjangoCeleryBeatCrontabschedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatCrontabschedule, err error)
	FindInBatches(result *[]*model.DjangoCeleryBeatCrontabschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoCeleryBeatCrontabschedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatCrontabscheduleDo
	Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatCrontabscheduleDo
	Joins(fields ...field.RelationField) IDjangoCeleryBeatCrontabscheduleDo
	Preload(fields ...field.RelationField) IDjangoCeleryBeatCrontabscheduleDo
	FirstOrInit() (*model.DjangoCeleryBeatCrontabschedule, error)
	FirstOrCreate() (*model.DjangoCeleryBeatCrontabschedule, error)
	FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatCrontabschedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoCeleryBeatCrontabscheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoCeleryBeatCrontabscheduleDo) Debug() IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoCeleryBeatCrontabscheduleDo) WithContext(ctx context.Context) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoCeleryBeatCrontabscheduleDo) ReadDB() IDjangoCeleryBeatCrontabscheduleDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoCeleryBeatCrontabscheduleDo) WriteDB() IDjangoCeleryBeatCrontabscheduleDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoCeleryBeatCrontabscheduleDo) Clauses(conds ...clause.Expression) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Returning(value interface{}, columns ...string) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Not(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Or(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Select(conds ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Where(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoCeleryBeatCrontabscheduleDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoCeleryBeatCrontabscheduleDo) Order(conds ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Distinct(cols ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Omit(cols ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoCeleryBeatCrontabscheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoCeleryBeatCrontabscheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Group(cols ...field.Expr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Having(conds ...gen.Condition) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Limit(limit int) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoCeleryBeatCrontabscheduleDo) Offset(offset int) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoCeleryBeatCrontabscheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Unscoped() IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoCeleryBeatCrontabscheduleDo) Create(values ...*model.DjangoCeleryBeatCrontabschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoCeleryBeatCrontabscheduleDo) CreateInBatches(values []*model.DjangoCeleryBeatCrontabschedule, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoCeleryBeatCrontabscheduleDo) Save(values ...*model.DjangoCeleryBeatCrontabschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoCeleryBeatCrontabscheduleDo) First() (*model.DjangoCeleryBeatCrontabschedule, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatCrontabschedule), nil
	}
}

func (d djangoCeleryBeatCrontabscheduleDo) Take() (*model.DjangoCeleryBeatCrontabschedule, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatCrontabschedule), nil
	}
}

func (d djangoCeleryBeatCrontabscheduleDo) Last() (*model.DjangoCeleryBeatCrontabschedule, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatCrontabschedule), nil
	}
}

func (d djangoCeleryBeatCrontabscheduleDo) Find() ([]*model.DjangoCeleryBeatCrontabschedule, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoCeleryBeatCrontabschedule), err
}

func (d djangoCeleryBeatCrontabscheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatCrontabschedule, err error) {
	buf := make([]*model.DjangoCeleryBeatCrontabschedule, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoCeleryBeatCrontabscheduleDo) FindInBatches(result *[]*model.DjangoCeleryBeatCrontabschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoCeleryBeatCrontabscheduleDo) Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatCrontabscheduleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoCeleryBeatCrontabscheduleDo) Joins(fields ...field.RelationField) IDjangoCeleryBeatCrontabscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoCeleryBeatCrontabscheduleDo) Preload(fields ...field.RelationField) IDjangoCeleryBeatCrontabscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoCeleryBeatCrontabscheduleDo) FirstOrInit() (*model.DjangoCeleryBeatCrontabschedule, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatCrontabschedule), nil
	}
}

func (d djangoCeleryBeatCrontabscheduleDo) FirstOrCreate() (*model.DjangoCeleryBeatCrontabschedule, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatCrontabschedule), nil
	}
}

func (d djangoCeleryBeatCrontabscheduleDo) FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatCrontabschedule, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoCeleryBeatCrontabscheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoCeleryBeatCrontabscheduleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoCeleryBeatCrontabscheduleDo) Delete(models ...*model.DjangoCeleryBeatCrontabschedule) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoCeleryBeatCrontabscheduleDo) withDO(do gen.Dao) *djangoCeleryBeatCrontabscheduleDo {
	d.DO = *do.(*gen.DO)
	return d
}
