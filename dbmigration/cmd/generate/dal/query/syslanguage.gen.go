// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSyslanguage(db *gorm.DB) syslanguage {
	_syslanguage := syslanguage{}

	_syslanguage.syslanguageDo.UseDB(db)
	_syslanguage.syslanguageDo.UseModel(&model.Syslanguage{})

	tableName := _syslanguage.syslanguageDo.TableName()
	_syslanguage.ALL = field.NewAsterisk(tableName)
	_syslanguage.ID = field.NewString(tableName, "Id")
	_syslanguage.CreationTime = field.NewTime(tableName, "CreationTime")
	_syslanguage.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_syslanguage.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_syslanguage.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_syslanguage.Key = field.NewString(tableName, "Key")
	_syslanguage.BaseValue = field.NewString(tableName, "BaseValue")
	_syslanguage.TargetValue = field.NewString(tableName, "TargetValue")
	_syslanguage.Order = field.NewFloat64(tableName, "Order")
	_syslanguage.Category = field.NewString(tableName, "Category")
	_syslanguage.TargetCulture = field.NewString(tableName, "TargetCulture")
	_syslanguage.Source = field.NewString(tableName, "Source")
	_syslanguage.Remark = field.NewString(tableName, "Remark")
	_syslanguage.TenantID = field.NewInt64(tableName, "TenantId")

	_syslanguage.fillFieldMap()

	return _syslanguage
}

type syslanguage struct {
	syslanguageDo syslanguageDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	Key                  field.String
	BaseValue            field.String
	TargetValue          field.String
	Order                field.Float64
	Category             field.String
	TargetCulture        field.String
	Source               field.String
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (s syslanguage) Table(newTableName string) *syslanguage {
	s.syslanguageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syslanguage) As(alias string) *syslanguage {
	s.syslanguageDo.DO = *(s.syslanguageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syslanguage) updateTableName(table string) *syslanguage {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.CreationTime = field.NewTime(table, "CreationTime")
	s.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	s.LastModificationTime = field.NewTime(table, "LastModificationTime")
	s.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	s.Key = field.NewString(table, "Key")
	s.BaseValue = field.NewString(table, "BaseValue")
	s.TargetValue = field.NewString(table, "TargetValue")
	s.Order = field.NewFloat64(table, "Order")
	s.Category = field.NewString(table, "Category")
	s.TargetCulture = field.NewString(table, "TargetCulture")
	s.Source = field.NewString(table, "Source")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *syslanguage) WithContext(ctx context.Context) ISyslanguageDo {
	return s.syslanguageDo.WithContext(ctx)
}

func (s syslanguage) TableName() string { return s.syslanguageDo.TableName() }

func (s syslanguage) Alias() string { return s.syslanguageDo.Alias() }

func (s *syslanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syslanguage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["CreationTime"] = s.CreationTime
	s.fieldMap["CreatorUserId"] = s.CreatorUserID
	s.fieldMap["LastModificationTime"] = s.LastModificationTime
	s.fieldMap["LastModifierUserId"] = s.LastModifierUserID
	s.fieldMap["Key"] = s.Key
	s.fieldMap["BaseValue"] = s.BaseValue
	s.fieldMap["TargetValue"] = s.TargetValue
	s.fieldMap["Order"] = s.Order
	s.fieldMap["Category"] = s.Category
	s.fieldMap["TargetCulture"] = s.TargetCulture
	s.fieldMap["Source"] = s.Source
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s syslanguage) clone(db *gorm.DB) syslanguage {
	s.syslanguageDo.ReplaceDB(db)
	return s
}

type syslanguageDo struct{ gen.DO }

type ISyslanguageDo interface {
	gen.SubQuery
	Debug() ISyslanguageDo
	WithContext(ctx context.Context) ISyslanguageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISyslanguageDo
	Not(conds ...gen.Condition) ISyslanguageDo
	Or(conds ...gen.Condition) ISyslanguageDo
	Select(conds ...field.Expr) ISyslanguageDo
	Where(conds ...gen.Condition) ISyslanguageDo
	Order(conds ...field.Expr) ISyslanguageDo
	Distinct(cols ...field.Expr) ISyslanguageDo
	Omit(cols ...field.Expr) ISyslanguageDo
	Join(table schema.Tabler, on ...field.Expr) ISyslanguageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISyslanguageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISyslanguageDo
	Group(cols ...field.Expr) ISyslanguageDo
	Having(conds ...gen.Condition) ISyslanguageDo
	Limit(limit int) ISyslanguageDo
	Offset(offset int) ISyslanguageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISyslanguageDo
	Unscoped() ISyslanguageDo
	Create(values ...*model.Syslanguage) error
	CreateInBatches(values []*model.Syslanguage, batchSize int) error
	Save(values ...*model.Syslanguage) error
	First() (*model.Syslanguage, error)
	Take() (*model.Syslanguage, error)
	Last() (*model.Syslanguage, error)
	Find() ([]*model.Syslanguage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syslanguage, err error)
	FindInBatches(result *[]*model.Syslanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Syslanguage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISyslanguageDo
	Assign(attrs ...field.AssignExpr) ISyslanguageDo
	Joins(fields ...field.RelationField) ISyslanguageDo
	Preload(fields ...field.RelationField) ISyslanguageDo
	FirstOrInit() (*model.Syslanguage, error)
	FirstOrCreate() (*model.Syslanguage, error)
	FindByPage(offset int, limit int) (result []*model.Syslanguage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISyslanguageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s syslanguageDo) Debug() ISyslanguageDo {
	return s.withDO(s.DO.Debug())
}

func (s syslanguageDo) WithContext(ctx context.Context) ISyslanguageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syslanguageDo) ReadDB() ISyslanguageDo {
	return s.Clauses(dbresolver.Read)
}

func (s syslanguageDo) WriteDB() ISyslanguageDo {
	return s.Clauses(dbresolver.Write)
}

func (s syslanguageDo) Clauses(conds ...clause.Expression) ISyslanguageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syslanguageDo) Returning(value interface{}, columns ...string) ISyslanguageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syslanguageDo) Not(conds ...gen.Condition) ISyslanguageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syslanguageDo) Or(conds ...gen.Condition) ISyslanguageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syslanguageDo) Select(conds ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syslanguageDo) Where(conds ...gen.Condition) ISyslanguageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syslanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISyslanguageDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s syslanguageDo) Order(conds ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syslanguageDo) Distinct(cols ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syslanguageDo) Omit(cols ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syslanguageDo) Join(table schema.Tabler, on ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syslanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syslanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syslanguageDo) Group(cols ...field.Expr) ISyslanguageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syslanguageDo) Having(conds ...gen.Condition) ISyslanguageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syslanguageDo) Limit(limit int) ISyslanguageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syslanguageDo) Offset(offset int) ISyslanguageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syslanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISyslanguageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syslanguageDo) Unscoped() ISyslanguageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syslanguageDo) Create(values ...*model.Syslanguage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syslanguageDo) CreateInBatches(values []*model.Syslanguage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syslanguageDo) Save(values ...*model.Syslanguage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syslanguageDo) First() (*model.Syslanguage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslanguage), nil
	}
}

func (s syslanguageDo) Take() (*model.Syslanguage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslanguage), nil
	}
}

func (s syslanguageDo) Last() (*model.Syslanguage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslanguage), nil
	}
}

func (s syslanguageDo) Find() ([]*model.Syslanguage, error) {
	result, err := s.DO.Find()
	return result.([]*model.Syslanguage), err
}

func (s syslanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Syslanguage, err error) {
	buf := make([]*model.Syslanguage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syslanguageDo) FindInBatches(result *[]*model.Syslanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syslanguageDo) Attrs(attrs ...field.AssignExpr) ISyslanguageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syslanguageDo) Assign(attrs ...field.AssignExpr) ISyslanguageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syslanguageDo) Joins(fields ...field.RelationField) ISyslanguageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syslanguageDo) Preload(fields ...field.RelationField) ISyslanguageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syslanguageDo) FirstOrInit() (*model.Syslanguage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslanguage), nil
	}
}

func (s syslanguageDo) FirstOrCreate() (*model.Syslanguage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Syslanguage), nil
	}
}

func (s syslanguageDo) FindByPage(offset int, limit int) (result []*model.Syslanguage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syslanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syslanguageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syslanguageDo) Delete(models ...*model.Syslanguage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syslanguageDo) withDO(do gen.Dao) *syslanguageDo {
	s.DO = *do.(*gen.DO)
	return s
}
