// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newPhysicalItem(db *gorm.DB) physicalItem {
	_physicalItem := physicalItem{}

	_physicalItem.physicalItemDo.UseDB(db)
	_physicalItem.physicalItemDo.UseModel(&model.PhysicalItem{})

	tableName := _physicalItem.physicalItemDo.TableName()
	_physicalItem.ALL = field.NewAsterisk(tableName)
	_physicalItem.ITEMID = field.NewInt64(tableName, "ITEM_ID")
	_physicalItem.RECORDID = field.NewInt64(tableName, "RECORD_ID")
	_physicalItem.BARCODE = field.NewString(tableName, "BARCODE")
	_physicalItem.PROPNO = field.NewString(tableName, "PROP_NO")
	_physicalItem.PROPACCOUNT = field.NewInt64(tableName, "PROP_ACCOUNT")
	_physicalItem.CALLNO = field.NewString(tableName, "CALL_NO")
	_physicalItem.MATERIALCODE = field.NewInt64(tableName, "MATERIAL_CODE")
	_physicalItem.GETMODECODE = field.NewInt64(tableName, "GET_MODE_CODE")
	_physicalItem.PROCESSTYPE = field.NewString(tableName, "PROCESS_TYPE")
	_physicalItem.CIRCFLAG = field.NewInt64(tableName, "CIRC_FLAG")
	_physicalItem.LISTPRICE = field.NewFloat64(tableName, "LIST_PRICE")
	_physicalItem.NETPRICE = field.NewFloat64(tableName, "NET_PRICE")
	_physicalItem.FORELISTPRICE = field.NewFloat64(tableName, "FORE_LIST_PRICE")
	_physicalItem.FORENETPRICE = field.NewFloat64(tableName, "FORE_NET_PRICE")
	_physicalItem.DISCOUNT = field.NewFloat32(tableName, "DISCOUNT")
	_physicalItem.CURRENCYCODE = field.NewInt64(tableName, "CURRENCY_CODE")
	_physicalItem.REMARK = field.NewString(tableName, "REMARK")
	_physicalItem.SHELFNO = field.NewString(tableName, "SHELF_NO")
	_physicalItem.INDATE = field.NewTime(tableName, "IN_DATE")
	_physicalItem.YEAR = field.NewString(tableName, "YEAR")
	_physicalItem.VOL = field.NewString(tableName, "VOL")
	_physicalItem.COLLECTIONID = field.NewInt64(tableName, "COLLECTION_ID")
	_physicalItem.ITEMPOLICYCODE = field.NewInt64(tableName, "ITEM_POLICY_CODE")
	_physicalItem.ATTACHMENT = field.NewString(tableName, "ATTACHMENT")
	_physicalItem.LIBCODE = field.NewString(tableName, "LIB_CODE")
	_physicalItem.LOCATIONID = field.NewInt64(tableName, "LOCATION_ID")
	_physicalItem.GROUPCODE = field.NewString(tableName, "GROUP_CODE")
	_physicalItem.ORDERLIBCODE = field.NewString(tableName, "ORDER_LIB_CODE")
	_physicalItem.CURLOCATIONID = field.NewInt64(tableName, "CUR_LOCATION_ID")
	_physicalItem.CURLIBCODE = field.NewString(tableName, "CUR_LIB_CODE")
	_physicalItem.CURDESKID = field.NewInt64(tableName, "CUR_DESK_ID")
	_physicalItem.CIRCNUMBER = field.NewInt64(tableName, "CIRC_NUMBER")
	_physicalItem.POL = field.NewInt64(tableName, "POL")
	_physicalItem.CREATEBY = field.NewInt64(tableName, "CREATE_BY")
	_physicalItem.CREATEDATE = field.NewTime(tableName, "CREATE_DATE")
	_physicalItem.UPDATEBY = field.NewInt64(tableName, "UPDATE_BY")
	_physicalItem.UPDATEDATE = field.NewTime(tableName, "UPDATE_DATE")
	_physicalItem.DESKID = field.NewInt64(tableName, "DESK_ID")
	_physicalItem.SHELFNOX = field.NewInt64(tableName, "SHELF_NO_X")
	_physicalItem.SHELFNOY = field.NewInt64(tableName, "SHELF_NO_Y")
	_physicalItem.SHELFNOZ = field.NewInt64(tableName, "SHELF_NO_Z")
	_physicalItem.FUNDSRCCODE = field.NewInt64(tableName, "FUND_SRC_CODE")
	_physicalItem.CIRCATTR = field.NewString(tableName, "CIRC_ATTR")
	_physicalItem.RECDESKID = field.NewInt64(tableName, "REC_DESK_ID")
	_physicalItem.LEDGERSID = field.NewInt64(tableName, "LEDGERS_ID")
	_physicalItem.CATALOGCOLLECTIONID = field.NewInt64(tableName, "CATALOG_COLLECTION_ID")
	_physicalItem.CATDESKID = field.NewInt64(tableName, "CAT_DESK_ID")
	_physicalItem.CATUSERID = field.NewInt64(tableName, "CAT_USER_ID")
	_physicalItem.CATDATE = field.NewTime(tableName, "CAT_DATE")
	_physicalItem.INVDESKID = field.NewInt64(tableName, "INV_DESK_ID")
	_physicalItem.INVUSERID = field.NewInt64(tableName, "INV_USER_ID")
	_physicalItem.INVDATE = field.NewTime(tableName, "INV_DATE")
	_physicalItem.TOTALCIRCCOUNT = field.NewInt64(tableName, "TOTAL_CIRC_COUNT")
	_physicalItem.YEARCIRCCOUNT = field.NewInt64(tableName, "YEAR_CIRC_COUNT")
	_physicalItem.WORKAREAID = field.NewInt64(tableName, "WORK_AREA_ID")
	_physicalItem.WORKAREAADDDATE = field.NewTime(tableName, "WORK_AREA_ADD_DATE")
	_physicalItem.EDITOR = field.NewInt64(tableName, "EDITOR")
	_physicalItem.EDITORDATE = field.NewTime(tableName, "EDITOR_DATE")
	_physicalItem.BINDPRICE = field.NewFloat64(tableName, "BIND_PRICE")
	_physicalItem.FINDSHOWFLAG = field.NewString(tableName, "FIND_SHOW_FLAG")
	_physicalItem.VENDORID = field.NewInt64(tableName, "VENDOR_ID")
	_physicalItem.DONATEID = field.NewInt64(tableName, "DONATE_ID")
	_physicalItem.ALLOCATEDATE = field.NewTime(tableName, "ALLOCATE_DATE")
	_physicalItem.UNIONFLAG = field.NewInt64(tableName, "UNION_FLAG")
	_physicalItem.BACKGROUPNAME = field.NewString(tableName, "BACK_GROUP_NAME")

	_physicalItem.fillFieldMap()

	return _physicalItem
}

type physicalItem struct {
	physicalItemDo physicalItemDo

	ALL                 field.Asterisk
	ITEMID              field.Int64
	RECORDID            field.Int64
	BARCODE             field.String
	PROPNO              field.String
	PROPACCOUNT         field.Int64
	CALLNO              field.String
	MATERIALCODE        field.Int64
	GETMODECODE         field.Int64
	PROCESSTYPE         field.String
	CIRCFLAG            field.Int64
	LISTPRICE           field.Float64
	NETPRICE            field.Float64
	FORELISTPRICE       field.Float64
	FORENETPRICE        field.Float64
	DISCOUNT            field.Float32
	CURRENCYCODE        field.Int64
	REMARK              field.String
	SHELFNO             field.String
	INDATE              field.Time
	YEAR                field.String
	VOL                 field.String
	COLLECTIONID        field.Int64
	ITEMPOLICYCODE      field.Int64
	ATTACHMENT          field.String
	LIBCODE             field.String
	LOCATIONID          field.Int64
	GROUPCODE           field.String
	ORDERLIBCODE        field.String
	CURLOCATIONID       field.Int64
	CURLIBCODE          field.String
	CURDESKID           field.Int64
	CIRCNUMBER          field.Int64
	POL                 field.Int64
	CREATEBY            field.Int64
	CREATEDATE          field.Time
	UPDATEBY            field.Int64
	UPDATEDATE          field.Time
	DESKID              field.Int64
	SHELFNOX            field.Int64
	SHELFNOY            field.Int64
	SHELFNOZ            field.Int64
	FUNDSRCCODE         field.Int64
	CIRCATTR            field.String
	RECDESKID           field.Int64
	LEDGERSID           field.Int64
	CATALOGCOLLECTIONID field.Int64
	CATDESKID           field.Int64
	CATUSERID           field.Int64
	CATDATE             field.Time
	INVDESKID           field.Int64
	INVUSERID           field.Int64
	INVDATE             field.Time
	TOTALCIRCCOUNT      field.Int64
	YEARCIRCCOUNT       field.Int64
	WORKAREAID          field.Int64
	WORKAREAADDDATE     field.Time
	EDITOR              field.Int64
	EDITORDATE          field.Time
	BINDPRICE           field.Float64
	FINDSHOWFLAG        field.String
	VENDORID            field.Int64
	DONATEID            field.Int64
	ALLOCATEDATE        field.Time
	UNIONFLAG           field.Int64
	BACKGROUPNAME       field.String

	fieldMap map[string]field.Expr
}

func (p physicalItem) Table(newTableName string) *physicalItem {
	p.physicalItemDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p physicalItem) As(alias string) *physicalItem {
	p.physicalItemDo.DO = *(p.physicalItemDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *physicalItem) updateTableName(table string) *physicalItem {
	p.ALL = field.NewAsterisk(table)
	p.ITEMID = field.NewInt64(table, "ITEM_ID")
	p.RECORDID = field.NewInt64(table, "RECORD_ID")
	p.BARCODE = field.NewString(table, "BARCODE")
	p.PROPNO = field.NewString(table, "PROP_NO")
	p.PROPACCOUNT = field.NewInt64(table, "PROP_ACCOUNT")
	p.CALLNO = field.NewString(table, "CALL_NO")
	p.MATERIALCODE = field.NewInt64(table, "MATERIAL_CODE")
	p.GETMODECODE = field.NewInt64(table, "GET_MODE_CODE")
	p.PROCESSTYPE = field.NewString(table, "PROCESS_TYPE")
	p.CIRCFLAG = field.NewInt64(table, "CIRC_FLAG")
	p.LISTPRICE = field.NewFloat64(table, "LIST_PRICE")
	p.NETPRICE = field.NewFloat64(table, "NET_PRICE")
	p.FORELISTPRICE = field.NewFloat64(table, "FORE_LIST_PRICE")
	p.FORENETPRICE = field.NewFloat64(table, "FORE_NET_PRICE")
	p.DISCOUNT = field.NewFloat32(table, "DISCOUNT")
	p.CURRENCYCODE = field.NewInt64(table, "CURRENCY_CODE")
	p.REMARK = field.NewString(table, "REMARK")
	p.SHELFNO = field.NewString(table, "SHELF_NO")
	p.INDATE = field.NewTime(table, "IN_DATE")
	p.YEAR = field.NewString(table, "YEAR")
	p.VOL = field.NewString(table, "VOL")
	p.COLLECTIONID = field.NewInt64(table, "COLLECTION_ID")
	p.ITEMPOLICYCODE = field.NewInt64(table, "ITEM_POLICY_CODE")
	p.ATTACHMENT = field.NewString(table, "ATTACHMENT")
	p.LIBCODE = field.NewString(table, "LIB_CODE")
	p.LOCATIONID = field.NewInt64(table, "LOCATION_ID")
	p.GROUPCODE = field.NewString(table, "GROUP_CODE")
	p.ORDERLIBCODE = field.NewString(table, "ORDER_LIB_CODE")
	p.CURLOCATIONID = field.NewInt64(table, "CUR_LOCATION_ID")
	p.CURLIBCODE = field.NewString(table, "CUR_LIB_CODE")
	p.CURDESKID = field.NewInt64(table, "CUR_DESK_ID")
	p.CIRCNUMBER = field.NewInt64(table, "CIRC_NUMBER")
	p.POL = field.NewInt64(table, "POL")
	p.CREATEBY = field.NewInt64(table, "CREATE_BY")
	p.CREATEDATE = field.NewTime(table, "CREATE_DATE")
	p.UPDATEBY = field.NewInt64(table, "UPDATE_BY")
	p.UPDATEDATE = field.NewTime(table, "UPDATE_DATE")
	p.DESKID = field.NewInt64(table, "DESK_ID")
	p.SHELFNOX = field.NewInt64(table, "SHELF_NO_X")
	p.SHELFNOY = field.NewInt64(table, "SHELF_NO_Y")
	p.SHELFNOZ = field.NewInt64(table, "SHELF_NO_Z")
	p.FUNDSRCCODE = field.NewInt64(table, "FUND_SRC_CODE")
	p.CIRCATTR = field.NewString(table, "CIRC_ATTR")
	p.RECDESKID = field.NewInt64(table, "REC_DESK_ID")
	p.LEDGERSID = field.NewInt64(table, "LEDGERS_ID")
	p.CATALOGCOLLECTIONID = field.NewInt64(table, "CATALOG_COLLECTION_ID")
	p.CATDESKID = field.NewInt64(table, "CAT_DESK_ID")
	p.CATUSERID = field.NewInt64(table, "CAT_USER_ID")
	p.CATDATE = field.NewTime(table, "CAT_DATE")
	p.INVDESKID = field.NewInt64(table, "INV_DESK_ID")
	p.INVUSERID = field.NewInt64(table, "INV_USER_ID")
	p.INVDATE = field.NewTime(table, "INV_DATE")
	p.TOTALCIRCCOUNT = field.NewInt64(table, "TOTAL_CIRC_COUNT")
	p.YEARCIRCCOUNT = field.NewInt64(table, "YEAR_CIRC_COUNT")
	p.WORKAREAID = field.NewInt64(table, "WORK_AREA_ID")
	p.WORKAREAADDDATE = field.NewTime(table, "WORK_AREA_ADD_DATE")
	p.EDITOR = field.NewInt64(table, "EDITOR")
	p.EDITORDATE = field.NewTime(table, "EDITOR_DATE")
	p.BINDPRICE = field.NewFloat64(table, "BIND_PRICE")
	p.FINDSHOWFLAG = field.NewString(table, "FIND_SHOW_FLAG")
	p.VENDORID = field.NewInt64(table, "VENDOR_ID")
	p.DONATEID = field.NewInt64(table, "DONATE_ID")
	p.ALLOCATEDATE = field.NewTime(table, "ALLOCATE_DATE")
	p.UNIONFLAG = field.NewInt64(table, "UNION_FLAG")
	p.BACKGROUPNAME = field.NewString(table, "BACK_GROUP_NAME")

	p.fillFieldMap()

	return p
}

func (p *physicalItem) WithContext(ctx context.Context) IPhysicalItemDo {
	return p.physicalItemDo.WithContext(ctx)
}

func (p physicalItem) TableName() string { return p.physicalItemDo.TableName() }

func (p physicalItem) Alias() string { return p.physicalItemDo.Alias() }

func (p *physicalItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *physicalItem) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 65)
	p.fieldMap["ITEM_ID"] = p.ITEMID
	p.fieldMap["RECORD_ID"] = p.RECORDID
	p.fieldMap["BARCODE"] = p.BARCODE
	p.fieldMap["PROP_NO"] = p.PROPNO
	p.fieldMap["PROP_ACCOUNT"] = p.PROPACCOUNT
	p.fieldMap["CALL_NO"] = p.CALLNO
	p.fieldMap["MATERIAL_CODE"] = p.MATERIALCODE
	p.fieldMap["GET_MODE_CODE"] = p.GETMODECODE
	p.fieldMap["PROCESS_TYPE"] = p.PROCESSTYPE
	p.fieldMap["CIRC_FLAG"] = p.CIRCFLAG
	p.fieldMap["LIST_PRICE"] = p.LISTPRICE
	p.fieldMap["NET_PRICE"] = p.NETPRICE
	p.fieldMap["FORE_LIST_PRICE"] = p.FORELISTPRICE
	p.fieldMap["FORE_NET_PRICE"] = p.FORENETPRICE
	p.fieldMap["DISCOUNT"] = p.DISCOUNT
	p.fieldMap["CURRENCY_CODE"] = p.CURRENCYCODE
	p.fieldMap["REMARK"] = p.REMARK
	p.fieldMap["SHELF_NO"] = p.SHELFNO
	p.fieldMap["IN_DATE"] = p.INDATE
	p.fieldMap["YEAR"] = p.YEAR
	p.fieldMap["VOL"] = p.VOL
	p.fieldMap["COLLECTION_ID"] = p.COLLECTIONID
	p.fieldMap["ITEM_POLICY_CODE"] = p.ITEMPOLICYCODE
	p.fieldMap["ATTACHMENT"] = p.ATTACHMENT
	p.fieldMap["LIB_CODE"] = p.LIBCODE
	p.fieldMap["LOCATION_ID"] = p.LOCATIONID
	p.fieldMap["GROUP_CODE"] = p.GROUPCODE
	p.fieldMap["ORDER_LIB_CODE"] = p.ORDERLIBCODE
	p.fieldMap["CUR_LOCATION_ID"] = p.CURLOCATIONID
	p.fieldMap["CUR_LIB_CODE"] = p.CURLIBCODE
	p.fieldMap["CUR_DESK_ID"] = p.CURDESKID
	p.fieldMap["CIRC_NUMBER"] = p.CIRCNUMBER
	p.fieldMap["POL"] = p.POL
	p.fieldMap["CREATE_BY"] = p.CREATEBY
	p.fieldMap["CREATE_DATE"] = p.CREATEDATE
	p.fieldMap["UPDATE_BY"] = p.UPDATEBY
	p.fieldMap["UPDATE_DATE"] = p.UPDATEDATE
	p.fieldMap["DESK_ID"] = p.DESKID
	p.fieldMap["SHELF_NO_X"] = p.SHELFNOX
	p.fieldMap["SHELF_NO_Y"] = p.SHELFNOY
	p.fieldMap["SHELF_NO_Z"] = p.SHELFNOZ
	p.fieldMap["FUND_SRC_CODE"] = p.FUNDSRCCODE
	p.fieldMap["CIRC_ATTR"] = p.CIRCATTR
	p.fieldMap["REC_DESK_ID"] = p.RECDESKID
	p.fieldMap["LEDGERS_ID"] = p.LEDGERSID
	p.fieldMap["CATALOG_COLLECTION_ID"] = p.CATALOGCOLLECTIONID
	p.fieldMap["CAT_DESK_ID"] = p.CATDESKID
	p.fieldMap["CAT_USER_ID"] = p.CATUSERID
	p.fieldMap["CAT_DATE"] = p.CATDATE
	p.fieldMap["INV_DESK_ID"] = p.INVDESKID
	p.fieldMap["INV_USER_ID"] = p.INVUSERID
	p.fieldMap["INV_DATE"] = p.INVDATE
	p.fieldMap["TOTAL_CIRC_COUNT"] = p.TOTALCIRCCOUNT
	p.fieldMap["YEAR_CIRC_COUNT"] = p.YEARCIRCCOUNT
	p.fieldMap["WORK_AREA_ID"] = p.WORKAREAID
	p.fieldMap["WORK_AREA_ADD_DATE"] = p.WORKAREAADDDATE
	p.fieldMap["EDITOR"] = p.EDITOR
	p.fieldMap["EDITOR_DATE"] = p.EDITORDATE
	p.fieldMap["BIND_PRICE"] = p.BINDPRICE
	p.fieldMap["FIND_SHOW_FLAG"] = p.FINDSHOWFLAG
	p.fieldMap["VENDOR_ID"] = p.VENDORID
	p.fieldMap["DONATE_ID"] = p.DONATEID
	p.fieldMap["ALLOCATE_DATE"] = p.ALLOCATEDATE
	p.fieldMap["UNION_FLAG"] = p.UNIONFLAG
	p.fieldMap["BACK_GROUP_NAME"] = p.BACKGROUPNAME
}

func (p physicalItem) clone(db *gorm.DB) physicalItem {
	p.physicalItemDo.ReplaceDB(db)
	return p
}

type physicalItemDo struct{ gen.DO }

type IPhysicalItemDo interface {
	gen.SubQuery
	Debug() IPhysicalItemDo
	WithContext(ctx context.Context) IPhysicalItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPhysicalItemDo
	Not(conds ...gen.Condition) IPhysicalItemDo
	Or(conds ...gen.Condition) IPhysicalItemDo
	Select(conds ...field.Expr) IPhysicalItemDo
	Where(conds ...gen.Condition) IPhysicalItemDo
	Order(conds ...field.Expr) IPhysicalItemDo
	Distinct(cols ...field.Expr) IPhysicalItemDo
	Omit(cols ...field.Expr) IPhysicalItemDo
	Join(table schema.Tabler, on ...field.Expr) IPhysicalItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPhysicalItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPhysicalItemDo
	Group(cols ...field.Expr) IPhysicalItemDo
	Having(conds ...gen.Condition) IPhysicalItemDo
	Limit(limit int) IPhysicalItemDo
	Offset(offset int) IPhysicalItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPhysicalItemDo
	Unscoped() IPhysicalItemDo
	Create(values ...*model.PhysicalItem) error
	CreateInBatches(values []*model.PhysicalItem, batchSize int) error
	Save(values ...*model.PhysicalItem) error
	First() (*model.PhysicalItem, error)
	Take() (*model.PhysicalItem, error)
	Last() (*model.PhysicalItem, error)
	Find() ([]*model.PhysicalItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PhysicalItem, err error)
	FindInBatches(result *[]*model.PhysicalItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PhysicalItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPhysicalItemDo
	Assign(attrs ...field.AssignExpr) IPhysicalItemDo
	Joins(fields ...field.RelationField) IPhysicalItemDo
	Preload(fields ...field.RelationField) IPhysicalItemDo
	FirstOrInit() (*model.PhysicalItem, error)
	FirstOrCreate() (*model.PhysicalItem, error)
	FindByPage(offset int, limit int) (result []*model.PhysicalItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPhysicalItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p physicalItemDo) Debug() IPhysicalItemDo {
	return p.withDO(p.DO.Debug())
}

func (p physicalItemDo) WithContext(ctx context.Context) IPhysicalItemDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p physicalItemDo) ReadDB() IPhysicalItemDo {
	return p.Clauses(dbresolver.Read)
}

func (p physicalItemDo) WriteDB() IPhysicalItemDo {
	return p.Clauses(dbresolver.Write)
}

func (p physicalItemDo) Clauses(conds ...clause.Expression) IPhysicalItemDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p physicalItemDo) Returning(value interface{}, columns ...string) IPhysicalItemDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p physicalItemDo) Not(conds ...gen.Condition) IPhysicalItemDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p physicalItemDo) Or(conds ...gen.Condition) IPhysicalItemDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p physicalItemDo) Select(conds ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p physicalItemDo) Where(conds ...gen.Condition) IPhysicalItemDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p physicalItemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPhysicalItemDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p physicalItemDo) Order(conds ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p physicalItemDo) Distinct(cols ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p physicalItemDo) Omit(cols ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p physicalItemDo) Join(table schema.Tabler, on ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p physicalItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p physicalItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p physicalItemDo) Group(cols ...field.Expr) IPhysicalItemDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p physicalItemDo) Having(conds ...gen.Condition) IPhysicalItemDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p physicalItemDo) Limit(limit int) IPhysicalItemDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p physicalItemDo) Offset(offset int) IPhysicalItemDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p physicalItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPhysicalItemDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p physicalItemDo) Unscoped() IPhysicalItemDo {
	return p.withDO(p.DO.Unscoped())
}

func (p physicalItemDo) Create(values ...*model.PhysicalItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p physicalItemDo) CreateInBatches(values []*model.PhysicalItem, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p physicalItemDo) Save(values ...*model.PhysicalItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p physicalItemDo) First() (*model.PhysicalItem, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhysicalItem), nil
	}
}

func (p physicalItemDo) Take() (*model.PhysicalItem, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhysicalItem), nil
	}
}

func (p physicalItemDo) Last() (*model.PhysicalItem, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhysicalItem), nil
	}
}

func (p physicalItemDo) Find() ([]*model.PhysicalItem, error) {
	result, err := p.DO.Find()
	return result.([]*model.PhysicalItem), err
}

func (p physicalItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PhysicalItem, err error) {
	buf := make([]*model.PhysicalItem, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p physicalItemDo) FindInBatches(result *[]*model.PhysicalItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p physicalItemDo) Attrs(attrs ...field.AssignExpr) IPhysicalItemDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p physicalItemDo) Assign(attrs ...field.AssignExpr) IPhysicalItemDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p physicalItemDo) Joins(fields ...field.RelationField) IPhysicalItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p physicalItemDo) Preload(fields ...field.RelationField) IPhysicalItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p physicalItemDo) FirstOrInit() (*model.PhysicalItem, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhysicalItem), nil
	}
}

func (p physicalItemDo) FirstOrCreate() (*model.PhysicalItem, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhysicalItem), nil
	}
}

func (p physicalItemDo) FindByPage(offset int, limit int) (result []*model.PhysicalItem, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p physicalItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p physicalItemDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p physicalItemDo) Delete(models ...*model.PhysicalItem) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *physicalItemDo) withDO(do gen.Dao) *physicalItemDo {
	p.DO = *do.(*gen.DO)
	return p
}
