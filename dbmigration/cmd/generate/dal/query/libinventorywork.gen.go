// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibinventorywork(db *gorm.DB) libinventorywork {
	_libinventorywork := libinventorywork{}

	_libinventorywork.libinventoryworkDo.UseDB(db)
	_libinventorywork.libinventoryworkDo.UseModel(&model.Libinventorywork{})

	tableName := _libinventorywork.libinventoryworkDo.TableName()
	_libinventorywork.ALL = field.NewAsterisk(tableName)
	_libinventorywork.ID = field.NewString(tableName, "Id")
	_libinventorywork.CreationTime = field.NewTime(tableName, "CreationTime")
	_libinventorywork.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libinventorywork.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libinventorywork.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libinventorywork.IsDeleted = field.NewInt64(tableName, "IsDeleted")
	_libinventorywork.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libinventorywork.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libinventorywork.TaskStatus = field.NewInt64(tableName, "TaskStatus")
	_libinventorywork.SendStatus = field.NewInt64(tableName, "SendStatus")
	_libinventorywork.TriggerSatus = field.NewInt64(tableName, "TriggerSatus")
	_libinventorywork.TaskID = field.NewString(tableName, "TaskId")
	_libinventorywork.TaskName = field.NewString(tableName, "TaskName")
	_libinventorywork.WorkTime = field.NewTime(tableName, "WorkTime")
	_libinventorywork.WorkStarTime = field.NewTime(tableName, "WorkStarTime")
	_libinventorywork.WorkEndTime = field.NewTime(tableName, "WorkEndTime")
	_libinventorywork.HangFireKey = field.NewString(tableName, "HangFireKey")
	_libinventorywork.Comment = field.NewString(tableName, "Comment")
	_libinventorywork.Remark = field.NewString(tableName, "Remark")
	_libinventorywork.ExceptionMsg = field.NewString(tableName, "ExceptionMsg")
	_libinventorywork.TenantID = field.NewInt64(tableName, "TenantId")
	_libinventorywork.OriginType = field.NewInt64(tableName, "OriginType")

	_libinventorywork.fillFieldMap()

	return _libinventorywork
}

type libinventorywork struct {
	libinventoryworkDo libinventoryworkDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Int64
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TaskStatus           field.Int64
	SendStatus           field.Int64
	TriggerSatus         field.Int64
	TaskID               field.String
	TaskName             field.String
	WorkTime             field.Time
	WorkStarTime         field.Time
	WorkEndTime          field.Time
	HangFireKey          field.String
	Comment              field.String
	Remark               field.String
	ExceptionMsg         field.String
	TenantID             field.Int64
	OriginType           field.Int64

	fieldMap map[string]field.Expr
}

func (l libinventorywork) Table(newTableName string) *libinventorywork {
	l.libinventoryworkDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libinventorywork) As(alias string) *libinventorywork {
	l.libinventoryworkDo.DO = *(l.libinventoryworkDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libinventorywork) updateTableName(table string) *libinventorywork {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewInt64(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.TaskStatus = field.NewInt64(table, "TaskStatus")
	l.SendStatus = field.NewInt64(table, "SendStatus")
	l.TriggerSatus = field.NewInt64(table, "TriggerSatus")
	l.TaskID = field.NewString(table, "TaskId")
	l.TaskName = field.NewString(table, "TaskName")
	l.WorkTime = field.NewTime(table, "WorkTime")
	l.WorkStarTime = field.NewTime(table, "WorkStarTime")
	l.WorkEndTime = field.NewTime(table, "WorkEndTime")
	l.HangFireKey = field.NewString(table, "HangFireKey")
	l.Comment = field.NewString(table, "Comment")
	l.Remark = field.NewString(table, "Remark")
	l.ExceptionMsg = field.NewString(table, "ExceptionMsg")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.OriginType = field.NewInt64(table, "OriginType")

	l.fillFieldMap()

	return l
}

func (l *libinventorywork) WithContext(ctx context.Context) ILibinventoryworkDo {
	return l.libinventoryworkDo.WithContext(ctx)
}

func (l libinventorywork) TableName() string { return l.libinventoryworkDo.TableName() }

func (l libinventorywork) Alias() string { return l.libinventoryworkDo.Alias() }

func (l *libinventorywork) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libinventorywork) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 22)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["TaskStatus"] = l.TaskStatus
	l.fieldMap["SendStatus"] = l.SendStatus
	l.fieldMap["TriggerSatus"] = l.TriggerSatus
	l.fieldMap["TaskId"] = l.TaskID
	l.fieldMap["TaskName"] = l.TaskName
	l.fieldMap["WorkTime"] = l.WorkTime
	l.fieldMap["WorkStarTime"] = l.WorkStarTime
	l.fieldMap["WorkEndTime"] = l.WorkEndTime
	l.fieldMap["HangFireKey"] = l.HangFireKey
	l.fieldMap["Comment"] = l.Comment
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["ExceptionMsg"] = l.ExceptionMsg
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["OriginType"] = l.OriginType
}

func (l libinventorywork) clone(db *gorm.DB) libinventorywork {
	l.libinventoryworkDo.ReplaceDB(db)
	return l
}

type libinventoryworkDo struct{ gen.DO }

type ILibinventoryworkDo interface {
	gen.SubQuery
	Debug() ILibinventoryworkDo
	WithContext(ctx context.Context) ILibinventoryworkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibinventoryworkDo
	Not(conds ...gen.Condition) ILibinventoryworkDo
	Or(conds ...gen.Condition) ILibinventoryworkDo
	Select(conds ...field.Expr) ILibinventoryworkDo
	Where(conds ...gen.Condition) ILibinventoryworkDo
	Order(conds ...field.Expr) ILibinventoryworkDo
	Distinct(cols ...field.Expr) ILibinventoryworkDo
	Omit(cols ...field.Expr) ILibinventoryworkDo
	Join(table schema.Tabler, on ...field.Expr) ILibinventoryworkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkDo
	Group(cols ...field.Expr) ILibinventoryworkDo
	Having(conds ...gen.Condition) ILibinventoryworkDo
	Limit(limit int) ILibinventoryworkDo
	Offset(offset int) ILibinventoryworkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventoryworkDo
	Unscoped() ILibinventoryworkDo
	Create(values ...*model.Libinventorywork) error
	CreateInBatches(values []*model.Libinventorywork, batchSize int) error
	Save(values ...*model.Libinventorywork) error
	First() (*model.Libinventorywork, error)
	Take() (*model.Libinventorywork, error)
	Last() (*model.Libinventorywork, error)
	Find() ([]*model.Libinventorywork, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventorywork, err error)
	FindInBatches(result *[]*model.Libinventorywork, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libinventorywork) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibinventoryworkDo
	Assign(attrs ...field.AssignExpr) ILibinventoryworkDo
	Joins(fields ...field.RelationField) ILibinventoryworkDo
	Preload(fields ...field.RelationField) ILibinventoryworkDo
	FirstOrInit() (*model.Libinventorywork, error)
	FirstOrCreate() (*model.Libinventorywork, error)
	FindByPage(offset int, limit int) (result []*model.Libinventorywork, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibinventoryworkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libinventoryworkDo) Debug() ILibinventoryworkDo {
	return l.withDO(l.DO.Debug())
}

func (l libinventoryworkDo) WithContext(ctx context.Context) ILibinventoryworkDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libinventoryworkDo) ReadDB() ILibinventoryworkDo {
	return l.Clauses(dbresolver.Read)
}

func (l libinventoryworkDo) WriteDB() ILibinventoryworkDo {
	return l.Clauses(dbresolver.Write)
}

func (l libinventoryworkDo) Clauses(conds ...clause.Expression) ILibinventoryworkDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libinventoryworkDo) Returning(value interface{}, columns ...string) ILibinventoryworkDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libinventoryworkDo) Not(conds ...gen.Condition) ILibinventoryworkDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libinventoryworkDo) Or(conds ...gen.Condition) ILibinventoryworkDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libinventoryworkDo) Select(conds ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libinventoryworkDo) Where(conds ...gen.Condition) ILibinventoryworkDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libinventoryworkDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibinventoryworkDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libinventoryworkDo) Order(conds ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libinventoryworkDo) Distinct(cols ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libinventoryworkDo) Omit(cols ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libinventoryworkDo) Join(table schema.Tabler, on ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libinventoryworkDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libinventoryworkDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libinventoryworkDo) Group(cols ...field.Expr) ILibinventoryworkDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libinventoryworkDo) Having(conds ...gen.Condition) ILibinventoryworkDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libinventoryworkDo) Limit(limit int) ILibinventoryworkDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libinventoryworkDo) Offset(offset int) ILibinventoryworkDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libinventoryworkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibinventoryworkDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libinventoryworkDo) Unscoped() ILibinventoryworkDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libinventoryworkDo) Create(values ...*model.Libinventorywork) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libinventoryworkDo) CreateInBatches(values []*model.Libinventorywork, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libinventoryworkDo) Save(values ...*model.Libinventorywork) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libinventoryworkDo) First() (*model.Libinventorywork, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorywork), nil
	}
}

func (l libinventoryworkDo) Take() (*model.Libinventorywork, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorywork), nil
	}
}

func (l libinventoryworkDo) Last() (*model.Libinventorywork, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorywork), nil
	}
}

func (l libinventoryworkDo) Find() ([]*model.Libinventorywork, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libinventorywork), err
}

func (l libinventoryworkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libinventorywork, err error) {
	buf := make([]*model.Libinventorywork, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libinventoryworkDo) FindInBatches(result *[]*model.Libinventorywork, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libinventoryworkDo) Attrs(attrs ...field.AssignExpr) ILibinventoryworkDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libinventoryworkDo) Assign(attrs ...field.AssignExpr) ILibinventoryworkDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libinventoryworkDo) Joins(fields ...field.RelationField) ILibinventoryworkDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libinventoryworkDo) Preload(fields ...field.RelationField) ILibinventoryworkDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libinventoryworkDo) FirstOrInit() (*model.Libinventorywork, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorywork), nil
	}
}

func (l libinventoryworkDo) FirstOrCreate() (*model.Libinventorywork, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libinventorywork), nil
	}
}

func (l libinventoryworkDo) FindByPage(offset int, limit int) (result []*model.Libinventorywork, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libinventoryworkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libinventoryworkDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libinventoryworkDo) Delete(models ...*model.Libinventorywork) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libinventoryworkDo) withDO(do gen.Dao) *libinventoryworkDo {
	l.DO = *do.(*gen.DO)
	return l
}
