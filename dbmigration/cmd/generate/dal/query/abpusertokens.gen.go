// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpusertoken(db *gorm.DB) abpusertoken {
	_abpusertoken := abpusertoken{}

	_abpusertoken.abpusertokenDo.UseDB(db)
	_abpusertoken.abpusertokenDo.UseModel(&model.Abpusertoken{})

	tableName := _abpusertoken.abpusertokenDo.TableName()
	_abpusertoken.ALL = field.NewAsterisk(tableName)
	_abpusertoken.ID = field.NewInt64(tableName, "Id")
	_abpusertoken.TenantID = field.NewInt64(tableName, "TenantId")
	_abpusertoken.UserID = field.NewInt64(tableName, "UserId")
	_abpusertoken.LoginProvider = field.NewString(tableName, "LoginProvider")
	_abpusertoken.Name = field.NewString(tableName, "Name")
	_abpusertoken.Value = field.NewString(tableName, "Value")
	_abpusertoken.ExpireDate = field.NewTime(tableName, "ExpireDate")

	_abpusertoken.fillFieldMap()

	return _abpusertoken
}

type abpusertoken struct {
	abpusertokenDo abpusertokenDo

	ALL           field.Asterisk
	ID            field.Int64
	TenantID      field.Int64
	UserID        field.Int64
	LoginProvider field.String
	Name          field.String
	Value         field.String
	ExpireDate    field.Time

	fieldMap map[string]field.Expr
}

func (a abpusertoken) Table(newTableName string) *abpusertoken {
	a.abpusertokenDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpusertoken) As(alias string) *abpusertoken {
	a.abpusertokenDo.DO = *(a.abpusertokenDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpusertoken) updateTableName(table string) *abpusertoken {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.LoginProvider = field.NewString(table, "LoginProvider")
	a.Name = field.NewString(table, "Name")
	a.Value = field.NewString(table, "Value")
	a.ExpireDate = field.NewTime(table, "ExpireDate")

	a.fillFieldMap()

	return a
}

func (a *abpusertoken) WithContext(ctx context.Context) IAbpusertokenDo {
	return a.abpusertokenDo.WithContext(ctx)
}

func (a abpusertoken) TableName() string { return a.abpusertokenDo.TableName() }

func (a abpusertoken) Alias() string { return a.abpusertokenDo.Alias() }

func (a *abpusertoken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpusertoken) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["LoginProvider"] = a.LoginProvider
	a.fieldMap["Name"] = a.Name
	a.fieldMap["Value"] = a.Value
	a.fieldMap["ExpireDate"] = a.ExpireDate
}

func (a abpusertoken) clone(db *gorm.DB) abpusertoken {
	a.abpusertokenDo.ReplaceDB(db)
	return a
}

type abpusertokenDo struct{ gen.DO }

type IAbpusertokenDo interface {
	gen.SubQuery
	Debug() IAbpusertokenDo
	WithContext(ctx context.Context) IAbpusertokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpusertokenDo
	Not(conds ...gen.Condition) IAbpusertokenDo
	Or(conds ...gen.Condition) IAbpusertokenDo
	Select(conds ...field.Expr) IAbpusertokenDo
	Where(conds ...gen.Condition) IAbpusertokenDo
	Order(conds ...field.Expr) IAbpusertokenDo
	Distinct(cols ...field.Expr) IAbpusertokenDo
	Omit(cols ...field.Expr) IAbpusertokenDo
	Join(table schema.Tabler, on ...field.Expr) IAbpusertokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpusertokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpusertokenDo
	Group(cols ...field.Expr) IAbpusertokenDo
	Having(conds ...gen.Condition) IAbpusertokenDo
	Limit(limit int) IAbpusertokenDo
	Offset(offset int) IAbpusertokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpusertokenDo
	Unscoped() IAbpusertokenDo
	Create(values ...*model.Abpusertoken) error
	CreateInBatches(values []*model.Abpusertoken, batchSize int) error
	Save(values ...*model.Abpusertoken) error
	First() (*model.Abpusertoken, error)
	Take() (*model.Abpusertoken, error)
	Last() (*model.Abpusertoken, error)
	Find() ([]*model.Abpusertoken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpusertoken, err error)
	FindInBatches(result *[]*model.Abpusertoken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpusertoken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpusertokenDo
	Assign(attrs ...field.AssignExpr) IAbpusertokenDo
	Joins(fields ...field.RelationField) IAbpusertokenDo
	Preload(fields ...field.RelationField) IAbpusertokenDo
	FirstOrInit() (*model.Abpusertoken, error)
	FirstOrCreate() (*model.Abpusertoken, error)
	FindByPage(offset int, limit int) (result []*model.Abpusertoken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpusertokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpusertokenDo) Debug() IAbpusertokenDo {
	return a.withDO(a.DO.Debug())
}

func (a abpusertokenDo) WithContext(ctx context.Context) IAbpusertokenDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpusertokenDo) ReadDB() IAbpusertokenDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpusertokenDo) WriteDB() IAbpusertokenDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpusertokenDo) Clauses(conds ...clause.Expression) IAbpusertokenDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpusertokenDo) Returning(value interface{}, columns ...string) IAbpusertokenDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpusertokenDo) Not(conds ...gen.Condition) IAbpusertokenDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpusertokenDo) Or(conds ...gen.Condition) IAbpusertokenDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpusertokenDo) Select(conds ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpusertokenDo) Where(conds ...gen.Condition) IAbpusertokenDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpusertokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpusertokenDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpusertokenDo) Order(conds ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpusertokenDo) Distinct(cols ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpusertokenDo) Omit(cols ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpusertokenDo) Join(table schema.Tabler, on ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpusertokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpusertokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpusertokenDo) Group(cols ...field.Expr) IAbpusertokenDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpusertokenDo) Having(conds ...gen.Condition) IAbpusertokenDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpusertokenDo) Limit(limit int) IAbpusertokenDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpusertokenDo) Offset(offset int) IAbpusertokenDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpusertokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpusertokenDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpusertokenDo) Unscoped() IAbpusertokenDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpusertokenDo) Create(values ...*model.Abpusertoken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpusertokenDo) CreateInBatches(values []*model.Abpusertoken, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpusertokenDo) Save(values ...*model.Abpusertoken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpusertokenDo) First() (*model.Abpusertoken, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusertoken), nil
	}
}

func (a abpusertokenDo) Take() (*model.Abpusertoken, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusertoken), nil
	}
}

func (a abpusertokenDo) Last() (*model.Abpusertoken, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusertoken), nil
	}
}

func (a abpusertokenDo) Find() ([]*model.Abpusertoken, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpusertoken), err
}

func (a abpusertokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpusertoken, err error) {
	buf := make([]*model.Abpusertoken, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpusertokenDo) FindInBatches(result *[]*model.Abpusertoken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpusertokenDo) Attrs(attrs ...field.AssignExpr) IAbpusertokenDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpusertokenDo) Assign(attrs ...field.AssignExpr) IAbpusertokenDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpusertokenDo) Joins(fields ...field.RelationField) IAbpusertokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpusertokenDo) Preload(fields ...field.RelationField) IAbpusertokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpusertokenDo) FirstOrInit() (*model.Abpusertoken, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusertoken), nil
	}
}

func (a abpusertokenDo) FirstOrCreate() (*model.Abpusertoken, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpusertoken), nil
	}
}

func (a abpusertokenDo) FindByPage(offset int, limit int) (result []*model.Abpusertoken, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpusertokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpusertokenDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpusertokenDo) Delete(models ...*model.Abpusertoken) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpusertokenDo) withDO(do gen.Dao) *abpusertokenDo {
	a.DO = *do.(*gen.DO)
	return a
}
