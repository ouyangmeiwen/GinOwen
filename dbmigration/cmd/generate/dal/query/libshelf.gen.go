// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibshelf(db *gorm.DB) libshelf {
	_libshelf := libshelf{}

	_libshelf.libshelfDo.UseDB(db)
	_libshelf.libshelfDo.UseModel(&model.Libshelf{})

	tableName := _libshelf.libshelfDo.TableName()
	_libshelf.ALL = field.NewAsterisk(tableName)
	_libshelf.ID = field.NewString(tableName, "Id")
	_libshelf.CreationTime = field.NewTime(tableName, "CreationTime")
	_libshelf.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libshelf.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libshelf.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libshelf.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libshelf.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libshelf.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libshelf.Code = field.NewString(tableName, "Code")
	_libshelf.Name = field.NewString(tableName, "Name")
	_libshelf.ShelfNo = field.NewInt64(tableName, "ShelfNo")
	_libshelf.Side = field.NewString(tableName, "Side")
	_libshelf.RowIdentity = field.NewString(tableName, "RowIdentity")
	_libshelf.RfidReaderID = field.NewString(tableName, "RfidReaderId")
	_libshelf.SerialPortID = field.NewString(tableName, "SerialPortId")
	_libshelf.IsEnable = field.NewField(tableName, "IsEnable")
	_libshelf.X1 = field.NewFloat64(tableName, "X1")
	_libshelf.Y1 = field.NewFloat64(tableName, "Y1")
	_libshelf.X2 = field.NewFloat64(tableName, "X2")
	_libshelf.Y2 = field.NewFloat64(tableName, "Y2")
	_libshelf.Angel = field.NewFloat64(tableName, "Angel")
	_libshelf.StructID = field.NewString(tableName, "StructId")
	_libshelf.Remark = field.NewString(tableName, "Remark")
	_libshelf.TenantID = field.NewInt64(tableName, "TenantId")
	_libshelf.IsBosseyed = field.NewField(tableName, "IsBosseyed")

	_libshelf.fillFieldMap()

	return _libshelf
}

type libshelf struct {
	libshelfDo libshelfDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	Code                 field.String
	Name                 field.String
	ShelfNo              field.Int64
	Side                 field.String
	RowIdentity          field.String
	RfidReaderID         field.String
	SerialPortID         field.String
	IsEnable             field.Field
	X1                   field.Float64
	Y1                   field.Float64
	X2                   field.Float64
	Y2                   field.Float64
	Angel                field.Float64
	StructID             field.String
	Remark               field.String
	TenantID             field.Int64
	IsBosseyed           field.Field

	fieldMap map[string]field.Expr
}

func (l libshelf) Table(newTableName string) *libshelf {
	l.libshelfDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libshelf) As(alias string) *libshelf {
	l.libshelfDo.DO = *(l.libshelfDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libshelf) updateTableName(table string) *libshelf {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.Code = field.NewString(table, "Code")
	l.Name = field.NewString(table, "Name")
	l.ShelfNo = field.NewInt64(table, "ShelfNo")
	l.Side = field.NewString(table, "Side")
	l.RowIdentity = field.NewString(table, "RowIdentity")
	l.RfidReaderID = field.NewString(table, "RfidReaderId")
	l.SerialPortID = field.NewString(table, "SerialPortId")
	l.IsEnable = field.NewField(table, "IsEnable")
	l.X1 = field.NewFloat64(table, "X1")
	l.Y1 = field.NewFloat64(table, "Y1")
	l.X2 = field.NewFloat64(table, "X2")
	l.Y2 = field.NewFloat64(table, "Y2")
	l.Angel = field.NewFloat64(table, "Angel")
	l.StructID = field.NewString(table, "StructId")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.IsBosseyed = field.NewField(table, "IsBosseyed")

	l.fillFieldMap()

	return l
}

func (l *libshelf) WithContext(ctx context.Context) ILibshelfDo { return l.libshelfDo.WithContext(ctx) }

func (l libshelf) TableName() string { return l.libshelfDo.TableName() }

func (l libshelf) Alias() string { return l.libshelfDo.Alias() }

func (l *libshelf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libshelf) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 25)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["Code"] = l.Code
	l.fieldMap["Name"] = l.Name
	l.fieldMap["ShelfNo"] = l.ShelfNo
	l.fieldMap["Side"] = l.Side
	l.fieldMap["RowIdentity"] = l.RowIdentity
	l.fieldMap["RfidReaderId"] = l.RfidReaderID
	l.fieldMap["SerialPortId"] = l.SerialPortID
	l.fieldMap["IsEnable"] = l.IsEnable
	l.fieldMap["X1"] = l.X1
	l.fieldMap["Y1"] = l.Y1
	l.fieldMap["X2"] = l.X2
	l.fieldMap["Y2"] = l.Y2
	l.fieldMap["Angel"] = l.Angel
	l.fieldMap["StructId"] = l.StructID
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["IsBosseyed"] = l.IsBosseyed
}

func (l libshelf) clone(db *gorm.DB) libshelf {
	l.libshelfDo.ReplaceDB(db)
	return l
}

type libshelfDo struct{ gen.DO }

type ILibshelfDo interface {
	gen.SubQuery
	Debug() ILibshelfDo
	WithContext(ctx context.Context) ILibshelfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibshelfDo
	Not(conds ...gen.Condition) ILibshelfDo
	Or(conds ...gen.Condition) ILibshelfDo
	Select(conds ...field.Expr) ILibshelfDo
	Where(conds ...gen.Condition) ILibshelfDo
	Order(conds ...field.Expr) ILibshelfDo
	Distinct(cols ...field.Expr) ILibshelfDo
	Omit(cols ...field.Expr) ILibshelfDo
	Join(table schema.Tabler, on ...field.Expr) ILibshelfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibshelfDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibshelfDo
	Group(cols ...field.Expr) ILibshelfDo
	Having(conds ...gen.Condition) ILibshelfDo
	Limit(limit int) ILibshelfDo
	Offset(offset int) ILibshelfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibshelfDo
	Unscoped() ILibshelfDo
	Create(values ...*model.Libshelf) error
	CreateInBatches(values []*model.Libshelf, batchSize int) error
	Save(values ...*model.Libshelf) error
	First() (*model.Libshelf, error)
	Take() (*model.Libshelf, error)
	Last() (*model.Libshelf, error)
	Find() ([]*model.Libshelf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libshelf, err error)
	FindInBatches(result *[]*model.Libshelf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libshelf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibshelfDo
	Assign(attrs ...field.AssignExpr) ILibshelfDo
	Joins(fields ...field.RelationField) ILibshelfDo
	Preload(fields ...field.RelationField) ILibshelfDo
	FirstOrInit() (*model.Libshelf, error)
	FirstOrCreate() (*model.Libshelf, error)
	FindByPage(offset int, limit int) (result []*model.Libshelf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibshelfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libshelfDo) Debug() ILibshelfDo {
	return l.withDO(l.DO.Debug())
}

func (l libshelfDo) WithContext(ctx context.Context) ILibshelfDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libshelfDo) ReadDB() ILibshelfDo {
	return l.Clauses(dbresolver.Read)
}

func (l libshelfDo) WriteDB() ILibshelfDo {
	return l.Clauses(dbresolver.Write)
}

func (l libshelfDo) Clauses(conds ...clause.Expression) ILibshelfDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libshelfDo) Returning(value interface{}, columns ...string) ILibshelfDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libshelfDo) Not(conds ...gen.Condition) ILibshelfDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libshelfDo) Or(conds ...gen.Condition) ILibshelfDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libshelfDo) Select(conds ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libshelfDo) Where(conds ...gen.Condition) ILibshelfDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libshelfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibshelfDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libshelfDo) Order(conds ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libshelfDo) Distinct(cols ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libshelfDo) Omit(cols ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libshelfDo) Join(table schema.Tabler, on ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libshelfDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libshelfDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libshelfDo) Group(cols ...field.Expr) ILibshelfDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libshelfDo) Having(conds ...gen.Condition) ILibshelfDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libshelfDo) Limit(limit int) ILibshelfDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libshelfDo) Offset(offset int) ILibshelfDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libshelfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibshelfDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libshelfDo) Unscoped() ILibshelfDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libshelfDo) Create(values ...*model.Libshelf) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libshelfDo) CreateInBatches(values []*model.Libshelf, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libshelfDo) Save(values ...*model.Libshelf) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libshelfDo) First() (*model.Libshelf, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelf), nil
	}
}

func (l libshelfDo) Take() (*model.Libshelf, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelf), nil
	}
}

func (l libshelfDo) Last() (*model.Libshelf, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelf), nil
	}
}

func (l libshelfDo) Find() ([]*model.Libshelf, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libshelf), err
}

func (l libshelfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libshelf, err error) {
	buf := make([]*model.Libshelf, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libshelfDo) FindInBatches(result *[]*model.Libshelf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libshelfDo) Attrs(attrs ...field.AssignExpr) ILibshelfDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libshelfDo) Assign(attrs ...field.AssignExpr) ILibshelfDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libshelfDo) Joins(fields ...field.RelationField) ILibshelfDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libshelfDo) Preload(fields ...field.RelationField) ILibshelfDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libshelfDo) FirstOrInit() (*model.Libshelf, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelf), nil
	}
}

func (l libshelfDo) FirstOrCreate() (*model.Libshelf, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libshelf), nil
	}
}

func (l libshelfDo) FindByPage(offset int, limit int) (result []*model.Libshelf, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libshelfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libshelfDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libshelfDo) Delete(models ...*model.Libshelf) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libshelfDo) withDO(do gen.Dao) *libshelfDo {
	l.DO = *do.(*gen.DO)
	return l
}
