// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemUserPosition(db *gorm.DB) systemUserPosition {
	_systemUserPosition := systemUserPosition{}

	_systemUserPosition.systemUserPositionDo.UseDB(db)
	_systemUserPosition.systemUserPositionDo.UseModel(&model.SystemUserPosition{})

	tableName := _systemUserPosition.systemUserPositionDo.TableName()
	_systemUserPosition.ALL = field.NewAsterisk(tableName)
	_systemUserPosition.ID = field.NewInt64(tableName, "id")
	_systemUserPosition.UserID = field.NewInt64(tableName, "user_id")
	_systemUserPosition.PositionID = field.NewInt64(tableName, "position_id")

	_systemUserPosition.fillFieldMap()

	return _systemUserPosition
}

type systemUserPosition struct {
	systemUserPositionDo systemUserPositionDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	PositionID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemUserPosition) Table(newTableName string) *systemUserPosition {
	s.systemUserPositionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserPosition) As(alias string) *systemUserPosition {
	s.systemUserPositionDo.DO = *(s.systemUserPositionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserPosition) updateTableName(table string) *systemUserPosition {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.PositionID = field.NewInt64(table, "position_id")

	s.fillFieldMap()

	return s
}

func (s *systemUserPosition) WithContext(ctx context.Context) ISystemUserPositionDo {
	return s.systemUserPositionDo.WithContext(ctx)
}

func (s systemUserPosition) TableName() string { return s.systemUserPositionDo.TableName() }

func (s systemUserPosition) Alias() string { return s.systemUserPositionDo.Alias() }

func (s *systemUserPosition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserPosition) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["position_id"] = s.PositionID
}

func (s systemUserPosition) clone(db *gorm.DB) systemUserPosition {
	s.systemUserPositionDo.ReplaceDB(db)
	return s
}

type systemUserPositionDo struct{ gen.DO }

type ISystemUserPositionDo interface {
	gen.SubQuery
	Debug() ISystemUserPositionDo
	WithContext(ctx context.Context) ISystemUserPositionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserPositionDo
	Not(conds ...gen.Condition) ISystemUserPositionDo
	Or(conds ...gen.Condition) ISystemUserPositionDo
	Select(conds ...field.Expr) ISystemUserPositionDo
	Where(conds ...gen.Condition) ISystemUserPositionDo
	Order(conds ...field.Expr) ISystemUserPositionDo
	Distinct(cols ...field.Expr) ISystemUserPositionDo
	Omit(cols ...field.Expr) ISystemUserPositionDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserPositionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserPositionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserPositionDo
	Group(cols ...field.Expr) ISystemUserPositionDo
	Having(conds ...gen.Condition) ISystemUserPositionDo
	Limit(limit int) ISystemUserPositionDo
	Offset(offset int) ISystemUserPositionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserPositionDo
	Unscoped() ISystemUserPositionDo
	Create(values ...*model.SystemUserPosition) error
	CreateInBatches(values []*model.SystemUserPosition, batchSize int) error
	Save(values ...*model.SystemUserPosition) error
	First() (*model.SystemUserPosition, error)
	Take() (*model.SystemUserPosition, error)
	Last() (*model.SystemUserPosition, error)
	Find() ([]*model.SystemUserPosition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserPosition, err error)
	FindInBatches(result *[]*model.SystemUserPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserPosition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserPositionDo
	Assign(attrs ...field.AssignExpr) ISystemUserPositionDo
	Joins(fields ...field.RelationField) ISystemUserPositionDo
	Preload(fields ...field.RelationField) ISystemUserPositionDo
	FirstOrInit() (*model.SystemUserPosition, error)
	FirstOrCreate() (*model.SystemUserPosition, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserPosition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserPositionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserPositionDo) Debug() ISystemUserPositionDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserPositionDo) WithContext(ctx context.Context) ISystemUserPositionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserPositionDo) ReadDB() ISystemUserPositionDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserPositionDo) WriteDB() ISystemUserPositionDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserPositionDo) Clauses(conds ...clause.Expression) ISystemUserPositionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserPositionDo) Returning(value interface{}, columns ...string) ISystemUserPositionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserPositionDo) Not(conds ...gen.Condition) ISystemUserPositionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserPositionDo) Or(conds ...gen.Condition) ISystemUserPositionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserPositionDo) Select(conds ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserPositionDo) Where(conds ...gen.Condition) ISystemUserPositionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserPositionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemUserPositionDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemUserPositionDo) Order(conds ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserPositionDo) Distinct(cols ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserPositionDo) Omit(cols ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserPositionDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserPositionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserPositionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserPositionDo) Group(cols ...field.Expr) ISystemUserPositionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserPositionDo) Having(conds ...gen.Condition) ISystemUserPositionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserPositionDo) Limit(limit int) ISystemUserPositionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserPositionDo) Offset(offset int) ISystemUserPositionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserPositionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserPositionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserPositionDo) Unscoped() ISystemUserPositionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserPositionDo) Create(values ...*model.SystemUserPosition) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserPositionDo) CreateInBatches(values []*model.SystemUserPosition, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserPositionDo) Save(values ...*model.SystemUserPosition) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserPositionDo) First() (*model.SystemUserPosition, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserPosition), nil
	}
}

func (s systemUserPositionDo) Take() (*model.SystemUserPosition, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserPosition), nil
	}
}

func (s systemUserPositionDo) Last() (*model.SystemUserPosition, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserPosition), nil
	}
}

func (s systemUserPositionDo) Find() ([]*model.SystemUserPosition, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserPosition), err
}

func (s systemUserPositionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserPosition, err error) {
	buf := make([]*model.SystemUserPosition, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserPositionDo) FindInBatches(result *[]*model.SystemUserPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserPositionDo) Attrs(attrs ...field.AssignExpr) ISystemUserPositionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserPositionDo) Assign(attrs ...field.AssignExpr) ISystemUserPositionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserPositionDo) Joins(fields ...field.RelationField) ISystemUserPositionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserPositionDo) Preload(fields ...field.RelationField) ISystemUserPositionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserPositionDo) FirstOrInit() (*model.SystemUserPosition, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserPosition), nil
	}
}

func (s systemUserPositionDo) FirstOrCreate() (*model.SystemUserPosition, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserPosition), nil
	}
}

func (s systemUserPositionDo) FindByPage(offset int, limit int) (result []*model.SystemUserPosition, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserPositionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserPositionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserPositionDo) Delete(models ...*model.SystemUserPosition) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserPositionDo) withDO(do gen.Dao) *systemUserPositionDo {
	s.DO = *do.(*gen.DO)
	return s
}
