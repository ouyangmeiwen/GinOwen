// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibitemlocinfo(db *gorm.DB) libitemlocinfo {
	_libitemlocinfo := libitemlocinfo{}

	_libitemlocinfo.libitemlocinfoDo.UseDB(db)
	_libitemlocinfo.libitemlocinfoDo.UseModel(&model.Libitemlocinfo{})

	tableName := _libitemlocinfo.libitemlocinfoDo.TableName()
	_libitemlocinfo.ALL = field.NewAsterisk(tableName)
	_libitemlocinfo.ID = field.NewString(tableName, "Id")
	_libitemlocinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libitemlocinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libitemlocinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libitemlocinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libitemlocinfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libitemlocinfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libitemlocinfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libitemlocinfo.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libitemlocinfo.ItemCallNo = field.NewString(tableName, "ItemCallNo")
	_libitemlocinfo.PreCallNo = field.NewString(tableName, "PreCallNo")
	_libitemlocinfo.LayerID = field.NewString(tableName, "LayerId")
	_libitemlocinfo.IsPreFlag = field.NewField(tableName, "IsPreFlag")
	_libitemlocinfo.Remark = field.NewString(tableName, "Remark")
	_libitemlocinfo.TenantID = field.NewInt64(tableName, "TenantId")
	_libitemlocinfo.IsForceSort = field.NewField(tableName, "IsForceSort")
	_libitemlocinfo.LayerCode = field.NewString(tableName, "LayerCode")
	_libitemlocinfo.OCRItemTitle = field.NewString(tableName, "OCRItemTitle")
	_libitemlocinfo.OriginType = field.NewInt64(tableName, "OriginType")

	_libitemlocinfo.fillFieldMap()

	return _libitemlocinfo
}

type libitemlocinfo struct {
	libitemlocinfoDo libitemlocinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ItemBarcode          field.String
	ItemCallNo           field.String
	PreCallNo            field.String
	LayerID              field.String
	IsPreFlag            field.Field
	Remark               field.String
	TenantID             field.Int64
	IsForceSort          field.Field
	LayerCode            field.String
	OCRItemTitle         field.String
	OriginType           field.Int64

	fieldMap map[string]field.Expr
}

func (l libitemlocinfo) Table(newTableName string) *libitemlocinfo {
	l.libitemlocinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libitemlocinfo) As(alias string) *libitemlocinfo {
	l.libitemlocinfoDo.DO = *(l.libitemlocinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libitemlocinfo) updateTableName(table string) *libitemlocinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemCallNo = field.NewString(table, "ItemCallNo")
	l.PreCallNo = field.NewString(table, "PreCallNo")
	l.LayerID = field.NewString(table, "LayerId")
	l.IsPreFlag = field.NewField(table, "IsPreFlag")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.IsForceSort = field.NewField(table, "IsForceSort")
	l.LayerCode = field.NewString(table, "LayerCode")
	l.OCRItemTitle = field.NewString(table, "OCRItemTitle")
	l.OriginType = field.NewInt64(table, "OriginType")

	l.fillFieldMap()

	return l
}

func (l *libitemlocinfo) WithContext(ctx context.Context) ILibitemlocinfoDo {
	return l.libitemlocinfoDo.WithContext(ctx)
}

func (l libitemlocinfo) TableName() string { return l.libitemlocinfoDo.TableName() }

func (l libitemlocinfo) Alias() string { return l.libitemlocinfoDo.Alias() }

func (l *libitemlocinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libitemlocinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 19)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemCallNo"] = l.ItemCallNo
	l.fieldMap["PreCallNo"] = l.PreCallNo
	l.fieldMap["LayerId"] = l.LayerID
	l.fieldMap["IsPreFlag"] = l.IsPreFlag
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["IsForceSort"] = l.IsForceSort
	l.fieldMap["LayerCode"] = l.LayerCode
	l.fieldMap["OCRItemTitle"] = l.OCRItemTitle
	l.fieldMap["OriginType"] = l.OriginType
}

func (l libitemlocinfo) clone(db *gorm.DB) libitemlocinfo {
	l.libitemlocinfoDo.ReplaceDB(db)
	return l
}

type libitemlocinfoDo struct{ gen.DO }

type ILibitemlocinfoDo interface {
	gen.SubQuery
	Debug() ILibitemlocinfoDo
	WithContext(ctx context.Context) ILibitemlocinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibitemlocinfoDo
	Not(conds ...gen.Condition) ILibitemlocinfoDo
	Or(conds ...gen.Condition) ILibitemlocinfoDo
	Select(conds ...field.Expr) ILibitemlocinfoDo
	Where(conds ...gen.Condition) ILibitemlocinfoDo
	Order(conds ...field.Expr) ILibitemlocinfoDo
	Distinct(cols ...field.Expr) ILibitemlocinfoDo
	Omit(cols ...field.Expr) ILibitemlocinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibitemlocinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemlocinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibitemlocinfoDo
	Group(cols ...field.Expr) ILibitemlocinfoDo
	Having(conds ...gen.Condition) ILibitemlocinfoDo
	Limit(limit int) ILibitemlocinfoDo
	Offset(offset int) ILibitemlocinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemlocinfoDo
	Unscoped() ILibitemlocinfoDo
	Create(values ...*model.Libitemlocinfo) error
	CreateInBatches(values []*model.Libitemlocinfo, batchSize int) error
	Save(values ...*model.Libitemlocinfo) error
	First() (*model.Libitemlocinfo, error)
	Take() (*model.Libitemlocinfo, error)
	Last() (*model.Libitemlocinfo, error)
	Find() ([]*model.Libitemlocinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitemlocinfo, err error)
	FindInBatches(result *[]*model.Libitemlocinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libitemlocinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibitemlocinfoDo
	Assign(attrs ...field.AssignExpr) ILibitemlocinfoDo
	Joins(fields ...field.RelationField) ILibitemlocinfoDo
	Preload(fields ...field.RelationField) ILibitemlocinfoDo
	FirstOrInit() (*model.Libitemlocinfo, error)
	FirstOrCreate() (*model.Libitemlocinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libitemlocinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibitemlocinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libitemlocinfoDo) Debug() ILibitemlocinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libitemlocinfoDo) WithContext(ctx context.Context) ILibitemlocinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libitemlocinfoDo) ReadDB() ILibitemlocinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libitemlocinfoDo) WriteDB() ILibitemlocinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libitemlocinfoDo) Clauses(conds ...clause.Expression) ILibitemlocinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libitemlocinfoDo) Returning(value interface{}, columns ...string) ILibitemlocinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libitemlocinfoDo) Not(conds ...gen.Condition) ILibitemlocinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libitemlocinfoDo) Or(conds ...gen.Condition) ILibitemlocinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libitemlocinfoDo) Select(conds ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libitemlocinfoDo) Where(conds ...gen.Condition) ILibitemlocinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libitemlocinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibitemlocinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libitemlocinfoDo) Order(conds ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libitemlocinfoDo) Distinct(cols ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libitemlocinfoDo) Omit(cols ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libitemlocinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libitemlocinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libitemlocinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libitemlocinfoDo) Group(cols ...field.Expr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libitemlocinfoDo) Having(conds ...gen.Condition) ILibitemlocinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libitemlocinfoDo) Limit(limit int) ILibitemlocinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libitemlocinfoDo) Offset(offset int) ILibitemlocinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libitemlocinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemlocinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libitemlocinfoDo) Unscoped() ILibitemlocinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libitemlocinfoDo) Create(values ...*model.Libitemlocinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libitemlocinfoDo) CreateInBatches(values []*model.Libitemlocinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libitemlocinfoDo) Save(values ...*model.Libitemlocinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libitemlocinfoDo) First() (*model.Libitemlocinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemlocinfo), nil
	}
}

func (l libitemlocinfoDo) Take() (*model.Libitemlocinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemlocinfo), nil
	}
}

func (l libitemlocinfoDo) Last() (*model.Libitemlocinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemlocinfo), nil
	}
}

func (l libitemlocinfoDo) Find() ([]*model.Libitemlocinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libitemlocinfo), err
}

func (l libitemlocinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitemlocinfo, err error) {
	buf := make([]*model.Libitemlocinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libitemlocinfoDo) FindInBatches(result *[]*model.Libitemlocinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libitemlocinfoDo) Attrs(attrs ...field.AssignExpr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libitemlocinfoDo) Assign(attrs ...field.AssignExpr) ILibitemlocinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libitemlocinfoDo) Joins(fields ...field.RelationField) ILibitemlocinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libitemlocinfoDo) Preload(fields ...field.RelationField) ILibitemlocinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libitemlocinfoDo) FirstOrInit() (*model.Libitemlocinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemlocinfo), nil
	}
}

func (l libitemlocinfoDo) FirstOrCreate() (*model.Libitemlocinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemlocinfo), nil
	}
}

func (l libitemlocinfoDo) FindByPage(offset int, limit int) (result []*model.Libitemlocinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libitemlocinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libitemlocinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libitemlocinfoDo) Delete(models ...*model.Libitemlocinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libitemlocinfoDo) withDO(do gen.Dao) *libitemlocinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
