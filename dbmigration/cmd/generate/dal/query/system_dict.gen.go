// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemDict(db *gorm.DB) systemDict {
	_systemDict := systemDict{}

	_systemDict.systemDictDo.UseDB(db)
	_systemDict.systemDictDo.UseModel(&model.SystemDict{})

	tableName := _systemDict.systemDictDo.TableName()
	_systemDict.ALL = field.NewAsterisk(tableName)
	_systemDict.ID = field.NewInt64(tableName, "id")
	_systemDict.CreateTime = field.NewTime(tableName, "create_time")
	_systemDict.UpdateTime = field.NewTime(tableName, "update_time")
	_systemDict.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_systemDict.Name = field.NewString(tableName, "name")
	_systemDict.Code = field.NewString(tableName, "code")
	_systemDict.Description = field.NewString(tableName, "description")
	_systemDict.Sort = field.NewInt64(tableName, "sort")
	_systemDict.IsUsed = field.NewInt64(tableName, "is_used")
	_systemDict.ParentID = field.NewInt64(tableName, "parent_id")
	_systemDict.TypeID = field.NewInt64(tableName, "type_id")

	_systemDict.fillFieldMap()

	return _systemDict
}

type systemDict struct {
	systemDictDo systemDictDo

	ALL         field.Asterisk
	ID          field.Int64
	CreateTime  field.Time
	UpdateTime  field.Time
	IsDeleted   field.Int64
	Name        field.String
	Code        field.String
	Description field.String
	Sort        field.Int64
	IsUsed      field.Int64
	ParentID    field.Int64
	TypeID      field.Int64

	fieldMap map[string]field.Expr
}

func (s systemDict) Table(newTableName string) *systemDict {
	s.systemDictDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemDict) As(alias string) *systemDict {
	s.systemDictDo.DO = *(s.systemDictDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemDict) updateTableName(table string) *systemDict {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Description = field.NewString(table, "description")
	s.Sort = field.NewInt64(table, "sort")
	s.IsUsed = field.NewInt64(table, "is_used")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.TypeID = field.NewInt64(table, "type_id")

	s.fillFieldMap()

	return s
}

func (s *systemDict) WithContext(ctx context.Context) ISystemDictDo {
	return s.systemDictDo.WithContext(ctx)
}

func (s systemDict) TableName() string { return s.systemDictDo.TableName() }

func (s systemDict) Alias() string { return s.systemDictDo.Alias() }

func (s *systemDict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemDict) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["description"] = s.Description
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["is_used"] = s.IsUsed
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["type_id"] = s.TypeID
}

func (s systemDict) clone(db *gorm.DB) systemDict {
	s.systemDictDo.ReplaceDB(db)
	return s
}

type systemDictDo struct{ gen.DO }

type ISystemDictDo interface {
	gen.SubQuery
	Debug() ISystemDictDo
	WithContext(ctx context.Context) ISystemDictDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemDictDo
	Not(conds ...gen.Condition) ISystemDictDo
	Or(conds ...gen.Condition) ISystemDictDo
	Select(conds ...field.Expr) ISystemDictDo
	Where(conds ...gen.Condition) ISystemDictDo
	Order(conds ...field.Expr) ISystemDictDo
	Distinct(cols ...field.Expr) ISystemDictDo
	Omit(cols ...field.Expr) ISystemDictDo
	Join(table schema.Tabler, on ...field.Expr) ISystemDictDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemDictDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemDictDo
	Group(cols ...field.Expr) ISystemDictDo
	Having(conds ...gen.Condition) ISystemDictDo
	Limit(limit int) ISystemDictDo
	Offset(offset int) ISystemDictDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemDictDo
	Unscoped() ISystemDictDo
	Create(values ...*model.SystemDict) error
	CreateInBatches(values []*model.SystemDict, batchSize int) error
	Save(values ...*model.SystemDict) error
	First() (*model.SystemDict, error)
	Take() (*model.SystemDict, error)
	Last() (*model.SystemDict, error)
	Find() ([]*model.SystemDict, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemDict, err error)
	FindInBatches(result *[]*model.SystemDict, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemDict) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemDictDo
	Assign(attrs ...field.AssignExpr) ISystemDictDo
	Joins(fields ...field.RelationField) ISystemDictDo
	Preload(fields ...field.RelationField) ISystemDictDo
	FirstOrInit() (*model.SystemDict, error)
	FirstOrCreate() (*model.SystemDict, error)
	FindByPage(offset int, limit int) (result []*model.SystemDict, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemDictDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemDictDo) Debug() ISystemDictDo {
	return s.withDO(s.DO.Debug())
}

func (s systemDictDo) WithContext(ctx context.Context) ISystemDictDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemDictDo) ReadDB() ISystemDictDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemDictDo) WriteDB() ISystemDictDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemDictDo) Clauses(conds ...clause.Expression) ISystemDictDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemDictDo) Returning(value interface{}, columns ...string) ISystemDictDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemDictDo) Not(conds ...gen.Condition) ISystemDictDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemDictDo) Or(conds ...gen.Condition) ISystemDictDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemDictDo) Select(conds ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemDictDo) Where(conds ...gen.Condition) ISystemDictDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemDictDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemDictDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemDictDo) Order(conds ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemDictDo) Distinct(cols ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemDictDo) Omit(cols ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemDictDo) Join(table schema.Tabler, on ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemDictDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemDictDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemDictDo) Group(cols ...field.Expr) ISystemDictDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemDictDo) Having(conds ...gen.Condition) ISystemDictDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemDictDo) Limit(limit int) ISystemDictDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemDictDo) Offset(offset int) ISystemDictDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemDictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemDictDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemDictDo) Unscoped() ISystemDictDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemDictDo) Create(values ...*model.SystemDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemDictDo) CreateInBatches(values []*model.SystemDict, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemDictDo) Save(values ...*model.SystemDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemDictDo) First() (*model.SystemDict, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDict), nil
	}
}

func (s systemDictDo) Take() (*model.SystemDict, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDict), nil
	}
}

func (s systemDictDo) Last() (*model.SystemDict, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDict), nil
	}
}

func (s systemDictDo) Find() ([]*model.SystemDict, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemDict), err
}

func (s systemDictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemDict, err error) {
	buf := make([]*model.SystemDict, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemDictDo) FindInBatches(result *[]*model.SystemDict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemDictDo) Attrs(attrs ...field.AssignExpr) ISystemDictDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemDictDo) Assign(attrs ...field.AssignExpr) ISystemDictDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemDictDo) Joins(fields ...field.RelationField) ISystemDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemDictDo) Preload(fields ...field.RelationField) ISystemDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemDictDo) FirstOrInit() (*model.SystemDict, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDict), nil
	}
}

func (s systemDictDo) FirstOrCreate() (*model.SystemDict, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemDict), nil
	}
}

func (s systemDictDo) FindByPage(offset int, limit int) (result []*model.SystemDict, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemDictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemDictDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemDictDo) Delete(models ...*model.SystemDict) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemDictDo) withDO(do gen.Dao) *systemDictDo {
	s.DO = *do.(*gen.DO)
	return s
}
