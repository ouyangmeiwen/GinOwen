// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAppweuser(db *gorm.DB) appweuser {
	_appweuser := appweuser{}

	_appweuser.appweuserDo.UseDB(db)
	_appweuser.appweuserDo.UseModel(&model.Appweuser{})

	tableName := _appweuser.appweuserDo.TableName()
	_appweuser.ALL = field.NewAsterisk(tableName)
	_appweuser.ID = field.NewString(tableName, "Id")
	_appweuser.CreationTime = field.NewTime(tableName, "CreationTime")
	_appweuser.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_appweuser.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_appweuser.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_appweuser.OpenID = field.NewString(tableName, "OpenId")
	_appweuser.NickName = field.NewString(tableName, "NickName")
	_appweuser.Sex = field.NewInt64(tableName, "Sex")
	_appweuser.Language = field.NewString(tableName, "Language")
	_appweuser.City = field.NewString(tableName, "City")
	_appweuser.Province = field.NewString(tableName, "Province")
	_appweuser.Country = field.NewString(tableName, "Country")
	_appweuser.HeadImgURL = field.NewString(tableName, "HeadImgUrl")
	_appweuser.Subscribe = field.NewInt64(tableName, "Subscribe")
	_appweuser.SubscribeTime = field.NewTime(tableName, "SubscribeTime")
	_appweuser.UnionID = field.NewString(tableName, "UnionId")
	_appweuser.Remark = field.NewString(tableName, "Remark")
	_appweuser.WeUserType = field.NewInt64(tableName, "WeUserType")
	_appweuser.TenantID = field.NewInt64(tableName, "TenantId")

	_appweuser.fillFieldMap()

	return _appweuser
}

type appweuser struct {
	appweuserDo appweuserDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	OpenID               field.String
	NickName             field.String
	Sex                  field.Int64
	Language             field.String
	City                 field.String
	Province             field.String
	Country              field.String
	HeadImgURL           field.String
	Subscribe            field.Int64
	SubscribeTime        field.Time
	UnionID              field.String
	Remark               field.String
	WeUserType           field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (a appweuser) Table(newTableName string) *appweuser {
	a.appweuserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appweuser) As(alias string) *appweuser {
	a.appweuserDo.DO = *(a.appweuserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appweuser) updateTableName(table string) *appweuser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.OpenID = field.NewString(table, "OpenId")
	a.NickName = field.NewString(table, "NickName")
	a.Sex = field.NewInt64(table, "Sex")
	a.Language = field.NewString(table, "Language")
	a.City = field.NewString(table, "City")
	a.Province = field.NewString(table, "Province")
	a.Country = field.NewString(table, "Country")
	a.HeadImgURL = field.NewString(table, "HeadImgUrl")
	a.Subscribe = field.NewInt64(table, "Subscribe")
	a.SubscribeTime = field.NewTime(table, "SubscribeTime")
	a.UnionID = field.NewString(table, "UnionId")
	a.Remark = field.NewString(table, "Remark")
	a.WeUserType = field.NewInt64(table, "WeUserType")
	a.TenantID = field.NewInt64(table, "TenantId")

	a.fillFieldMap()

	return a
}

func (a *appweuser) WithContext(ctx context.Context) IAppweuserDo {
	return a.appweuserDo.WithContext(ctx)
}

func (a appweuser) TableName() string { return a.appweuserDo.TableName() }

func (a appweuser) Alias() string { return a.appweuserDo.Alias() }

func (a *appweuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appweuser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 19)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["OpenId"] = a.OpenID
	a.fieldMap["NickName"] = a.NickName
	a.fieldMap["Sex"] = a.Sex
	a.fieldMap["Language"] = a.Language
	a.fieldMap["City"] = a.City
	a.fieldMap["Province"] = a.Province
	a.fieldMap["Country"] = a.Country
	a.fieldMap["HeadImgUrl"] = a.HeadImgURL
	a.fieldMap["Subscribe"] = a.Subscribe
	a.fieldMap["SubscribeTime"] = a.SubscribeTime
	a.fieldMap["UnionId"] = a.UnionID
	a.fieldMap["Remark"] = a.Remark
	a.fieldMap["WeUserType"] = a.WeUserType
	a.fieldMap["TenantId"] = a.TenantID
}

func (a appweuser) clone(db *gorm.DB) appweuser {
	a.appweuserDo.ReplaceDB(db)
	return a
}

type appweuserDo struct{ gen.DO }

type IAppweuserDo interface {
	gen.SubQuery
	Debug() IAppweuserDo
	WithContext(ctx context.Context) IAppweuserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppweuserDo
	Not(conds ...gen.Condition) IAppweuserDo
	Or(conds ...gen.Condition) IAppweuserDo
	Select(conds ...field.Expr) IAppweuserDo
	Where(conds ...gen.Condition) IAppweuserDo
	Order(conds ...field.Expr) IAppweuserDo
	Distinct(cols ...field.Expr) IAppweuserDo
	Omit(cols ...field.Expr) IAppweuserDo
	Join(table schema.Tabler, on ...field.Expr) IAppweuserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppweuserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppweuserDo
	Group(cols ...field.Expr) IAppweuserDo
	Having(conds ...gen.Condition) IAppweuserDo
	Limit(limit int) IAppweuserDo
	Offset(offset int) IAppweuserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppweuserDo
	Unscoped() IAppweuserDo
	Create(values ...*model.Appweuser) error
	CreateInBatches(values []*model.Appweuser, batchSize int) error
	Save(values ...*model.Appweuser) error
	First() (*model.Appweuser, error)
	Take() (*model.Appweuser, error)
	Last() (*model.Appweuser, error)
	Find() ([]*model.Appweuser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appweuser, err error)
	FindInBatches(result *[]*model.Appweuser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Appweuser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppweuserDo
	Assign(attrs ...field.AssignExpr) IAppweuserDo
	Joins(fields ...field.RelationField) IAppweuserDo
	Preload(fields ...field.RelationField) IAppweuserDo
	FirstOrInit() (*model.Appweuser, error)
	FirstOrCreate() (*model.Appweuser, error)
	FindByPage(offset int, limit int) (result []*model.Appweuser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppweuserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appweuserDo) Debug() IAppweuserDo {
	return a.withDO(a.DO.Debug())
}

func (a appweuserDo) WithContext(ctx context.Context) IAppweuserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appweuserDo) ReadDB() IAppweuserDo {
	return a.Clauses(dbresolver.Read)
}

func (a appweuserDo) WriteDB() IAppweuserDo {
	return a.Clauses(dbresolver.Write)
}

func (a appweuserDo) Clauses(conds ...clause.Expression) IAppweuserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appweuserDo) Returning(value interface{}, columns ...string) IAppweuserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appweuserDo) Not(conds ...gen.Condition) IAppweuserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appweuserDo) Or(conds ...gen.Condition) IAppweuserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appweuserDo) Select(conds ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appweuserDo) Where(conds ...gen.Condition) IAppweuserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appweuserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAppweuserDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a appweuserDo) Order(conds ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appweuserDo) Distinct(cols ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appweuserDo) Omit(cols ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appweuserDo) Join(table schema.Tabler, on ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appweuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appweuserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appweuserDo) Group(cols ...field.Expr) IAppweuserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appweuserDo) Having(conds ...gen.Condition) IAppweuserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appweuserDo) Limit(limit int) IAppweuserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appweuserDo) Offset(offset int) IAppweuserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appweuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppweuserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appweuserDo) Unscoped() IAppweuserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appweuserDo) Create(values ...*model.Appweuser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appweuserDo) CreateInBatches(values []*model.Appweuser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appweuserDo) Save(values ...*model.Appweuser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appweuserDo) First() (*model.Appweuser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appweuser), nil
	}
}

func (a appweuserDo) Take() (*model.Appweuser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appweuser), nil
	}
}

func (a appweuserDo) Last() (*model.Appweuser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appweuser), nil
	}
}

func (a appweuserDo) Find() ([]*model.Appweuser, error) {
	result, err := a.DO.Find()
	return result.([]*model.Appweuser), err
}

func (a appweuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Appweuser, err error) {
	buf := make([]*model.Appweuser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appweuserDo) FindInBatches(result *[]*model.Appweuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appweuserDo) Attrs(attrs ...field.AssignExpr) IAppweuserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appweuserDo) Assign(attrs ...field.AssignExpr) IAppweuserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appweuserDo) Joins(fields ...field.RelationField) IAppweuserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appweuserDo) Preload(fields ...field.RelationField) IAppweuserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appweuserDo) FirstOrInit() (*model.Appweuser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appweuser), nil
	}
}

func (a appweuserDo) FirstOrCreate() (*model.Appweuser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Appweuser), nil
	}
}

func (a appweuserDo) FindByPage(offset int, limit int) (result []*model.Appweuser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appweuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appweuserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appweuserDo) Delete(models ...*model.Appweuser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appweuserDo) withDO(do gen.Dao) *appweuserDo {
	a.DO = *do.(*gen.DO)
	return a
}
