// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSystemUserUserPermission(db *gorm.DB) systemUserUserPermission {
	_systemUserUserPermission := systemUserUserPermission{}

	_systemUserUserPermission.systemUserUserPermissionDo.UseDB(db)
	_systemUserUserPermission.systemUserUserPermissionDo.UseModel(&model.SystemUserUserPermission{})

	tableName := _systemUserUserPermission.systemUserUserPermissionDo.TableName()
	_systemUserUserPermission.ALL = field.NewAsterisk(tableName)
	_systemUserUserPermission.ID = field.NewInt64(tableName, "id")
	_systemUserUserPermission.UserID = field.NewInt64(tableName, "user_id")
	_systemUserUserPermission.PermissionID = field.NewInt64(tableName, "permission_id")

	_systemUserUserPermission.fillFieldMap()

	return _systemUserUserPermission
}

type systemUserUserPermission struct {
	systemUserUserPermissionDo systemUserUserPermissionDo

	ALL          field.Asterisk
	ID           field.Int64
	UserID       field.Int64
	PermissionID field.Int64

	fieldMap map[string]field.Expr
}

func (s systemUserUserPermission) Table(newTableName string) *systemUserUserPermission {
	s.systemUserUserPermissionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserUserPermission) As(alias string) *systemUserUserPermission {
	s.systemUserUserPermissionDo.DO = *(s.systemUserUserPermissionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserUserPermission) updateTableName(table string) *systemUserUserPermission {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.PermissionID = field.NewInt64(table, "permission_id")

	s.fillFieldMap()

	return s
}

func (s *systemUserUserPermission) WithContext(ctx context.Context) ISystemUserUserPermissionDo {
	return s.systemUserUserPermissionDo.WithContext(ctx)
}

func (s systemUserUserPermission) TableName() string { return s.systemUserUserPermissionDo.TableName() }

func (s systemUserUserPermission) Alias() string { return s.systemUserUserPermissionDo.Alias() }

func (s *systemUserUserPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserUserPermission) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["permission_id"] = s.PermissionID
}

func (s systemUserUserPermission) clone(db *gorm.DB) systemUserUserPermission {
	s.systemUserUserPermissionDo.ReplaceDB(db)
	return s
}

type systemUserUserPermissionDo struct{ gen.DO }

type ISystemUserUserPermissionDo interface {
	gen.SubQuery
	Debug() ISystemUserUserPermissionDo
	WithContext(ctx context.Context) ISystemUserUserPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserUserPermissionDo
	Not(conds ...gen.Condition) ISystemUserUserPermissionDo
	Or(conds ...gen.Condition) ISystemUserUserPermissionDo
	Select(conds ...field.Expr) ISystemUserUserPermissionDo
	Where(conds ...gen.Condition) ISystemUserUserPermissionDo
	Order(conds ...field.Expr) ISystemUserUserPermissionDo
	Distinct(cols ...field.Expr) ISystemUserUserPermissionDo
	Omit(cols ...field.Expr) ISystemUserUserPermissionDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserUserPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserUserPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserUserPermissionDo
	Group(cols ...field.Expr) ISystemUserUserPermissionDo
	Having(conds ...gen.Condition) ISystemUserUserPermissionDo
	Limit(limit int) ISystemUserUserPermissionDo
	Offset(offset int) ISystemUserUserPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserUserPermissionDo
	Unscoped() ISystemUserUserPermissionDo
	Create(values ...*model.SystemUserUserPermission) error
	CreateInBatches(values []*model.SystemUserUserPermission, batchSize int) error
	Save(values ...*model.SystemUserUserPermission) error
	First() (*model.SystemUserUserPermission, error)
	Take() (*model.SystemUserUserPermission, error)
	Last() (*model.SystemUserUserPermission, error)
	Find() ([]*model.SystemUserUserPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserUserPermission, err error)
	FindInBatches(result *[]*model.SystemUserUserPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserUserPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserUserPermissionDo
	Assign(attrs ...field.AssignExpr) ISystemUserUserPermissionDo
	Joins(fields ...field.RelationField) ISystemUserUserPermissionDo
	Preload(fields ...field.RelationField) ISystemUserUserPermissionDo
	FirstOrInit() (*model.SystemUserUserPermission, error)
	FirstOrCreate() (*model.SystemUserUserPermission, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserUserPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserUserPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserUserPermissionDo) Debug() ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserUserPermissionDo) WithContext(ctx context.Context) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserUserPermissionDo) ReadDB() ISystemUserUserPermissionDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserUserPermissionDo) WriteDB() ISystemUserUserPermissionDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserUserPermissionDo) Clauses(conds ...clause.Expression) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserUserPermissionDo) Returning(value interface{}, columns ...string) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserUserPermissionDo) Not(conds ...gen.Condition) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserUserPermissionDo) Or(conds ...gen.Condition) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserUserPermissionDo) Select(conds ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserUserPermissionDo) Where(conds ...gen.Condition) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserUserPermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISystemUserUserPermissionDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemUserUserPermissionDo) Order(conds ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserUserPermissionDo) Distinct(cols ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserUserPermissionDo) Omit(cols ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserUserPermissionDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserUserPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserUserPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserUserPermissionDo) Group(cols ...field.Expr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserUserPermissionDo) Having(conds ...gen.Condition) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserUserPermissionDo) Limit(limit int) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserUserPermissionDo) Offset(offset int) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserUserPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserUserPermissionDo) Unscoped() ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserUserPermissionDo) Create(values ...*model.SystemUserUserPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserUserPermissionDo) CreateInBatches(values []*model.SystemUserUserPermission, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserUserPermissionDo) Save(values ...*model.SystemUserUserPermission) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserUserPermissionDo) First() (*model.SystemUserUserPermission, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserUserPermission), nil
	}
}

func (s systemUserUserPermissionDo) Take() (*model.SystemUserUserPermission, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserUserPermission), nil
	}
}

func (s systemUserUserPermissionDo) Last() (*model.SystemUserUserPermission, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserUserPermission), nil
	}
}

func (s systemUserUserPermissionDo) Find() ([]*model.SystemUserUserPermission, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserUserPermission), err
}

func (s systemUserUserPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserUserPermission, err error) {
	buf := make([]*model.SystemUserUserPermission, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserUserPermissionDo) FindInBatches(result *[]*model.SystemUserUserPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserUserPermissionDo) Attrs(attrs ...field.AssignExpr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserUserPermissionDo) Assign(attrs ...field.AssignExpr) ISystemUserUserPermissionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserUserPermissionDo) Joins(fields ...field.RelationField) ISystemUserUserPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserUserPermissionDo) Preload(fields ...field.RelationField) ISystemUserUserPermissionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserUserPermissionDo) FirstOrInit() (*model.SystemUserUserPermission, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserUserPermission), nil
	}
}

func (s systemUserUserPermissionDo) FirstOrCreate() (*model.SystemUserUserPermission, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserUserPermission), nil
	}
}

func (s systemUserUserPermissionDo) FindByPage(offset int, limit int) (result []*model.SystemUserUserPermission, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserUserPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserUserPermissionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserUserPermissionDo) Delete(models ...*model.SystemUserUserPermission) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserUserPermissionDo) withDO(do gen.Dao) *systemUserUserPermissionDo {
	s.DO = *do.(*gen.DO)
	return s
}
