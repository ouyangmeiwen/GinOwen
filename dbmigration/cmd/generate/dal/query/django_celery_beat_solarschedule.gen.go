// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDjangoCeleryBeatSolarschedule(db *gorm.DB) djangoCeleryBeatSolarschedule {
	_djangoCeleryBeatSolarschedule := djangoCeleryBeatSolarschedule{}

	_djangoCeleryBeatSolarschedule.djangoCeleryBeatSolarscheduleDo.UseDB(db)
	_djangoCeleryBeatSolarschedule.djangoCeleryBeatSolarscheduleDo.UseModel(&model.DjangoCeleryBeatSolarschedule{})

	tableName := _djangoCeleryBeatSolarschedule.djangoCeleryBeatSolarscheduleDo.TableName()
	_djangoCeleryBeatSolarschedule.ALL = field.NewAsterisk(tableName)
	_djangoCeleryBeatSolarschedule.ID = field.NewInt64(tableName, "id")
	_djangoCeleryBeatSolarschedule.Event = field.NewString(tableName, "event")
	_djangoCeleryBeatSolarschedule.Latitude = field.NewFloat64(tableName, "latitude")
	_djangoCeleryBeatSolarschedule.Longitude = field.NewFloat64(tableName, "longitude")

	_djangoCeleryBeatSolarschedule.fillFieldMap()

	return _djangoCeleryBeatSolarschedule
}

type djangoCeleryBeatSolarschedule struct {
	djangoCeleryBeatSolarscheduleDo djangoCeleryBeatSolarscheduleDo

	ALL       field.Asterisk
	ID        field.Int64
	Event     field.String
	Latitude  field.Float64
	Longitude field.Float64

	fieldMap map[string]field.Expr
}

func (d djangoCeleryBeatSolarschedule) Table(newTableName string) *djangoCeleryBeatSolarschedule {
	d.djangoCeleryBeatSolarscheduleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoCeleryBeatSolarschedule) As(alias string) *djangoCeleryBeatSolarschedule {
	d.djangoCeleryBeatSolarscheduleDo.DO = *(d.djangoCeleryBeatSolarscheduleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoCeleryBeatSolarschedule) updateTableName(table string) *djangoCeleryBeatSolarschedule {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Event = field.NewString(table, "event")
	d.Latitude = field.NewFloat64(table, "latitude")
	d.Longitude = field.NewFloat64(table, "longitude")

	d.fillFieldMap()

	return d
}

func (d *djangoCeleryBeatSolarschedule) WithContext(ctx context.Context) IDjangoCeleryBeatSolarscheduleDo {
	return d.djangoCeleryBeatSolarscheduleDo.WithContext(ctx)
}

func (d djangoCeleryBeatSolarschedule) TableName() string {
	return d.djangoCeleryBeatSolarscheduleDo.TableName()
}

func (d djangoCeleryBeatSolarschedule) Alias() string {
	return d.djangoCeleryBeatSolarscheduleDo.Alias()
}

func (d *djangoCeleryBeatSolarschedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoCeleryBeatSolarschedule) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["event"] = d.Event
	d.fieldMap["latitude"] = d.Latitude
	d.fieldMap["longitude"] = d.Longitude
}

func (d djangoCeleryBeatSolarschedule) clone(db *gorm.DB) djangoCeleryBeatSolarschedule {
	d.djangoCeleryBeatSolarscheduleDo.ReplaceDB(db)
	return d
}

type djangoCeleryBeatSolarscheduleDo struct{ gen.DO }

type IDjangoCeleryBeatSolarscheduleDo interface {
	gen.SubQuery
	Debug() IDjangoCeleryBeatSolarscheduleDo
	WithContext(ctx context.Context) IDjangoCeleryBeatSolarscheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoCeleryBeatSolarscheduleDo
	Not(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo
	Or(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo
	Select(conds ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	Where(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo
	Order(conds ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	Distinct(cols ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	Omit(cols ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	Group(cols ...field.Expr) IDjangoCeleryBeatSolarscheduleDo
	Having(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo
	Limit(limit int) IDjangoCeleryBeatSolarscheduleDo
	Offset(offset int) IDjangoCeleryBeatSolarscheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatSolarscheduleDo
	Unscoped() IDjangoCeleryBeatSolarscheduleDo
	Create(values ...*model.DjangoCeleryBeatSolarschedule) error
	CreateInBatches(values []*model.DjangoCeleryBeatSolarschedule, batchSize int) error
	Save(values ...*model.DjangoCeleryBeatSolarschedule) error
	First() (*model.DjangoCeleryBeatSolarschedule, error)
	Take() (*model.DjangoCeleryBeatSolarschedule, error)
	Last() (*model.DjangoCeleryBeatSolarschedule, error)
	Find() ([]*model.DjangoCeleryBeatSolarschedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatSolarschedule, err error)
	FindInBatches(result *[]*model.DjangoCeleryBeatSolarschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoCeleryBeatSolarschedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatSolarscheduleDo
	Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatSolarscheduleDo
	Joins(fields ...field.RelationField) IDjangoCeleryBeatSolarscheduleDo
	Preload(fields ...field.RelationField) IDjangoCeleryBeatSolarscheduleDo
	FirstOrInit() (*model.DjangoCeleryBeatSolarschedule, error)
	FirstOrCreate() (*model.DjangoCeleryBeatSolarschedule, error)
	FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatSolarschedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoCeleryBeatSolarscheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoCeleryBeatSolarscheduleDo) Debug() IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoCeleryBeatSolarscheduleDo) WithContext(ctx context.Context) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoCeleryBeatSolarscheduleDo) ReadDB() IDjangoCeleryBeatSolarscheduleDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoCeleryBeatSolarscheduleDo) WriteDB() IDjangoCeleryBeatSolarscheduleDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoCeleryBeatSolarscheduleDo) Clauses(conds ...clause.Expression) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Returning(value interface{}, columns ...string) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoCeleryBeatSolarscheduleDo) Not(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Or(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Select(conds ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Where(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoCeleryBeatSolarscheduleDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoCeleryBeatSolarscheduleDo) Order(conds ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Distinct(cols ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoCeleryBeatSolarscheduleDo) Omit(cols ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoCeleryBeatSolarscheduleDo) Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoCeleryBeatSolarscheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoCeleryBeatSolarscheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoCeleryBeatSolarscheduleDo) Group(cols ...field.Expr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoCeleryBeatSolarscheduleDo) Having(conds ...gen.Condition) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoCeleryBeatSolarscheduleDo) Limit(limit int) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoCeleryBeatSolarscheduleDo) Offset(offset int) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoCeleryBeatSolarscheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoCeleryBeatSolarscheduleDo) Unscoped() IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoCeleryBeatSolarscheduleDo) Create(values ...*model.DjangoCeleryBeatSolarschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoCeleryBeatSolarscheduleDo) CreateInBatches(values []*model.DjangoCeleryBeatSolarschedule, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoCeleryBeatSolarscheduleDo) Save(values ...*model.DjangoCeleryBeatSolarschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoCeleryBeatSolarscheduleDo) First() (*model.DjangoCeleryBeatSolarschedule, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatSolarschedule), nil
	}
}

func (d djangoCeleryBeatSolarscheduleDo) Take() (*model.DjangoCeleryBeatSolarschedule, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatSolarschedule), nil
	}
}

func (d djangoCeleryBeatSolarscheduleDo) Last() (*model.DjangoCeleryBeatSolarschedule, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatSolarschedule), nil
	}
}

func (d djangoCeleryBeatSolarscheduleDo) Find() ([]*model.DjangoCeleryBeatSolarschedule, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoCeleryBeatSolarschedule), err
}

func (d djangoCeleryBeatSolarscheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatSolarschedule, err error) {
	buf := make([]*model.DjangoCeleryBeatSolarschedule, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoCeleryBeatSolarscheduleDo) FindInBatches(result *[]*model.DjangoCeleryBeatSolarschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoCeleryBeatSolarscheduleDo) Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoCeleryBeatSolarscheduleDo) Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatSolarscheduleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoCeleryBeatSolarscheduleDo) Joins(fields ...field.RelationField) IDjangoCeleryBeatSolarscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoCeleryBeatSolarscheduleDo) Preload(fields ...field.RelationField) IDjangoCeleryBeatSolarscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoCeleryBeatSolarscheduleDo) FirstOrInit() (*model.DjangoCeleryBeatSolarschedule, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatSolarschedule), nil
	}
}

func (d djangoCeleryBeatSolarscheduleDo) FirstOrCreate() (*model.DjangoCeleryBeatSolarschedule, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatSolarschedule), nil
	}
}

func (d djangoCeleryBeatSolarscheduleDo) FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatSolarschedule, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoCeleryBeatSolarscheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoCeleryBeatSolarscheduleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoCeleryBeatSolarscheduleDo) Delete(models ...*model.DjangoCeleryBeatSolarschedule) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoCeleryBeatSolarscheduleDo) withDO(do gen.Dao) *djangoCeleryBeatSolarscheduleDo {
	d.DO = *do.(*gen.DO)
	return d
}
