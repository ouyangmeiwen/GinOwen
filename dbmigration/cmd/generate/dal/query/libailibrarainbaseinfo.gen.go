// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibailibrarainbaseinfo(db *gorm.DB) libailibrarainbaseinfo {
	_libailibrarainbaseinfo := libailibrarainbaseinfo{}

	_libailibrarainbaseinfo.libailibrarainbaseinfoDo.UseDB(db)
	_libailibrarainbaseinfo.libailibrarainbaseinfoDo.UseModel(&model.Libailibrarainbaseinfo{})

	tableName := _libailibrarainbaseinfo.libailibrarainbaseinfoDo.TableName()
	_libailibrarainbaseinfo.ALL = field.NewAsterisk(tableName)
	_libailibrarainbaseinfo.ID = field.NewInt64(tableName, "Id")
	_libailibrarainbaseinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libailibrarainbaseinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libailibrarainbaseinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libailibrarainbaseinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libailibrarainbaseinfo.Zone = field.NewString(tableName, "Zone")
	_libailibrarainbaseinfo.ProfileID = field.NewInt64(tableName, "ProfileId")
	_libailibrarainbaseinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_libailibrarainbaseinfo.fillFieldMap()

	return _libailibrarainbaseinfo
}

type libailibrarainbaseinfo struct {
	libailibrarainbaseinfoDo libailibrarainbaseinfoDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	Zone                 field.String
	ProfileID            field.Int64
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libailibrarainbaseinfo) Table(newTableName string) *libailibrarainbaseinfo {
	l.libailibrarainbaseinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libailibrarainbaseinfo) As(alias string) *libailibrarainbaseinfo {
	l.libailibrarainbaseinfoDo.DO = *(l.libailibrarainbaseinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libailibrarainbaseinfo) updateTableName(table string) *libailibrarainbaseinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.Zone = field.NewString(table, "Zone")
	l.ProfileID = field.NewInt64(table, "ProfileId")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libailibrarainbaseinfo) WithContext(ctx context.Context) ILibailibrarainbaseinfoDo {
	return l.libailibrarainbaseinfoDo.WithContext(ctx)
}

func (l libailibrarainbaseinfo) TableName() string { return l.libailibrarainbaseinfoDo.TableName() }

func (l libailibrarainbaseinfo) Alias() string { return l.libailibrarainbaseinfoDo.Alias() }

func (l *libailibrarainbaseinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libailibrarainbaseinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["Zone"] = l.Zone
	l.fieldMap["ProfileId"] = l.ProfileID
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libailibrarainbaseinfo) clone(db *gorm.DB) libailibrarainbaseinfo {
	l.libailibrarainbaseinfoDo.ReplaceDB(db)
	return l
}

type libailibrarainbaseinfoDo struct{ gen.DO }

type ILibailibrarainbaseinfoDo interface {
	gen.SubQuery
	Debug() ILibailibrarainbaseinfoDo
	WithContext(ctx context.Context) ILibailibrarainbaseinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibailibrarainbaseinfoDo
	Not(conds ...gen.Condition) ILibailibrarainbaseinfoDo
	Or(conds ...gen.Condition) ILibailibrarainbaseinfoDo
	Select(conds ...field.Expr) ILibailibrarainbaseinfoDo
	Where(conds ...gen.Condition) ILibailibrarainbaseinfoDo
	Order(conds ...field.Expr) ILibailibrarainbaseinfoDo
	Distinct(cols ...field.Expr) ILibailibrarainbaseinfoDo
	Omit(cols ...field.Expr) ILibailibrarainbaseinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoDo
	Group(cols ...field.Expr) ILibailibrarainbaseinfoDo
	Having(conds ...gen.Condition) ILibailibrarainbaseinfoDo
	Limit(limit int) ILibailibrarainbaseinfoDo
	Offset(offset int) ILibailibrarainbaseinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainbaseinfoDo
	Unscoped() ILibailibrarainbaseinfoDo
	Create(values ...*model.Libailibrarainbaseinfo) error
	CreateInBatches(values []*model.Libailibrarainbaseinfo, batchSize int) error
	Save(values ...*model.Libailibrarainbaseinfo) error
	First() (*model.Libailibrarainbaseinfo, error)
	Take() (*model.Libailibrarainbaseinfo, error)
	Last() (*model.Libailibrarainbaseinfo, error)
	Find() ([]*model.Libailibrarainbaseinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainbaseinfo, err error)
	FindInBatches(result *[]*model.Libailibrarainbaseinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libailibrarainbaseinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibailibrarainbaseinfoDo
	Assign(attrs ...field.AssignExpr) ILibailibrarainbaseinfoDo
	Joins(fields ...field.RelationField) ILibailibrarainbaseinfoDo
	Preload(fields ...field.RelationField) ILibailibrarainbaseinfoDo
	FirstOrInit() (*model.Libailibrarainbaseinfo, error)
	FirstOrCreate() (*model.Libailibrarainbaseinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libailibrarainbaseinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibailibrarainbaseinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libailibrarainbaseinfoDo) Debug() ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libailibrarainbaseinfoDo) WithContext(ctx context.Context) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libailibrarainbaseinfoDo) ReadDB() ILibailibrarainbaseinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libailibrarainbaseinfoDo) WriteDB() ILibailibrarainbaseinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libailibrarainbaseinfoDo) Clauses(conds ...clause.Expression) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libailibrarainbaseinfoDo) Returning(value interface{}, columns ...string) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libailibrarainbaseinfoDo) Not(conds ...gen.Condition) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libailibrarainbaseinfoDo) Or(conds ...gen.Condition) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libailibrarainbaseinfoDo) Select(conds ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libailibrarainbaseinfoDo) Where(conds ...gen.Condition) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libailibrarainbaseinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibailibrarainbaseinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libailibrarainbaseinfoDo) Order(conds ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libailibrarainbaseinfoDo) Distinct(cols ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libailibrarainbaseinfoDo) Omit(cols ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libailibrarainbaseinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libailibrarainbaseinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libailibrarainbaseinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libailibrarainbaseinfoDo) Group(cols ...field.Expr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libailibrarainbaseinfoDo) Having(conds ...gen.Condition) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libailibrarainbaseinfoDo) Limit(limit int) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libailibrarainbaseinfoDo) Offset(offset int) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libailibrarainbaseinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libailibrarainbaseinfoDo) Unscoped() ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libailibrarainbaseinfoDo) Create(values ...*model.Libailibrarainbaseinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libailibrarainbaseinfoDo) CreateInBatches(values []*model.Libailibrarainbaseinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libailibrarainbaseinfoDo) Save(values ...*model.Libailibrarainbaseinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libailibrarainbaseinfoDo) First() (*model.Libailibrarainbaseinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfo), nil
	}
}

func (l libailibrarainbaseinfoDo) Take() (*model.Libailibrarainbaseinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfo), nil
	}
}

func (l libailibrarainbaseinfoDo) Last() (*model.Libailibrarainbaseinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfo), nil
	}
}

func (l libailibrarainbaseinfoDo) Find() ([]*model.Libailibrarainbaseinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libailibrarainbaseinfo), err
}

func (l libailibrarainbaseinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainbaseinfo, err error) {
	buf := make([]*model.Libailibrarainbaseinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libailibrarainbaseinfoDo) FindInBatches(result *[]*model.Libailibrarainbaseinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libailibrarainbaseinfoDo) Attrs(attrs ...field.AssignExpr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libailibrarainbaseinfoDo) Assign(attrs ...field.AssignExpr) ILibailibrarainbaseinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libailibrarainbaseinfoDo) Joins(fields ...field.RelationField) ILibailibrarainbaseinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libailibrarainbaseinfoDo) Preload(fields ...field.RelationField) ILibailibrarainbaseinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libailibrarainbaseinfoDo) FirstOrInit() (*model.Libailibrarainbaseinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfo), nil
	}
}

func (l libailibrarainbaseinfoDo) FirstOrCreate() (*model.Libailibrarainbaseinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainbaseinfo), nil
	}
}

func (l libailibrarainbaseinfoDo) FindByPage(offset int, limit int) (result []*model.Libailibrarainbaseinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libailibrarainbaseinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libailibrarainbaseinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libailibrarainbaseinfoDo) Delete(models ...*model.Libailibrarainbaseinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libailibrarainbaseinfoDo) withDO(do gen.Dao) *libailibrarainbaseinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
