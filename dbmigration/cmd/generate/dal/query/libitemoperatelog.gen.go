// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibitemoperatelog(db *gorm.DB) libitemoperatelog {
	_libitemoperatelog := libitemoperatelog{}

	_libitemoperatelog.libitemoperatelogDo.UseDB(db)
	_libitemoperatelog.libitemoperatelogDo.UseModel(&model.Libitemoperatelog{})

	tableName := _libitemoperatelog.libitemoperatelogDo.TableName()
	_libitemoperatelog.ALL = field.NewAsterisk(tableName)
	_libitemoperatelog.ID = field.NewString(tableName, "Id")
	_libitemoperatelog.CreationTime = field.NewTime(tableName, "CreationTime")
	_libitemoperatelog.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libitemoperatelog.ItemOperateIndexID = field.NewString(tableName, "ItemOperateIndexId")
	_libitemoperatelog.ItemID = field.NewString(tableName, "ItemId")
	_libitemoperatelog.ItemBarcode = field.NewString(tableName, "ItemBarcode")
	_libitemoperatelog.ItemTitle = field.NewString(tableName, "ItemTitle")
	_libitemoperatelog.ItemCallNo = field.NewString(tableName, "ItemCallNo")
	_libitemoperatelog.LocationID = field.NewString(tableName, "LocationId")
	_libitemoperatelog.LocationName = field.NewString(tableName, "LocationName")
	_libitemoperatelog.SrcLayerID = field.NewString(tableName, "SrcLayerId")
	_libitemoperatelog.SrcLayerName = field.NewString(tableName, "SrcLayerName")
	_libitemoperatelog.DesLayerID = field.NewString(tableName, "DesLayerId")
	_libitemoperatelog.DesLayerName = field.NewString(tableName, "DesLayerName")
	_libitemoperatelog.ItemOperateType = field.NewInt64(tableName, "ItemOperateType")
	_libitemoperatelog.Remark = field.NewString(tableName, "Remark")
	_libitemoperatelog.TenantID = field.NewInt64(tableName, "TenantId")
	_libitemoperatelog.CreatorUserName = field.NewString(tableName, "CreatorUserName")
	_libitemoperatelog.DesLayerCode = field.NewString(tableName, "DesLayerCode")
	_libitemoperatelog.ItemOperateModeType = field.NewInt64(tableName, "ItemOperateModeType")
	_libitemoperatelog.SrcLayerCode = field.NewString(tableName, "SrcLayerCode")

	_libitemoperatelog.fillFieldMap()

	return _libitemoperatelog
}

type libitemoperatelog struct {
	libitemoperatelogDo libitemoperatelogDo

	ALL                 field.Asterisk
	ID                  field.String
	CreationTime        field.Time
	CreatorUserID       field.Int64
	ItemOperateIndexID  field.String
	ItemID              field.String
	ItemBarcode         field.String
	ItemTitle           field.String
	ItemCallNo          field.String
	LocationID          field.String
	LocationName        field.String
	SrcLayerID          field.String
	SrcLayerName        field.String
	DesLayerID          field.String
	DesLayerName        field.String
	ItemOperateType     field.Int64
	Remark              field.String
	TenantID            field.Int64
	CreatorUserName     field.String
	DesLayerCode        field.String
	ItemOperateModeType field.Int64
	SrcLayerCode        field.String

	fieldMap map[string]field.Expr
}

func (l libitemoperatelog) Table(newTableName string) *libitemoperatelog {
	l.libitemoperatelogDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libitemoperatelog) As(alias string) *libitemoperatelog {
	l.libitemoperatelogDo.DO = *(l.libitemoperatelogDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libitemoperatelog) updateTableName(table string) *libitemoperatelog {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.ItemOperateIndexID = field.NewString(table, "ItemOperateIndexId")
	l.ItemID = field.NewString(table, "ItemId")
	l.ItemBarcode = field.NewString(table, "ItemBarcode")
	l.ItemTitle = field.NewString(table, "ItemTitle")
	l.ItemCallNo = field.NewString(table, "ItemCallNo")
	l.LocationID = field.NewString(table, "LocationId")
	l.LocationName = field.NewString(table, "LocationName")
	l.SrcLayerID = field.NewString(table, "SrcLayerId")
	l.SrcLayerName = field.NewString(table, "SrcLayerName")
	l.DesLayerID = field.NewString(table, "DesLayerId")
	l.DesLayerName = field.NewString(table, "DesLayerName")
	l.ItemOperateType = field.NewInt64(table, "ItemOperateType")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.CreatorUserName = field.NewString(table, "CreatorUserName")
	l.DesLayerCode = field.NewString(table, "DesLayerCode")
	l.ItemOperateModeType = field.NewInt64(table, "ItemOperateModeType")
	l.SrcLayerCode = field.NewString(table, "SrcLayerCode")

	l.fillFieldMap()

	return l
}

func (l *libitemoperatelog) WithContext(ctx context.Context) ILibitemoperatelogDo {
	return l.libitemoperatelogDo.WithContext(ctx)
}

func (l libitemoperatelog) TableName() string { return l.libitemoperatelogDo.TableName() }

func (l libitemoperatelog) Alias() string { return l.libitemoperatelogDo.Alias() }

func (l *libitemoperatelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libitemoperatelog) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 21)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["ItemOperateIndexId"] = l.ItemOperateIndexID
	l.fieldMap["ItemId"] = l.ItemID
	l.fieldMap["ItemBarcode"] = l.ItemBarcode
	l.fieldMap["ItemTitle"] = l.ItemTitle
	l.fieldMap["ItemCallNo"] = l.ItemCallNo
	l.fieldMap["LocationId"] = l.LocationID
	l.fieldMap["LocationName"] = l.LocationName
	l.fieldMap["SrcLayerId"] = l.SrcLayerID
	l.fieldMap["SrcLayerName"] = l.SrcLayerName
	l.fieldMap["DesLayerId"] = l.DesLayerID
	l.fieldMap["DesLayerName"] = l.DesLayerName
	l.fieldMap["ItemOperateType"] = l.ItemOperateType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["CreatorUserName"] = l.CreatorUserName
	l.fieldMap["DesLayerCode"] = l.DesLayerCode
	l.fieldMap["ItemOperateModeType"] = l.ItemOperateModeType
	l.fieldMap["SrcLayerCode"] = l.SrcLayerCode
}

func (l libitemoperatelog) clone(db *gorm.DB) libitemoperatelog {
	l.libitemoperatelogDo.ReplaceDB(db)
	return l
}

type libitemoperatelogDo struct{ gen.DO }

type ILibitemoperatelogDo interface {
	gen.SubQuery
	Debug() ILibitemoperatelogDo
	WithContext(ctx context.Context) ILibitemoperatelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibitemoperatelogDo
	Not(conds ...gen.Condition) ILibitemoperatelogDo
	Or(conds ...gen.Condition) ILibitemoperatelogDo
	Select(conds ...field.Expr) ILibitemoperatelogDo
	Where(conds ...gen.Condition) ILibitemoperatelogDo
	Order(conds ...field.Expr) ILibitemoperatelogDo
	Distinct(cols ...field.Expr) ILibitemoperatelogDo
	Omit(cols ...field.Expr) ILibitemoperatelogDo
	Join(table schema.Tabler, on ...field.Expr) ILibitemoperatelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemoperatelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibitemoperatelogDo
	Group(cols ...field.Expr) ILibitemoperatelogDo
	Having(conds ...gen.Condition) ILibitemoperatelogDo
	Limit(limit int) ILibitemoperatelogDo
	Offset(offset int) ILibitemoperatelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemoperatelogDo
	Unscoped() ILibitemoperatelogDo
	Create(values ...*model.Libitemoperatelog) error
	CreateInBatches(values []*model.Libitemoperatelog, batchSize int) error
	Save(values ...*model.Libitemoperatelog) error
	First() (*model.Libitemoperatelog, error)
	Take() (*model.Libitemoperatelog, error)
	Last() (*model.Libitemoperatelog, error)
	Find() ([]*model.Libitemoperatelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitemoperatelog, err error)
	FindInBatches(result *[]*model.Libitemoperatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libitemoperatelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibitemoperatelogDo
	Assign(attrs ...field.AssignExpr) ILibitemoperatelogDo
	Joins(fields ...field.RelationField) ILibitemoperatelogDo
	Preload(fields ...field.RelationField) ILibitemoperatelogDo
	FirstOrInit() (*model.Libitemoperatelog, error)
	FirstOrCreate() (*model.Libitemoperatelog, error)
	FindByPage(offset int, limit int) (result []*model.Libitemoperatelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibitemoperatelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libitemoperatelogDo) Debug() ILibitemoperatelogDo {
	return l.withDO(l.DO.Debug())
}

func (l libitemoperatelogDo) WithContext(ctx context.Context) ILibitemoperatelogDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libitemoperatelogDo) ReadDB() ILibitemoperatelogDo {
	return l.Clauses(dbresolver.Read)
}

func (l libitemoperatelogDo) WriteDB() ILibitemoperatelogDo {
	return l.Clauses(dbresolver.Write)
}

func (l libitemoperatelogDo) Clauses(conds ...clause.Expression) ILibitemoperatelogDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libitemoperatelogDo) Returning(value interface{}, columns ...string) ILibitemoperatelogDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libitemoperatelogDo) Not(conds ...gen.Condition) ILibitemoperatelogDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libitemoperatelogDo) Or(conds ...gen.Condition) ILibitemoperatelogDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libitemoperatelogDo) Select(conds ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libitemoperatelogDo) Where(conds ...gen.Condition) ILibitemoperatelogDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libitemoperatelogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibitemoperatelogDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libitemoperatelogDo) Order(conds ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libitemoperatelogDo) Distinct(cols ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libitemoperatelogDo) Omit(cols ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libitemoperatelogDo) Join(table schema.Tabler, on ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libitemoperatelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libitemoperatelogDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libitemoperatelogDo) Group(cols ...field.Expr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libitemoperatelogDo) Having(conds ...gen.Condition) ILibitemoperatelogDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libitemoperatelogDo) Limit(limit int) ILibitemoperatelogDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libitemoperatelogDo) Offset(offset int) ILibitemoperatelogDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libitemoperatelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibitemoperatelogDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libitemoperatelogDo) Unscoped() ILibitemoperatelogDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libitemoperatelogDo) Create(values ...*model.Libitemoperatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libitemoperatelogDo) CreateInBatches(values []*model.Libitemoperatelog, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libitemoperatelogDo) Save(values ...*model.Libitemoperatelog) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libitemoperatelogDo) First() (*model.Libitemoperatelog, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperatelog), nil
	}
}

func (l libitemoperatelogDo) Take() (*model.Libitemoperatelog, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperatelog), nil
	}
}

func (l libitemoperatelogDo) Last() (*model.Libitemoperatelog, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperatelog), nil
	}
}

func (l libitemoperatelogDo) Find() ([]*model.Libitemoperatelog, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libitemoperatelog), err
}

func (l libitemoperatelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libitemoperatelog, err error) {
	buf := make([]*model.Libitemoperatelog, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libitemoperatelogDo) FindInBatches(result *[]*model.Libitemoperatelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libitemoperatelogDo) Attrs(attrs ...field.AssignExpr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libitemoperatelogDo) Assign(attrs ...field.AssignExpr) ILibitemoperatelogDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libitemoperatelogDo) Joins(fields ...field.RelationField) ILibitemoperatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libitemoperatelogDo) Preload(fields ...field.RelationField) ILibitemoperatelogDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libitemoperatelogDo) FirstOrInit() (*model.Libitemoperatelog, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperatelog), nil
	}
}

func (l libitemoperatelogDo) FirstOrCreate() (*model.Libitemoperatelog, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libitemoperatelog), nil
	}
}

func (l libitemoperatelogDo) FindByPage(offset int, limit int) (result []*model.Libitemoperatelog, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libitemoperatelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libitemoperatelogDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libitemoperatelogDo) Delete(models ...*model.Libitemoperatelog) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libitemoperatelogDo) withDO(do gen.Dao) *libitemoperatelogDo {
	l.DO = *do.(*gen.DO)
	return l
}
