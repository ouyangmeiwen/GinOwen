// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newAbpuseraccount(db *gorm.DB) abpuseraccount {
	_abpuseraccount := abpuseraccount{}

	_abpuseraccount.abpuseraccountDo.UseDB(db)
	_abpuseraccount.abpuseraccountDo.UseModel(&model.Abpuseraccount{})

	tableName := _abpuseraccount.abpuseraccountDo.TableName()
	_abpuseraccount.ALL = field.NewAsterisk(tableName)
	_abpuseraccount.ID = field.NewInt64(tableName, "Id")
	_abpuseraccount.CreationTime = field.NewTime(tableName, "CreationTime")
	_abpuseraccount.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_abpuseraccount.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_abpuseraccount.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_abpuseraccount.IsDeleted = field.NewField(tableName, "IsDeleted")
	_abpuseraccount.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_abpuseraccount.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_abpuseraccount.TenantID = field.NewInt64(tableName, "TenantId")
	_abpuseraccount.UserID = field.NewInt64(tableName, "UserId")
	_abpuseraccount.UserLinkID = field.NewInt64(tableName, "UserLinkId")
	_abpuseraccount.UserName = field.NewString(tableName, "UserName")
	_abpuseraccount.EmailAddress = field.NewString(tableName, "EmailAddress")

	_abpuseraccount.fillFieldMap()

	return _abpuseraccount
}

type abpuseraccount struct {
	abpuseraccountDo abpuseraccountDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	TenantID             field.Int64
	UserID               field.Int64
	UserLinkID           field.Int64
	UserName             field.String
	EmailAddress         field.String

	fieldMap map[string]field.Expr
}

func (a abpuseraccount) Table(newTableName string) *abpuseraccount {
	a.abpuseraccountDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abpuseraccount) As(alias string) *abpuseraccount {
	a.abpuseraccountDo.DO = *(a.abpuseraccountDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abpuseraccount) updateTableName(table string) *abpuseraccount {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "Id")
	a.CreationTime = field.NewTime(table, "CreationTime")
	a.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	a.LastModificationTime = field.NewTime(table, "LastModificationTime")
	a.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	a.IsDeleted = field.NewField(table, "IsDeleted")
	a.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	a.DeletionTime = field.NewTime(table, "DeletionTime")
	a.TenantID = field.NewInt64(table, "TenantId")
	a.UserID = field.NewInt64(table, "UserId")
	a.UserLinkID = field.NewInt64(table, "UserLinkId")
	a.UserName = field.NewString(table, "UserName")
	a.EmailAddress = field.NewString(table, "EmailAddress")

	a.fillFieldMap()

	return a
}

func (a *abpuseraccount) WithContext(ctx context.Context) IAbpuseraccountDo {
	return a.abpuseraccountDo.WithContext(ctx)
}

func (a abpuseraccount) TableName() string { return a.abpuseraccountDo.TableName() }

func (a abpuseraccount) Alias() string { return a.abpuseraccountDo.Alias() }

func (a *abpuseraccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abpuseraccount) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["Id"] = a.ID
	a.fieldMap["CreationTime"] = a.CreationTime
	a.fieldMap["CreatorUserId"] = a.CreatorUserID
	a.fieldMap["LastModificationTime"] = a.LastModificationTime
	a.fieldMap["LastModifierUserId"] = a.LastModifierUserID
	a.fieldMap["IsDeleted"] = a.IsDeleted
	a.fieldMap["DeleterUserId"] = a.DeleterUserID
	a.fieldMap["DeletionTime"] = a.DeletionTime
	a.fieldMap["TenantId"] = a.TenantID
	a.fieldMap["UserId"] = a.UserID
	a.fieldMap["UserLinkId"] = a.UserLinkID
	a.fieldMap["UserName"] = a.UserName
	a.fieldMap["EmailAddress"] = a.EmailAddress
}

func (a abpuseraccount) clone(db *gorm.DB) abpuseraccount {
	a.abpuseraccountDo.ReplaceDB(db)
	return a
}

type abpuseraccountDo struct{ gen.DO }

type IAbpuseraccountDo interface {
	gen.SubQuery
	Debug() IAbpuseraccountDo
	WithContext(ctx context.Context) IAbpuseraccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbpuseraccountDo
	Not(conds ...gen.Condition) IAbpuseraccountDo
	Or(conds ...gen.Condition) IAbpuseraccountDo
	Select(conds ...field.Expr) IAbpuseraccountDo
	Where(conds ...gen.Condition) IAbpuseraccountDo
	Order(conds ...field.Expr) IAbpuseraccountDo
	Distinct(cols ...field.Expr) IAbpuseraccountDo
	Omit(cols ...field.Expr) IAbpuseraccountDo
	Join(table schema.Tabler, on ...field.Expr) IAbpuseraccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuseraccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbpuseraccountDo
	Group(cols ...field.Expr) IAbpuseraccountDo
	Having(conds ...gen.Condition) IAbpuseraccountDo
	Limit(limit int) IAbpuseraccountDo
	Offset(offset int) IAbpuseraccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuseraccountDo
	Unscoped() IAbpuseraccountDo
	Create(values ...*model.Abpuseraccount) error
	CreateInBatches(values []*model.Abpuseraccount, batchSize int) error
	Save(values ...*model.Abpuseraccount) error
	First() (*model.Abpuseraccount, error)
	Take() (*model.Abpuseraccount, error)
	Last() (*model.Abpuseraccount, error)
	Find() ([]*model.Abpuseraccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuseraccount, err error)
	FindInBatches(result *[]*model.Abpuseraccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Abpuseraccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbpuseraccountDo
	Assign(attrs ...field.AssignExpr) IAbpuseraccountDo
	Joins(fields ...field.RelationField) IAbpuseraccountDo
	Preload(fields ...field.RelationField) IAbpuseraccountDo
	FirstOrInit() (*model.Abpuseraccount, error)
	FirstOrCreate() (*model.Abpuseraccount, error)
	FindByPage(offset int, limit int) (result []*model.Abpuseraccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbpuseraccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abpuseraccountDo) Debug() IAbpuseraccountDo {
	return a.withDO(a.DO.Debug())
}

func (a abpuseraccountDo) WithContext(ctx context.Context) IAbpuseraccountDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abpuseraccountDo) ReadDB() IAbpuseraccountDo {
	return a.Clauses(dbresolver.Read)
}

func (a abpuseraccountDo) WriteDB() IAbpuseraccountDo {
	return a.Clauses(dbresolver.Write)
}

func (a abpuseraccountDo) Clauses(conds ...clause.Expression) IAbpuseraccountDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abpuseraccountDo) Returning(value interface{}, columns ...string) IAbpuseraccountDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abpuseraccountDo) Not(conds ...gen.Condition) IAbpuseraccountDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abpuseraccountDo) Or(conds ...gen.Condition) IAbpuseraccountDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abpuseraccountDo) Select(conds ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abpuseraccountDo) Where(conds ...gen.Condition) IAbpuseraccountDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abpuseraccountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbpuseraccountDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abpuseraccountDo) Order(conds ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abpuseraccountDo) Distinct(cols ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abpuseraccountDo) Omit(cols ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abpuseraccountDo) Join(table schema.Tabler, on ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abpuseraccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abpuseraccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abpuseraccountDo) Group(cols ...field.Expr) IAbpuseraccountDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abpuseraccountDo) Having(conds ...gen.Condition) IAbpuseraccountDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abpuseraccountDo) Limit(limit int) IAbpuseraccountDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abpuseraccountDo) Offset(offset int) IAbpuseraccountDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abpuseraccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbpuseraccountDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abpuseraccountDo) Unscoped() IAbpuseraccountDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abpuseraccountDo) Create(values ...*model.Abpuseraccount) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abpuseraccountDo) CreateInBatches(values []*model.Abpuseraccount, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abpuseraccountDo) Save(values ...*model.Abpuseraccount) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abpuseraccountDo) First() (*model.Abpuseraccount, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuseraccount), nil
	}
}

func (a abpuseraccountDo) Take() (*model.Abpuseraccount, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuseraccount), nil
	}
}

func (a abpuseraccountDo) Last() (*model.Abpuseraccount, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuseraccount), nil
	}
}

func (a abpuseraccountDo) Find() ([]*model.Abpuseraccount, error) {
	result, err := a.DO.Find()
	return result.([]*model.Abpuseraccount), err
}

func (a abpuseraccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Abpuseraccount, err error) {
	buf := make([]*model.Abpuseraccount, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abpuseraccountDo) FindInBatches(result *[]*model.Abpuseraccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abpuseraccountDo) Attrs(attrs ...field.AssignExpr) IAbpuseraccountDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abpuseraccountDo) Assign(attrs ...field.AssignExpr) IAbpuseraccountDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abpuseraccountDo) Joins(fields ...field.RelationField) IAbpuseraccountDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abpuseraccountDo) Preload(fields ...field.RelationField) IAbpuseraccountDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abpuseraccountDo) FirstOrInit() (*model.Abpuseraccount, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuseraccount), nil
	}
}

func (a abpuseraccountDo) FirstOrCreate() (*model.Abpuseraccount, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Abpuseraccount), nil
	}
}

func (a abpuseraccountDo) FindByPage(offset int, limit int) (result []*model.Abpuseraccount, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abpuseraccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abpuseraccountDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abpuseraccountDo) Delete(models ...*model.Abpuseraccount) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abpuseraccountDo) withDO(do gen.Dao) *abpuseraccountDo {
	a.DO = *do.(*gen.DO)
	return a
}
