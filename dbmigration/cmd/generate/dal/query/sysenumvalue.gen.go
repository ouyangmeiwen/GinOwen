// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newSysenumvalue(db *gorm.DB) sysenumvalue {
	_sysenumvalue := sysenumvalue{}

	_sysenumvalue.sysenumvalueDo.UseDB(db)
	_sysenumvalue.sysenumvalueDo.UseModel(&model.Sysenumvalue{})

	tableName := _sysenumvalue.sysenumvalueDo.TableName()
	_sysenumvalue.ALL = field.NewAsterisk(tableName)
	_sysenumvalue.ID = field.NewString(tableName, "Id")
	_sysenumvalue.EnumValueID = field.NewInt64(tableName, "EnumValueId")
	_sysenumvalue.FieldName = field.NewString(tableName, "FieldName")
	_sysenumvalue.DataType = field.NewInt64(tableName, "DataType")
	_sysenumvalue.Value = field.NewInt64(tableName, "Value")
	_sysenumvalue.StringValue = field.NewString(tableName, "StringValue")
	_sysenumvalue.EnumOrder = field.NewInt64(tableName, "EnumOrder")
	_sysenumvalue.EnumTrans = field.NewString(tableName, "EnumTrans")
	_sysenumvalue.Remark = field.NewString(tableName, "Remark")
	_sysenumvalue.TenantID = field.NewInt64(tableName, "TenantId")

	_sysenumvalue.fillFieldMap()

	return _sysenumvalue
}

type sysenumvalue struct {
	sysenumvalueDo sysenumvalueDo

	ALL         field.Asterisk
	ID          field.String
	EnumValueID field.Int64
	FieldName   field.String
	DataType    field.Int64
	Value       field.Int64
	StringValue field.String
	EnumOrder   field.Int64
	EnumTrans   field.String
	Remark      field.String
	TenantID    field.Int64

	fieldMap map[string]field.Expr
}

func (s sysenumvalue) Table(newTableName string) *sysenumvalue {
	s.sysenumvalueDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysenumvalue) As(alias string) *sysenumvalue {
	s.sysenumvalueDo.DO = *(s.sysenumvalueDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysenumvalue) updateTableName(table string) *sysenumvalue {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.EnumValueID = field.NewInt64(table, "EnumValueId")
	s.FieldName = field.NewString(table, "FieldName")
	s.DataType = field.NewInt64(table, "DataType")
	s.Value = field.NewInt64(table, "Value")
	s.StringValue = field.NewString(table, "StringValue")
	s.EnumOrder = field.NewInt64(table, "EnumOrder")
	s.EnumTrans = field.NewString(table, "EnumTrans")
	s.Remark = field.NewString(table, "Remark")
	s.TenantID = field.NewInt64(table, "TenantId")

	s.fillFieldMap()

	return s
}

func (s *sysenumvalue) WithContext(ctx context.Context) ISysenumvalueDo {
	return s.sysenumvalueDo.WithContext(ctx)
}

func (s sysenumvalue) TableName() string { return s.sysenumvalueDo.TableName() }

func (s sysenumvalue) Alias() string { return s.sysenumvalueDo.Alias() }

func (s *sysenumvalue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysenumvalue) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["EnumValueId"] = s.EnumValueID
	s.fieldMap["FieldName"] = s.FieldName
	s.fieldMap["DataType"] = s.DataType
	s.fieldMap["Value"] = s.Value
	s.fieldMap["StringValue"] = s.StringValue
	s.fieldMap["EnumOrder"] = s.EnumOrder
	s.fieldMap["EnumTrans"] = s.EnumTrans
	s.fieldMap["Remark"] = s.Remark
	s.fieldMap["TenantId"] = s.TenantID
}

func (s sysenumvalue) clone(db *gorm.DB) sysenumvalue {
	s.sysenumvalueDo.ReplaceDB(db)
	return s
}

type sysenumvalueDo struct{ gen.DO }

type ISysenumvalueDo interface {
	gen.SubQuery
	Debug() ISysenumvalueDo
	WithContext(ctx context.Context) ISysenumvalueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysenumvalueDo
	Not(conds ...gen.Condition) ISysenumvalueDo
	Or(conds ...gen.Condition) ISysenumvalueDo
	Select(conds ...field.Expr) ISysenumvalueDo
	Where(conds ...gen.Condition) ISysenumvalueDo
	Order(conds ...field.Expr) ISysenumvalueDo
	Distinct(cols ...field.Expr) ISysenumvalueDo
	Omit(cols ...field.Expr) ISysenumvalueDo
	Join(table schema.Tabler, on ...field.Expr) ISysenumvalueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysenumvalueDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysenumvalueDo
	Group(cols ...field.Expr) ISysenumvalueDo
	Having(conds ...gen.Condition) ISysenumvalueDo
	Limit(limit int) ISysenumvalueDo
	Offset(offset int) ISysenumvalueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysenumvalueDo
	Unscoped() ISysenumvalueDo
	Create(values ...*model.Sysenumvalue) error
	CreateInBatches(values []*model.Sysenumvalue, batchSize int) error
	Save(values ...*model.Sysenumvalue) error
	First() (*model.Sysenumvalue, error)
	Take() (*model.Sysenumvalue, error)
	Last() (*model.Sysenumvalue, error)
	Find() ([]*model.Sysenumvalue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysenumvalue, err error)
	FindInBatches(result *[]*model.Sysenumvalue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sysenumvalue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysenumvalueDo
	Assign(attrs ...field.AssignExpr) ISysenumvalueDo
	Joins(fields ...field.RelationField) ISysenumvalueDo
	Preload(fields ...field.RelationField) ISysenumvalueDo
	FirstOrInit() (*model.Sysenumvalue, error)
	FirstOrCreate() (*model.Sysenumvalue, error)
	FindByPage(offset int, limit int) (result []*model.Sysenumvalue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysenumvalueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysenumvalueDo) Debug() ISysenumvalueDo {
	return s.withDO(s.DO.Debug())
}

func (s sysenumvalueDo) WithContext(ctx context.Context) ISysenumvalueDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysenumvalueDo) ReadDB() ISysenumvalueDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysenumvalueDo) WriteDB() ISysenumvalueDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysenumvalueDo) Clauses(conds ...clause.Expression) ISysenumvalueDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysenumvalueDo) Returning(value interface{}, columns ...string) ISysenumvalueDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysenumvalueDo) Not(conds ...gen.Condition) ISysenumvalueDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysenumvalueDo) Or(conds ...gen.Condition) ISysenumvalueDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysenumvalueDo) Select(conds ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysenumvalueDo) Where(conds ...gen.Condition) ISysenumvalueDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysenumvalueDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysenumvalueDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysenumvalueDo) Order(conds ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysenumvalueDo) Distinct(cols ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysenumvalueDo) Omit(cols ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysenumvalueDo) Join(table schema.Tabler, on ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysenumvalueDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysenumvalueDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysenumvalueDo) Group(cols ...field.Expr) ISysenumvalueDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysenumvalueDo) Having(conds ...gen.Condition) ISysenumvalueDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysenumvalueDo) Limit(limit int) ISysenumvalueDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysenumvalueDo) Offset(offset int) ISysenumvalueDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysenumvalueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysenumvalueDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysenumvalueDo) Unscoped() ISysenumvalueDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysenumvalueDo) Create(values ...*model.Sysenumvalue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysenumvalueDo) CreateInBatches(values []*model.Sysenumvalue, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysenumvalueDo) Save(values ...*model.Sysenumvalue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysenumvalueDo) First() (*model.Sysenumvalue, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue), nil
	}
}

func (s sysenumvalueDo) Take() (*model.Sysenumvalue, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue), nil
	}
}

func (s sysenumvalueDo) Last() (*model.Sysenumvalue, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue), nil
	}
}

func (s sysenumvalueDo) Find() ([]*model.Sysenumvalue, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sysenumvalue), err
}

func (s sysenumvalueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sysenumvalue, err error) {
	buf := make([]*model.Sysenumvalue, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysenumvalueDo) FindInBatches(result *[]*model.Sysenumvalue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysenumvalueDo) Attrs(attrs ...field.AssignExpr) ISysenumvalueDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysenumvalueDo) Assign(attrs ...field.AssignExpr) ISysenumvalueDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysenumvalueDo) Joins(fields ...field.RelationField) ISysenumvalueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysenumvalueDo) Preload(fields ...field.RelationField) ISysenumvalueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysenumvalueDo) FirstOrInit() (*model.Sysenumvalue, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue), nil
	}
}

func (s sysenumvalueDo) FirstOrCreate() (*model.Sysenumvalue, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sysenumvalue), nil
	}
}

func (s sysenumvalueDo) FindByPage(offset int, limit int) (result []*model.Sysenumvalue, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysenumvalueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysenumvalueDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysenumvalueDo) Delete(models ...*model.Sysenumvalue) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysenumvalueDo) withDO(do gen.Dao) *sysenumvalueDo {
	s.DO = *do.(*gen.DO)
	return s
}
