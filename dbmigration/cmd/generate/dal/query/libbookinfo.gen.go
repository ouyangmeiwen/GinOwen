// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibbookinfo(db *gorm.DB) libbookinfo {
	_libbookinfo := libbookinfo{}

	_libbookinfo.libbookinfoDo.UseDB(db)
	_libbookinfo.libbookinfoDo.UseModel(&model.Libbookinfo{})

	tableName := _libbookinfo.libbookinfoDo.TableName()
	_libbookinfo.ALL = field.NewAsterisk(tableName)
	_libbookinfo.ID = field.NewString(tableName, "Id")
	_libbookinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libbookinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libbookinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libbookinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libbookinfo.IsDeleted = field.NewField(tableName, "IsDeleted")
	_libbookinfo.DeleterUserID = field.NewInt64(tableName, "DeleterUserId")
	_libbookinfo.DeletionTime = field.NewTime(tableName, "DeletionTime")
	_libbookinfo.ISBN = field.NewString(tableName, "ISBN")
	_libbookinfo.Title = field.NewString(tableName, "Title")
	_libbookinfo.Author = field.NewString(tableName, "Author")
	_libbookinfo.AuthorCode = field.NewString(tableName, "AuthorCode")
	_libbookinfo.Publisher = field.NewString(tableName, "Publisher")
	_libbookinfo.PubDate = field.NewString(tableName, "PubDate")
	_libbookinfo.CatalogCode = field.NewString(tableName, "CatalogCode")
	_libbookinfo.Language = field.NewString(tableName, "Language")
	_libbookinfo.Price = field.NewString(tableName, "Price")
	_libbookinfo.Pages = field.NewString(tableName, "Pages")
	_libbookinfo.Format = field.NewString(tableName, "Format")
	_libbookinfo.Image = field.NewString(tableName, "Image")
	_libbookinfo.Summary = field.NewString(tableName, "Summary")
	_libbookinfo.Tags = field.NewString(tableName, "Tags")
	_libbookinfo.Series = field.NewString(tableName, "Series")
	_libbookinfo.Barcodes = field.NewString(tableName, "Barcodes")
	_libbookinfo.IsRecommend = field.NewField(tableName, "IsRecommend")
	_libbookinfo.Remark = field.NewString(tableName, "Remark")
	_libbookinfo.TenantID = field.NewInt64(tableName, "TenantId")

	_libbookinfo.fillFieldMap()

	return _libbookinfo
}

type libbookinfo struct {
	libbookinfoDo libbookinfoDo

	ALL                  field.Asterisk
	ID                   field.String
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	IsDeleted            field.Field
	DeleterUserID        field.Int64
	DeletionTime         field.Time
	ISBN                 field.String
	Title                field.String
	Author               field.String
	AuthorCode           field.String
	Publisher            field.String
	PubDate              field.String
	CatalogCode          field.String
	Language             field.String
	Price                field.String
	Pages                field.String
	Format               field.String
	Image                field.String
	Summary              field.String
	Tags                 field.String
	Series               field.String
	Barcodes             field.String
	IsRecommend          field.Field
	Remark               field.String
	TenantID             field.Int64

	fieldMap map[string]field.Expr
}

func (l libbookinfo) Table(newTableName string) *libbookinfo {
	l.libbookinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libbookinfo) As(alias string) *libbookinfo {
	l.libbookinfoDo.DO = *(l.libbookinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libbookinfo) updateTableName(table string) *libbookinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.IsDeleted = field.NewField(table, "IsDeleted")
	l.DeleterUserID = field.NewInt64(table, "DeleterUserId")
	l.DeletionTime = field.NewTime(table, "DeletionTime")
	l.ISBN = field.NewString(table, "ISBN")
	l.Title = field.NewString(table, "Title")
	l.Author = field.NewString(table, "Author")
	l.AuthorCode = field.NewString(table, "AuthorCode")
	l.Publisher = field.NewString(table, "Publisher")
	l.PubDate = field.NewString(table, "PubDate")
	l.CatalogCode = field.NewString(table, "CatalogCode")
	l.Language = field.NewString(table, "Language")
	l.Price = field.NewString(table, "Price")
	l.Pages = field.NewString(table, "Pages")
	l.Format = field.NewString(table, "Format")
	l.Image = field.NewString(table, "Image")
	l.Summary = field.NewString(table, "Summary")
	l.Tags = field.NewString(table, "Tags")
	l.Series = field.NewString(table, "Series")
	l.Barcodes = field.NewString(table, "Barcodes")
	l.IsRecommend = field.NewField(table, "IsRecommend")
	l.Remark = field.NewString(table, "Remark")
	l.TenantID = field.NewInt64(table, "TenantId")

	l.fillFieldMap()

	return l
}

func (l *libbookinfo) WithContext(ctx context.Context) ILibbookinfoDo {
	return l.libbookinfoDo.WithContext(ctx)
}

func (l libbookinfo) TableName() string { return l.libbookinfoDo.TableName() }

func (l libbookinfo) Alias() string { return l.libbookinfoDo.Alias() }

func (l *libbookinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libbookinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 27)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["IsDeleted"] = l.IsDeleted
	l.fieldMap["DeleterUserId"] = l.DeleterUserID
	l.fieldMap["DeletionTime"] = l.DeletionTime
	l.fieldMap["ISBN"] = l.ISBN
	l.fieldMap["Title"] = l.Title
	l.fieldMap["Author"] = l.Author
	l.fieldMap["AuthorCode"] = l.AuthorCode
	l.fieldMap["Publisher"] = l.Publisher
	l.fieldMap["PubDate"] = l.PubDate
	l.fieldMap["CatalogCode"] = l.CatalogCode
	l.fieldMap["Language"] = l.Language
	l.fieldMap["Price"] = l.Price
	l.fieldMap["Pages"] = l.Pages
	l.fieldMap["Format"] = l.Format
	l.fieldMap["Image"] = l.Image
	l.fieldMap["Summary"] = l.Summary
	l.fieldMap["Tags"] = l.Tags
	l.fieldMap["Series"] = l.Series
	l.fieldMap["Barcodes"] = l.Barcodes
	l.fieldMap["IsRecommend"] = l.IsRecommend
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["TenantId"] = l.TenantID
}

func (l libbookinfo) clone(db *gorm.DB) libbookinfo {
	l.libbookinfoDo.ReplaceDB(db)
	return l
}

type libbookinfoDo struct{ gen.DO }

type ILibbookinfoDo interface {
	gen.SubQuery
	Debug() ILibbookinfoDo
	WithContext(ctx context.Context) ILibbookinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibbookinfoDo
	Not(conds ...gen.Condition) ILibbookinfoDo
	Or(conds ...gen.Condition) ILibbookinfoDo
	Select(conds ...field.Expr) ILibbookinfoDo
	Where(conds ...gen.Condition) ILibbookinfoDo
	Order(conds ...field.Expr) ILibbookinfoDo
	Distinct(cols ...field.Expr) ILibbookinfoDo
	Omit(cols ...field.Expr) ILibbookinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibbookinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibbookinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibbookinfoDo
	Group(cols ...field.Expr) ILibbookinfoDo
	Having(conds ...gen.Condition) ILibbookinfoDo
	Limit(limit int) ILibbookinfoDo
	Offset(offset int) ILibbookinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbookinfoDo
	Unscoped() ILibbookinfoDo
	Create(values ...*model.Libbookinfo) error
	CreateInBatches(values []*model.Libbookinfo, batchSize int) error
	Save(values ...*model.Libbookinfo) error
	First() (*model.Libbookinfo, error)
	Take() (*model.Libbookinfo, error)
	Last() (*model.Libbookinfo, error)
	Find() ([]*model.Libbookinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbookinfo, err error)
	FindInBatches(result *[]*model.Libbookinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libbookinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibbookinfoDo
	Assign(attrs ...field.AssignExpr) ILibbookinfoDo
	Joins(fields ...field.RelationField) ILibbookinfoDo
	Preload(fields ...field.RelationField) ILibbookinfoDo
	FirstOrInit() (*model.Libbookinfo, error)
	FirstOrCreate() (*model.Libbookinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libbookinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibbookinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libbookinfoDo) Debug() ILibbookinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libbookinfoDo) WithContext(ctx context.Context) ILibbookinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libbookinfoDo) ReadDB() ILibbookinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libbookinfoDo) WriteDB() ILibbookinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libbookinfoDo) Clauses(conds ...clause.Expression) ILibbookinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libbookinfoDo) Returning(value interface{}, columns ...string) ILibbookinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libbookinfoDo) Not(conds ...gen.Condition) ILibbookinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libbookinfoDo) Or(conds ...gen.Condition) ILibbookinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libbookinfoDo) Select(conds ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libbookinfoDo) Where(conds ...gen.Condition) ILibbookinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libbookinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibbookinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libbookinfoDo) Order(conds ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libbookinfoDo) Distinct(cols ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libbookinfoDo) Omit(cols ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libbookinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libbookinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libbookinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libbookinfoDo) Group(cols ...field.Expr) ILibbookinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libbookinfoDo) Having(conds ...gen.Condition) ILibbookinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libbookinfoDo) Limit(limit int) ILibbookinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libbookinfoDo) Offset(offset int) ILibbookinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libbookinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibbookinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libbookinfoDo) Unscoped() ILibbookinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libbookinfoDo) Create(values ...*model.Libbookinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libbookinfoDo) CreateInBatches(values []*model.Libbookinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libbookinfoDo) Save(values ...*model.Libbookinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libbookinfoDo) First() (*model.Libbookinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbookinfo), nil
	}
}

func (l libbookinfoDo) Take() (*model.Libbookinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbookinfo), nil
	}
}

func (l libbookinfoDo) Last() (*model.Libbookinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbookinfo), nil
	}
}

func (l libbookinfoDo) Find() ([]*model.Libbookinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libbookinfo), err
}

func (l libbookinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libbookinfo, err error) {
	buf := make([]*model.Libbookinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libbookinfoDo) FindInBatches(result *[]*model.Libbookinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libbookinfoDo) Attrs(attrs ...field.AssignExpr) ILibbookinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libbookinfoDo) Assign(attrs ...field.AssignExpr) ILibbookinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libbookinfoDo) Joins(fields ...field.RelationField) ILibbookinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libbookinfoDo) Preload(fields ...field.RelationField) ILibbookinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libbookinfoDo) FirstOrInit() (*model.Libbookinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbookinfo), nil
	}
}

func (l libbookinfoDo) FirstOrCreate() (*model.Libbookinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libbookinfo), nil
	}
}

func (l libbookinfoDo) FindByPage(offset int, limit int) (result []*model.Libbookinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libbookinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libbookinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libbookinfoDo) Delete(models ...*model.Libbookinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libbookinfoDo) withDO(do gen.Dao) *libbookinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
