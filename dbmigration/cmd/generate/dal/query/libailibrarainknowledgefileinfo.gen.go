// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newLibailibrarainknowledgefileinfo(db *gorm.DB) libailibrarainknowledgefileinfo {
	_libailibrarainknowledgefileinfo := libailibrarainknowledgefileinfo{}

	_libailibrarainknowledgefileinfo.libailibrarainknowledgefileinfoDo.UseDB(db)
	_libailibrarainknowledgefileinfo.libailibrarainknowledgefileinfoDo.UseModel(&model.Libailibrarainknowledgefileinfo{})

	tableName := _libailibrarainknowledgefileinfo.libailibrarainknowledgefileinfoDo.TableName()
	_libailibrarainknowledgefileinfo.ALL = field.NewAsterisk(tableName)
	_libailibrarainknowledgefileinfo.ID = field.NewInt64(tableName, "Id")
	_libailibrarainknowledgefileinfo.CreationTime = field.NewTime(tableName, "CreationTime")
	_libailibrarainknowledgefileinfo.CreatorUserID = field.NewInt64(tableName, "CreatorUserId")
	_libailibrarainknowledgefileinfo.LastModificationTime = field.NewTime(tableName, "LastModificationTime")
	_libailibrarainknowledgefileinfo.LastModifierUserID = field.NewInt64(tableName, "LastModifierUserId")
	_libailibrarainknowledgefileinfo.Category = field.NewInt64(tableName, "Category")
	_libailibrarainknowledgefileinfo.ArchiveName = field.NewString(tableName, "ArchiveName")
	_libailibrarainknowledgefileinfo.FileName = field.NewString(tableName, "FileName")
	_libailibrarainknowledgefileinfo.Status = field.NewInt64(tableName, "Status")
	_libailibrarainknowledgefileinfo.LastAppliedTime = field.NewTime(tableName, "LastAppliedTime")
	_libailibrarainknowledgefileinfo.TenantID = field.NewInt64(tableName, "TenantId")
	_libailibrarainknowledgefileinfo.ContentType = field.NewString(tableName, "ContentType")
	_libailibrarainknowledgefileinfo.Remark = field.NewString(tableName, "Remark")
	_libailibrarainknowledgefileinfo.SyncTicket = field.NewString(tableName, "SyncTicket")

	_libailibrarainknowledgefileinfo.fillFieldMap()

	return _libailibrarainknowledgefileinfo
}

type libailibrarainknowledgefileinfo struct {
	libailibrarainknowledgefileinfoDo libailibrarainknowledgefileinfoDo

	ALL                  field.Asterisk
	ID                   field.Int64
	CreationTime         field.Time
	CreatorUserID        field.Int64
	LastModificationTime field.Time
	LastModifierUserID   field.Int64
	Category             field.Int64
	ArchiveName          field.String
	FileName             field.String
	Status               field.Int64
	LastAppliedTime      field.Time
	TenantID             field.Int64
	ContentType          field.String
	Remark               field.String
	SyncTicket           field.String

	fieldMap map[string]field.Expr
}

func (l libailibrarainknowledgefileinfo) Table(newTableName string) *libailibrarainknowledgefileinfo {
	l.libailibrarainknowledgefileinfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l libailibrarainknowledgefileinfo) As(alias string) *libailibrarainknowledgefileinfo {
	l.libailibrarainknowledgefileinfoDo.DO = *(l.libailibrarainknowledgefileinfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *libailibrarainknowledgefileinfo) updateTableName(table string) *libailibrarainknowledgefileinfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "Id")
	l.CreationTime = field.NewTime(table, "CreationTime")
	l.CreatorUserID = field.NewInt64(table, "CreatorUserId")
	l.LastModificationTime = field.NewTime(table, "LastModificationTime")
	l.LastModifierUserID = field.NewInt64(table, "LastModifierUserId")
	l.Category = field.NewInt64(table, "Category")
	l.ArchiveName = field.NewString(table, "ArchiveName")
	l.FileName = field.NewString(table, "FileName")
	l.Status = field.NewInt64(table, "Status")
	l.LastAppliedTime = field.NewTime(table, "LastAppliedTime")
	l.TenantID = field.NewInt64(table, "TenantId")
	l.ContentType = field.NewString(table, "ContentType")
	l.Remark = field.NewString(table, "Remark")
	l.SyncTicket = field.NewString(table, "SyncTicket")

	l.fillFieldMap()

	return l
}

func (l *libailibrarainknowledgefileinfo) WithContext(ctx context.Context) ILibailibrarainknowledgefileinfoDo {
	return l.libailibrarainknowledgefileinfoDo.WithContext(ctx)
}

func (l libailibrarainknowledgefileinfo) TableName() string {
	return l.libailibrarainknowledgefileinfoDo.TableName()
}

func (l libailibrarainknowledgefileinfo) Alias() string {
	return l.libailibrarainknowledgefileinfoDo.Alias()
}

func (l *libailibrarainknowledgefileinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *libailibrarainknowledgefileinfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 14)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["CreationTime"] = l.CreationTime
	l.fieldMap["CreatorUserId"] = l.CreatorUserID
	l.fieldMap["LastModificationTime"] = l.LastModificationTime
	l.fieldMap["LastModifierUserId"] = l.LastModifierUserID
	l.fieldMap["Category"] = l.Category
	l.fieldMap["ArchiveName"] = l.ArchiveName
	l.fieldMap["FileName"] = l.FileName
	l.fieldMap["Status"] = l.Status
	l.fieldMap["LastAppliedTime"] = l.LastAppliedTime
	l.fieldMap["TenantId"] = l.TenantID
	l.fieldMap["ContentType"] = l.ContentType
	l.fieldMap["Remark"] = l.Remark
	l.fieldMap["SyncTicket"] = l.SyncTicket
}

func (l libailibrarainknowledgefileinfo) clone(db *gorm.DB) libailibrarainknowledgefileinfo {
	l.libailibrarainknowledgefileinfoDo.ReplaceDB(db)
	return l
}

type libailibrarainknowledgefileinfoDo struct{ gen.DO }

type ILibailibrarainknowledgefileinfoDo interface {
	gen.SubQuery
	Debug() ILibailibrarainknowledgefileinfoDo
	WithContext(ctx context.Context) ILibailibrarainknowledgefileinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILibailibrarainknowledgefileinfoDo
	Not(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo
	Or(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo
	Select(conds ...field.Expr) ILibailibrarainknowledgefileinfoDo
	Where(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo
	Order(conds ...field.Expr) ILibailibrarainknowledgefileinfoDo
	Distinct(cols ...field.Expr) ILibailibrarainknowledgefileinfoDo
	Omit(cols ...field.Expr) ILibailibrarainknowledgefileinfoDo
	Join(table schema.Tabler, on ...field.Expr) ILibailibrarainknowledgefileinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainknowledgefileinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainknowledgefileinfoDo
	Group(cols ...field.Expr) ILibailibrarainknowledgefileinfoDo
	Having(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo
	Limit(limit int) ILibailibrarainknowledgefileinfoDo
	Offset(offset int) ILibailibrarainknowledgefileinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainknowledgefileinfoDo
	Unscoped() ILibailibrarainknowledgefileinfoDo
	Create(values ...*model.Libailibrarainknowledgefileinfo) error
	CreateInBatches(values []*model.Libailibrarainknowledgefileinfo, batchSize int) error
	Save(values ...*model.Libailibrarainknowledgefileinfo) error
	First() (*model.Libailibrarainknowledgefileinfo, error)
	Take() (*model.Libailibrarainknowledgefileinfo, error)
	Last() (*model.Libailibrarainknowledgefileinfo, error)
	Find() ([]*model.Libailibrarainknowledgefileinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainknowledgefileinfo, err error)
	FindInBatches(result *[]*model.Libailibrarainknowledgefileinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Libailibrarainknowledgefileinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILibailibrarainknowledgefileinfoDo
	Assign(attrs ...field.AssignExpr) ILibailibrarainknowledgefileinfoDo
	Joins(fields ...field.RelationField) ILibailibrarainknowledgefileinfoDo
	Preload(fields ...field.RelationField) ILibailibrarainknowledgefileinfoDo
	FirstOrInit() (*model.Libailibrarainknowledgefileinfo, error)
	FirstOrCreate() (*model.Libailibrarainknowledgefileinfo, error)
	FindByPage(offset int, limit int) (result []*model.Libailibrarainknowledgefileinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILibailibrarainknowledgefileinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l libailibrarainknowledgefileinfoDo) Debug() ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Debug())
}

func (l libailibrarainknowledgefileinfoDo) WithContext(ctx context.Context) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l libailibrarainknowledgefileinfoDo) ReadDB() ILibailibrarainknowledgefileinfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l libailibrarainknowledgefileinfoDo) WriteDB() ILibailibrarainknowledgefileinfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l libailibrarainknowledgefileinfoDo) Clauses(conds ...clause.Expression) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Returning(value interface{}, columns ...string) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l libailibrarainknowledgefileinfoDo) Not(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Or(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Select(conds ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Where(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILibailibrarainknowledgefileinfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l libailibrarainknowledgefileinfoDo) Order(conds ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Distinct(cols ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l libailibrarainknowledgefileinfoDo) Omit(cols ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l libailibrarainknowledgefileinfoDo) Join(table schema.Tabler, on ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l libailibrarainknowledgefileinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l libailibrarainknowledgefileinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l libailibrarainknowledgefileinfoDo) Group(cols ...field.Expr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l libailibrarainknowledgefileinfoDo) Having(conds ...gen.Condition) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l libailibrarainknowledgefileinfoDo) Limit(limit int) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l libailibrarainknowledgefileinfoDo) Offset(offset int) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l libailibrarainknowledgefileinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l libailibrarainknowledgefileinfoDo) Unscoped() ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l libailibrarainknowledgefileinfoDo) Create(values ...*model.Libailibrarainknowledgefileinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l libailibrarainknowledgefileinfoDo) CreateInBatches(values []*model.Libailibrarainknowledgefileinfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l libailibrarainknowledgefileinfoDo) Save(values ...*model.Libailibrarainknowledgefileinfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l libailibrarainknowledgefileinfoDo) First() (*model.Libailibrarainknowledgefileinfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainknowledgefileinfo), nil
	}
}

func (l libailibrarainknowledgefileinfoDo) Take() (*model.Libailibrarainknowledgefileinfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainknowledgefileinfo), nil
	}
}

func (l libailibrarainknowledgefileinfoDo) Last() (*model.Libailibrarainknowledgefileinfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainknowledgefileinfo), nil
	}
}

func (l libailibrarainknowledgefileinfoDo) Find() ([]*model.Libailibrarainknowledgefileinfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Libailibrarainknowledgefileinfo), err
}

func (l libailibrarainknowledgefileinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Libailibrarainknowledgefileinfo, err error) {
	buf := make([]*model.Libailibrarainknowledgefileinfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l libailibrarainknowledgefileinfoDo) FindInBatches(result *[]*model.Libailibrarainknowledgefileinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l libailibrarainknowledgefileinfoDo) Attrs(attrs ...field.AssignExpr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l libailibrarainknowledgefileinfoDo) Assign(attrs ...field.AssignExpr) ILibailibrarainknowledgefileinfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l libailibrarainknowledgefileinfoDo) Joins(fields ...field.RelationField) ILibailibrarainknowledgefileinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l libailibrarainknowledgefileinfoDo) Preload(fields ...field.RelationField) ILibailibrarainknowledgefileinfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l libailibrarainknowledgefileinfoDo) FirstOrInit() (*model.Libailibrarainknowledgefileinfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainknowledgefileinfo), nil
	}
}

func (l libailibrarainknowledgefileinfoDo) FirstOrCreate() (*model.Libailibrarainknowledgefileinfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Libailibrarainknowledgefileinfo), nil
	}
}

func (l libailibrarainknowledgefileinfoDo) FindByPage(offset int, limit int) (result []*model.Libailibrarainknowledgefileinfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l libailibrarainknowledgefileinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l libailibrarainknowledgefileinfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l libailibrarainknowledgefileinfoDo) Delete(models ...*model.Libailibrarainknowledgefileinfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *libailibrarainknowledgefileinfoDo) withDO(do gen.Dao) *libailibrarainknowledgefileinfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
