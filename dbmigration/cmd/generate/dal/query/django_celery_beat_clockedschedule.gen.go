// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDjangoCeleryBeatClockedschedule(db *gorm.DB) djangoCeleryBeatClockedschedule {
	_djangoCeleryBeatClockedschedule := djangoCeleryBeatClockedschedule{}

	_djangoCeleryBeatClockedschedule.djangoCeleryBeatClockedscheduleDo.UseDB(db)
	_djangoCeleryBeatClockedschedule.djangoCeleryBeatClockedscheduleDo.UseModel(&model.DjangoCeleryBeatClockedschedule{})

	tableName := _djangoCeleryBeatClockedschedule.djangoCeleryBeatClockedscheduleDo.TableName()
	_djangoCeleryBeatClockedschedule.ALL = field.NewAsterisk(tableName)
	_djangoCeleryBeatClockedschedule.ID = field.NewInt64(tableName, "id")
	_djangoCeleryBeatClockedschedule.ClockedTime = field.NewTime(tableName, "clocked_time")

	_djangoCeleryBeatClockedschedule.fillFieldMap()

	return _djangoCeleryBeatClockedschedule
}

type djangoCeleryBeatClockedschedule struct {
	djangoCeleryBeatClockedscheduleDo djangoCeleryBeatClockedscheduleDo

	ALL         field.Asterisk
	ID          field.Int64
	ClockedTime field.Time

	fieldMap map[string]field.Expr
}

func (d djangoCeleryBeatClockedschedule) Table(newTableName string) *djangoCeleryBeatClockedschedule {
	d.djangoCeleryBeatClockedscheduleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoCeleryBeatClockedschedule) As(alias string) *djangoCeleryBeatClockedschedule {
	d.djangoCeleryBeatClockedscheduleDo.DO = *(d.djangoCeleryBeatClockedscheduleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoCeleryBeatClockedschedule) updateTableName(table string) *djangoCeleryBeatClockedschedule {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.ClockedTime = field.NewTime(table, "clocked_time")

	d.fillFieldMap()

	return d
}

func (d *djangoCeleryBeatClockedschedule) WithContext(ctx context.Context) IDjangoCeleryBeatClockedscheduleDo {
	return d.djangoCeleryBeatClockedscheduleDo.WithContext(ctx)
}

func (d djangoCeleryBeatClockedschedule) TableName() string {
	return d.djangoCeleryBeatClockedscheduleDo.TableName()
}

func (d djangoCeleryBeatClockedschedule) Alias() string {
	return d.djangoCeleryBeatClockedscheduleDo.Alias()
}

func (d *djangoCeleryBeatClockedschedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoCeleryBeatClockedschedule) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["id"] = d.ID
	d.fieldMap["clocked_time"] = d.ClockedTime
}

func (d djangoCeleryBeatClockedschedule) clone(db *gorm.DB) djangoCeleryBeatClockedschedule {
	d.djangoCeleryBeatClockedscheduleDo.ReplaceDB(db)
	return d
}

type djangoCeleryBeatClockedscheduleDo struct{ gen.DO }

type IDjangoCeleryBeatClockedscheduleDo interface {
	gen.SubQuery
	Debug() IDjangoCeleryBeatClockedscheduleDo
	WithContext(ctx context.Context) IDjangoCeleryBeatClockedscheduleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoCeleryBeatClockedscheduleDo
	Not(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo
	Or(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo
	Select(conds ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	Where(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo
	Order(conds ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	Distinct(cols ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	Omit(cols ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	Group(cols ...field.Expr) IDjangoCeleryBeatClockedscheduleDo
	Having(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo
	Limit(limit int) IDjangoCeleryBeatClockedscheduleDo
	Offset(offset int) IDjangoCeleryBeatClockedscheduleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatClockedscheduleDo
	Unscoped() IDjangoCeleryBeatClockedscheduleDo
	Create(values ...*model.DjangoCeleryBeatClockedschedule) error
	CreateInBatches(values []*model.DjangoCeleryBeatClockedschedule, batchSize int) error
	Save(values ...*model.DjangoCeleryBeatClockedschedule) error
	First() (*model.DjangoCeleryBeatClockedschedule, error)
	Take() (*model.DjangoCeleryBeatClockedschedule, error)
	Last() (*model.DjangoCeleryBeatClockedschedule, error)
	Find() ([]*model.DjangoCeleryBeatClockedschedule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatClockedschedule, err error)
	FindInBatches(result *[]*model.DjangoCeleryBeatClockedschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoCeleryBeatClockedschedule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatClockedscheduleDo
	Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatClockedscheduleDo
	Joins(fields ...field.RelationField) IDjangoCeleryBeatClockedscheduleDo
	Preload(fields ...field.RelationField) IDjangoCeleryBeatClockedscheduleDo
	FirstOrInit() (*model.DjangoCeleryBeatClockedschedule, error)
	FirstOrCreate() (*model.DjangoCeleryBeatClockedschedule, error)
	FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatClockedschedule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoCeleryBeatClockedscheduleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoCeleryBeatClockedscheduleDo) Debug() IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoCeleryBeatClockedscheduleDo) WithContext(ctx context.Context) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoCeleryBeatClockedscheduleDo) ReadDB() IDjangoCeleryBeatClockedscheduleDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoCeleryBeatClockedscheduleDo) WriteDB() IDjangoCeleryBeatClockedscheduleDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoCeleryBeatClockedscheduleDo) Clauses(conds ...clause.Expression) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Returning(value interface{}, columns ...string) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoCeleryBeatClockedscheduleDo) Not(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Or(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Select(conds ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Where(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoCeleryBeatClockedscheduleDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoCeleryBeatClockedscheduleDo) Order(conds ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Distinct(cols ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoCeleryBeatClockedscheduleDo) Omit(cols ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoCeleryBeatClockedscheduleDo) Join(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoCeleryBeatClockedscheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoCeleryBeatClockedscheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoCeleryBeatClockedscheduleDo) Group(cols ...field.Expr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoCeleryBeatClockedscheduleDo) Having(conds ...gen.Condition) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoCeleryBeatClockedscheduleDo) Limit(limit int) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoCeleryBeatClockedscheduleDo) Offset(offset int) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoCeleryBeatClockedscheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoCeleryBeatClockedscheduleDo) Unscoped() IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoCeleryBeatClockedscheduleDo) Create(values ...*model.DjangoCeleryBeatClockedschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoCeleryBeatClockedscheduleDo) CreateInBatches(values []*model.DjangoCeleryBeatClockedschedule, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoCeleryBeatClockedscheduleDo) Save(values ...*model.DjangoCeleryBeatClockedschedule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoCeleryBeatClockedscheduleDo) First() (*model.DjangoCeleryBeatClockedschedule, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatClockedschedule), nil
	}
}

func (d djangoCeleryBeatClockedscheduleDo) Take() (*model.DjangoCeleryBeatClockedschedule, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatClockedschedule), nil
	}
}

func (d djangoCeleryBeatClockedscheduleDo) Last() (*model.DjangoCeleryBeatClockedschedule, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatClockedschedule), nil
	}
}

func (d djangoCeleryBeatClockedscheduleDo) Find() ([]*model.DjangoCeleryBeatClockedschedule, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoCeleryBeatClockedschedule), err
}

func (d djangoCeleryBeatClockedscheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoCeleryBeatClockedschedule, err error) {
	buf := make([]*model.DjangoCeleryBeatClockedschedule, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoCeleryBeatClockedscheduleDo) FindInBatches(result *[]*model.DjangoCeleryBeatClockedschedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoCeleryBeatClockedscheduleDo) Attrs(attrs ...field.AssignExpr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoCeleryBeatClockedscheduleDo) Assign(attrs ...field.AssignExpr) IDjangoCeleryBeatClockedscheduleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoCeleryBeatClockedscheduleDo) Joins(fields ...field.RelationField) IDjangoCeleryBeatClockedscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoCeleryBeatClockedscheduleDo) Preload(fields ...field.RelationField) IDjangoCeleryBeatClockedscheduleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoCeleryBeatClockedscheduleDo) FirstOrInit() (*model.DjangoCeleryBeatClockedschedule, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatClockedschedule), nil
	}
}

func (d djangoCeleryBeatClockedscheduleDo) FirstOrCreate() (*model.DjangoCeleryBeatClockedschedule, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoCeleryBeatClockedschedule), nil
	}
}

func (d djangoCeleryBeatClockedscheduleDo) FindByPage(offset int, limit int) (result []*model.DjangoCeleryBeatClockedschedule, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoCeleryBeatClockedscheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoCeleryBeatClockedscheduleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoCeleryBeatClockedscheduleDo) Delete(models ...*model.DjangoCeleryBeatClockedschedule) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoCeleryBeatClockedscheduleDo) withDO(do gen.Dao) *djangoCeleryBeatClockedscheduleDo {
	d.DO = *do.(*gen.DO)
	return d
}
