// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormgendemo/cmd/generate/dal/model"
)

func newDjangoMigration(db *gorm.DB) djangoMigration {
	_djangoMigration := djangoMigration{}

	_djangoMigration.djangoMigrationDo.UseDB(db)
	_djangoMigration.djangoMigrationDo.UseModel(&model.DjangoMigration{})

	tableName := _djangoMigration.djangoMigrationDo.TableName()
	_djangoMigration.ALL = field.NewAsterisk(tableName)
	_djangoMigration.ID = field.NewInt64(tableName, "id")
	_djangoMigration.App = field.NewString(tableName, "app")
	_djangoMigration.Name = field.NewString(tableName, "name")
	_djangoMigration.Applied = field.NewTime(tableName, "applied")

	_djangoMigration.fillFieldMap()

	return _djangoMigration
}

type djangoMigration struct {
	djangoMigrationDo djangoMigrationDo

	ALL     field.Asterisk
	ID      field.Int64
	App     field.String
	Name    field.String
	Applied field.Time

	fieldMap map[string]field.Expr
}

func (d djangoMigration) Table(newTableName string) *djangoMigration {
	d.djangoMigrationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoMigration) As(alias string) *djangoMigration {
	d.djangoMigrationDo.DO = *(d.djangoMigrationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoMigration) updateTableName(table string) *djangoMigration {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.App = field.NewString(table, "app")
	d.Name = field.NewString(table, "name")
	d.Applied = field.NewTime(table, "applied")

	d.fillFieldMap()

	return d
}

func (d *djangoMigration) WithContext(ctx context.Context) IDjangoMigrationDo {
	return d.djangoMigrationDo.WithContext(ctx)
}

func (d djangoMigration) TableName() string { return d.djangoMigrationDo.TableName() }

func (d djangoMigration) Alias() string { return d.djangoMigrationDo.Alias() }

func (d *djangoMigration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoMigration) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app"] = d.App
	d.fieldMap["name"] = d.Name
	d.fieldMap["applied"] = d.Applied
}

func (d djangoMigration) clone(db *gorm.DB) djangoMigration {
	d.djangoMigrationDo.ReplaceDB(db)
	return d
}

type djangoMigrationDo struct{ gen.DO }

type IDjangoMigrationDo interface {
	gen.SubQuery
	Debug() IDjangoMigrationDo
	WithContext(ctx context.Context) IDjangoMigrationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoMigrationDo
	Not(conds ...gen.Condition) IDjangoMigrationDo
	Or(conds ...gen.Condition) IDjangoMigrationDo
	Select(conds ...field.Expr) IDjangoMigrationDo
	Where(conds ...gen.Condition) IDjangoMigrationDo
	Order(conds ...field.Expr) IDjangoMigrationDo
	Distinct(cols ...field.Expr) IDjangoMigrationDo
	Omit(cols ...field.Expr) IDjangoMigrationDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoMigrationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationDo
	Group(cols ...field.Expr) IDjangoMigrationDo
	Having(conds ...gen.Condition) IDjangoMigrationDo
	Limit(limit int) IDjangoMigrationDo
	Offset(offset int) IDjangoMigrationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoMigrationDo
	Unscoped() IDjangoMigrationDo
	Create(values ...*model.DjangoMigration) error
	CreateInBatches(values []*model.DjangoMigration, batchSize int) error
	Save(values ...*model.DjangoMigration) error
	First() (*model.DjangoMigration, error)
	Take() (*model.DjangoMigration, error)
	Last() (*model.DjangoMigration, error)
	Find() ([]*model.DjangoMigration, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoMigration, err error)
	FindInBatches(result *[]*model.DjangoMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoMigration) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoMigrationDo
	Assign(attrs ...field.AssignExpr) IDjangoMigrationDo
	Joins(fields ...field.RelationField) IDjangoMigrationDo
	Preload(fields ...field.RelationField) IDjangoMigrationDo
	FirstOrInit() (*model.DjangoMigration, error)
	FirstOrCreate() (*model.DjangoMigration, error)
	FindByPage(offset int, limit int) (result []*model.DjangoMigration, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoMigrationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoMigrationDo) Debug() IDjangoMigrationDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoMigrationDo) WithContext(ctx context.Context) IDjangoMigrationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoMigrationDo) ReadDB() IDjangoMigrationDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoMigrationDo) WriteDB() IDjangoMigrationDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoMigrationDo) Clauses(conds ...clause.Expression) IDjangoMigrationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoMigrationDo) Returning(value interface{}, columns ...string) IDjangoMigrationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoMigrationDo) Not(conds ...gen.Condition) IDjangoMigrationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoMigrationDo) Or(conds ...gen.Condition) IDjangoMigrationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoMigrationDo) Select(conds ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoMigrationDo) Where(conds ...gen.Condition) IDjangoMigrationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoMigrationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoMigrationDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoMigrationDo) Order(conds ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoMigrationDo) Distinct(cols ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoMigrationDo) Omit(cols ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoMigrationDo) Join(table schema.Tabler, on ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoMigrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoMigrationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoMigrationDo) Group(cols ...field.Expr) IDjangoMigrationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoMigrationDo) Having(conds ...gen.Condition) IDjangoMigrationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoMigrationDo) Limit(limit int) IDjangoMigrationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoMigrationDo) Offset(offset int) IDjangoMigrationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoMigrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoMigrationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoMigrationDo) Unscoped() IDjangoMigrationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoMigrationDo) Create(values ...*model.DjangoMigration) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoMigrationDo) CreateInBatches(values []*model.DjangoMigration, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoMigrationDo) Save(values ...*model.DjangoMigration) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoMigrationDo) First() (*model.DjangoMigration, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigration), nil
	}
}

func (d djangoMigrationDo) Take() (*model.DjangoMigration, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigration), nil
	}
}

func (d djangoMigrationDo) Last() (*model.DjangoMigration, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigration), nil
	}
}

func (d djangoMigrationDo) Find() ([]*model.DjangoMigration, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoMigration), err
}

func (d djangoMigrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoMigration, err error) {
	buf := make([]*model.DjangoMigration, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoMigrationDo) FindInBatches(result *[]*model.DjangoMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoMigrationDo) Attrs(attrs ...field.AssignExpr) IDjangoMigrationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoMigrationDo) Assign(attrs ...field.AssignExpr) IDjangoMigrationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoMigrationDo) Joins(fields ...field.RelationField) IDjangoMigrationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoMigrationDo) Preload(fields ...field.RelationField) IDjangoMigrationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoMigrationDo) FirstOrInit() (*model.DjangoMigration, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigration), nil
	}
}

func (d djangoMigrationDo) FirstOrCreate() (*model.DjangoMigration, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigration), nil
	}
}

func (d djangoMigrationDo) FindByPage(offset int, limit int) (result []*model.DjangoMigration, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoMigrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoMigrationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoMigrationDo) Delete(models ...*model.DjangoMigration) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoMigrationDo) withDO(do gen.Dao) *djangoMigrationDo {
	d.DO = *do.(*gen.DO)
	return d
}
